!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=278)}([function(t,e,n){"use strict";n(29),n(77),n(103),n(61),n(158);var r=n(107),i=n.n(r),o=n(6),a=n(10),s=(n(255),n(56)),u=n.n(s),c=a.a.getUrlParam("version"),f={set:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"default",e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},r={expires:1};Object.assign(r,n),u.a.set("d2admin-".concat(c,"-").concat(t),e,r)},get:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"default";return u.a.get("d2admin-".concat(c,"-").concat(t))},getAll:function(){return u.a.get()},remove:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"default";return u.a.remove("d2admin-".concat(c,"-").concat(t))}},l=a.a.getUrlParam("port")||o.a.defaultBasePort;console.log("production","environment============================"),"http://".concat(a.a.getUrlParam("data")).concat(l);var h=i.a.create({baseURL:"http://"+location.href.split("/")[2]});h.interceptors.request.use((function(t){var e=f.get("token");return t.headers.token=e||o.a.testToken,t}),(function(t){Promise.reject(t)})),h.interceptors.response.use((function(t){var e=t.data,n=e.code;return void 0===n||"0"===n?e:"0"!==n?Promise.reject(e):void 0}),(function(t){if(t&&t.response)switch(t.response.status){case 400:t.message="请求错误";break;case 401:t.message="未授权，请登录";break;case 403:t.message="拒绝访问";break;case 404:t.message="请求地址出错";break;case 408:t.message="请求超时";break;case 500:t.message="服务器内部错误";break;case 501:t.message="服务未实现";break;case 502:t.message="网关错误";break;case 503:t.message="服务不可用";break;case 504:t.message="网关超时";break;case 505:t.message="HTTP版本不受支持"}return Promise.reject(t)})),e.a=h},function(t,e,n){(function(e){function n(t){return t&&t.Math==Math&&t}var r="object";t.exports=n(typeof globalThis==r&&globalThis)||n(typeof window==r&&window)||n(typeof self==r&&self)||n(typeof e==r&&e)||Function("return this")()}).call(this,n(19))},function(t,e,n){var r=n(1),i=n(31),o=n(58),a=n(91),s=r.Symbol,u=i("wks");t.exports=function(t){return u[t]||(u[t]=a&&s[t]||(a?s:o)("Symbol."+t))}},function(t,e,n){"use strict";var r=n(27),i=n(136),o=n(76),a=n(218),s=n(53);function u(t){return t}function c(t,e){for(var n=0;n<t.length;++n)e[n]=255&t.charCodeAt(n);return e}e.newBlob=function(t,n){e.checkSupport("blob");try{return new Blob([t],{type:n})}catch(e){try{var r=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return r.append(t),r.getBlob(n)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var f={stringifyByChunk:function(t,e,n){var r=[],i=0,o=t.length;if(o<=n)return String.fromCharCode.apply(null,t);for(;i<o;)"array"===e||"nodebuffer"===e?r.push(String.fromCharCode.apply(null,t.slice(i,Math.min(i+n,o)))):r.push(String.fromCharCode.apply(null,t.subarray(i,Math.min(i+n,o)))),i+=n;return r.join("")},stringifyByChar:function(t){for(var e="",n=0;n<t.length;n++)e+=String.fromCharCode(t[n]);return e},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&1===String.fromCharCode.apply(null,o.allocBuffer(1)).length}catch(t){return!1}}()}};function l(t){var n=65536,r=e.getTypeOf(t),i=!0;if("uint8array"===r?i=f.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=f.applyCanBeUsed.nodebuffer),i)for(;1<n;)try{return f.stringifyByChunk(t,r,n)}catch(t){n=Math.floor(n/2)}return f.stringifyByChar(t)}function h(t,e){for(var n=0;n<t.length;n++)e[n]=t[n];return e}e.applyFromCharCode=l;var d={};d.string={string:u,array:function(t){return c(t,new Array(t.length))},arraybuffer:function(t){return d.string.uint8array(t).buffer},uint8array:function(t){return c(t,new Uint8Array(t.length))},nodebuffer:function(t){return c(t,o.allocBuffer(t.length))}},d.array={string:l,array:u,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return o.newBufferFrom(t)}},d.arraybuffer={string:function(t){return l(new Uint8Array(t))},array:function(t){return h(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:u,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return o.newBufferFrom(new Uint8Array(t))}},d.uint8array={string:l,array:function(t){return h(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:u,nodebuffer:function(t){return o.newBufferFrom(t)}},d.nodebuffer={string:l,array:function(t){return h(t,new Array(t.length))},arraybuffer:function(t){return d.nodebuffer.uint8array(t).buffer},uint8array:function(t){return h(t,new Uint8Array(t.length))},nodebuffer:u},e.transformTo=function(t,n){if(n=n||"",!t)return n;e.checkSupport(t);var r=e.getTypeOf(n);return d[r][t](n)},e.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":r.nodebuffer&&o.isBuffer(t)?"nodebuffer":r.uint8array&&t instanceof Uint8Array?"uint8array":r.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},e.checkSupport=function(t){if(!r[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},e.MAX_VALUE_16BITS=65535,e.MAX_VALUE_32BITS=-1,e.pretty=function(t){var e,n,r="";for(n=0;n<(t||"").length;n++)r+="\\x"+((e=t.charCodeAt(n))<16?"0":"")+e.toString(16).toUpperCase();return r},e.delay=function(t,e,n){a((function(){t.apply(n||null,e||[])}))},e.inherits=function(t,e){function n(){}n.prototype=e.prototype,t.prototype=new n},e.extend=function(){var t,e,n={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===n[e]&&(n[e]=arguments[t][e]);return n},e.prepareContent=function(t,n,o,a,u){return s.Promise.resolve(n).then((function(t){return r.blob&&(t instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(t)))&&"undefined"!=typeof FileReader?new s.Promise((function(e,n){var r=new FileReader;r.onload=function(t){e(t.target.result)},r.onerror=function(t){n(t.target.error)},r.readAsArrayBuffer(t)})):t})).then((function(n){var f=e.getTypeOf(n);return f?("arraybuffer"===f?n=e.transformTo("uint8array",n):"string"===f&&(u?n=i.decode(n):o&&!0!==a&&(n=function(t){return c(t,r.uint8array?new Uint8Array(t.length):new Array(t.length))}(n))),n):s.Promise.reject(new Error("Can't read the data of '"+t+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(1),i=n(30).f,o=n(12),a=n(20),s=n(43),u=n(88),c=n(67);t.exports=function(t,e){var n,f,l,h,d,p=t.target,g=t.global,v=t.stat;if(n=g?r:v?r[p]||s(p,{}):(r[p]||{}).prototype)for(f in e){if(h=e[f],l=t.noTargetGet?(d=i(n,f))&&d.value:n[f],!c(g?f:p+(v?".":"#")+f,t.forced)&&void 0!==l){if(typeof h==typeof l)continue;u(h,l)}(t.sham||l&&l.sham)&&o(h,"sham",!0),a(n,f,h,t)}}},function(t,e,n){"use strict";n(119),n(194),n(22),n(195),n(196),n(197),n(23);var r=n(166),i=n.n(r);function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}var a={hookup:{apiName:"接线图管理",apiAdd:"/diagram/add",apiRemove:"/diagram/remove/",apiList:"/space/diagram/select",apiUpdate:"/space/diagram/update"},plan:{apiName:"平面图管理",apiAdd:"/diagram/add",apiRemove:"/diagram/remove/",apiUpdate:"/diagram/{id}/update"},"3d":{apiName:"3d图管理",apiAdd:"/diagram/diagram2d/add",apiRemove:"/diagram/diagram2d/batchDelete",apiUpdate:"/diagram/diagram2d/{id}/update"}},s=a[n(10).a.getUrlParam("type")]||a.hookup;e.a=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(n,!0).forEach((function(e){i()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},s,{key3d:"3d",defaultBaseApi:"http://192.168.10.111",defaultBasePort:":10240",testToken:"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxMzA1Mzk0ODEzMDk3NDY3OTA2IiwibmJmIjoxNjA5NzIxNzk4LCJpc3MiOiJpLXpkLm5ldCIsImV4cCI6MTYxMjMxMzc5OCwiaWF0IjoxNjA5NzIxNzk4LCJ1c2VySWQiOjEzMDUzOTQ4MTMwOTc0Njc5MDZ9.Fxra_tsLuuWiwUOQv8CrTN5lNIRXlIdyiY6GKOlUleA",recoveryDataPath:"backups/"})},function(t,e,n){var r=n(8);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(4);t.exports=!r((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,n){"use strict";n(22),n(50),n(198),n(61),n(126),n(201),n(202),n(23);var r=n(167),i=n.n(r),o=n(168),a={base64Test:/^\s*data:([a-z]+\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,/i,open:function(t){var e=document.createElement("a");e.setAttribute("href",t),e.setAttribute("target","_blank"),e.setAttribute("id","d2admin-link-temp"),document.body.appendChild(e),e.click(),document.body.removeChild(document.getElementById("d2admin-link-temp"))},getUrlParam:function(t){var e=new RegExp("(^|&)"+t+"=([^&]*)(&|$)"),n=window.location.search.substr(1).match(e);return null!=n?decodeURIComponent(n[2]):null},upload:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"图纸",n=new i.a;t.forEach((function(t){t.path?n.file(t.path,t.data,t.config):n.file("".concat(t.name,".json"),t.data,t.config)})),n.generateAsync({type:"blob",compression:"DEFLATE",compressionOptions:{level:9}}).then((function(t){Object(o.saveAs)(t,"".concat(e,".zip"))}))}};e.a=a},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(9),i=n(16),o=n(35);t.exports=r?function(t,e,n){return i.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){"use strict";n.d(e,"a",(function(){return f})),n.d(e,"e",(function(){return l})),n.d(e,"f",(function(){return h})),n.d(e,"c",(function(){return d})),n.d(e,"d",(function(){return p})),n.d(e,"b",(function(){return g})),n(29),n(22),n(79),n(78),n(261),n(92),n(50),n(77),n(103),n(126),n(104),n(23),n(105),n(262);var r=n(0),i=n(6),o=(n(110),n(14)),a=i.a.apiName,s=i.a.apiAdd,u=i.a.recoveryDataPath;function c(t){var e=window.customStates.stationsExplorer.tree.sm().ld();0<e.getChildren()._as.length?(e.toChildren().each((function(t){"diagram"==t.fileType&&window.customStates.stationsExplorer.tree.dm().remove(t)})),t.forEach((function(t){var n,r=JSON.parse(t.json);n={fileType:"diagram",fileIcon:r.icon,attrs:{name:t.name,spaceUuid:t.spaceId,uuid:t.id,diagramType:!1===t.isMain?0:1,json:r}},window.customStates.stationsExplorer.parseChild(e,t.name,n)}))):t.forEach((function(t){var n,r=JSON.parse(t.json);n={fileType:"diagram",fileIcon:r.icon,attrs:{name:t.name,spaceUuid:t.spaceId,uuid:t.id,diagramType:!1===t.isMain?0:1,json:r}},window.customStates.stationsExplorer.parseChild(e,t.name,n)}))}var f=function(t){var e,n,i=t.name,c=t.type,f=t.json,l=t.spaceUuid,h=t.addType,d=0,p=window.customStates.stationsExplorer.tree.sm().ld();return void 0!==c?d=c:editor.dm&&void 0!==editor.dm.getAttr("diagramType")&&(d=editor.dm.getAttr("diagramType")),void 0!==f?e=f:editor.dm&&(e=JSON.stringify({json:editor.dm.toJSON()})),void 0!==l?n=l:editor.dm&&editor.dm.getAttr("spaceUuid")?n=editor.dm.getAttr("spaceUuid"):p&&(n=p.getAttr("uuid")),r.a.post(s,{id:n,content:e}).then((function(t){"drop"!==h&&(editor.dm&&editor.dm.a("spaceUuid",n),editor.dm&&editor.dm.a("uuid",t.data.id)),Object(o.a)(u+a+"/"+t.data.id+".json",JSON.stringify({spaceUuid:n,diagram:e,type:d,name:i}))})).catch((function(t){var e=new ht.widget.Dialog;e.setConfig({title:"文件名冲突!",width:250,height:100,content:i+"已存在",contentPadding:10,draggable:!0,closable:!0,resizeMode:"wh",buttons:[{label:"确定",action:function(t,n){e.hide()}}],buttonsAlign:"right"}),e.show()}))},l=function(t){var e=editor.explorer.list.sm().ld(),n=(e.getAttr("uuid"),JSON.stringify(e.getAttr("json")));return e.getAttr("diagramType"),console.log(e.getAttr("spaceUuid"),"${ld.getAttrspaceUuid"),Object(r.a)({method:"post",url:"/diagram/update",data:{id:e.getAttr("spaceUuid"),content:n}}).then((function(){}))},h=function(t,e,n){var i=n||editor.dm,s=void 0===i.getAttr("diagramType")?0:i.getAttr("diagramType"),c=JSON.stringify({json:i.toJSON(),icon:t}),f=i.getAttr("spaceUuid"),l=i.getAttr("uuid");return Object(r.a)({method:"post",url:"/diagram/update",data:{id:l,content:c}}).then((function(){Object(o.a)(u+a+"/"+l+".json",JSON.stringify({spaceUuid:f,diagram:c,type:s,name:e,uuid:l}))}))},d=function(){var t=window.customStates.stationsExplorer.tree.sm().ld().getAttr("uuid");return r.a.get("/diagram/getById/".concat(t)).then((function(t){return new Promise((function(e){var n=[t.data];n[0].name="图纸",n[0].json=t.data.content,c(n),c(n),e()}))}))},p=function(t){return r.a.post(i.a.apiRemove+"/".concat(t.toString()),{}).then((function(t){d()}))},g=function(t,e){var n=t.map((function(t){return r.a.post(i.a.apiAdd,{spaceId:e,json:JSON.stringify(t.json),isMain:!1,name:"".concat(t.name,"_").concat((new Date).getTime())})}));return Promise.all(n).then((function(){d()}))}},function(t,e,n){"use strict";n.d(e,"c",(function(){return a})),n.d(e,"a",(function(){return s})),n.d(e,"e",(function(){return u})),n.d(e,"b",(function(){return c})),n.d(e,"f",(function(){return f})),n.d(e,"d",(function(){return l})),n(54),n(61),n(173);var r=n(6),i=n(0),o=r.a.recoveryDataPath,a=function(t){return-1!==t.indexOf(".")&&function(t){i.a.post("/platform/file/delete",{fileUrl:o+t})}(t),i.a.post("/platform/file/delete",{fileUrl:t})},s=function(t,e){var n=e,r=/^\s*data:([a-z]+\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,/i;return r.test(n)&&(n=n.replace(r,"")),function(t,e){i.a.post("/platform/file/diagram2d/upload",{content:e,fileUrl:o+t},{headers:{"Content-Type":"application/json"}})}(t,n),i.a.post("/platform/file/diagram2d/upload",{content:n,fileUrl:t},{headers:{"Content-Type":"application/json"}})},u=function(t){return Object(i.a)({method:"post",url:"/platform/file/getAllFiles",data:{fileUrl:t}})},c=function(t){return i.a.post("/platform/file/createDir",{fileUrl:t})},f=function(t,e){return function(t,e){i.a.post("/platform/file/reNameFile",{oldFileNameDir:o+e,newFileNameDir:o+t})}(t,e),i.a.post("/platform/file/reNameFile",{oldFileNameDir:e,newFileNameDir:t})},l=function(t){return i.a.post("/platform/file/getFileContent",{fileUrl:t})}},function(t,e,n){"use strict";var r=n(111),i=n(176),o=Object.prototype.toString;function a(t){return"[object Array]"===o.call(t)}function s(t){return null!==t&&"object"==typeof t}function u(t){return"[object Function]"===o.call(t)}function c(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),a(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.call(null,t[i],i,t)}t.exports={isArray:a,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:i,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:s,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:u,isStream:function(t){return s(t)&&u(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,i=arguments.length;r<i;r++)c(arguments[r],n);return e},deepMerge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]="object"==typeof n?t({},n):n}for(var r=0,i=arguments.length;r<i;r++)c(arguments[r],n);return e},extend:function(t,e,n){return c(e,(function(e,i){t[i]=n&&"function"==typeof e?r(e,n):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e,n){var r=n(9),i=n(80),o=n(7),a=n(36),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(o(t),e=a(e,!0),o(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(57),i=n(24);t.exports=function(t){return r(i(t))}},function(t,e,n){"use strict";function r(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(t){this.emit("data",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit("error",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var n=0;n<this._listeners[t].length;n++)this._listeners[t][n].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.end()})),t.on("error",(function(t){e.error(t)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},t.exports=r},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(1),i=n(31),o=n(12),a=n(11),s=n(43),u=n(81),c=n(38),f=c.get,l=c.enforce,h=String(u).split("toString");i("inspectSource",(function(t){return u.call(t)})),(t.exports=function(t,e,n,i){var u=!!i&&!!i.unsafe,c=!!i&&!!i.enumerable,f=!!i&&!!i.noTargetGet;"function"==typeof n&&("string"!=typeof e||a(n,"name")||o(n,"name",e),l(n).source=h.join("string"==typeof e?e:"")),t!==r?(u?!f&&t[e]&&(c=!0):delete t[e],c?t[e]=n:o(t,e,n)):c?t[e]=n:s(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&f(this).source||u.call(this)}))},function(t,e,n){var r=n(32),i=Math.min;t.exports=function(t){return 0<t?i(r(t),9007199254740991):0}},function(t,e,n){"use strict";var r=n(5),i=n(86);r({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(t,e,n){var r=n(1),i=n(93),o=n(86),a=n(12);for(var s in i){var u=r[s],c=u&&u.prototype;if(c&&c.forEach!==o)try{a(c,"forEach",o)}catch(t){c.forEach=o}}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(24);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";(function(t){if(e.base64=!0,e.array=!0,e.string=!0,e.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,e.nodebuffer=void 0!==t,e.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)e.blob=!1;else{var r=new ArrayBuffer(0);try{e.blob=0===new Blob([r],{type:"application/zip"}).size}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(r),e.blob=0===i.getBlob("application/zip").size}catch(t){e.blob=!1}}}try{e.nodestream=!!n(129).Readable}catch(t){e.nodestream=!1}}).call(this,n(51).Buffer)},function(t,e,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;e.assign=function(t){for(var e,n,r=Array.prototype.slice.call(arguments,1);r.length;){var i=r.shift();if(i){if("object"!=typeof i)throw new TypeError(i+"must be non-object");for(var o in i)e=i,n=o,Object.prototype.hasOwnProperty.call(e,n)&&(t[o]=i[o])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var i={arraySet:function(t,e,n,r,i){if(e.subarray&&t.subarray)t.set(e.subarray(n,n+r),i);else for(var o=0;o<r;o++)t[i+o]=e[n+o]},flattenChunks:function(t){var e,n,r,i,o,a;for(e=r=0,n=t.length;e<n;e++)r+=t[e].length;for(a=new Uint8Array(r),e=i=0,n=t.length;e<n;e++)o=t[e],a.set(o,i),i+=o.length;return a}},o={arraySet:function(t,e,n,r,i){for(var o=0;o<r;o++)t[i+o]=e[n+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,i)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,o))},e.setTyped(r)},function(t,e,n){"use strict";function r(t){if(!s(t))return!1;var e=t[d];return void 0!==e?!!e:a(t)}var i=n(5),o=n(4),a=n(47),s=n(8),u=n(26),c=n(21),f=n(84),l=n(85),h=n(59),d=n(2)("isConcatSpreadable"),p=9007199254740991,g="Maximum allowed index exceeded",v=!o((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),m=h("concat");i({target:"Array",proto:!0,forced:!v||!m},{concat:function(t){var e,n,i,o,a,s=u(this),h=l(s,0),d=0;for(e=-1,i=arguments.length;e<i;e++)if(r(a=-1===e?s:arguments[e])){if(o=c(a.length),p<d+o)throw TypeError(g);for(n=0;n<o;n++,d++)n in a&&f(h,d,a[n])}else{if(p<=d)throw TypeError(g);f(h,d++,a)}return h.length=d,h}})},function(t,e,n){var r=n(9),i=n(62),o=n(35),a=n(17),s=n(36),u=n(11),c=n(80),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=a(t),e=s(e,!0),c)try{return f(t,e)}catch(t){}if(u(t,e))return o(!i.f.call(t,e),t[e])}},function(t,e,n){var r=n(1),i=n(43),o=n(37),a="__core-js_shared__",s=r[a]||i(a,{});(t.exports=function(t,e){return s[t]||(s[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.2.1",mode:o?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(0<t?r:n)(t)}},function(t,e,n){"use strict";var r=n(74),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=l;var o=n(52);o.inherits=n(40);var a=n(130),s=n(99);o.inherits(l,a);for(var u=i(s.prototype),c=0;c<u.length;c++){var f=u[c];l.prototype[f]||(l.prototype[f]=s.prototype[f])}function l(t){if(!(this instanceof l))return new l(t);a.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),l.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){t.exports=n(165)},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(8);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=!1},function(t,e,n){var r,i,o,a=n(109),s=n(1),u=n(8),c=n(12),f=n(11),l=n(44),h=n(41),d=s.WeakMap;if(a){var p=new d,g=p.get,v=p.has,m=p.set;r=function(t,e){return m.call(p,t,e),e},i=function(t){return g.call(p,t)||{}},o=function(t){return v.call(p,t)}}else{var y=l("state");h[y]=!0,r=function(t,e){return c(t,y,e),e},i=function(t){return f(t,y)?t[y]:{}},o=function(t){return f(t,y)}}t.exports={set:r,get:i,has:o,enforce:function(t){return o(t)?i(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!u(e)||(n=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){"use strict";for(var r=n(3),i=n(27),o=n(76),a=n(18),s=new Array(256),u=0;u<256;u++)s[u]=252<=u?6:248<=u?5:240<=u?4:224<=u?3:192<=u?2:1;function c(){a.call(this,"utf-8 decode"),this.leftOver=null}function f(){a.call(this,"utf-8 encode")}s[254]=s[254]=1,e.utf8encode=function(t){return i.nodebuffer?o.newBufferFrom(t,"utf-8"):function(t){var e,n,r,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(r=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),u+=n<128?1:n<2048?2:n<65536?3:4;for(e=i.uint8array?new Uint8Array(u):new Array(u),o=a=0;a<u;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(r=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),n<128?e[a++]=n:(n<2048?e[a++]=192|n>>>6:(n<65536?e[a++]=224|n>>>12:(e[a++]=240|n>>>18,e[a++]=128|n>>>12&63),e[a++]=128|n>>>6&63),e[a++]=128|63&n);return e}(t)},e.utf8decode=function(t){return i.nodebuffer?r.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,n,i,o,a=t.length,u=new Array(2*a);for(e=n=0;e<a;)if((i=t[e++])<128)u[n++]=i;else if(4<(o=s[i]))u[n++]=65533,e+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&e<a;)i=i<<6|63&t[e++],o--;1<o?u[n++]=65533:i<65536?u[n++]=i:(i-=65536,u[n++]=55296|i>>10&1023,u[n++]=56320|1023&i)}return u.length!==n&&(u.subarray?u=u.subarray(0,n):u.length=n),r.applyFromCharCode(u)}(t=r.transformTo(i.uint8array?"uint8array":"array",t))},r.inherits(c,a),c.prototype.processChunk=function(t){var n=r.transformTo(i.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var o=n;(n=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),n.set(o,this.leftOver.length)}else n=this.leftOver.concat(n);this.leftOver=null}var a=function(t,e){var n;for((e=e||t.length)>t.length&&(e=t.length),n=e-1;0<=n&&128==(192&t[n]);)n--;return n<0?e:0===n?e:n+s[t[n]]>e?n:e}(n),u=n;a!==n.length&&(i.uint8array?(u=n.subarray(0,a),this.leftOver=n.subarray(a,n.length)):(u=n.slice(0,a),this.leftOver=n.slice(a,n.length))),this.push({data:e.utf8decode(u),meta:t.meta})},c.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:e.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},e.Utf8DecodeWorker=c,r.inherits(f,a),f.prototype.processChunk=function(t){this.push({data:e.utf8encode(t.data),meta:t.meta})},e.Utf8EncodeWorker=f},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){function n(){}t.super_=e,n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}}},function(t,e){t.exports={}},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],f=!1,l=-1;function h(){f&&u&&(f=!1,u.length?c=u.concat(c):l=-1,c.length&&d())}function d(){if(!f){var t=s(h);f=!0;for(var e=c.length;e;){for(u=c,c=[];++l<e;)u&&u[l].run();l=-1,e=c.length}u=null,f=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||f||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(1),i=n(12);t.exports=function(t,e){try{i(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(31),i=n(58),o=r("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},function(t,e,n){function r(t){return"function"==typeof t?t:void 0}var i=n(64),o=n(1);t.exports=function(t,e){return arguments.length<2?r(i[t])||r(o[t]):i[t]&&i[t][e]||o[t]&&o[t][e]}},function(t,e,n){var r=n(90),i=n(65).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){var r=n(25);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){function r(t){var e=1==t,n=2==t,r=3==t,f=4==t,l=6==t,h=5==t||l;return function(d,p,g,v){for(var m,y,w=a(d),b=o(w),_=i(p,g,3),x=s(b.length),S=0,j=v||u,k=e?j(d,x):n?j(d,0):void 0;S<x;S++)if((h||S in b)&&(y=_(m=b[S],S,w),t))if(e)k[S]=y;else if(y)switch(t){case 3:return!0;case 5:return m;case 6:return S;case 2:c.call(k,m)}else if(f)return!1;return l?-1:r||f?f:k}}var i=n(68),o=n(57),a=n(26),s=n(21),u=n(85),c=[].push;t.exports={forEach:r(0),map:r(1),filter:r(2),some:r(3),every:r(4),find:r(5),findIndex:r(6)}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,n){var r=n(9),i=n(16).f,o=Function.prototype,a=o.toString,s=/^\s*function ([^ (]*)/;!r||"name"in o||i(o,"name",{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return""}}})},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(205),i=n(206),o=n(128);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"!=typeof t)return c(this,t,e,n);if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");return e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r),u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=h(t,e),t}(t,e,n,r):"string"==typeof e?function(t,e,n){if("string"==typeof n&&""!==n||(n="utf8"),!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=s(t,r)).write(e,n);return i!==r&&(t=t.slice(0,i)),t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=s(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?s(t,0):h(t,e);if("Buffer"===e.type&&o(e.data))return h(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(f(e),t=s(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|d(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return D(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(t).length;default:if(r)return D(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function v(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):2147483647<n?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,a=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s/=a=2,u/=2,n/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var f=-1;for(o=n;o<s;o++)if(c(t,o)===c(e,-1===f?0:o-f)){if(-1===f&&(f=o),o-f+1===u)return f*a}else-1!==f&&(o-=o-f),f=-1}else for(s<n+u&&(n=s-u),o=n;0<=o;o--){for(var l=!0,h=0;h<u;h++)if(c(t,o+h)!==c(e,h)){l=!1;break}if(l)return o}return-1}function y(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?i<(r=Number(r))&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");o/2<r&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function w(t,e,n,r){return B(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function b(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function _(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,a,s,u,c=t[i],f=null,l=239<c?4:223<c?3:191<c?2:1;if(i+l<=n)switch(l){case 1:c<128&&(f=c);break;case 2:128==(192&(o=t[i+1]))&&127<(u=(31&c)<<6|63&o)&&(f=u);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&2047<(u=(15&c)<<12|(63&o)<<6|63&a)&&(u<55296||57343<u)&&(f=u);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&65535<(u=(15&c)<<18|(63&o)<<12|(63&a)<<6|63&s)&&u<1114112&&(f=u)}null===f?(f=65533,l=1):65535<f&&(f-=65536,r.push(f>>>10&1023|55296),f=56320|1023&f),r.push(f),i+=l}return function(t){var e=t.length;if(e<=x)return String.fromCharCode.apply(String,t);for(var n="",r=0;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=x));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){return+t!=t&&(t=0),u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return f(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return l(null,t)},u.allocUnsafeSlow=function(t){return l(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(n=e=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var a=t[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,i),i+=a.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0==t?"":0===arguments.length?_(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t=t||"utf8";;)switch(t){case"hex":return k(this,e,n);case"utf8":case"utf-8":return _(this,e,n);case"ascii":return S(this,e,n);case"latin1":case"binary":return j(this,e,n);case"base64":return b(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return 0<this.length&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(i<=r&&n<=e)return 0;if(i<=r)return-1;if(n<=e)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),a=(n>>>=0)-(e>>>=0),s=Math.min(o,a),c=this.slice(r,i),f=t.slice(e,n),l=0;l<s;++l)if(c[l]!==f[l]){o=c[l],a=f[l];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return v(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return v(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||i<n)&&(n=i),0<t.length&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r=r||"utf8";for(var o,a,s,u,c,f,l=!1;;)switch(r){case"hex":return y(this,t,e,n);case"utf8":case"utf-8":return c=e,f=n,B(D(t,this.length-c),this,c,f);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return w(this,t,e,n);case"base64":return this,s=e,u=n,B(z(t),this,s,u);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return o=e,a=n,B(function(t,e){for(var n,r,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)r=(n=t.charCodeAt(a))>>8,i=n%256,o.push(i),o.push(r);return o}(t,this.length-o),this,o,a);default:if(l)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),l=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var x=4096;function S(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function j(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function k(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||r<n)&&(n=r);for(var i="",o=e;o<n;++o)i+=P(t[o]);return i}function E(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function T(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(n<t+e)throw new RangeError("Trying to access beyond buffer length")}function A(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(i<e||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function O(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function I(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function C(t,e,n,r){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function R(t,e,n,r,o){return o||C(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function N(t,e,n,r,o){return o||C(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):r<t&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):r<e&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t+--e],i=1;0<e&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||T(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||T(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||T(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||T(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||T(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return(i*=128)<=r&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=e,i=1,o=this[t+--r];0<r&&(i*=256);)o+=this[t+--r]*i;return(i*=128)<=o&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||T(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||T(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||T(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||T(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||T(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){t=+t,e|=0,n|=0,r||A(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){t=+t,e|=0,n|=0,r||A(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;0<=--i&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):O(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):O(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):I(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):I(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);A(this,t,e,n,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<n&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);A(this,t,e,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[e+o]=255&t;0<=--o&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):O(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):O(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):I(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||A(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):I(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return R(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return R(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return N(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return N(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n=n||0,r||0===r||(r=this.length),e>=t.length&&(e=t.length),e=e||0,0<r&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;0<=i;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,"number"==typeof(t=t||0))for(o=e;o<n;++o)this[o]=t;else{var a=u.isBuffer(t)?t:D(new u(t,r).toString()),s=a.length;for(o=0;o<n-e;++o)this[o+e]=a[o%s]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function P(t){return t<16?"0"+t.toString(16):t.toString(16)}function D(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],a=0;a<r;++a){if(55295<(n=t.charCodeAt(a))&&n<57344){if(!i){if(56319<n){-1<(e-=3)&&o.push(239,191,189);continue}if(a+1===r){-1<(e-=3)&&o.push(239,191,189);continue}i=n;continue}if(n<56320){-1<(e-=3)&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&-1<(e-=3)&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function z(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function B(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(19))},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(51).Buffer)},function(t,e,n){"use strict";var r;r="undefined"!=typeof Promise?Promise:n(219),t.exports={Promise:r}},function(t,e,n){"use strict";var r=n(5),i=n(82).indexOf,o=n(60),a=[].indexOf,s=!!a&&1/[1].indexOf(1,-0)<0,u=o("indexOf");r({target:"Array",proto:!0,forced:s||u},{indexOf:function(t,e){return s?a.apply(this,arguments)||0:i(this,t,1<arguments.length?e:void 0)}})},function(t,e){t.exports={}},function(t,e,n){var r,i,o;
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */o=function(){function t(){for(var t=0,e={};t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}function e(t){return t.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}return function n(r){function i(){}function o(e,n,o){if("undefined"!=typeof document){"number"==typeof(o=t({path:"/"},i.defaults,o)).expires&&(o.expires=new Date(1*new Date+864e5*o.expires)),o.expires=o.expires?o.expires.toUTCString():"";try{var a=JSON.stringify(n);/^[\{\[]/.test(a)&&(n=a)}catch(e){}n=r.write?r.write(n,e):encodeURIComponent(String(n)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),e=encodeURIComponent(String(e)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var s="";for(var u in o)o[u]&&(s+="; "+u,!0!==o[u]&&(s+="="+o[u].split(";")[0]));return document.cookie=e+"="+n+s}}function a(t,n){if("undefined"!=typeof document){for(var i={},o=document.cookie?document.cookie.split("; "):[],a=0;a<o.length;a++){var s=o[a].split("="),u=s.slice(1).join("=");n||'"'!==u.charAt(0)||(u=u.slice(1,-1));try{var c=e(s[0]);if(u=(r.read||r)(u,c)||e(u),n)try{u=JSON.parse(u)}catch(t){}if(i[c]=u,t===c)break}catch(t){}}return t?i[t]:i}}return i.set=o,i.get=function(t){return a(t,!1)},i.getJSON=function(t){return a(t,!0)},i.remove=function(e,n){o(e,"",t(n,{expires:-1}))},i.defaults={},i.withConverter=n,i}((function(){}))},void 0===(i="function"==typeof(r=o)?r.call(e,n,e,t):r)||(t.exports=i),t.exports=o()},function(t,e,n){var r=n(4),i=n(25),o="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(4),i=n(2)("species");t.exports=function(t){return!r((function(){var e=[];return(e.constructor={})[i]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){"use strict";var r=n(4);t.exports=function(t,e){var n=[][t];return!n||!r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e,n){"use strict";var r=n(5),i=n(71);r({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);e.f=o?function(t){var e=i(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(1),i=n(8),o=r.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},function(t,e,n){t.exports=n(1)},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){function r(t,e){var n=s[a(t)];return n==c||n!=u&&("function"==typeof e?i(e):!!e)}var i=n(4),o=/#|\.prototype\./,a=r.normalize=function(t){return String(t).replace(o,".").toLowerCase()},s=r.data={},u=r.NATIVE="N",c=r.POLYFILL="P";t.exports=r},function(t,e,n){var r=n(49);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(90),i=n(65);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(16).f,i=n(11),o=n(2)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){"use strict";var r,i,o=n(95),a=RegExp.prototype.exec,s=String.prototype.replace,u=a,c=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(c||f)&&(u=function(t){var e,n,r,i,u=this;return f&&(n=new RegExp("^"+u.source+"$(?!\\s)",o.call(u))),c&&(e=u.lastIndex),r=a.call(u,t),c&&r&&(u.lastIndex=u.global?r.index+r[0].length:e),f&&r&&1<r.length&&s.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),t.exports=u},function(t,e,n){"use strict";var r=n(12),i=n(20),o=n(4),a=n(2),s=n(71),u=a("species"),c=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f=!o((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,e,n,l){var h=a(t),d=!o((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),p=d&&!o((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[u]=function(){return n}),n[h](""),!e}));if(!d||!p||"replace"===t&&!c||"split"===t&&!f){var g=/./[h],v=n(h,""[t],(function(t,e,n,r,i){return e.exec===s?d&&!i?{done:!0,value:g.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),m=v[0],y=v[1];i(String.prototype,t,m),i(RegExp.prototype,h,2==e?function(t,e){return y.call(t,this,e)}:function(t){return y.call(t,this)}),l&&r(RegExp.prototype[h],"sham",!0)}}},function(t,e,n){var r=n(25),i=n(71);t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var o=n.call(t,e);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,n){"use strict";(function(e){void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,n)}));case 3:return e.nextTick((function(){t.call(null,n,r)}));case 4:return e.nextTick((function(){t.call(null,n,r,i)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick((function(){t.apply(null,o)}))}}}:t.exports=e}).call(this,n(42))},function(t,e,n){var r=n(51),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function a(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=a),o(i,a),a.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},a.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,n){"use strict";(function(e){t.exports={isNode:void 0!==e,newBufferFrom:function(t,n){if(e.from&&e.from!==Uint8Array.from)return e.from(t,n);if("number"==typeof t)throw new Error('The "data" argument must not be a number');return new e(t,n)},allocBuffer:function(t){if(e.alloc)return e.alloc(t);var n=new e(t);return n.fill(0),n},isBuffer:function(t){return e.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}}}).call(this,n(51).Buffer)},function(t,e,n){var r=n(20),i=n(242),o=Object.prototype;i!==o.toString&&r(o,"toString",i,{unsafe:!0})},function(t,e,n){"use strict";var r=n(5),i=n(48).map;r({target:"Array",proto:!0,forced:!n(59)("map")},{map:function(t,e){return i(this,t,1<arguments.length?e:void 0)}})},function(t,e,n){"use strict";var r=n(17),i=n(258),o=n(55),a=n(38),s=n(159),u="Array Iterator",c=a.set,f=a.getterFor(u);t.exports=s(Array,"Array",(function(t,e){c(this,{type:u,target:r(t),index:0,kind:e})}),(function(){var t=f(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?{value:t.target=void 0,done:!0}:"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(t,e,n){var r=n(9),i=n(4),o=n(63);t.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(31);t.exports=r("native-function-to-string",Function.toString)},function(t,e,n){function r(t){return function(e,n,r){var s,u=i(e),c=o(u.length),f=a(r,c);if(t&&n!=n){for(;f<c;)if((s=u[f++])!=s)return!0}else for(;f<c;f++)if((t||f in u)&&u[f]===n)return t||f||0;return!t&&-1}}var i=n(17),o=n(21),a=n(83);t.exports={includes:r(!0),indexOf:r(!1)}},function(t,e,n){var r=n(32),i=Math.max,o=Math.min;t.exports=function(t,e){var n=r(t);return n<0?i(n+e,0):o(n,e)}},function(t,e,n){"use strict";var r=n(36),i=n(16),o=n(35);t.exports=function(t,e,n){var a=r(e);a in t?i.f(t,a,o(0,n)):t[a]=n}},function(t,e,n){var r=n(8),i=n(47),o=n(2)("species");t.exports=function(t,e){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){"use strict";var r=n(48).forEach,i=n(60);t.exports=i("forEach")?function(t,e){return r(this,t,1<arguments.length?e:void 0)}:[].forEach},function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(t,e,n){var r=n(11),i=n(89),o=n(30),a=n(16);t.exports=function(t,e){for(var n=i(e),s=a.f,u=o.f,c=0;c<n.length;c++){var f=n[c];r(t,f)||s(t,f,u(e,f))}}},function(t,e,n){var r=n(45),i=n(46),o=n(66),a=n(7);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(a(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(11),i=n(17),o=n(82).indexOf,a=n(41);t.exports=function(t,e){var n,s=i(t),u=0,c=[];for(n in s)!r(a,n)&&r(s,n)&&c.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(c,n)||c.push(n));return c}},function(t,e,n){var r=n(4);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r=n(20),i=Date.prototype,o="Invalid Date",a="toString",s=i[a],u=i.getTime;new Date(NaN)+""!=o&&r(i,a,(function(){var t=u.call(this);return t==t?s.call(this):o}))},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){function r(){}var i=n(7),o=n(192),a=n(65),s=n(41),u=n(120),c=n(63),f=n(44)("IE_PROTO"),l="prototype",h=function(){var t,e=c("iframe"),n=a.length;for(e.style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),h=t.F;n--;)delete h[l][a[n]];return h()};t.exports=Object.create||function(t,e){var n;return null!==t?(r[l]=i(t),n=new r,r[l]=null,n[f]=t):n=h(),void 0===e?n:o(n,e)},s[f]=!0},function(t,e,n){"use strict";var r=n(7);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){"use strict";var r=n(127).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}((t.exports=s).EventEmitter=s).prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var u=10;function c(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function f(t,e,n,r){var i,o,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),a=o[e]),void 0===a)a=o[e]=n,++t._eventsCount;else if("function"==typeof a?a=o[e]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),0<(i=c(t))&&a.length>i&&!a.warned){a.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=t,s.type=e,s.count=a.length,function(t){console&&console.warn&&console.warn(t)}(s)}return t}function l(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=function(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,t))}.bind(r);return i.listener=n,r.wrapFn=i}function h(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):p(i,i.length)}function d(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function p(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var a;if(0<e.length&&(a=e[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var c=u.length,f=p(u,c);for(n=0;n<c;++n)o(f[n],this,e)}return!0},s.prototype.on=s.prototype.addListener=function(t,e){return f(this,t,e,!1)},s.prototype.prependListener=function(t,e){return f(this,t,e,!0)},s.prototype.once=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.on(t,l(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.prependListener(t,l(this,t,e)),this},s.prototype.off=s.prototype.removeListener=function(t,e){var n,r,i,o,a;if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);if(void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length-1;0<=o;o--)if(n[o]===e||n[o].listener===e){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,a||e)}return this},s.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;0<=r;r--)this.removeListener(t,e[r]);return this},s.prototype.listeners=function(t){return h(this,t,!0)},s.prototype.rawListeners=function(t){return h(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):d.call(t,e)},s.prototype.listenerCount=d,s.prototype.eventNames=function(){return 0<this._eventsCount?r(this._events):[]}},function(t,e,n){(((e=t.exports=n(130)).Stream=e).Readable=e).Writable=n(99),e.Duplex=n(33),e.Transform=n(135),e.PassThrough=n(213)},function(t,e,n){"use strict";(function(e,r,i){var o=n(74);function a(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;for(t.entry=null;r;){var i=r.callback;e.pendingcb--,i(void 0),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=y;var s,u=!e.browser&&-1<["v0.10","v0.9."].indexOf(e.version.slice(0,5))?r:o.nextTick;y.WritableState=m;var c=n(52);c.inherits=n(40);var f,l={deprecate:n(212)},h=n(131),d=n(75).Buffer,p=i.Uint8Array||function(){},g=n(132);function v(){}function m(t,e){s=s||n(33),t=t||{};var r=e instanceof s;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,c=t.writableHighWaterMark,f=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(c||0===c)?c:f,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var l=(this.destroyed=!1)===t.decodeStrings;this.decodeStrings=!l,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(j,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),j(t,e))}(t,n,r,e,i);else{var a=x(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||_(t,n),r?u(b,t,n,a,i):b(t,n,a,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function y(t){if(s=s||n(33),!(f.call(y,this)||this instanceof s))return new y(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),h.call(this)}function w(t,e,n,r,i,o,a){e.writelen=r,e.writecb=a,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function b(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),j(t,e)}function _(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var s=0,u=!0;n;)(i[s]=n).isBuf||(u=!1),n=n.next,s+=1;i.allBuffers=u,w(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new a(e),e.bufferedRequestCount=0}else{for(;n;){var c=n.chunk,f=n.encoding,l=n.callback;if(w(t,e,!1,e.objectMode?1:c.length,c,f,l),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function x(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function S(t,e){t._final((function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),j(t,e)}))}function j(t,e){var n=x(e);return n&&(function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(S,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}c.inherits(y,h),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:l.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(f=Function.prototype[Symbol.hasInstance],Object.defineProperty(y,Symbol.hasInstance,{value:function(t){return!!f.call(this,t)||this===y&&t&&t._writableState instanceof m}})):f=function(t){return t instanceof this},y.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},y.prototype.write=function(t,e,n){var r=this._writableState,i=!1,a=!r.objectMode&&function(t){return d.isBuffer(t)||t instanceof p}(t);return a&&!d.isBuffer(t)&&(t=function(t){return d.from(t)}(t)),"function"==typeof e&&(n=e,e=null),e=a?"buffer":e||r.defaultEncoding,"function"!=typeof n&&(n=v),r.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(a||function(t,e,n,r){var i=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(t.emit("error",a),o.nextTick(r,a),i=!1),i}(this,r,t,n))&&(r.pendingcb++,i=function(t,e,n,r,i,o){if(!n){var a=function(t,e,n){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=d.from(e,n)),e}(e,r,i);r!==a&&(n=!0,i="buffer",r=a)}var s=e.objectMode?1:r.length;e.length+=s;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else w(t,e,!1,s,r,i,o);return u}(this,r,a,t,e,n)),i},y.prototype.cork=function(){this._writableState.corked++},y.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||_(this,t))},y.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(-1<["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(y.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),y.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},y.prototype._writev=null,y.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,e=t=null):"function"==typeof e&&(n=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,j(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n)),e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),y.prototype.destroy=g.destroy,y.prototype._undestroy=g.undestroy,y.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(42),n(133).setImmediate,n(19))},function(t,e,n){"use strict";var r=n(53),i=n(139),o=n(140),a=n(141);function s(t,e,n,r,i){this.compressedSize=t,this.uncompressedSize=e,this.crc32=n,this.compression=r,this.compressedContent=i}o=n(140),s.prototype={getContentWorker:function(){var t=new i(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),e=this;return t.on("end",(function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),t},getCompressedWorker:function(){return new i(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},s.createWorkerFrom=function(t,e,n){return t.pipe(new a).pipe(new o("uncompressedSize")).pipe(e.compressWorker(n)).pipe(new o("compressedSize")).withStreamInfo("compression",e)},t.exports=s},function(t,e,n){"use strict";var r=n(3),i=function(){for(var t,e=[],n=0;n<256;n++){t=n;for(var r=0;r<8;r++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e}();t.exports=function(t,e){return void 0!==t&&t.length?"string"!==r.getTypeOf(t)?function(t,e,n,r){var o=i,a=0+n;t^=-1;for(var s=0;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}(0|e,t,t.length):function(t,e,n,r){var o=i,a=0+n;t^=-1;for(var s=0;s<a;s++)t=t>>>8^o[255&(t^e.charCodeAt(s))];return-1^t}(0|e,t,t.length):0}},function(t,e,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(t,e,n){"use strict";function r(t){var e;return!(!_(t)||"function"!=typeof(e=t.then))&&e}function i(t,e,n){if(!e.notified){e.notified=!0;var i=e.reactions;O((function(){for(var o=e.value,a=1==e.state,s=0;i.length>s;){var u,c,f,l=i[s++],h=a?l.ok:l.fail,d=l.resolve,p=l.reject,g=l.domain;try{h?(a||(2===e.rejection&&it(t,e),e.rejection=1),!0===h?u=o:(g&&g.enter(),u=h(o),g&&(g.exit(),f=!0)),u===l.promise?p($("Promise-chain cycle")):(c=r(u))?c.call(u,d,p):d(u)):p(o)}catch(o){g&&!f&&g.exit(),p(o)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&nt(t,e)}))}}function o(t,e,n){var r,i;X?((r=V.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),p.dispatchEvent(r)):r={promise:e,reason:n},(i=p["on"+t])?i(r):t===Q&&C("Unhandled promise rejection",n)}function a(t,e,n,r){return function(i){t(e,n,i,r)}}function s(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,i(t,e,!0))}var u,c,f,l,h=n(5),d=n(37),p=n(1),g=n(64),v=n(243),m=n(20),y=n(244),w=n(70),b=n(125),_=n(8),x=n(49),S=n(245),j=n(25),k=n(246),E=n(250),T=n(154),A=n(155).set,O=n(251),I=n(252),C=n(253),R=n(157),N=n(254),L=n(156),P=n(38),D=n(67),z=n(2)("species"),B="Promise",U=P.get,M=P.set,F=P.getterFor(B),W=v,$=p.TypeError,V=p.document,q=p.process,Z=p.fetch,Y=q&&q.versions,H=Y&&Y.v8||"",J=R.f,K=J,G="process"==j(q),X=!!(V&&V.createEvent&&p.dispatchEvent),Q="unhandledrejection",tt=D(B,(function(){function t(){}var e=W.resolve(1),n=(e.constructor={})[z]=function(e){e(t,t)};return!((G||"function"==typeof PromiseRejectionEvent)&&(!d||e.finally)&&e.then(t)instanceof n&&0!==H.indexOf("6.6")&&-1===L.indexOf("Chrome/66"))})),et=tt||!E((function(t){W.all(t).catch((function(){}))})),nt=function(t,e){A.call(p,(function(){var n,r=e.value;if(rt(e)&&(n=N((function(){G?q.emit("unhandledRejection",r,t):o(Q,t,r)})),e.rejection=G||rt(e)?2:1,n.error))throw n.value}))},rt=function(t){return 1!==t.rejection&&!t.parent},it=function(t,e){A.call(p,(function(){G?q.emit("rejectionHandled",t):o("rejectionhandled",t,e.value)}))},ot=function(t,e,n,o){if(!e.done){e.done=!0,o&&(e=o);try{if(t===n)throw $("Promise can't be resolved itself");var u=r(n);u?O((function(){var r={done:!1};try{u.call(n,a(ot,t,r,e),a(s,t,r,e))}catch(n){s(t,r,n,e)}})):(e.value=n,e.state=1,i(t,e,!1))}catch(n){s(t,{done:!1},n,e)}}};tt&&(W=function(t){S(this,W,B),x(t),u.call(this);var e=U(this);try{t(a(ot,this,e),a(s,this,e))}catch(t){s(this,e,t)}},(u=function(t){M(this,{type:B,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=y(W.prototype,{then:function(t,e){var n=F(this),r=J(T(this,W));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=G?q.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&i(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),c=function(){var t=new u,e=U(t);this.promise=t,this.resolve=a(ot,t,e),this.reject=a(s,t,e)},R.f=J=function(t){return t===W||t===f?new c(t):K(t)},d||"function"!=typeof v||(l=v.prototype.then,m(v.prototype,"then",(function(t,e){var n=this;return new W((function(t,e){l.call(n,t,e)})).then(t,e)})),"function"==typeof Z&&h({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return I(W,Z.apply(p,arguments))}}))),h({global:!0,wrap:!0,forced:tt},{Promise:W}),w(W,B,!1,!0),b(B),f=g[B],h({target:B,stat:!0,forced:tt},{reject:function(t){var e=J(this);return e.reject.call(void 0,t),e.promise}}),h({target:B,stat:!0,forced:d||tt},{resolve:function(t){return I(d&&this===f?W:this,t)}}),h({target:B,stat:!0,forced:et},{all:function(t){var e=this,n=J(e),r=n.resolve,i=n.reject,o=N((function(){var n=x(e.resolve),o=[],a=0,s=1;k(t,(function(t){var u=a++,c=!1;o.push(void 0),s++,n.call(e,t).then((function(t){c||(c=!0,o[u]=t,--s||r(o))}),i)})),--s||r(o)}));return o.error&&i(o.value),n.promise},race:function(t){var e=this,n=J(e),r=n.reject,i=N((function(){var i=x(e.resolve);k(t,(function(t){i.call(e,t).then(n.resolve,r)}))}));return i.error&&r(i.value),n.promise}})},function(t,e,n){"use strict";var r=n(127).charAt,i=n(38),o=n(159),a="String Iterator",s=i.set,u=i.getterFor(a);o(String,"String",(function(t){s(this,{type:a,string:String(t),index:0})}),(function(){var t,e=u(this),n=e.string,i=e.index;return i>=n.length?{value:void 0,done:!0}:(t=r(n,i),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(1),i=n(93),o=n(79),a=n(12),s=n(2),u=s("iterator"),c=s("toStringTag"),f=o.values;for(var l in i){var h=r[l],d=h&&h.prototype;if(d){if(d[u]!==f)try{a(d,u,f)}catch(t){d[u]=f}if(d[c]||a(d,c,l),i[l])for(var p in o)if(d[p]!==o[p])try{a(d,p,o[p])}catch(t){d[p]=o[p]}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(0),i=function(t){return Object(r.a)({url:"/device/space/getLazyRegionTree",method:"post",params:{parentId:t,nodeType:"",type:"alarm-event"}})}},function(t,e,n){t.exports=n(175)},function(t,e){function n(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}t.exports=function(t){return function(){var e=this,r=arguments;return new Promise((function(i,o){var a=t.apply(e,r);function s(t){n(a,i,o,s,u,"next",t)}function u(t){n(a,i,o,s,u,"throw",t)}s(void 0)}))}}},function(t,e,n){var r=n(1),i=n(81),o=r.WeakMap;t.exports="function"==typeof o&&/native code/.test(i.call(o))},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,a="Expected a function",s="__lodash_hash_undefined__",u="__lodash_placeholder__",c=128,f=9007199254740991,l=NaN,h=4294967295,d=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],p="[object Arguments]",g="[object Array]",v="[object Boolean]",m="[object Date]",y="[object Error]",w="[object Function]",b="[object GeneratorFunction]",_="[object Map]",x="[object Number]",S="[object Object]",j="[object Promise]",k="[object RegExp]",E="[object Set]",T="[object String]",A="[object Symbol]",O="[object WeakMap]",I="[object ArrayBuffer]",C="[object DataView]",R="[object Float32Array]",N="[object Float64Array]",L="[object Int8Array]",P="[object Int16Array]",D="[object Int32Array]",z="[object Uint8Array]",B="[object Uint8ClampedArray]",U="[object Uint16Array]",M="[object Uint32Array]",F=/\b__p \+= '';/g,W=/\b(__p \+=) '' \+/g,$=/(__e\(.*?\)|\b__t\)) \+\n'';/g,V=/&(?:amp|lt|gt|quot|#39);/g,q=/[&<>"']/g,Z=RegExp(V.source),Y=RegExp(q.source),H=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,K=/<%=([\s\S]+?)%>/g,G=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,X=/^\w*$/,Q=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,tt=/[\\^$.*+?()[\]{}|]/g,et=RegExp(tt.source),nt=/^\s+|\s+$/g,rt=/^\s+/,it=/\s+$/,ot=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,at=/\{\n\/\* \[wrapped with (.+)\] \*/,st=/,? & /,ut=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ct=/\\(\\)?/g,ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,lt=/\w*$/,ht=/^[-+]0x[0-9a-f]+$/i,dt=/^0b[01]+$/i,pt=/^\[object .+?Constructor\]$/,gt=/^0o[0-7]+$/i,vt=/^(?:0|[1-9]\d*)$/,mt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,yt=/($^)/,wt=/['\n\r\u2028\u2029\\]/g,bt="\\ud800-\\udfff",_t="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",xt="\\u2700-\\u27bf",St="a-z\\xdf-\\xf6\\xf8-\\xff",jt="A-Z\\xc0-\\xd6\\xd8-\\xde",kt="\\ufe0e\\ufe0f",Et="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Tt="["+bt+"]",At="["+Et+"]",Ot="["+_t+"]",It="\\d+",Ct="["+xt+"]",Rt="["+St+"]",Nt="[^"+bt+Et+It+xt+St+jt+"]",Lt="\\ud83c[\\udffb-\\udfff]",Pt="[^"+bt+"]",Dt="(?:\\ud83c[\\udde6-\\uddff]){2}",zt="[\\ud800-\\udbff][\\udc00-\\udfff]",Bt="["+jt+"]",Ut="\\u200d",Mt="(?:"+Rt+"|"+Nt+")",Ft="(?:"+Bt+"|"+Nt+")",Wt="(?:['’](?:d|ll|m|re|s|t|ve))?",$t="(?:['’](?:D|LL|M|RE|S|T|VE))?",Vt="(?:"+Ot+"|"+Lt+")?",qt="["+kt+"]?",Zt=qt+Vt+"(?:"+Ut+"(?:"+[Pt,Dt,zt].join("|")+")"+qt+Vt+")*",Yt="(?:"+[Ct,Dt,zt].join("|")+")"+Zt,Ht="(?:"+[Pt+Ot+"?",Ot,Dt,zt,Tt].join("|")+")",Jt=RegExp("['’]","g"),Kt=RegExp(Ot,"g"),Gt=RegExp(Lt+"(?="+Lt+")|"+Ht+Zt,"g"),Xt=RegExp([Bt+"?"+Rt+"+"+Wt+"(?="+[At,Bt,"$"].join("|")+")",Ft+"+"+$t+"(?="+[At,Bt+Mt,"$"].join("|")+")",Bt+"?"+Mt+"+"+Wt,Bt+"+"+$t,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",It,Yt].join("|"),"g"),Qt=RegExp("["+Ut+bt+_t+kt+"]"),te=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ee=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ne=-1,re={};re[R]=re[N]=re[L]=re[P]=re[D]=re[z]=re[B]=re[U]=re[M]=!0,re[p]=re[g]=re[I]=re[v]=re[C]=re[m]=re[y]=re[w]=re[_]=re[x]=re[S]=re[k]=re[E]=re[T]=re[O]=!1;var ie={};ie[p]=ie[g]=ie[I]=ie[C]=ie[v]=ie[m]=ie[R]=ie[N]=ie[L]=ie[P]=ie[D]=ie[_]=ie[x]=ie[S]=ie[k]=ie[E]=ie[T]=ie[A]=ie[z]=ie[B]=ie[U]=ie[M]=!0,ie[y]=ie[w]=ie[O]=!1;var oe={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ae=parseFloat,se=parseInt,ue="object"==typeof t&&t&&t.Object===Object&&t,ce="object"==typeof self&&self&&self.Object===Object&&self,fe=ue||ce||Function("return this")(),le=e&&!e.nodeType&&e,he=le&&"object"==typeof r&&r&&!r.nodeType&&r,de=he&&he.exports===le,pe=de&&ue.process,ge=function(){try{return he&&he.require&&he.require("util").types||pe&&pe.binding&&pe.binding("util")}catch(t){}}(),ve=ge&&ge.isArrayBuffer,me=ge&&ge.isDate,ye=ge&&ge.isMap,we=ge&&ge.isRegExp,be=ge&&ge.isSet,_e=ge&&ge.isTypedArray;function xe(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Se(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function je(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function ke(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Ee(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Te(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function Ae(t,e){return!(null==t||!t.length)&&-1<Be(t,e,0)}function Oe(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Ie(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function Ce(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function Re(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function Ne(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function Le(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var Pe=We("length");function De(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function ze(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function Be(t,e,n){return e==e?function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):ze(t,Me,n)}function Ue(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function Me(t){return t!=t}function Fe(t,e){var n=null==t?0:t.length;return n?qe(t,e)/n:l}function We(t){return function(e){return null==e?o:e[t]}}function $e(t){return function(e){return null==t?o:t[e]}}function Ve(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function qe(t,e){for(var n,r=-1,i=t.length;++r<i;){var a=e(t[r]);a!==o&&(n=n===o?a:n+a)}return n}function Ze(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Ye(t){return function(e){return t(e)}}function He(t,e){return Ie(e,(function(e){return t[e]}))}function Je(t,e){return t.has(e)}function Ke(t,e){for(var n=-1,r=t.length;++n<r&&-1<Be(e,t[n],0););return n}function Ge(t,e){for(var n=t.length;n--&&-1<Be(e,t[n],0););return n}var Xe=$e({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Qe=$e({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function tn(t){return"\\"+oe[t]}function en(t){return Qt.test(t)}function nn(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function rn(t,e){return function(n){return t(e(n))}}function on(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n];a!==e&&a!==u||(t[n]=u,o[i++]=n)}return o}function an(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function sn(t){return en(t)?function(t){for(var e=Gt.lastIndex=0;Gt.test(t);)++e;return e}(t):Pe(t)}function un(t){return en(t)?function(t){return t.match(Gt)||[]}(t):function(t){return t.split("")}(t)}var cn=$e({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),fn=function t(e){var n,r=(e=null==e?fe:fn.defaults(fe.Object(),e,fn.pick(fe,ee))).Array,i=e.Date,bt=e.Error,_t=e.Function,xt=e.Math,St=e.Object,jt=e.RegExp,kt=e.String,Et=e.TypeError,Tt=r.prototype,At=_t.prototype,Ot=St.prototype,It=e["__core-js_shared__"],Ct=At.toString,Rt=Ot.hasOwnProperty,Nt=0,Lt=(n=/[^.]+$/.exec(It&&It.keys&&It.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Pt=Ot.toString,Dt=Ct.call(St),zt=fe._,Bt=jt("^"+Ct.call(Rt).replace(tt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ut=de?e.Buffer:o,Mt=e.Symbol,Ft=e.Uint8Array,Wt=Ut?Ut.allocUnsafe:o,$t=rn(St.getPrototypeOf,St),Vt=St.create,qt=Ot.propertyIsEnumerable,Zt=Tt.splice,Yt=Mt?Mt.isConcatSpreadable:o,Ht=Mt?Mt.iterator:o,Gt=Mt?Mt.toStringTag:o,Qt=function(){try{var t=oo(St,"defineProperty");return t({},"",{}),t}catch(t){}}(),oe=e.clearTimeout!==fe.clearTimeout&&e.clearTimeout,ue=i&&i.now!==fe.Date.now&&i.now,ce=e.setTimeout!==fe.setTimeout&&e.setTimeout,le=xt.ceil,he=xt.floor,pe=St.getOwnPropertySymbols,ge=Ut?Ut.isBuffer:o,Pe=e.isFinite,$e=Tt.join,ln=rn(St.keys,St),hn=xt.max,dn=xt.min,pn=i.now,gn=e.parseInt,vn=xt.random,mn=Tt.reverse,yn=oo(e,"DataView"),wn=oo(e,"Map"),bn=oo(e,"Promise"),_n=oo(e,"Set"),xn=oo(e,"WeakMap"),Sn=oo(St,"create"),jn=xn&&new xn,kn={},En=Lo(yn),Tn=Lo(wn),An=Lo(bn),On=Lo(_n),In=Lo(xn),Cn=Mt?Mt.prototype:o,Rn=Cn?Cn.valueOf:o,Nn=Cn?Cn.toString:o;function Ln(t){if(Ga(t)&&!Ma(t)&&!(t instanceof Un)){if(t instanceof Bn)return t;if(Rt.call(t,"__wrapped__"))return Po(t)}return new Bn(t)}var Pn=function(t){if(!Ka(t))return{};if(Vt)return Vt(t);Dn.prototype=t;var e=new Dn;return Dn.prototype=o,e};function Dn(){}function zn(){}function Bn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function Un(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=h,this.__views__=[]}function Mn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Fn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Wn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function $n(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Wn;++e<n;)this.add(t[e])}function Vn(t){var e=this.__data__=new Fn(t);this.size=e.size}function qn(t,e){var n=Ma(t),r=!n&&Ua(t),i=!n&&!r&&Va(t),o=!n&&!r&&!i&&os(t),a=n||r||i||o,s=a?Ze(t.length,kt):[],u=s.length;for(var c in t)!e&&!Rt.call(t,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||ho(c,u))||s.push(c);return s}function Zn(t){var e=t.length;return e?t[Wr(0,e-1)]:o}function Yn(t,e){return Oo(Si(t),nr(e,0,t.length))}function Hn(t){return Oo(Si(t))}function Jn(t,e,n){(n===o||Da(t[e],n))&&(n!==o||e in t)||tr(t,e,n)}function Kn(t,e,n){var r=t[e];Rt.call(t,e)&&Da(r,n)&&(n!==o||e in t)||tr(t,e,n)}function Gn(t,e){for(var n=t.length;n--;)if(Da(t[n][0],e))return n;return-1}function Xn(t,e,n,r){return sr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function Qn(t,e){return t&&ji(e,Ts(e),t)}function tr(t,e,n){"__proto__"==e&&Qt?Qt(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function er(t,e){for(var n=-1,i=e.length,a=r(i),s=null==t;++n<i;)a[n]=s?o:xs(t,e[n]);return a}function nr(t,e,n){return t==t&&(n!==o&&(t=t<=n?t:n),e!==o&&(t=e<=t?t:e)),t}function rr(t,e,n,r,i,a){var s,u=1&e,c=2&e,f=4&e;if(n&&(s=i?n(t,r,i,a):n(t)),s!==o)return s;if(!Ka(t))return t;var l=Ma(t);if(l){if(s=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&Rt.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!u)return Si(t,s)}else{var h=uo(t),d=h==w||h==b;if(Va(t))return mi(t,u);if(h==S||h==p||d&&!i){if(s=c||d?{}:fo(t),!u)return c?function(t,e){return ji(t,so(t),e)}(t,function(t,e){return t&&ji(e,As(e),t)}(s,t)):function(t,e){return ji(t,ao(t),e)}(t,Qn(s,t))}else{if(!ie[h])return i?t:{};s=function(t,e,n){var r=t.constructor;switch(e){case I:return yi(t);case v:case m:return new r(+t);case C:return function(t,e){var n=e?yi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case R:case N:case L:case P:case D:case z:case B:case U:case M:return wi(t,n);case _:return new r;case x:case T:return new r(t);case k:return function(t){var e=new t.constructor(t.source,lt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case E:return new r;case A:return function(t){return Rn?St(Rn.call(t)):{}}(t)}}(t,h,u)}}var g=(a=a||new Vn).get(t);if(g)return g;a.set(t,s),ns(t)?t.forEach((function(r){s.add(rr(r,e,n,r,t,a))})):Xa(t)&&t.forEach((function(r,i){s.set(i,rr(r,e,n,i,t,a))}));var y=l?o:(f?c?Xi:Gi:c?As:Ts)(t);return je(y||t,(function(r,i){y&&(r=t[i=r]),Kn(s,i,rr(r,e,n,i,t,a))})),s}function ir(t,e,n){var r=n.length;if(null==t)return!r;for(t=St(t);r--;){var i=n[r],a=e[i],s=t[i];if(s===o&&!(i in t)||!a(s))return!1}return!0}function or(t,e,n){if("function"!=typeof t)throw new Et(a);return ko((function(){t.apply(o,n)}),e)}function ar(t,e,n,r){var i=-1,o=Ae,a=!0,s=t.length,u=[],c=e.length;if(!s)return u;n&&(e=Ie(e,Ye(n))),r?(o=Oe,a=!1):200<=e.length&&(o=Je,a=!1,e=new $n(e));t:for(;++i<s;){var f=t[i],l=null==n?f:n(f);if(f=r||0!==f?f:0,a&&l==l){for(var h=c;h--;)if(e[h]===l)continue t;u.push(f)}else o(e,l,r)||u.push(f)}return u}Ln.templateSettings={escape:H,evaluate:J,interpolate:K,variable:"",imports:{_:Ln}},(Ln.prototype=zn.prototype).constructor=Ln,(Bn.prototype=Pn(zn.prototype)).constructor=Bn,(Un.prototype=Pn(zn.prototype)).constructor=Un,Mn.prototype.clear=function(){this.__data__=Sn?Sn(null):{},this.size=0},Mn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Mn.prototype.get=function(t){var e=this.__data__;if(Sn){var n=e[t];return n===s?o:n}return Rt.call(e,t)?e[t]:o},Mn.prototype.has=function(t){var e=this.__data__;return Sn?e[t]!==o:Rt.call(e,t)},Mn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Sn&&e===o?s:e,this},Fn.prototype.clear=function(){this.__data__=[],this.size=0},Fn.prototype.delete=function(t){var e=this.__data__,n=Gn(e,t);return!(n<0||(n==e.length-1?e.pop():Zt.call(e,n,1),--this.size,0))},Fn.prototype.get=function(t){var e=this.__data__,n=Gn(e,t);return n<0?o:e[n][1]},Fn.prototype.has=function(t){return-1<Gn(this.__data__,t)},Fn.prototype.set=function(t,e){var n=this.__data__,r=Gn(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Wn.prototype.clear=function(){this.size=0,this.__data__={hash:new Mn,map:new(wn||Fn),string:new Mn}},Wn.prototype.delete=function(t){var e=ro(this,t).delete(t);return this.size-=e?1:0,e},Wn.prototype.get=function(t){return ro(this,t).get(t)},Wn.prototype.has=function(t){return ro(this,t).has(t)},Wn.prototype.set=function(t,e){var n=ro(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},$n.prototype.add=$n.prototype.push=function(t){return this.__data__.set(t,s),this},$n.prototype.has=function(t){return this.__data__.has(t)},Vn.prototype.clear=function(){this.__data__=new Fn,this.size=0},Vn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Vn.prototype.get=function(t){return this.__data__.get(t)},Vn.prototype.has=function(t){return this.__data__.has(t)},Vn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Fn){var r=n.__data__;if(!wn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Wn(r)}return n.set(t,e),this.size=n.size,this};var sr=Ti(gr),ur=Ti(vr,!0);function cr(t,e){var n=!0;return sr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function fr(t,e,n){for(var r=-1,i=t.length;++r<i;){var a=t[r],s=e(a);if(null!=s&&(u===o?s==s&&!is(s):n(s,u)))var u=s,c=a}return c}function lr(t,e){var n=[];return sr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function hr(t,e,n,r,i){var o=-1,a=t.length;for(n=n||lo,i=i||[];++o<a;){var s=t[o];0<e&&n(s)?1<e?hr(s,e-1,n,r,i):Ce(i,s):r||(i[i.length]=s)}return i}var dr=Ai(),pr=Ai(!0);function gr(t,e){return t&&dr(t,e,Ts)}function vr(t,e){return t&&pr(t,e,Ts)}function mr(t,e){return Te(e,(function(e){return Ya(t[e])}))}function yr(t,e){for(var n=0,r=(e=di(e,t)).length;null!=t&&n<r;)t=t[No(e[n++])];return n&&n==r?t:o}function wr(t,e,n){var r=e(t);return Ma(t)?r:Ce(r,n(t))}function br(t){return null==t?t===o?"[object Undefined]":"[object Null]":Gt&&Gt in St(t)?function(t){var e=Rt.call(t,Gt),n=t[Gt];try{t[Gt]=o;var r=!0}catch(t){}var i=Pt.call(t);return r&&(e?t[Gt]=n:delete t[Gt]),i}(t):function(t){return Pt.call(t)}(t)}function _r(t,e){return e<t}function xr(t,e){return null!=t&&Rt.call(t,e)}function Sr(t,e){return null!=t&&e in St(t)}function jr(t,e,n){for(var i=n?Oe:Ae,a=t[0].length,s=t.length,u=s,c=r(s),f=1/0,l=[];u--;){var h=t[u];u&&e&&(h=Ie(h,Ye(e))),f=dn(h.length,f),c[u]=!n&&(e||120<=a&&120<=h.length)?new $n(u&&h):o}h=t[0];var d=-1,p=c[0];t:for(;++d<a&&l.length<f;){var g=h[d],v=e?e(g):g;if(g=n||0!==g?g:0,!(p?Je(p,v):i(l,v,n))){for(u=s;--u;){var m=c[u];if(!(m?Je(m,v):i(t[u],v,n)))continue t}p&&p.push(v),l.push(g)}}return l}function kr(t,e,n){var r=null==(t=xo(t,e=di(e,t)))?t:t[No(Zo(e))];return null==r?o:xe(r,t,n)}function Er(t){return Ga(t)&&br(t)==p}function Tr(t,e,n,r,i){return t===e||(null==t||null==e||!Ga(t)&&!Ga(e)?t!=t&&e!=e:function(t,e,n,r,i,a){var s=Ma(t),u=Ma(e),c=s?g:uo(t),f=u?g:uo(e),l=(c=c==p?S:c)==S,h=(f=f==p?S:f)==S,d=c==f;if(d&&Va(t)){if(!Va(e))return!1;l=!(s=!0)}if(d&&!l)return a=a||new Vn,s||os(t)?Ji(t,e,n,r,i,a):function(t,e,n,r,i,o,a){switch(n){case C:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case I:return!(t.byteLength!=e.byteLength||!o(new Ft(t),new Ft(e)));case v:case m:case x:return Da(+t,+e);case y:return t.name==e.name&&t.message==e.message;case k:case T:return t==e+"";case _:var s=nn;case E:var u=1&r;if(s=s||an,t.size!=e.size&&!u)return!1;var c=a.get(t);if(c)return c==e;r|=2,a.set(t,e);var f=Ji(s(t),s(e),r,i,o,a);return a.delete(t),f;case A:if(Rn)return Rn.call(t)==Rn.call(e)}return!1}(t,e,c,n,r,i,a);if(!(1&n)){var w=l&&Rt.call(t,"__wrapped__"),b=h&&Rt.call(e,"__wrapped__");if(w||b)return i(w?t.value():t,b?e.value():e,n,r,a=a||new Vn)}return d&&function(t,e,n,r,i,a){var s=1&n,u=Gi(t),c=u.length;if(c!=Gi(e).length&&!s)return!1;for(var f=c;f--;){var l=u[f];if(!(s?l in e:Rt.call(e,l)))return!1}var h=a.get(t);if(h&&a.get(e))return h==e;var d=!0;a.set(t,e),a.set(e,t);for(var p=s;++f<c;){var g=t[l=u[f]],v=e[l];if(r)var m=s?r(v,g,l,e,t,a):r(g,v,l,t,e,a);if(!(m===o?g===v||i(g,v,n,r,a):m)){d=!1;break}p=p||"constructor"==l}if(d&&!p){var y=t.constructor,w=e.constructor;y!=w&&"constructor"in t&&"constructor"in e&&!("function"==typeof y&&y instanceof y&&"function"==typeof w&&w instanceof w)&&(d=!1)}return a.delete(t),a.delete(e),d}(t,e,n,r,i,a=a||new Vn)}(t,e,n,r,Tr,i))}function Ar(t,e,n,r){var i=n.length,a=i,s=!r;if(null==t)return!a;for(t=St(t);i--;){var u=n[i];if(s&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<a;){var c=(u=n[i])[0],f=t[c],l=u[1];if(s&&u[2]){if(f===o&&!(c in t))return!1}else{var h=new Vn;if(r)var d=r(f,l,c,t,e,h);if(!(d===o?Tr(l,f,3,r,h):d))return!1}}return!0}function Or(t){return!(!Ka(t)||function(t){return!!Lt&&Lt in t}(t))&&(Ya(t)?Bt:pt).test(Lo(t))}function Ir(t){return"function"==typeof t?t:null==t?Qs:"object"==typeof t?Ma(t)?Pr(t[0],t[1]):Lr(t):uu(t)}function Cr(t){if(!yo(t))return ln(t);var e=[];for(var n in St(t))Rt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Rr(t,e){return t<e}function Nr(t,e){var n=-1,i=Wa(t)?r(t.length):[];return sr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function Lr(t){var e=io(t);return 1==e.length&&e[0][2]?bo(e[0][0],e[0][1]):function(n){return n===t||Ar(n,t,e)}}function Pr(t,e){return go(t)&&wo(e)?bo(No(t),e):function(n){var r=xs(n,t);return r===o&&r===e?Ss(n,t):Tr(e,r,3)}}function Dr(t,e,n,r,i){t!==e&&dr(e,(function(a,s){if(i=i||new Vn,Ka(a))!function(t,e,n,r,i,a,s){var u=So(t,n),c=So(e,n),f=s.get(c);if(f)return Jn(t,n,f);var l=a?a(u,c,n+"",t,e,s):o,h=l===o;if(h){var d=Ma(c),p=!d&&Va(c),g=!d&&!p&&os(c);l=c,d||p||g?l=Ma(u)?u:$a(u)?Si(u):p?mi(c,!(h=!1)):g?wi(c,!(h=!1)):[]:ts(c)||Ua(c)?Ua(l=u)?l=ds(u):Ka(u)&&!Ya(u)||(l=fo(c)):h=!1}h&&(s.set(c,l),i(l,c,r,a,s),s.delete(c)),Jn(t,n,l)}(t,e,s,n,Dr,r,i);else{var u=r?r(So(t,s),a,s+"",t,e,i):o;u===o&&(u=a),Jn(t,s,u)}}),As)}function zr(t,e){var n=t.length;if(n)return ho(e+=e<0?n:0,n)?t[e]:o}function Br(t,e,n){var r=-1;return e=Ie(e.length?e:[Qs],Ye(no())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(Nr(t,(function(t,n,i){return{criteria:Ie(e,(function(e){return e(t)})),index:++r,value:t}})),(function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,a=i.length,s=n.length;++r<a;){var u=bi(i[r],o[r]);if(u)return s<=r?u:u*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)}))}function Ur(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],s=yr(t,a);n(s,a)&&Yr(o,di(a,t),s)}return o}function Mr(t,e,n,r){var i=r?Ue:Be,o=-1,a=e.length,s=t;for(t===e&&(e=Si(e)),n&&(s=Ie(t,Ye(n)));++o<a;)for(var u=0,c=e[o],f=n?n(c):c;-1<(u=i(s,f,u,r));)s!==t&&Zt.call(s,u,1),Zt.call(t,u,1);return t}function Fr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;ho(i)?Zt.call(t,i,1):oi(t,i)}}return t}function Wr(t,e){return t+he(vn()*(e-t+1))}function $r(t,e){var n="";if(!t||e<1||f<e)return n;for(;e%2&&(n+=t),(e=he(e/2))&&(t+=t),e;);return n}function Vr(t,e){return Eo(_o(t,e,Qs),t+"")}function qr(t){return Zn(Ds(t))}function Zr(t,e){var n=Ds(t);return Oo(n,nr(e,0,n.length))}function Yr(t,e,n,r){if(!Ka(t))return t;for(var i=-1,a=(e=di(e,t)).length,s=a-1,u=t;null!=u&&++i<a;){var c=No(e[i]),f=n;if(i!=s){var l=u[c];(f=r?r(l,c,u):o)===o&&(f=Ka(l)?l:ho(e[i+1])?[]:{})}Kn(u,c,f),u=u[c]}return t}var Hr=jn?function(t,e){return jn.set(t,e),t}:Qs,Jr=Qt?function(t,e){return Qt(t,"toString",{configurable:!0,enumerable:!1,value:Ks(e),writable:!0})}:Qs;function Kr(t){return Oo(Ds(t))}function Gr(t,e,n){var i=-1,o=t.length;e<0&&(e=o<-e?0:o+e),(n=o<n?o:n)<0&&(n+=o),o=n<e?0:n-e>>>0,e>>>=0;for(var a=r(o);++i<o;)a[i]=t[i+e];return a}function Xr(t,e){var n;return sr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function Qr(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!is(a)&&(n?a<=e:a<e)?r=1+o:i=o}return i}return ti(t,e,Qs,n)}function ti(t,e,n,r){e=n(e);for(var i=0,a=null==t?0:t.length,s=e!=e,u=null===e,c=is(e),f=e===o;i<a;){var l=he((i+a)/2),h=n(t[l]),d=h!==o,p=null===h,g=h==h,v=is(h);if(s)var m=r||g;else m=f?g&&(r||d):u?g&&d&&(r||!p):c?g&&d&&!p&&(r||!v):!p&&!v&&(r?h<=e:h<e);m?i=l+1:a=l}return dn(a,4294967294)}function ei(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],s=e?e(a):a;if(!n||!Da(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function ni(t){return"number"==typeof t?t:is(t)?l:+t}function ri(t){if("string"==typeof t)return t;if(Ma(t))return Ie(t,ri)+"";if(is(t))return Nn?Nn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function ii(t,e,n){var r=-1,i=Ae,o=t.length,a=!0,s=[],u=s;if(n)a=!1,i=Oe;else if(200<=o){var c=e?null:$i(t);if(c)return an(c);a=!1,i=Je,u=new $n}else u=e?[]:s;t:for(;++r<o;){var f=t[r],l=e?e(f):f;if(f=n||0!==f?f:0,a&&l==l){for(var h=u.length;h--;)if(u[h]===l)continue t;e&&u.push(l),s.push(f)}else i(u,l,n)||(u!==s&&u.push(l),s.push(f))}return s}function oi(t,e){return null==(t=xo(t,e=di(e,t)))||delete t[No(Zo(e))]}function ai(t,e,n,r){return Yr(t,e,n(yr(t,e)),r)}function si(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?Gr(t,r?0:o,r?o+1:i):Gr(t,r?o+1:0,r?i:o)}function ui(t,e){var n=t;return n instanceof Un&&(n=n.value()),Re(e,(function(t,e){return e.func.apply(e.thisArg,Ce([t],e.args))}),n)}function ci(t,e,n){var i=t.length;if(i<2)return i?ii(t[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=t[o],u=-1;++u<i;)u!=o&&(a[o]=ar(a[o]||s,t[u],e,n));return ii(hr(a,1),e,n)}function fi(t,e,n){for(var r=-1,i=t.length,a=e.length,s={};++r<i;){var u=r<a?e[r]:o;n(s,t[r],u)}return s}function li(t){return $a(t)?t:[]}function hi(t){return"function"==typeof t?t:Qs}function di(t,e){return Ma(t)?t:go(t,e)?[t]:Ro(ps(t))}var pi=Vr;function gi(t,e,n){var r=t.length;return n=n===o?r:n,!e&&r<=n?t:Gr(t,e,n)}var vi=oe||function(t){return fe.clearTimeout(t)};function mi(t,e){if(e)return t.slice();var n=t.length,r=Wt?Wt(n):new t.constructor(n);return t.copy(r),r}function yi(t){var e=new t.constructor(t.byteLength);return new Ft(e).set(new Ft(t)),e}function wi(t,e){var n=e?yi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function bi(t,e){if(t!==e){var n=t!==o,r=null===t,i=t==t,a=is(t),s=e!==o,u=null===e,c=e==e,f=is(e);if(!u&&!f&&!a&&e<t||a&&s&&c&&!u&&!f||r&&s&&c||!n&&c||!i)return 1;if(!r&&!a&&!f&&t<e||f&&n&&i&&!r&&!a||u&&n&&i||!s&&i||!c)return-1}return 0}function _i(t,e,n,i){for(var o=-1,a=t.length,s=n.length,u=-1,c=e.length,f=hn(a-s,0),l=r(c+f),h=!i;++u<c;)l[u]=e[u];for(;++o<s;)(h||o<a)&&(l[n[o]]=t[o]);for(;f--;)l[u++]=t[o++];return l}function xi(t,e,n,i){for(var o=-1,a=t.length,s=-1,u=n.length,c=-1,f=e.length,l=hn(a-u,0),h=r(l+f),d=!i;++o<l;)h[o]=t[o];for(var p=o;++c<f;)h[p+c]=e[c];for(;++s<u;)(d||o<a)&&(h[p+n[s]]=t[o++]);return h}function Si(t,e){var n=-1,i=t.length;for(e=e||r(i);++n<i;)e[n]=t[n];return e}function ji(t,e,n,r){var i=!n;n=n||{};for(var a=-1,s=e.length;++a<s;){var u=e[a],c=r?r(n[u],t[u],u,n,t):o;c===o&&(c=t[u]),i?tr(n,u,c):Kn(n,u,c)}return n}function ki(t,e){return function(n,r){var i=Ma(n)?Se:Xn,o=e?e():{};return i(n,t,no(r,2),o)}}function Ei(t){return Vr((function(e,n){var r=-1,i=n.length,a=1<i?n[i-1]:o,s=2<i?n[2]:o;for(a=3<t.length&&"function"==typeof a?(i--,a):o,s&&po(n[0],n[1],s)&&(a=i<3?o:a,i=1),e=St(e);++r<i;){var u=n[r];u&&t(e,u,r,a)}return e}))}function Ti(t,e){return function(n,r){if(null==n)return n;if(!Wa(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=St(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Ai(t){return function(e,n,r){for(var i=-1,o=St(e),a=r(e),s=a.length;s--;){var u=a[t?s:++i];if(!1===n(o[u],u,o))break}return e}}function Oi(t){return function(e){var n=en(e=ps(e))?un(e):o,r=n?n[0]:e.charAt(0),i=n?gi(n,1).join(""):e.slice(1);return r[t]()+i}}function Ii(t){return function(e){return Re(Ys(Us(e).replace(Jt,"")),t,"")}}function Ci(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Pn(t.prototype),r=t.apply(n,e);return Ka(r)?r:n}}function Ri(t){return function(e,n,r){var i=St(e);if(!Wa(e)){var a=no(n,3);e=Ts(e),n=function(t){return a(i[t],t,i)}}var s=t(e,n,r);return-1<s?i[a?e[s]:s]:o}}function Ni(t){return Ki((function(e){var n=e.length,r=n,i=Bn.prototype.thru;for(t&&e.reverse();r--;){var s=e[r];if("function"!=typeof s)throw new Et(a);if(i&&!u&&"wrapper"==to(s))var u=new Bn([],!0)}for(r=u?r:n;++r<n;){var c=to(s=e[r]),f="wrapper"==c?Qi(s):o;u=f&&vo(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?u[to(f[0])].apply(u,f[3]):1==s.length&&vo(s)?u[c]():u.thru(s)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&Ma(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function Li(t,e,n,i,a,s,u,f,l,h){var d=e&c,p=1&e,g=2&e,v=24&e,m=512&e,y=g?o:Ci(t);return function c(){for(var w=arguments.length,b=r(w),_=w;_--;)b[_]=arguments[_];if(v)var x=eo(c),S=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(b,x);if(i&&(b=_i(b,i,a,v)),s&&(b=xi(b,s,u,v)),w-=S,v&&w<h){var j=on(b,x);return Fi(t,e,Li,c.placeholder,n,b,j,f,l,h-w)}var k=p?n:this,E=g?k[t]:t;return w=b.length,f?b=function(t,e){for(var n=t.length,r=dn(e.length,n),i=Si(t);r--;){var a=e[r];t[r]=ho(a,n)?i[a]:o}return t}(b,f):m&&1<w&&b.reverse(),d&&l<w&&(b.length=l),this&&this!==fe&&this instanceof c&&(E=y||Ci(E)),E.apply(k,b)}}function Pi(t,e){return function(n,r){return function(t,e,n,r){return gr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function Di(t,e){return function(n,r){var i;if(n===o&&r===o)return e;if(n!==o&&(i=n),r!==o){if(i===o)return r;r="string"==typeof n||"string"==typeof r?(n=ri(n),ri(r)):(n=ni(n),ni(r)),i=t(n,r)}return i}}function zi(t){return Ki((function(e){return e=Ie(e,Ye(no())),Vr((function(n){var r=this;return t(e,(function(t){return xe(t,r,n)}))}))}))}function Bi(t,e){var n=(e=e===o?" ":ri(e)).length;if(n<2)return n?$r(e,t):e;var r=$r(e,le(t/sn(e)));return en(e)?gi(un(r),0,t).join(""):r.slice(0,t)}function Ui(t){return function(e,n,i){return i&&"number"!=typeof i&&po(e,n,i)&&(n=i=o),e=cs(e),n===o?(n=e,e=0):n=cs(n),function(t,e,n,i){for(var o=-1,a=hn(le((e-t)/(n||1)),0),s=r(a);a--;)s[i?a:++o]=t,t+=n;return s}(e,n,i=i===o?e<n?1:-1:cs(i),t)}}function Mi(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=hs(e),n=hs(n)),t(e,n)}}function Fi(t,e,n,r,i,a,s,u,c,f){var l=8&e;e|=l?32:64,4&(e&=~(l?64:32))||(e&=-4);var h=[t,e,i,l?a:o,l?s:o,l?o:a,l?o:s,u,c,f],d=n.apply(o,h);return vo(t)&&jo(d,h),d.placeholder=r,To(d,t,e)}function Wi(t){var e=xt[t];return function(t,n){if(t=hs(t),(n=null==n?0:dn(fs(n),292))&&Pe(t)){var r=(ps(t)+"e").split("e");return+((r=(ps(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var $i=_n&&1/an(new _n([,-0]))[1]==1/0?function(t){return new _n(t)}:iu;function Vi(t){return function(e){var n=uo(e);return n==_?nn(e):n==E?function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}(e):function(t,e){return Ie(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function qi(t,e,n,i,s,f,l,h){var d=2&e;if(!d&&"function"!=typeof t)throw new Et(a);var p=i?i.length:0;if(p||(e&=-97,i=s=o),l=l===o?l:hn(fs(l),0),h=h===o?h:fs(h),p-=s?s.length:0,64&e){var g=i,v=s;i=s=o}var m=d?o:Qi(t),y=[t,e,n,i,s,g,v,f,l,h];if(m&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<131,a=r==c&&8==n||r==c&&256==n&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(o||a){1&r&&(t[2]=e[2],i|=1&n?0:4);var s=e[3];if(s){var f=t[3];t[3]=f?_i(f,s,e[4]):s,t[4]=f?on(t[3],u):e[4]}(s=e[5])&&(f=t[5],t[5]=f?xi(f,s,e[6]):s,t[6]=f?on(t[5],u):e[6]),(s=e[7])&&(t[7]=s),r&c&&(t[8]=null==t[8]?e[8]:dn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}}(y,m),t=y[0],e=y[1],n=y[2],i=y[3],s=y[4],!(h=y[9]=y[9]===o?d?0:t.length:hn(y[9]-p,0))&&24&e&&(e&=-25),e&&1!=e)w=8==e||16==e?function(t,e,n){var i=Ci(t);return function a(){for(var s=arguments.length,u=r(s),c=s,f=eo(a);c--;)u[c]=arguments[c];var l=s<3&&u[0]!==f&&u[s-1]!==f?[]:on(u,f);return(s-=l.length)<n?Fi(t,e,Li,a.placeholder,o,u,l,o,o,n-s):xe(this&&this!==fe&&this instanceof a?i:t,this,u)}}(t,e,h):32!=e&&33!=e||s.length?Li.apply(o,y):function(t,e,n,i){var o=1&e,a=Ci(t);return function e(){for(var s=-1,u=arguments.length,c=-1,f=i.length,l=r(f+u),h=this&&this!==fe&&this instanceof e?a:t;++c<f;)l[c]=i[c];for(;u--;)l[c++]=arguments[++s];return xe(h,o?n:this,l)}}(t,e,n,i);else var w=function(t,e,n){var r=1&e,i=Ci(t);return function e(){return(this&&this!==fe&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return To((m?Hr:jo)(w,y),t,e)}function Zi(t,e,n,r){return t===o||Da(t,Ot[n])&&!Rt.call(r,n)?e:t}function Yi(t,e,n,r,i,a){return Ka(t)&&Ka(e)&&(a.set(e,t),Dr(t,e,o,Yi,a),a.delete(e)),t}function Hi(t){return ts(t)?o:t}function Ji(t,e,n,r,i,a){var s=1&n,u=t.length,c=e.length;if(u!=c&&!(s&&u<c))return!1;var f=a.get(t);if(f&&a.get(e))return f==e;var l=-1,h=!0,d=2&n?new $n:o;for(a.set(t,e),a.set(e,t);++l<u;){var p=t[l],g=e[l];if(r)var v=s?r(g,p,l,e,t,a):r(p,g,l,t,e,a);if(v!==o){if(v)continue;h=!1;break}if(d){if(!Le(e,(function(t,e){if(!Je(d,e)&&(p===t||i(p,t,n,r,a)))return d.push(e)}))){h=!1;break}}else if(p!==g&&!i(p,g,n,r,a)){h=!1;break}}return a.delete(t),a.delete(e),h}function Ki(t){return Eo(_o(t,o,Fo),t+"")}function Gi(t){return wr(t,Ts,ao)}function Xi(t){return wr(t,As,so)}var Qi=jn?function(t){return jn.get(t)}:iu;function to(t){for(var e=t.name+"",n=kn[e],r=Rt.call(kn,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function eo(t){return(Rt.call(Ln,"placeholder")?Ln:t).placeholder}function no(){var t=Ln.iteratee||tu;return t=t===tu?Ir:t,arguments.length?t(arguments[0],arguments[1]):t}function ro(t,e){var n=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?n["string"==typeof e?"string":"hash"]:n.map}function io(t){for(var e=Ts(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,wo(i)]}return e}function oo(t,e){var n=function(t,e){return null==t?o:t[e]}(t,e);return Or(n)?n:o}var ao=pe?function(t){return null==t?[]:(t=St(t),Te(pe(t),(function(e){return qt.call(t,e)})))}:lu,so=pe?function(t){for(var e=[];t;)Ce(e,ao(t)),t=$t(t);return e}:lu,uo=br;function co(t,e,n){for(var r=-1,i=(e=di(e,t)).length,o=!1;++r<i;){var a=No(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Ja(i)&&ho(a,i)&&(Ma(t)||Ua(t))}function fo(t){return"function"!=typeof t.constructor||yo(t)?{}:Pn($t(t))}function lo(t){return Ma(t)||Ua(t)||!!(Yt&&t&&t[Yt])}function ho(t,e){var n=typeof t;return!!(e=null==e?f:e)&&("number"==n||"symbol"!=n&&vt.test(t))&&-1<t&&t%1==0&&t<e}function po(t,e,n){if(!Ka(n))return!1;var r=typeof e;return!!("number"==r?Wa(n)&&ho(e,n.length):"string"==r&&e in n)&&Da(n[e],t)}function go(t,e){if(Ma(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!is(t))||X.test(t)||!G.test(t)||null!=e&&t in St(e)}function vo(t){var e=to(t),n=Ln[e];if("function"!=typeof n||!(e in Un.prototype))return!1;if(t===n)return!0;var r=Qi(n);return!!r&&t===r[0]}(yn&&uo(new yn(new ArrayBuffer(1)))!=C||wn&&uo(new wn)!=_||bn&&uo(bn.resolve())!=j||_n&&uo(new _n)!=E||xn&&uo(new xn)!=O)&&(uo=function(t){var e=br(t),n=e==S?t.constructor:o,r=n?Lo(n):"";if(r)switch(r){case En:return C;case Tn:return _;case An:return j;case On:return E;case In:return O}return e});var mo=It?Ya:hu;function yo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Ot)}function wo(t){return t==t&&!Ka(t)}function bo(t,e){return function(n){return null!=n&&n[t]===e&&(e!==o||t in St(n))}}function _o(t,e,n){return e=hn(e===o?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=hn(i.length-e,0),s=r(a);++o<a;)s[o]=i[e+o];o=-1;for(var u=r(e+1);++o<e;)u[o]=i[o];return u[e]=n(s),xe(t,this,u)}}function xo(t,e){return e.length<2?t:yr(t,Gr(e,0,-1))}function So(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var jo=Ao(Hr),ko=ce||function(t,e){return fe.setTimeout(t,e)},Eo=Ao(Jr);function To(t,e,n){var r=e+"";return Eo(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(1<n?"& ":"")+e[r],e=e.join(2<n?", ":" "),t.replace(ot,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return je(d,(function(n){var r="_."+n[0];e&n[1]&&!Ae(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(at);return e?e[1].split(st):[]}(r),n)))}function Ao(t){var e=0,n=0;return function(){var r=pn(),i=16-(r-n);if(n=r,0<i){if(800<=++e)return arguments[0]}else e=0;return t.apply(o,arguments)}}function Oo(t,e){var n=-1,r=t.length,i=r-1;for(e=e===o?r:e;++n<e;){var a=Wr(n,i),s=t[a];t[a]=t[n],t[n]=s}return t.length=e,t}var Io,Co,Ro=(Co=(Io=Ia((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(Q,(function(t,n,r,i){e.push(r?i.replace(ct,"$1"):n||t)})),e}),(function(t){return 500===Co.size&&Co.clear(),t}))).cache,Io);function No(t){if("string"==typeof t||is(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Lo(t){if(null!=t){try{return Ct.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Po(t){if(t instanceof Un)return t.clone();var e=new Bn(t.__wrapped__,t.__chain__);return e.__actions__=Si(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Do=Vr((function(t,e){return $a(t)?ar(t,hr(e,1,$a,!0)):[]})),zo=Vr((function(t,e){var n=Zo(e);return $a(n)&&(n=o),$a(t)?ar(t,hr(e,1,$a,!0),no(n,2)):[]})),Bo=Vr((function(t,e){var n=Zo(e);return $a(n)&&(n=o),$a(t)?ar(t,hr(e,1,$a,!0),o,n):[]}));function Uo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:fs(n);return i<0&&(i=hn(r+i,0)),ze(t,no(e,3),i)}function Mo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==o&&(i=fs(n),i=n<0?hn(r+i,0):dn(i,r-1)),ze(t,no(e,3),i,!0)}function Fo(t){return null!=t&&t.length?hr(t,1):[]}function Wo(t){return t&&t.length?t[0]:o}var $o=Vr((function(t){var e=Ie(t,li);return e.length&&e[0]===t[0]?jr(e):[]})),Vo=Vr((function(t){var e=Zo(t),n=Ie(t,li);return e===Zo(n)?e=o:n.pop(),n.length&&n[0]===t[0]?jr(n,no(e,2)):[]})),qo=Vr((function(t){var e=Zo(t),n=Ie(t,li);return(e="function"==typeof e?e:o)&&n.pop(),n.length&&n[0]===t[0]?jr(n,o,e):[]}));function Zo(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Yo=Vr(Ho);function Ho(t,e){return t&&t.length&&e&&e.length?Mr(t,e):t}var Jo=Ki((function(t,e){var n=null==t?0:t.length,r=er(t,e);return Fr(t,Ie(e,(function(t){return ho(t,n)?+t:t})).sort(bi)),r}));function Ko(t){return null==t?t:mn.call(t)}var Go=Vr((function(t){return ii(hr(t,1,$a,!0))})),Xo=Vr((function(t){var e=Zo(t);return $a(e)&&(e=o),ii(hr(t,1,$a,!0),no(e,2))})),Qo=Vr((function(t){var e=Zo(t);return e="function"==typeof e?e:o,ii(hr(t,1,$a,!0),o,e)}));function ta(t){if(!t||!t.length)return[];var e=0;return t=Te(t,(function(t){if($a(t))return e=hn(t.length,e),!0})),Ze(e,(function(e){return Ie(t,We(e))}))}function ea(t,e){if(!t||!t.length)return[];var n=ta(t);return null==e?n:Ie(n,(function(t){return xe(e,o,t)}))}var na=Vr((function(t,e){return $a(t)?ar(t,e):[]})),ra=Vr((function(t){return ci(Te(t,$a))})),ia=Vr((function(t){var e=Zo(t);return $a(e)&&(e=o),ci(Te(t,$a),no(e,2))})),oa=Vr((function(t){var e=Zo(t);return e="function"==typeof e?e:o,ci(Te(t,$a),o,e)})),aa=Vr(ta),sa=Vr((function(t){var e=t.length,n=1<e?t[e-1]:o;return n="function"==typeof n?(t.pop(),n):o,ea(t,n)}));function ua(t){var e=Ln(t);return e.__chain__=!0,e}function ca(t,e){return e(t)}var fa=Ki((function(t){function e(e){return er(e,t)}var n=t.length,r=n?t[0]:0,i=this.__wrapped__;return!(1<n||this.__actions__.length)&&i instanceof Un&&ho(r)?((i=i.slice(r,+r+(n?1:0))).__actions__.push({func:ca,args:[e],thisArg:o}),new Bn(i,this.__chain__).thru((function(t){return n&&!t.length&&t.push(o),t}))):this.thru(e)})),la=ki((function(t,e,n){Rt.call(t,n)?++t[n]:tr(t,n,1)})),ha=Ri(Uo),da=Ri(Mo);function pa(t,e){return(Ma(t)?je:sr)(t,no(e,3))}function ga(t,e){return(Ma(t)?ke:ur)(t,no(e,3))}var va=ki((function(t,e,n){Rt.call(t,n)?t[n].push(e):tr(t,n,[e])})),ma=Vr((function(t,e,n){var i=-1,o="function"==typeof e,a=Wa(t)?r(t.length):[];return sr(t,(function(t){a[++i]=o?xe(e,t,n):kr(t,e,n)})),a})),ya=ki((function(t,e,n){tr(t,n,e)}));function wa(t,e){return(Ma(t)?Ie:Nr)(t,no(e,3))}var ba=ki((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]})),_a=Vr((function(t,e){if(null==t)return[];var n=e.length;return 1<n&&po(t,e[0],e[1])?e=[]:2<n&&po(e[0],e[1],e[2])&&(e=[e[0]]),Br(t,hr(e,1),[])})),xa=ue||function(){return fe.Date.now()};function Sa(t,e,n){return e=n?o:e,e=t&&null==e?t.length:e,qi(t,c,o,o,o,o,e)}function ja(t,e){var n;if("function"!=typeof e)throw new Et(a);return t=fs(t),function(){return 0<--t&&(n=e.apply(this,arguments)),t<=1&&(e=o),n}}var ka=Vr((function(t,e,n){var r=1;if(n.length){var i=on(n,eo(ka));r|=32}return qi(t,r,e,n,i)})),Ea=Vr((function(t,e,n){var r=3;if(n.length){var i=on(n,eo(Ea));r|=32}return qi(e,r,t,n,i)}));function Ta(t,e,n){var r,i,s,u,c,f,l=0,h=!1,d=!1,p=!0;if("function"!=typeof t)throw new Et(a);function g(e){var n=r,a=i;return r=i=o,l=e,u=t.apply(a,n)}function v(t){var n=t-f;return f===o||e<=n||n<0||d&&s<=t-l}function m(){var t=xa();if(v(t))return y(t);c=ko(m,function(t){var n=e-(t-f);return d?dn(n,s-(t-l)):n}(t))}function y(t){return c=o,p&&r?g(t):(r=i=o,u)}function w(){var t=xa(),n=v(t);if(r=arguments,i=this,f=t,n){if(c===o)return function(t){return l=t,c=ko(m,e),h?g(t):u}(f);if(d)return vi(c),c=ko(m,e),g(f)}return c===o&&(c=ko(m,e)),u}return e=hs(e)||0,Ka(n)&&(h=!!n.leading,s=(d="maxWait"in n)?hn(hs(n.maxWait)||0,e):s,p="trailing"in n?!!n.trailing:p),w.cancel=function(){c!==o&&vi(c),l=0,r=f=i=c=o},w.flush=function(){return c===o?u:y(xa())},w}var Aa=Vr((function(t,e){return or(t,1,e)})),Oa=Vr((function(t,e,n){return or(t,hs(e)||0,n)}));function Ia(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Et(a);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(Ia.Cache||Wn),n}function Ca(t){if("function"!=typeof t)throw new Et(a);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Ia.Cache=Wn;var Ra=pi((function(t,e){var n=(e=1==e.length&&Ma(e[0])?Ie(e[0],Ye(no())):Ie(hr(e,1),Ye(no()))).length;return Vr((function(r){for(var i=-1,o=dn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return xe(t,this,r)}))})),Na=Vr((function(t,e){var n=on(e,eo(Na));return qi(t,32,o,e,n)})),La=Vr((function(t,e){var n=on(e,eo(La));return qi(t,64,o,e,n)})),Pa=Ki((function(t,e){return qi(t,256,o,o,o,e)}));function Da(t,e){return t===e||t!=t&&e!=e}var za=Mi(_r),Ba=Mi((function(t,e){return e<=t})),Ua=Er(function(){return arguments}())?Er:function(t){return Ga(t)&&Rt.call(t,"callee")&&!qt.call(t,"callee")},Ma=r.isArray,Fa=ve?Ye(ve):function(t){return Ga(t)&&br(t)==I};function Wa(t){return null!=t&&Ja(t.length)&&!Ya(t)}function $a(t){return Ga(t)&&Wa(t)}var Va=ge||hu,qa=me?Ye(me):function(t){return Ga(t)&&br(t)==m};function Za(t){if(!Ga(t))return!1;var e=br(t);return e==y||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!ts(t)}function Ya(t){if(!Ka(t))return!1;var e=br(t);return e==w||e==b||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Ha(t){return"number"==typeof t&&t==fs(t)}function Ja(t){return"number"==typeof t&&-1<t&&t%1==0&&t<=f}function Ka(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Ga(t){return null!=t&&"object"==typeof t}var Xa=ye?Ye(ye):function(t){return Ga(t)&&uo(t)==_};function Qa(t){return"number"==typeof t||Ga(t)&&br(t)==x}function ts(t){if(!Ga(t)||br(t)!=S)return!1;var e=$t(t);if(null===e)return!0;var n=Rt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Ct.call(n)==Dt}var es=we?Ye(we):function(t){return Ga(t)&&br(t)==k},ns=be?Ye(be):function(t){return Ga(t)&&uo(t)==E};function rs(t){return"string"==typeof t||!Ma(t)&&Ga(t)&&br(t)==T}function is(t){return"symbol"==typeof t||Ga(t)&&br(t)==A}var os=_e?Ye(_e):function(t){return Ga(t)&&Ja(t.length)&&!!re[br(t)]},as=Mi(Rr),ss=Mi((function(t,e){return t<=e}));function us(t){if(!t)return[];if(Wa(t))return rs(t)?un(t):Si(t);if(Ht&&t[Ht])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Ht]());var e=uo(t);return(e==_?nn:e==E?an:Ds)(t)}function cs(t){return t?(t=hs(t))!==1/0&&t!==-1/0?t==t?t:0:17976931348623157e292*(t<0?-1:1):0===t?t:0}function fs(t){var e=cs(t),n=e%1;return e==e?n?e-n:e:0}function ls(t){return t?nr(fs(t),0,h):0}function hs(t){if("number"==typeof t)return t;if(is(t))return l;if(Ka(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Ka(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(nt,"");var n=dt.test(t);return n||gt.test(t)?se(t.slice(2),n?2:8):ht.test(t)?l:+t}function ds(t){return ji(t,As(t))}function ps(t){return null==t?"":ri(t)}var gs=Ei((function(t,e){if(yo(e)||Wa(e))ji(e,Ts(e),t);else for(var n in e)Rt.call(e,n)&&Kn(t,n,e[n])})),vs=Ei((function(t,e){ji(e,As(e),t)})),ms=Ei((function(t,e,n,r){ji(e,As(e),t,r)})),ys=Ei((function(t,e,n,r){ji(e,Ts(e),t,r)})),ws=Ki(er),bs=Vr((function(t,e){t=St(t);var n=-1,r=e.length,i=2<r?e[2]:o;for(i&&po(e[0],e[1],i)&&(r=1);++n<r;)for(var a=e[n],s=As(a),u=-1,c=s.length;++u<c;){var f=s[u],l=t[f];(l===o||Da(l,Ot[f])&&!Rt.call(t,f))&&(t[f]=a[f])}return t})),_s=Vr((function(t){return t.push(o,Yi),xe(Is,o,t)}));function xs(t,e,n){var r=null==t?o:yr(t,e);return r===o?n:r}function Ss(t,e){return null!=t&&co(t,e,Sr)}var js=Pi((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Pt.call(e)),t[e]=n}),Ks(Qs)),ks=Pi((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Pt.call(e)),Rt.call(t,e)?t[e].push(n):t[e]=[n]}),no),Es=Vr(kr);function Ts(t){return Wa(t)?qn(t):Cr(t)}function As(t){return Wa(t)?qn(t,!0):function(t){if(!Ka(t))return function(t){var e=[];if(null!=t)for(var n in St(t))e.push(n);return e}(t);var e=yo(t),n=[];for(var r in t)("constructor"!=r||!e&&Rt.call(t,r))&&n.push(r);return n}(t)}var Os=Ei((function(t,e,n){Dr(t,e,n)})),Is=Ei((function(t,e,n,r){Dr(t,e,n,r)})),Cs=Ki((function(t,e){var n={};if(null==t)return n;var r=!1;e=Ie(e,(function(e){return e=di(e,t),r=r||1<e.length,e})),ji(t,Xi(t),n),r&&(n=rr(n,7,Hi));for(var i=e.length;i--;)oi(n,e[i]);return n})),Rs=Ki((function(t,e){return null==t?{}:function(t,e){return Ur(t,e,(function(e,n){return Ss(t,n)}))}(t,e)}));function Ns(t,e){if(null==t)return{};var n=Ie(Xi(t),(function(t){return[t]}));return e=no(e),Ur(t,n,(function(t,n){return e(t,n[0])}))}var Ls=Vi(Ts),Ps=Vi(As);function Ds(t){return null==t?[]:He(t,Ts(t))}var zs=Ii((function(t,e,n){return e=e.toLowerCase(),t+(n?Bs(e):e)}));function Bs(t){return Zs(ps(t).toLowerCase())}function Us(t){return(t=ps(t))&&t.replace(mt,Xe).replace(Kt,"")}var Ms=Ii((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Fs=Ii((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Ws=Oi("toLowerCase"),$s=Ii((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()})),Vs=Ii((function(t,e,n){return t+(n?" ":"")+Zs(e)})),qs=Ii((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Zs=Oi("toUpperCase");function Ys(t,e,n){return t=ps(t),(e=n?o:e)===o?function(t){return te.test(t)}(t)?function(t){return t.match(Xt)||[]}(t):function(t){return t.match(ut)||[]}(t):t.match(e)||[]}var Hs=Vr((function(t,e){try{return xe(t,o,e)}catch(t){return Za(t)?t:new bt(t)}})),Js=Ki((function(t,e){return je(e,(function(e){e=No(e),tr(t,e,ka(t[e],t))})),t}));function Ks(t){return function(){return t}}var Gs=Ni(),Xs=Ni(!0);function Qs(t){return t}function tu(t){return Ir("function"==typeof t?t:rr(t,1))}var eu=Vr((function(t,e){return function(n){return kr(n,t,e)}})),nu=Vr((function(t,e){return function(n){return kr(t,n,e)}}));function ru(t,e,n){var r=Ts(e),i=mr(e,r);null!=n||Ka(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=mr(e,Ts(e)));var o=!(Ka(n)&&"chain"in n&&!n.chain),a=Ya(t);return je(i,(function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__);return(n.__actions__=Si(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,Ce([this.value()],arguments))})})),t}function iu(){}var ou=zi(Ie),au=zi(Ee),su=zi(Le);function uu(t){return go(t)?We(No(t)):function(t){return function(e){return yr(e,t)}}(t)}var cu=Ui(),fu=Ui(!0);function lu(){return[]}function hu(){return!1}var du,pu=Di((function(t,e){return t+e}),0),gu=Wi("ceil"),vu=Di((function(t,e){return t/e}),1),mu=Wi("floor"),yu=Di((function(t,e){return t*e}),1),wu=Wi("round"),bu=Di((function(t,e){return t-e}),0);return Ln.after=function(t,e){if("function"!=typeof e)throw new Et(a);return t=fs(t),function(){if(--t<1)return e.apply(this,arguments)}},Ln.ary=Sa,Ln.assign=gs,Ln.assignIn=vs,Ln.assignInWith=ms,Ln.assignWith=ys,Ln.at=ws,Ln.before=ja,Ln.bind=ka,Ln.bindAll=Js,Ln.bindKey=Ea,Ln.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ma(t)?t:[t]},Ln.chain=ua,Ln.chunk=function(t,e,n){e=(n?po(t,e,n):e===o)?1:hn(fs(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var a=0,s=0,u=r(le(i/e));a<i;)u[s++]=Gr(t,a,a+=e);return u},Ln.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},Ln.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return Ce(Ma(n)?Si(n):[n],hr(e,1))},Ln.cond=function(t){var e=null==t?0:t.length,n=no();return t=e?Ie(t,(function(t){if("function"!=typeof t[1])throw new Et(a);return[n(t[0]),t[1]]})):[],Vr((function(n){for(var r=-1;++r<e;){var i=t[r];if(xe(i[0],this,n))return xe(i[1],this,n)}}))},Ln.conforms=function(t){return function(t){var e=Ts(t);return function(n){return ir(n,t,e)}}(rr(t,1))},Ln.constant=Ks,Ln.countBy=la,Ln.create=function(t,e){var n=Pn(t);return null==e?n:Qn(n,e)},Ln.curry=function t(e,n,r){var i=qi(e,8,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},Ln.curryRight=function t(e,n,r){var i=qi(e,16,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},Ln.debounce=Ta,Ln.defaults=bs,Ln.defaultsDeep=_s,Ln.defer=Aa,Ln.delay=Oa,Ln.difference=Do,Ln.differenceBy=zo,Ln.differenceWith=Bo,Ln.drop=function(t,e,n){var r=null==t?0:t.length;return r?Gr(t,(e=n||e===o?1:fs(e))<0?0:e,r):[]},Ln.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Gr(t,0,(e=r-(e=n||e===o?1:fs(e)))<0?0:e):[]},Ln.dropRightWhile=function(t,e){return t&&t.length?si(t,no(e,3),!0,!0):[]},Ln.dropWhile=function(t,e){return t&&t.length?si(t,no(e,3),!0):[]},Ln.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&po(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=fs(n))<0&&(n=i<-n?0:i+n),(r=r===o||i<r?i:fs(r))<0&&(r+=i),r=r<n?0:ls(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Ln.filter=function(t,e){return(Ma(t)?Te:lr)(t,no(e,3))},Ln.flatMap=function(t,e){return hr(wa(t,e),1)},Ln.flatMapDeep=function(t,e){return hr(wa(t,e),1/0)},Ln.flatMapDepth=function(t,e,n){return n=n===o?1:fs(n),hr(wa(t,e),n)},Ln.flatten=Fo,Ln.flattenDeep=function(t){return null!=t&&t.length?hr(t,1/0):[]},Ln.flattenDepth=function(t,e){return null!=t&&t.length?hr(t,e=e===o?1:fs(e)):[]},Ln.flip=function(t){return qi(t,512)},Ln.flow=Gs,Ln.flowRight=Xs,Ln.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},Ln.functions=function(t){return null==t?[]:mr(t,Ts(t))},Ln.functionsIn=function(t){return null==t?[]:mr(t,As(t))},Ln.groupBy=va,Ln.initial=function(t){return null!=t&&t.length?Gr(t,0,-1):[]},Ln.intersection=$o,Ln.intersectionBy=Vo,Ln.intersectionWith=qo,Ln.invert=js,Ln.invertBy=ks,Ln.invokeMap=ma,Ln.iteratee=tu,Ln.keyBy=ya,Ln.keys=Ts,Ln.keysIn=As,Ln.map=wa,Ln.mapKeys=function(t,e){var n={};return e=no(e,3),gr(t,(function(t,r,i){tr(n,e(t,r,i),t)})),n},Ln.mapValues=function(t,e){var n={};return e=no(e,3),gr(t,(function(t,r,i){tr(n,r,e(t,r,i))})),n},Ln.matches=function(t){return Lr(rr(t,1))},Ln.matchesProperty=function(t,e){return Pr(t,rr(e,1))},Ln.memoize=Ia,Ln.merge=Os,Ln.mergeWith=Is,Ln.method=eu,Ln.methodOf=nu,Ln.mixin=ru,Ln.negate=Ca,Ln.nthArg=function(t){return t=fs(t),Vr((function(e){return zr(e,t)}))},Ln.omit=Cs,Ln.omitBy=function(t,e){return Ns(t,Ca(no(e)))},Ln.once=function(t){return ja(2,t)},Ln.orderBy=function(t,e,n,r){return null==t?[]:(Ma(e)||(e=null==e?[]:[e]),Ma(n=r?o:n)||(n=null==n?[]:[n]),Br(t,e,n))},Ln.over=ou,Ln.overArgs=Ra,Ln.overEvery=au,Ln.overSome=su,Ln.partial=Na,Ln.partialRight=La,Ln.partition=ba,Ln.pick=Rs,Ln.pickBy=Ns,Ln.property=uu,Ln.propertyOf=function(t){return function(e){return null==t?o:yr(t,e)}},Ln.pull=Yo,Ln.pullAll=Ho,Ln.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Mr(t,e,no(n,2)):t},Ln.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Mr(t,e,o,n):t},Ln.pullAt=Jo,Ln.range=cu,Ln.rangeRight=fu,Ln.rearg=Pa,Ln.reject=function(t,e){return(Ma(t)?Te:lr)(t,Ca(no(e,3)))},Ln.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=no(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return Fr(t,i),n},Ln.rest=function(t,e){if("function"!=typeof t)throw new Et(a);return Vr(t,e=e===o?e:fs(e))},Ln.reverse=Ko,Ln.sampleSize=function(t,e,n){return e=(n?po(t,e,n):e===o)?1:fs(e),(Ma(t)?Yn:Zr)(t,e)},Ln.set=function(t,e,n){return null==t?t:Yr(t,e,n)},Ln.setWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Yr(t,e,n,r)},Ln.shuffle=function(t){return(Ma(t)?Hn:Kr)(t)},Ln.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n=n&&"number"!=typeof n&&po(t,e,n)?(e=0,r):(e=null==e?0:fs(e),n===o?r:fs(n)),Gr(t,e,n)):[]},Ln.sortBy=_a,Ln.sortedUniq=function(t){return t&&t.length?ei(t):[]},Ln.sortedUniqBy=function(t,e){return t&&t.length?ei(t,no(e,2)):[]},Ln.split=function(t,e,n){return n&&"number"!=typeof n&&po(t,e,n)&&(e=n=o),(n=n===o?h:n>>>0)?(t=ps(t))&&("string"==typeof e||null!=e&&!es(e))&&!(e=ri(e))&&en(t)?gi(un(t),0,n):t.split(e,n):[]},Ln.spread=function(t,e){if("function"!=typeof t)throw new Et(a);return e=null==e?0:hn(fs(e),0),Vr((function(n){var r=n[e],i=gi(n,0,e);return r&&Ce(i,r),xe(t,this,i)}))},Ln.tail=function(t){var e=null==t?0:t.length;return e?Gr(t,1,e):[]},Ln.take=function(t,e,n){return t&&t.length?Gr(t,0,(e=n||e===o?1:fs(e))<0?0:e):[]},Ln.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Gr(t,(e=r-(e=n||e===o?1:fs(e)))<0?0:e,r):[]},Ln.takeRightWhile=function(t,e){return t&&t.length?si(t,no(e,3),!1,!0):[]},Ln.takeWhile=function(t,e){return t&&t.length?si(t,no(e,3)):[]},Ln.tap=function(t,e){return e(t),t},Ln.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new Et(a);return Ka(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ta(t,e,{leading:r,maxWait:e,trailing:i})},Ln.thru=ca,Ln.toArray=us,Ln.toPairs=Ls,Ln.toPairsIn=Ps,Ln.toPath=function(t){return Ma(t)?Ie(t,No):is(t)?[t]:Si(Ro(ps(t)))},Ln.toPlainObject=ds,Ln.transform=function(t,e,n){var r=Ma(t),i=r||Va(t)||os(t);if(e=no(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Ka(t)&&Ya(o)?Pn($t(t)):{}}return(i?je:gr)(t,(function(t,r,i){return e(n,t,r,i)})),n},Ln.unary=function(t){return Sa(t,1)},Ln.union=Go,Ln.unionBy=Xo,Ln.unionWith=Qo,Ln.uniq=function(t){return t&&t.length?ii(t):[]},Ln.uniqBy=function(t,e){return t&&t.length?ii(t,no(e,2)):[]},Ln.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?ii(t,o,e):[]},Ln.unset=function(t,e){return null==t||oi(t,e)},Ln.unzip=ta,Ln.unzipWith=ea,Ln.update=function(t,e,n){return null==t?t:ai(t,e,hi(n))},Ln.updateWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:ai(t,e,hi(n),r)},Ln.values=Ds,Ln.valuesIn=function(t){return null==t?[]:He(t,As(t))},Ln.without=na,Ln.words=Ys,Ln.wrap=function(t,e){return Na(hi(e),t)},Ln.xor=ra,Ln.xorBy=ia,Ln.xorWith=oa,Ln.zip=aa,Ln.zipObject=function(t,e){return fi(t||[],e||[],Kn)},Ln.zipObjectDeep=function(t,e){return fi(t||[],e||[],Yr)},Ln.zipWith=sa,Ln.entries=Ls,Ln.entriesIn=Ps,Ln.extend=vs,Ln.extendWith=ms,ru(Ln,Ln),Ln.add=pu,Ln.attempt=Hs,Ln.camelCase=zs,Ln.capitalize=Bs,Ln.ceil=gu,Ln.clamp=function(t,e,n){return n===o&&(n=e,e=o),n!==o&&(n=(n=hs(n))==n?n:0),e!==o&&(e=(e=hs(e))==e?e:0),nr(hs(t),e,n)},Ln.clone=function(t){return rr(t,4)},Ln.cloneDeep=function(t){return rr(t,5)},Ln.cloneDeepWith=function(t,e){return rr(t,5,e="function"==typeof e?e:o)},Ln.cloneWith=function(t,e){return rr(t,4,e="function"==typeof e?e:o)},Ln.conformsTo=function(t,e){return null==e||ir(t,e,Ts(e))},Ln.deburr=Us,Ln.defaultTo=function(t,e){return null==t||t!=t?e:t},Ln.divide=vu,Ln.endsWith=function(t,e,n){t=ps(t),e=ri(e);var r=t.length,i=n=n===o?r:nr(fs(n),0,r);return 0<=(n-=e.length)&&t.slice(n,i)==e},Ln.eq=Da,Ln.escape=function(t){return(t=ps(t))&&Y.test(t)?t.replace(q,Qe):t},Ln.escapeRegExp=function(t){return(t=ps(t))&&et.test(t)?t.replace(tt,"\\$&"):t},Ln.every=function(t,e,n){var r=Ma(t)?Ee:cr;return n&&po(t,e,n)&&(e=o),r(t,no(e,3))},Ln.find=ha,Ln.findIndex=Uo,Ln.findKey=function(t,e){return De(t,no(e,3),gr)},Ln.findLast=da,Ln.findLastIndex=Mo,Ln.findLastKey=function(t,e){return De(t,no(e,3),vr)},Ln.floor=mu,Ln.forEach=pa,Ln.forEachRight=ga,Ln.forIn=function(t,e){return null==t?t:dr(t,no(e,3),As)},Ln.forInRight=function(t,e){return null==t?t:pr(t,no(e,3),As)},Ln.forOwn=function(t,e){return t&&gr(t,no(e,3))},Ln.forOwnRight=function(t,e){return t&&vr(t,no(e,3))},Ln.get=xs,Ln.gt=za,Ln.gte=Ba,Ln.has=function(t,e){return null!=t&&co(t,e,xr)},Ln.hasIn=Ss,Ln.head=Wo,Ln.identity=Qs,Ln.includes=function(t,e,n,r){t=Wa(t)?t:Ds(t),n=n&&!r?fs(n):0;var i=t.length;return n<0&&(n=hn(i+n,0)),rs(t)?n<=i&&-1<t.indexOf(e,n):!!i&&-1<Be(t,e,n)},Ln.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:fs(n);return i<0&&(i=hn(r+i,0)),Be(t,e,i)},Ln.inRange=function(t,e,n){return e=cs(e),n===o?(n=e,e=0):n=cs(n),function(t,e,n){return t>=dn(e,n)&&t<hn(e,n)}(t=hs(t),e,n)},Ln.invoke=Es,Ln.isArguments=Ua,Ln.isArray=Ma,Ln.isArrayBuffer=Fa,Ln.isArrayLike=Wa,Ln.isArrayLikeObject=$a,Ln.isBoolean=function(t){return!0===t||!1===t||Ga(t)&&br(t)==v},Ln.isBuffer=Va,Ln.isDate=qa,Ln.isElement=function(t){return Ga(t)&&1===t.nodeType&&!ts(t)},Ln.isEmpty=function(t){if(null==t)return!0;if(Wa(t)&&(Ma(t)||"string"==typeof t||"function"==typeof t.splice||Va(t)||os(t)||Ua(t)))return!t.length;var e=uo(t);if(e==_||e==E)return!t.size;if(yo(t))return!Cr(t).length;for(var n in t)if(Rt.call(t,n))return!1;return!0},Ln.isEqual=function(t,e){return Tr(t,e)},Ln.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:o)?n(t,e):o;return r===o?Tr(t,e,o,n):!!r},Ln.isError=Za,Ln.isFinite=function(t){return"number"==typeof t&&Pe(t)},Ln.isFunction=Ya,Ln.isInteger=Ha,Ln.isLength=Ja,Ln.isMap=Xa,Ln.isMatch=function(t,e){return t===e||Ar(t,e,io(e))},Ln.isMatchWith=function(t,e,n){return n="function"==typeof n?n:o,Ar(t,e,io(e),n)},Ln.isNaN=function(t){return Qa(t)&&t!=+t},Ln.isNative=function(t){if(mo(t))throw new bt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Or(t)},Ln.isNil=function(t){return null==t},Ln.isNull=function(t){return null===t},Ln.isNumber=Qa,Ln.isObject=Ka,Ln.isObjectLike=Ga,Ln.isPlainObject=ts,Ln.isRegExp=es,Ln.isSafeInteger=function(t){return Ha(t)&&-f<=t&&t<=f},Ln.isSet=ns,Ln.isString=rs,Ln.isSymbol=is,Ln.isTypedArray=os,Ln.isUndefined=function(t){return t===o},Ln.isWeakMap=function(t){return Ga(t)&&uo(t)==O},Ln.isWeakSet=function(t){return Ga(t)&&"[object WeakSet]"==br(t)},Ln.join=function(t,e){return null==t?"":$e.call(t,e)},Ln.kebabCase=Ms,Ln.last=Zo,Ln.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=fs(n))<0?hn(r+i,0):dn(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):ze(t,Me,i,!0)},Ln.lowerCase=Fs,Ln.lowerFirst=Ws,Ln.lt=as,Ln.lte=ss,Ln.max=function(t){return t&&t.length?fr(t,Qs,_r):o},Ln.maxBy=function(t,e){return t&&t.length?fr(t,no(e,2),_r):o},Ln.mean=function(t){return Fe(t,Qs)},Ln.meanBy=function(t,e){return Fe(t,no(e,2))},Ln.min=function(t){return t&&t.length?fr(t,Qs,Rr):o},Ln.minBy=function(t,e){return t&&t.length?fr(t,no(e,2),Rr):o},Ln.stubArray=lu,Ln.stubFalse=hu,Ln.stubObject=function(){return{}},Ln.stubString=function(){return""},Ln.stubTrue=function(){return!0},Ln.multiply=yu,Ln.nth=function(t,e){return t&&t.length?zr(t,fs(e)):o},Ln.noConflict=function(){return fe._===this&&(fe._=zt),this},Ln.noop=iu,Ln.now=xa,Ln.pad=function(t,e,n){t=ps(t);var r=(e=fs(e))?sn(t):0;if(!e||e<=r)return t;var i=(e-r)/2;return Bi(he(i),n)+t+Bi(le(i),n)},Ln.padEnd=function(t,e,n){t=ps(t);var r=(e=fs(e))?sn(t):0;return e&&r<e?t+Bi(e-r,n):t},Ln.padStart=function(t,e,n){t=ps(t);var r=(e=fs(e))?sn(t):0;return e&&r<e?Bi(e-r,n)+t:t},Ln.parseInt=function(t,e,n){return e=n||null==e?0:e&&+e,gn(ps(t).replace(rt,""),e||0)},Ln.random=function(t,e,n){if(n&&"boolean"!=typeof n&&po(t,e,n)&&(e=n=o),n===o&&("boolean"==typeof e?(n=e,e=o):"boolean"==typeof t&&(n=t,t=o)),t===o&&e===o?(t=0,e=1):(t=cs(t),e===o?(e=t,t=0):e=cs(e)),e<t){var r=t;t=e,e=r}if(n||t%1||e%1){var i=vn();return dn(t+i*(e-t+ae("1e-"+((i+"").length-1))),e)}return Wr(t,e)},Ln.reduce=function(t,e,n){var r=Ma(t)?Re:Ve,i=arguments.length<3;return r(t,no(e,4),n,i,sr)},Ln.reduceRight=function(t,e,n){var r=Ma(t)?Ne:Ve,i=arguments.length<3;return r(t,no(e,4),n,i,ur)},Ln.repeat=function(t,e,n){return e=(n?po(t,e,n):e===o)?1:fs(e),$r(ps(t),e)},Ln.replace=function(){var t=arguments,e=ps(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Ln.result=function(t,e,n){var r=-1,i=(e=di(e,t)).length;for(i||(i=1,t=o);++r<i;){var a=null==t?o:t[No(e[r])];a===o&&(r=i,a=n),t=Ya(a)?a.call(t):a}return t},Ln.round=wu,Ln.runInContext=t,Ln.sample=function(t){return(Ma(t)?Zn:qr)(t)},Ln.size=function(t){if(null==t)return 0;if(Wa(t))return rs(t)?sn(t):t.length;var e=uo(t);return e==_||e==E?t.size:Cr(t).length},Ln.snakeCase=$s,Ln.some=function(t,e,n){var r=Ma(t)?Le:Xr;return n&&po(t,e,n)&&(e=o),r(t,no(e,3))},Ln.sortedIndex=function(t,e){return Qr(t,e)},Ln.sortedIndexBy=function(t,e,n){return ti(t,e,no(n,2))},Ln.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Qr(t,e);if(r<n&&Da(t[r],e))return r}return-1},Ln.sortedLastIndex=function(t,e){return Qr(t,e,!0)},Ln.sortedLastIndexBy=function(t,e,n){return ti(t,e,no(n,2),!0)},Ln.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=Qr(t,e,!0)-1;if(Da(t[n],e))return n}return-1},Ln.startCase=Vs,Ln.startsWith=function(t,e,n){return t=ps(t),n=null==n?0:nr(fs(n),0,t.length),e=ri(e),t.slice(n,n+e.length)==e},Ln.subtract=bu,Ln.sum=function(t){return t&&t.length?qe(t,Qs):0},Ln.sumBy=function(t,e){return t&&t.length?qe(t,no(e,2)):0},Ln.template=function(t,e,n){var r=Ln.templateSettings;n&&po(t,e,n)&&(e=o),t=ps(t),e=ms({},e,r,Zi);var i,a,s=ms({},e.imports,r.imports,Zi),u=Ts(s),c=He(s,u),f=0,l=e.interpolate||yt,h="__p += '",d=jt((e.escape||yt).source+"|"+l.source+"|"+(l===K?ft:yt).source+"|"+(e.evaluate||yt).source+"|$","g"),p="//# sourceURL="+(Rt.call(e,"sourceURL")?(e.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++ne+"]")+"\n";t.replace(d,(function(e,n,r,o,s,u){return r=r||o,h+=t.slice(f,u).replace(wt,tn),n&&(i=!0,h+="' +\n__e("+n+") +\n'"),s&&(a=!0,h+="';\n"+s+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),f=u+e.length,e})),h+="';\n";var g=Rt.call(e,"variable")&&e.variable;g||(h="with (obj) {\n"+h+"\n}\n"),h=(a?h.replace(F,""):h).replace(W,"$1").replace($,"$1;"),h="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var v=Hs((function(){return _t(u,p+"return "+h).apply(o,c)}));if(v.source=h,Za(v))throw v;return v},Ln.times=function(t,e){if((t=fs(t))<1||f<t)return[];var n=h,r=dn(t,h);e=no(e),t-=h;for(var i=Ze(r,e);++n<t;)e(n);return i},Ln.toFinite=cs,Ln.toInteger=fs,Ln.toLength=ls,Ln.toLower=function(t){return ps(t).toLowerCase()},Ln.toNumber=hs,Ln.toSafeInteger=function(t){return t?nr(fs(t),-f,f):0===t?t:0},Ln.toString=ps,Ln.toUpper=function(t){return ps(t).toUpperCase()},Ln.trim=function(t,e,n){if((t=ps(t))&&(n||e===o))return t.replace(nt,"");if(!t||!(e=ri(e)))return t;var r=un(t),i=un(e);return gi(r,Ke(r,i),Ge(r,i)+1).join("")},Ln.trimEnd=function(t,e,n){if((t=ps(t))&&(n||e===o))return t.replace(it,"");if(!t||!(e=ri(e)))return t;var r=un(t);return gi(r,0,Ge(r,un(e))+1).join("")},Ln.trimStart=function(t,e,n){if((t=ps(t))&&(n||e===o))return t.replace(rt,"");if(!t||!(e=ri(e)))return t;var r=un(t);return gi(r,Ke(r,un(e))).join("")},Ln.truncate=function(t,e){var n=30,r="...";if(Ka(e)){var i="separator"in e?e.separator:i;n="length"in e?fs(e.length):n,r="omission"in e?ri(e.omission):r}var a=(t=ps(t)).length;if(en(t)){var s=un(t);a=s.length}if(a<=n)return t;var u=n-sn(r);if(u<1)return r;var c=s?gi(s,0,u).join(""):t.slice(0,u);if(i===o)return c+r;if(s&&(u+=c.length-u),es(i)){if(t.slice(u).search(i)){var f,l=c;for(i.global||(i=jt(i.source,ps(lt.exec(i))+"g")),i.lastIndex=0;f=i.exec(l);)var h=f.index;c=c.slice(0,h===o?u:h)}}else if(t.indexOf(ri(i),u)!=u){var d=c.lastIndexOf(i);-1<d&&(c=c.slice(0,d))}return c+r},Ln.unescape=function(t){return(t=ps(t))&&Z.test(t)?t.replace(V,cn):t},Ln.uniqueId=function(t){var e=++Nt;return ps(t)+e},Ln.upperCase=qs,Ln.upperFirst=Zs,Ln.each=pa,Ln.eachRight=ga,Ln.first=Wo,ru(Ln,(du={},gr(Ln,(function(t,e){Rt.call(Ln.prototype,e)||(du[e]=t)})),du),{chain:!1}),Ln.VERSION="4.17.15",je(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ln[t].placeholder=Ln})),je(["drop","take"],(function(t,e){Un.prototype[t]=function(n){n=n===o?1:hn(fs(n),0);var r=this.__filtered__&&!e?new Un(this):this.clone();return r.__filtered__?r.__takeCount__=dn(n,r.__takeCount__):r.__views__.push({size:dn(n,h),type:t+(r.__dir__<0?"Right":"")}),r},Un.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),je(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Un.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:no(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),je(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Un.prototype[t]=function(){return this[n](1).value()[0]}})),je(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Un.prototype[t]=function(){return this.__filtered__?new Un(this):this[n](1)}})),Un.prototype.compact=function(){return this.filter(Qs)},Un.prototype.find=function(t){return this.filter(t).head()},Un.prototype.findLast=function(t){return this.reverse().find(t)},Un.prototype.invokeMap=Vr((function(t,e){return"function"==typeof t?new Un(this):this.map((function(n){return kr(n,t,e)}))})),Un.prototype.reject=function(t){return this.filter(Ca(no(t)))},Un.prototype.slice=function(t,e){t=fs(t);var n=this;return n.__filtered__&&(0<t||e<0)?new Un(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==o&&(n=(e=fs(e))<0?n.dropRight(-e):n.take(e-t)),n)},Un.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Un.prototype.toArray=function(){return this.take(h)},gr(Un.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=Ln[r?"take"+("last"==e?"Right":""):e],a=r||/^find/.test(e);i&&(Ln.prototype[e]=function(){function e(t){var e=i.apply(Ln,Ce([t],u));return r&&h?e[0]:e}var s=this.__wrapped__,u=r?[1]:arguments,c=s instanceof Un,f=u[0],l=c||Ma(s);l&&n&&"function"==typeof f&&1!=f.length&&(c=l=!1);var h=this.__chain__,d=!!this.__actions__.length,p=a&&!h,g=c&&!d;if(a||!l)return p&&g?t.apply(this,u):(v=this.thru(e),p?r?v.value()[0]:v.value():v);s=g?s:new Un(this);var v=t.apply(s,u);return v.__actions__.push({func:ca,args:[e],thisArg:o}),new Bn(v,h)})})),je(["pop","push","shift","sort","splice","unshift"],(function(t){var e=Tt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Ln.prototype[t]=function(){var t=arguments;if(!r||this.__chain__)return this[n]((function(n){return e.apply(Ma(n)?n:[],t)}));var i=this.value();return e.apply(Ma(i)?i:[],t)}})),gr(Un.prototype,(function(t,e){var n=Ln[e];if(n){var r=n.name+"";Rt.call(kn,r)||(kn[r]=[]),kn[r].push({name:e,func:n})}})),kn[Li(o,2).name]=[{name:"wrapper",func:o}],Un.prototype.clone=function(){var t=new Un(this.__wrapped__);return t.__actions__=Si(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Si(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Si(this.__views__),t},Un.prototype.reverse=function(){if(this.__filtered__){var t=new Un(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Un.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Ma(t),r=e<0,i=n?t.length:0,o=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=dn(e,t+a);break;case"takeRight":t=hn(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,s=o.end,u=s-a,c=r?s:a-1,f=this.__iteratees__,l=f.length,h=0,d=dn(u,this.__takeCount__);if(!n||!r&&i==u&&d==u)return ui(t,this.__actions__);var p=[];t:for(;u--&&h<d;){for(var g=-1,v=t[c+=e];++g<l;){var m=f[g],y=m.iteratee,w=m.type,b=y(v);if(2==w)v=b;else if(!b){if(1==w)continue t;break t}}p[h++]=v}return p},Ln.prototype.at=fa,Ln.prototype.chain=function(){return ua(this)},Ln.prototype.commit=function(){return new Bn(this.value(),this.__chain__)},Ln.prototype.next=function(){this.__values__===o&&(this.__values__=us(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},Ln.prototype.plant=function(t){for(var e,n=this;n instanceof zn;){var r=Po(n);r.__index__=0,r.__values__=o,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},Ln.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Un){var e=t;return this.__actions__.length&&(e=new Un(this)),(e=e.reverse()).__actions__.push({func:ca,args:[Ko],thisArg:o}),new Bn(e,this.__chain__)}return this.thru(Ko)},Ln.prototype.toJSON=Ln.prototype.valueOf=Ln.prototype.value=function(){return ui(this.__wrapped__,this.__actions__)},Ln.prototype.first=Ln.prototype.head,Ht&&(Ln.prototype[Ht]=function(){return this}),Ln}();fe._=fn,(i=function(){return fn}.call(e,n,e,r))===o||(r.exports=i)}).call(this)}).call(this,n(19),n(174)(t))},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=n(15);function i(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var o;if(n)o=n(e);else if(r.isURLSearchParams(e))o=e.toString();else{var a=[];r.forEach(e,(function(t,e){null!=t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),a.push(i(e)+"="+i(t))})))})),o=a.join("&")}if(o){var s=t.indexOf("#");-1!==s&&(t=t.slice(0,s)),t+=(-1===t.indexOf("?")?"?":"&")+o}return t}},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";(function(e){var r=n(15),i=n(181),o={"Content-Type":"application/x-www-form-urlencoded"};function a(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var s,u={adapter:(void 0!==e&&"[object process]"===Object.prototype.toString.call(e)?s=n(115):"undefined"!=typeof XMLHttpRequest&&(s=n(115)),s),transformRequest:[function(t,e){return i(e,"Accept"),i(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(a(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(a(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return 200<=t&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(t){u.headers[t]={}})),r.forEach(["post","put","patch"],(function(t){u.headers[t]=r.merge(o)})),t.exports=u}).call(this,n(42))},function(t,e,n){"use strict";var r=n(15),i=n(182),o=n(112),a=n(184),s=n(185),u=n(116);t.exports=function(t){return new Promise((function(e,c){var f=t.data,l=t.headers;r.isFormData(f)&&delete l["Content-Type"];var h=new XMLHttpRequest;if(t.auth){var d=t.auth.username||"",p=t.auth.password||"";l.Authorization="Basic "+btoa(d+":"+p)}if(h.open(t.method.toUpperCase(),o(t.url,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:n,config:t,request:h};i(e,c,r),h=null}},h.onabort=function(){h&&(c(u("Request aborted",t,"ECONNABORTED",h)),h=null)},h.onerror=function(){c(u("Network Error",t,null,h)),h=null},h.ontimeout=function(){c(u("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var g=n(186),v=(t.withCredentials||s(t.url))&&t.xsrfCookieName?g.read(t.xsrfCookieName):void 0;v&&(l[t.xsrfHeaderName]=v)}if("setRequestHeader"in h&&r.forEach(l,(function(t,e){void 0===f&&"content-type"===e.toLowerCase()?delete l[e]:h.setRequestHeader(e,t)})),t.withCredentials&&(h.withCredentials=!0),t.responseType)try{h.responseType=t.responseType}catch(d){if("json"!==t.responseType)throw d}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){h&&(h.abort(),c(t),h=null)})),void 0===f&&(f=null),h.send(f)}))}},function(t,e,n){"use strict";var r=n(183);t.exports=function(t,e,n,i,o){var a=new Error(t);return r(a,e,n,i,o)}},function(t,e,n){"use strict";var r=n(15);t.exports=function(t,e){e=e||{};var n={};return r.forEach(["url","method","params","data"],(function(t){void 0!==e[t]&&(n[t]=e[t])})),r.forEach(["headers","auth","proxy"],(function(i){r.isObject(e[i])?n[i]=r.deepMerge(t[i],e[i]):void 0!==e[i]?n[i]=e[i]:r.isObject(t[i])?n[i]=r.deepMerge(t[i]):void 0!==t[i]&&(n[i]=t[i])})),r.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],(function(r){void 0!==e[r]?n[r]=e[r]:void 0!==t[r]&&(n[r]=t[r])})),n}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e,n){"use strict";function r(t,e){var n=et[t]=_(H[$]);return q(n,{type:W,tag:t,description:e}),f||(n.description=e),n}function i(t,e){v(t);var n=y(e),r=x(n).concat(ht(n));return M(r,(function(e){f&&!lt.call(n,e)||ft(t,e,n[e])})),t}function o(t,e){var n=y(t),r=w(e,!0);if(n!==Y||!d(et,r)||d(nt,r)){var i=G(n,r);return!i||!d(et,r)||d(n,F)&&n[F][r]||(i.enumerable=!0),i}}function a(t){var e=Q(y(t)),n=[];return M(e,(function(t){d(et,t)||d(N,t)||n.push(t)})),n}var s=n(5),u=n(1),c=n(37),f=n(9),l=n(91),h=n(4),d=n(11),p=n(47),g=n(8),v=n(7),m=n(26),y=n(17),w=n(36),b=n(35),_=n(94),x=n(69),S=n(46),j=n(193),k=n(66),E=n(30),T=n(16),A=n(62),O=n(12),I=n(20),C=n(31),R=n(44),N=n(41),L=n(58),P=n(2),D=n(121),z=n(122),B=n(70),U=n(38),M=n(48).forEach,F=R("hidden"),W="Symbol",$="prototype",V=P("toPrimitive"),q=U.set,Z=U.getterFor(W),Y=Object[$],H=u.Symbol,J=u.JSON,K=J&&J.stringify,G=E.f,X=T.f,Q=j.f,tt=A.f,et=C("symbols"),nt=C("op-symbols"),rt=C("string-to-symbol-registry"),it=C("symbol-to-string-registry"),ot=C("wks"),at=u.QObject,st=!at||!at[$]||!at[$].findChild,ut=f&&h((function(){return 7!=_(X({},"a",{get:function(){return X(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=G(Y,e);r&&delete Y[e],X(t,e,n),r&&t!==Y&&X(Y,e,r)}:X,ct=l&&"symbol"==typeof H.iterator?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof H},ft=function(t,e,n){t===Y&&ft(nt,e,n),v(t);var r=w(e,!0);return v(n),d(et,r)?(n.enumerable?(d(t,F)&&t[F][r]&&(t[F][r]=!1),n=_(n,{enumerable:b(0,!1)})):(d(t,F)||X(t,F,b(1,{})),t[F][r]=!0),ut(t,r,n)):X(t,r,n)},lt=function(t){var e=w(t,!0),n=tt.call(this,e);return!(this===Y&&d(et,e)&&!d(nt,e))&&(!(n||!d(this,e)||!d(et,e)||d(this,F)&&this[F][e])||n)},ht=function(t){var e=t===Y,n=Q(e?nt:y(t)),r=[];return M(n,(function(t){!d(et,t)||e&&!d(Y,t)||r.push(et[t])})),r};l||(I((H=function(t){if(this instanceof H)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==t?String(t):void 0,n=L(e),i=function(t){this===Y&&i.call(nt,t),d(this,F)&&d(this[F],n)&&(this[F][n]=!1),ut(this,n,b(1,t))};return f&&st&&ut(Y,n,{configurable:!0,set:i}),r(n,e)})[$],"toString",(function(){return Z(this).tag})),A.f=lt,T.f=ft,E.f=o,S.f=j.f=a,k.f=ht,f&&(X(H[$],"description",{configurable:!0,get:function(){return Z(this).description}}),c||I(Y,"propertyIsEnumerable",lt,{unsafe:!0})),D.f=function(t){return r(P(t),t)}),s({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:H}),M(x(ot),(function(t){z(t)})),s({target:W,stat:!0,forced:!l},{for:function(t){var e=String(t);if(d(rt,e))return rt[e];var n=H(e);return rt[e]=n,it[n]=e,n},keyFor:function(t){if(!ct(t))throw TypeError(t+" is not a symbol");if(d(it,t))return it[t]},useSetter:function(){st=!0},useSimple:function(){st=!1}}),s({target:"Object",stat:!0,forced:!l,sham:!f},{create:function(t,e){return void 0===e?_(t):i(_(t),e)},defineProperty:ft,defineProperties:i,getOwnPropertyDescriptor:o}),s({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:a,getOwnPropertySymbols:ht}),s({target:"Object",stat:!0,forced:h((function(){k.f(1)}))},{getOwnPropertySymbols:function(t){return k.f(m(t))}}),J&&s({target:"JSON",stat:!0,forced:!l||h((function(){var t=H();return"[null]"!=K([t])||"{}"!=K({a:t})||"{}"!=K(Object(t))}))},{stringify:function(t){for(var e,n,r=[t],i=1;i<arguments.length;)r.push(arguments[i++]);if(n=e=r[1],(g(e)||void 0!==t)&&!ct(t))return p(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!ct(e))return e}),r[1]=e,K.apply(J,r)}}),H[$][V]||O(H[$],V,H[$].valueOf),B(H,W),N[F]=!0},function(t,e,n){var r=n(45);t.exports=r("document","documentElement")},function(t,e,n){e.f=n(2)},function(t,e,n){var r=n(64),i=n(11),o=n(121),a=n(16).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});i(e,t)||a(e,t,{value:o.f(t)})}},function(t,e,n){var r=n(7),i=n(200);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(n){}return function(n,o){return r(n),i(o),e?t.call(n,o):n.__proto__=o,n}}():void 0)},function(t,e,n){var r=n(8),i=n(25),o=n(2)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e,n){"use strict";var r=n(45),i=n(16),o=n(2),a=n(9),s=o("species");t.exports=function(t){var e=r(t),n=i.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},function(t,e,n){"use strict";var r=n(20),i=n(7),o=n(4),a=n(95),s="toString",u=RegExp.prototype,c=u[s],f=o((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),l=c.name!=s;(f||l)&&r(RegExp.prototype,s,(function(){var t=i(this),e=String(t.source),n=t.flags;return"/"+e+"/"+String(void 0===n&&t instanceof RegExp&&!("flags"in u)?a.call(t):n)}),{unsafe:!0})},function(t,e,n){function r(t){return function(e,n){var r,a,s=String(o(e)),u=i(n),c=s.length;return u<0||c<=u?t?"":void 0:(r=s.charCodeAt(u))<55296||56319<r||u+1===c||(a=s.charCodeAt(u+1))<56320||57343<a?t?s.charAt(u):r:t?s.slice(u,u+2):a-56320+(r-55296<<10)+65536}}var i=n(32),o=n(24);t.exports={codeAt:r(!1),charAt:r(!0)}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(207)},function(t,e,n){"use strict";(function(e,r){var i=n(74);t.exports=w;var o,a=n(128);function s(t,e){return t.listeners(e).length}w.ReadableState=y,n(97).EventEmitter;var u=n(131),c=n(75).Buffer,f=e.Uint8Array||function(){},l=n(52);l.inherits=n(40);var h=n(208),d=void 0;d=h&&h.debuglog?h.debuglog("stream"):function(){};var p,g=n(209),v=n(132);l.inherits(w,u);var m=["error","close","destroy","pause","resume"];function y(t,e){t=t||{};var r=e instanceof(o=o||n(33));this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,a=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p=p||n(134).StringDecoder,this.decoder=new p(t.encoding),this.encoding=t.encoding)}function w(t){if(o=o||n(33),!(this instanceof w))return new w(t);this._readableState=new y(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function b(t,e,n,r,i){var o,a=t._readableState;return null===e?(a.reading=!1,function(t,e){if(!e.ended){if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,j(t)}}(t,a)):(i||(o=function(t,e){var n;return function(t){return c.isBuffer(t)||t instanceof f}(e)||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk")),n}(a,e)),o?t.emit("error",o):a.objectMode||e&&0<e.length?("string"==typeof e||a.objectMode||Object.getPrototypeOf(e)===c.prototype||(e=function(t){return c.from(t)}(e)),r?a.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):_(t,a,e,!0):a.ended?t.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(e=a.decoder.write(e),a.objectMode||0!==e.length?_(t,a,e,!1):E(t,a)):_(t,a,e,!1))):r||(a.reading=!1)),function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(a)}function _(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&j(t)),E(t,e)}Object.defineProperty(w.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),w.prototype.destroy=v.destroy,w.prototype._undestroy=v.undestroy,w.prototype._destroy=function(t,e){this.push(null),e(t)},w.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=c.from(t,e),e=""),n=!0),b(this,t,e,!1,n)},w.prototype.unshift=function(t){return b(this,t,null,!0,!1)},w.prototype.isPaused=function(){return!1===this._readableState.flowing},w.prototype.setEncoding=function(t){return p=p||n(134).StringDecoder,this._readableState.decoder=new p(t),this._readableState.encoding=t,this};var x=8388608;function S(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return x<=t?t=x:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function j(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(d("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(k,t):k(t))}function k(t){d("emit readable"),t.emit("readable"),I(t)}function E(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(T,t,e))}function T(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(d("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function A(t){d("readable nexttick read 0"),t.read(0)}function O(t,e){e.reading||(d("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),I(t),e.flowing&&!e.reading&&t.read(0)}function I(t){var e=t._readableState;for(d("flow",e.flowing);e.flowing&&null!==t.read(););}function C(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;return t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;for(t-=i.length;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0==(t-=a)){a===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n).data=o.slice(a);break}++r}return e.length-=r,i}(t,e):function(t,e){var n=c.allocUnsafe(t),r=e.head,i=1;for(r.data.copy(n),t-=r.data.length;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,a),0==(t-=a)){a===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r).data=o.slice(a);break}++i}return e.length-=i,n}(t,e),r}(t,e.buffer,e.decoder),n);var n}function R(t){var e=t._readableState;if(0<e.length)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(N,e,t))}function N(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function L(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}w.prototype.read=function(t){d("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return d("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?R(this):j(this),null;if(0===(t=S(t,e))&&e.ended)return 0===e.length&&R(this),null;var r,i=e.needReadable;return d("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&d("length less than watermark",i=!0),e.ended||e.reading?d("reading or ended",i=!1):i&&(d("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=S(n,e))),null===(r=0<t?C(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&R(this)),null!==r&&this.emit("data",r),r},w.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},w.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,e);var u=e&&!1===e.end||t===r.stdout||t===r.stderr?y:c;function c(){d("onend"),t.end()}o.endEmitted?i.nextTick(u):n.once("end",u),t.on("unpipe",(function e(r,i){d("onunpipe"),r===n&&i&&!1===i.hasUnpiped&&(i.hasUnpiped=!0,d("cleanup"),t.removeListener("close",v),t.removeListener("finish",m),t.removeListener("drain",f),t.removeListener("error",g),t.removeListener("unpipe",e),n.removeListener("end",c),n.removeListener("end",y),n.removeListener("data",p),l=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||f())}));var f=function(t){return function(){var e=t._readableState;d("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,I(t))}}(n);t.on("drain",f);var l=!1,h=!1;function p(e){d("ondata"),(h=!1)!==t.write(e)||h||((1===o.pipesCount&&o.pipes===t||1<o.pipesCount&&-1!==L(o.pipes,t))&&!l&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,h=!0),n.pause())}function g(e){d("onerror",e),y(),t.removeListener("error",g),0===s(t,"error")&&t.emit("error",e)}function v(){t.removeListener("finish",m),y()}function m(){d("onfinish"),t.removeListener("close",v),y()}function y(){d("unpipe"),n.unpipe(t)}return n.on("data",p),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?a(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",g),t.once("close",v),t.once("finish",m),t.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),t},w.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t=t||e.pipes,e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n)),this;if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var a=L(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n)),this},w.prototype.addListener=w.prototype.on=function(t,e){var n=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&j(this):i.nextTick(A,this))}return n},w.prototype.resume=function(){var t=this._readableState;return t.flowing||(d("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(O,t,e))}(this,t)),this},w.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},w.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",(function(){if(d("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i||(n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<m.length;o++)t.on(m[o],this.emit.bind(this,m[o]));return this._read=function(e){d("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(w.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),w._fromList=C}).call(this,n(19),n(42))},function(t,e,n){t.exports=n(97).EventEmitter},function(t,e,n){"use strict";var r=n(74);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}))),this},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;0<=e&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(211),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(19))},function(t,e,n){"use strict";var r=n(75).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=f,this.end=l,e=3;break;default:return this.write=h,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,n=function(t,e){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(1<t.lastNeed&&1<e.length){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(2<t.lastNeed&&2<e.length&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2!=0)return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1);var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(55296<=r&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function f(t,e){var n=(t.length-e)%3;return 0==n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1==n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function l(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function h(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}(e.StringDecoder=o).prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=a(e[r]);return 0<=i?(0<i&&(t.lastNeed=i-1),i):--r<n||-2===i?0:0<=(i=a(e[r]))?(0<i&&(t.lastNeed=i-2),i):--r<n||-2===i?0:0<=(i=a(e[r]))?(0<i&&(2===i?i=0:t.lastNeed=i-3),i):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){"use strict";t.exports=o;var r=n(33),i=n(52);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t),this._transformState={afterTransform:function(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,(n.writecb=null)!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",a)}function a(){var t=this;"function"==typeof this._flush?this._flush((function(e,n){s(t,e,n)})):s(this,null,null)}function s(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(40),i.inherits(o,r),o.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},o.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},o.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},o.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,(function(t){e(t),n.emit("close")}))}},function(t,e,n){"use strict";var r=n(3),i=n(27),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";e.encode=function(t){for(var e,n,i,a,s,u,c,f=[],l=0,h=t.length,d=h,p="string"!==r.getTypeOf(t);l<t.length;)d=h-l,i=p?(e=t[l++],n=l<h?t[l++]:0,l<h?t[l++]:0):(e=t.charCodeAt(l++),n=l<h?t.charCodeAt(l++):0,l<h?t.charCodeAt(l++):0),a=e>>2,s=(3&e)<<4|n>>4,u=1<d?(15&n)<<2|i>>6:64,c=2<d?63&i:64,f.push(o.charAt(a)+o.charAt(s)+o.charAt(u)+o.charAt(c));return f.join("")},e.decode=function(t){var e,n,r,a,s,u,c=0,f=0;if("data:"===t.substr(0,"data:".length))throw new Error("Invalid base64 input, it looks like a data url.");var l,h=3*(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(t.charAt(t.length-1)===o.charAt(64)&&h--,t.charAt(t.length-2)===o.charAt(64)&&h--,h%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=i.uint8array?new Uint8Array(0|h):new Array(0|h);c<t.length;)e=o.indexOf(t.charAt(c++))<<2|(a=o.indexOf(t.charAt(c++)))>>4,n=(15&a)<<4|(s=o.indexOf(t.charAt(c++)))>>2,r=(3&s)<<6|(u=o.indexOf(t.charAt(c++))),l[f++]=e,64!==s&&(l[f++]=n),64!==u&&(l[f++]=r);return l}},function(t,e,n){"use strict";(function(e){var r=n(3),i=n(221),o=n(18),a=n(136),s=n(27),u=n(53),c=null;if(s.nodestream)try{c=n(222)}catch(s){}function f(t,e,n){var a=e;switch(e){case"blob":case"arraybuffer":a="uint8array";break;case"base64":a="string"}try{this._internalType=a,this._outputType=e,this._mimeType=n,r.checkSupport(a),this._worker=t.pipe(new i(a)),t.lock()}catch(t){this._worker=new o("error"),this._worker.error(t)}}f.prototype={accumulate:function(t){return function(t,n){return new u.Promise((function(i,o){var s=[],u=t._internalType,c=t._outputType,f=t._mimeType;t.on("data",(function(t,e){s.push(t),n&&n(e)})).on("error",(function(t){s=[],o(t)})).on("end",(function(){try{var t=function(t,e,n){switch(t){case"blob":return r.newBlob(r.transformTo("arraybuffer",e),n);case"base64":return a.encode(e);default:return r.transformTo(t,e)}}(c,function(t,n){var r,i=0,o=null,a=0;for(r=0;r<n.length;r++)a+=n[r].length;switch(t){case"string":return n.join("");case"array":return Array.prototype.concat.apply([],n);case"uint8array":for(o=new Uint8Array(a),r=0;r<n.length;r++)o.set(n[r],i),i+=n[r].length;return o;case"nodebuffer":return e.concat(n);default:throw new Error("concat : unsupported type '"+t+"'")}}(u,s),f);i(t)}catch(t){o(t)}s=[]})).resume()}))}(this,t)},on:function(t,e){var n=this;return"data"===t?this._worker.on(t,(function(t){e.call(n,t.data,t.meta)})):this._worker.on(t,(function(){r.delay(e,arguments,n)})),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(r.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new c(this,{objectMode:"nodebuffer"!==this._outputType},t)}},t.exports=f}).call(this,n(51).Buffer)},function(t,e,n){"use strict";e.base64=!1,e.binary=!1,e.dir=!1,e.createFolders=!0,e.date=null,e.compression=null,e.compressionOptions=null,e.comment=null,e.unixPermissions=null,e.dosPermissions=null},function(t,e,n){"use strict";var r=n(3),i=n(18);function o(t){i.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then((function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=r.getTypeOf(t),e.isPaused||e._tickAndRepeat()}),(function(t){e.error(t)}))}r.inherits(o,i),o.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=o},function(t,e,n){"use strict";var r=n(3),i=n(18);function o(t){i.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0)}r.inherits(o,i),o.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}i.prototype.processChunk.call(this,t)},t.exports=o},function(t,e,n){"use strict";var r=n(18),i=n(101);function o(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}n(3).inherits(o,r),o.prototype.processChunk=function(t){this.streamInfo.crc32=i(t.data,this.streamInfo.crc32||0),this.push(t)},t.exports=o},function(t,e,n){"use strict";var r=n(18);e.STORE={magic:"\0\0",compressWorker:function(t){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},e.DEFLATE=n(225)},function(t,e,n){"use strict";t.exports=function(t,e,n,r){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==n;){for(n-=a=2e3<n?2e3:n;o=o+(i=i+e[r++]|0)|0,--a;);i%=65521,o%=65521}return i|o<<16|0}},function(t,e,n){"use strict";var r=function(){for(var t,e=[],n=0;n<256;n++){t=n;for(var r=0;r<8;r++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e}();t.exports=function(t,e,n,i){var o=r,a=i+n;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}},function(t,e,n){"use strict";var r=n(28),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var a=new r.Buf8(256),s=0;s<256;s++)a[s]=252<=s?6:248<=s?5:240<=s?4:224<=s?3:192<=s?2:1;function u(t,e){if(e<65534&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,r.shrinkBuf(t,e));for(var n="",a=0;a<e;a++)n+=String.fromCharCode(t[a]);return n}a[254]=a[254]=1,e.string2buf=function(t){var e,n,i,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),u+=n<128?1:n<2048?2:n<65536?3:4;for(e=new r.Buf8(u),o=a=0;a<u;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),n<128?e[a++]=n:(n<2048?e[a++]=192|n>>>6:(n<65536?e[a++]=224|n>>>12:(e[a++]=240|n>>>18,e[a++]=128|n>>>12&63),e[a++]=128|n>>>6&63),e[a++]=128|63&n);return e},e.buf2binstring=function(t){return u(t,t.length)},e.binstring2buf=function(t){for(var e=new r.Buf8(t.length),n=0,i=e.length;n<i;n++)e[n]=t.charCodeAt(n);return e},e.buf2string=function(t,e){var n,r,i,o,s=e||t.length,c=new Array(2*s);for(n=r=0;n<s;)if((i=t[n++])<128)c[r++]=i;else if(4<(o=a[i]))c[r++]=65533,n+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&n<s;)i=i<<6|63&t[n++],o--;1<o?c[r++]=65533:i<65536?c[r++]=i:(i-=65536,c[r++]=55296|i>>10&1023,c[r++]=56320|1023&i)}return u(c,r)},e.utf8border=function(t,e){var n;for((e=e||t.length)>t.length&&(e=t.length),n=e-1;0<=n&&128==(192&t[n]);)n--;return n<0?e:0===n?e:n+a[t[n]]>e?n:e}},function(t,e,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(t,e,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(t,e,n){"use strict";e.LOCAL_FILE_HEADER="PK",e.CENTRAL_FILE_HEADER="PK",e.CENTRAL_DIRECTORY_END="PK",e.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",e.ZIP64_CENTRAL_DIRECTORY_END="PK",e.DATA_DESCRIPTOR="PK\b"},function(t,e,n){"use strict";var r=n(3),i=n(27),o=n(150),a=n(239),s=n(240),u=n(152);t.exports=function(t){var e=r.getTypeOf(t);return r.checkSupport(e),"string"!==e||i.uint8array?"nodebuffer"===e?new s(t):i.uint8array?new u(r.transformTo("uint8array",t)):new o(r.transformTo("array",t)):new a(t)}},function(t,e,n){"use strict";var r=n(151);function i(t){r.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}n(3).inherits(i,r),i.prototype.byteAt=function(t){return this.data[this.zero+t]},i.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),n=t.charCodeAt(1),r=t.charCodeAt(2),i=t.charCodeAt(3),o=this.length-4;0<=o;--o)if(this.data[o]===e&&this.data[o+1]===n&&this.data[o+2]===r&&this.data[o+3]===i)return o-this.zero;return-1},i.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),n=t.charCodeAt(1),r=t.charCodeAt(2),i=t.charCodeAt(3),o=this.readData(4);return e===o[0]&&n===o[1]&&r===o[2]&&i===o[3]},i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=i},function(t,e,n){"use strict";var r=n(3);function i(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,n=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)n=(n<<8)+this.byteAt(e);return this.index+=t,n},readString:function(t){return r.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},t.exports=i},function(t,e,n){"use strict";var r=n(150);function i(t){r.call(this,t)}n(3).inherits(i,r),i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=i},function(t,e,n){var r=n(25),i=n(2)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,n){var r=n(7),i=n(49),o=n(2)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},function(t,e,n){function r(t){if(S.hasOwnProperty(t)){var e=S[t];delete S[t],e()}}function i(t){return function(){r(t)}}function o(t){r(t.data)}function a(t){f.postMessage(t+"",v.protocol+"//"+v.host)}var s,u,c,f=n(1),l=n(4),h=n(25),d=n(68),p=n(120),g=n(63),v=f.location,m=f.setImmediate,y=f.clearImmediate,w=f.process,b=f.MessageChannel,_=f.Dispatch,x=0,S={},j="onreadystatechange";m&&y||(m=function(t){for(var e=[],n=1;n<arguments.length;)e.push(arguments[n++]);return S[++x]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},s(x),x},y=function(t){delete S[t]},"process"==h(w)?s=function(t){w.nextTick(i(t))}:_&&_.now?s=function(t){_.now(i(t))}:b?(c=(u=new b).port2,u.port1.onmessage=o,s=d(c.postMessage,c,1)):!f.addEventListener||"function"!=typeof postMessage||f.importScripts||l(a)?s=j in g("script")?function(t){p.appendChild(g("script"))[j]=function(){p.removeChild(this),r(t)}}:function(t){setTimeout(i(t),0)}:(s=a,f.addEventListener("message",o,!1))),t.exports={set:m,clear:y}},function(t,e,n){var r=n(45);t.exports=r("navigator","userAgent")||""},function(t,e,n){"use strict";function r(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=i(e),this.reject=i(n)}var i=n(49);t.exports.f=function(t){return new r(t)}},function(t,e,n){"use strict";var r=n(72),i=n(124),o=n(7),a=n(24),s=n(154),u=n(96),c=n(21),f=n(73),l=n(71),h=n(4),d=[].push,p=Math.min,g=4294967295,v=!h((function(){return!RegExp(g,"y")}));r("split",2,(function(t,e,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||1<".".split(/()()/).length||"".split(/.?/).length?function(t,n){var r=String(a(this)),o=void 0===n?g:n>>>0;if(0==o)return[];if(void 0===t)return[r];if(!i(t))return e.call(r,t,o);for(var s,u,c,f=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),p=0,v=new RegExp(t.source,h+"g");(s=l.call(v,r))&&!(p<(u=v.lastIndex)&&(f.push(r.slice(p,s.index)),1<s.length&&s.index<r.length&&d.apply(f,s.slice(1)),c=s[0].length,p=u,f.length>=o));)v.lastIndex===s.index&&v.lastIndex++;return p===r.length?!c&&v.test("")||f.push(""):f.push(r.slice(p)),f.length>o?f.slice(0,o):f}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,n){var i=a(this),o=null==e?void 0:e[t];return void 0!==o?o.call(e,i,n):r.call(String(i),e,n)},function(t,i){var a=n(r,t,this,i,r!==e);if(a.done)return a.value;var l=o(t),h=String(this),d=s(l,RegExp),m=l.unicode,y=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.unicode?"u":"")+(v?"y":"g"),w=new d(v?l:"^(?:"+l.source+")",y),b=void 0===i?g:i>>>0;if(0==b)return[];if(0===h.length)return null===f(w,h)?[h]:[];for(var _=0,x=0,S=[];x<h.length;){w.lastIndex=v?x:0;var j,k=f(w,v?h:h.slice(x));if(null===k||(j=p(c(w.lastIndex+(v?0:x)),h.length))===_)x=u(h,x,m);else{if(S.push(h.slice(_,x)),S.length===b)return S;for(var E=1;E<=k.length-1;E++)if(S.push(k[E]),S.length===b)return S;x=_=j}}return S.push(h.slice(_)),S}]}),!v)},function(t,e,n){"use strict";function r(){return this}var i=n(5),o=n(259),a=n(161),s=n(123),u=n(70),c=n(12),f=n(20),l=n(2),h=n(37),d=n(55),p=n(160),g=p.IteratorPrototype,v=p.BUGGY_SAFARI_ITERATORS,m=l("iterator"),y="values";t.exports=function(t,e,n,l,p,w,b){function _(t){if(t===p&&O)return O;if(!v&&t in T)return T[t];switch(t){case"keys":case y:case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}}o(n,e,l);var x,S,j,k=e+" Iterator",E=!1,T=t.prototype,A=T[m]||T["@@iterator"]||p&&T[p],O=!v&&A||_(p),I="Array"==e&&T.entries||A;if(I&&(x=a(I.call(new t)),g!==Object.prototype&&x.next&&(h||a(x)===g||(s?s(x,g):"function"!=typeof x[m]&&c(x,m,r)),u(x,k,!0,!0),h&&(d[k]=r))),p==y&&A&&A.name!==y&&(E=!0,O=function(){return A.call(this)}),h&&!b||T[m]===O||c(T,m,O),d[e]=O,p)if(S={values:_(y),keys:w?O:_("keys"),entries:_("entries")},b)for(j in S)!v&&!E&&j in T||f(T,j,S[j]);else i({target:e,proto:!0,forced:v||E},S);return S}},function(t,e,n){"use strict";var r,i,o,a=n(161),s=n(12),u=n(11),c=n(2),f=n(37),l=c("iterator"),h=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(r=i):h=!0),null==r&&(r={}),f||u(r,l)||s(r,l,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},function(t,e,n){var r=n(11),i=n(26),o=n(44),a=n(260),s=o("IE_PROTO"),u=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=i(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(5),i=n(163);r({global:!0,forced:parseInt!=i},{parseInt:i})},function(t,e,n){var r=n(1),i=n(164).trim,o=n(87),a=r.parseInt,s=/^[+-]?0[Xx]/,u=8!==a(o+"08")||22!==a(o+"0x16");t.exports=u?function(t,e){var n=i(String(t));return a(n,e>>>0||(s.test(n)?16:10))}:a},function(t,e,n){function r(t){return function(e){var n=String(i(e));return 1&t&&(n=n.replace(a,"")),2&t&&(n=n.replace(s,"")),n}}var i=n(24),o="["+n(87)+"]",a=RegExp("^"+o+o+"*"),s=RegExp(o+o+"*$");t.exports={start:r(1),end:r(2),trim:r(3)}},function(t,e,n){var r=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,o=Object.create(i.prototype),a=new T(r||[]);return o._invoke=function(t,e,n){var r=f;return function(i,o){if(r===h)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return O()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=j(a,n);if(s){if(s===p)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var u=c(t,e,n);if("normal"===u.type){if(r=n.done?d:l,u.arg===p)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,a),o}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f="suspendedStart",l="suspendedYield",h="executing",d="completed",p={};function g(){}function v(){}function m(){}var y={};y[o]=function(){return this};var w=Object.getPrototypeOf,b=w&&w(w(A([])));b&&b!==n&&r.call(b,o)&&(y=b);var _=m.prototype=g.prototype=Object.create(y);function x(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function S(t){var e;this._invoke=function(n,i){function o(){return new Promise((function(e,o){!function e(n,i,o,a){var s=c(t[n],t,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"==typeof f&&r.call(f,"__await")?Promise.resolve(f.__await).then((function(t){e("next",t,o,a)}),(function(t){e("throw",t,o,a)})):Promise.resolve(f).then((function(t){u.value=t,o(u)}),(function(t){return e("throw",t,o,a)}))}a(s.arg)}(n,i,e,o)}))}return e=e?e.then(o,o):o()}}function j(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,j(t,n),"throw"===n.method))return p;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var i=c(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,p;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,p):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function A(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function n(){for(;++i<t.length;)if(r.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:O}}function O(){return{value:e,done:!0}}return v.prototype=_.constructor=m,m.constructor=v,m[s]=v.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,s in t||(t[s]="GeneratorFunction")),t.prototype=Object.create(_),t},t.awrap=function(t){return{__await:t}},x(S.prototype),S.prototype[a]=function(){return this},t.AsyncIterator=S,t.async=function(e,n,r,i){var o=new S(u(e,n,r,i));return t.isGeneratorFunction(n)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},x(_),_[s]="Generator",_[o]=function(){return this},_.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=A,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(E),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function i(r,i){return s.type="throw",s.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;0<=o;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;0<=n;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,p):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),p},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),E(n),p}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;E(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:A(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),p}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e,n){"use strict";function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var t=new r;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}(r.prototype=n(204)).loadAsync=n(237),r.support=n(27),r.defaults=n(138),r.version="3.2.0",r.loadAsync=function(t,e){return(new r).loadAsync(t,e)},r.external=n(53),t.exports=r},function(t,e,n){(function(n){var r,i;void 0===(i="function"==typeof(r=function(){"use strict";function e(t,e,n){var r=new XMLHttpRequest;r.open("GET",t),r.responseType="blob",r.onload=function(){a(r.response,e,n)},r.onerror=function(){console.error("could not download file")},r.send()}function r(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&e.status<=299}function i(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(n){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n&&n.global===n?n:void 0,a=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype?function(t,n,a){var s=o.URL||o.webkitURL,u=document.createElement("a");n=n||t.name||"download",u.download=n,u.rel="noopener","string"==typeof t?(u.href=t,u.origin===location.origin?i(u):r(u.href)?e(t,n,a):i(u,u.target="_blank")):(u.href=s.createObjectURL(t),setTimeout((function(){s.revokeObjectURL(u.href)}),4e4),setTimeout((function(){i(u)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,n,o){if(n=n||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),n);else if(r(t))e(t,n,o);else{var a=document.createElement("a");a.href=t,a.target="_blank",setTimeout((function(){i(a)}))}}:function(t,n,r,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof t)return e(t,n,r);var a="application/octet-stream"===t.type,s=/constructor/i.test(o.HTMLElement)||o.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||a&&s)&&"object"==typeof FileReader){var c=new FileReader;c.onloadend=function(){var t=c.result;t=u?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=t:location=t,i=null},c.readAsDataURL(t)}else{var f=o.URL||o.webkitURL,l=f.createObjectURL(t);i?i.location=l:location.href=l,i=null,setTimeout((function(){f.revokeObjectURL(l)}),4e4)}});o.saveAs=a.saveAs=a,t.exports=a})?r.apply(e,[]):r)||(t.exports=i)}).call(this,n(19))},function(t,e,n){"use strict";function r(t){if(-1!==(!t.init&&t.property.indexOf("a:powerState"))){var e=t.data.getSourceEdges();e&&e.forEach((function(e){(void 0!==t.newValue?t.newValue:t.data.getAttr("powerState"))?(e.s("state","1"),e.s("edge.color","#00ff00")):(e.s("state","0"),e.s("edge.color","#ff0000"))}))}}function i(t){if(-1!==(!t.init&&t.property.indexOf("a:switchState"))){var e="0";if(1===(void 0!==t.newValue?t.newValue:t.data.getAttr("switchState"))){var n=t.data.getAttaches();n&&n.forEach((function(t){t.getStyle("state")&&(e="1")}))}t.data.setStyle("state",e)}}function o(t){if(-1!==(!t.init&&t.property.indexOf("s:state"))){var e=t.data.getAttaches();e&&e.forEach((function(e){var n=void 0!==t.newValue?t.newValue:t.data.getStyle("state");e.s("state",n),"0"===n?e.s("shape.border.color","#ff0000"):"1"===n&&e.s("shape.border.color","#00ff00"),e.s("state",n)}))}}n(22),n(54),n(23),e.a=function(t){t instanceof ht.Node&&(void 0!==t.getAttr("powerState")&&r({data:t,init:!0}),void 0!==t.getAttr("switchState")&&i({data:t,init:!0}),void 0!==t.getStyle("state")&&o({data:t,init:!0}),t.onPropertyChanged=function(t){r(t),i(t),o(t)})}},function(t,e,n){var r=n(265),i=n(266),o=n(267);t.exports=function(t,e){return r(t)||i(t,e)||o()}},function(t,e,n){"use strict";n(162),n(119),n(263),n(264),n(22),n(79),n(78),n(50),n(77),n(104),n(23),n(105);var r,i,o,a=n(34),s=n.n(a),u=n(170),c=n.n(u),f=(n(165),n(108)),l=n.n(f),h=n(0),d=(n(106),n(29),function(t){return t.parentId,Object(h.a)({method:"get",url:"/getAllDevice"})}),p=function(t){var e=t.spaceId;return Object(h.a)({method:"get",url:"/getModelByDeviceId/".concat(e)})},g={};function v(t,e,n){d({parentId:t=t||0}).then((function(t){if(t.data.length){var n=[];t.data.forEach((function(t,e){var r={text:t.name,spaceId:t.deviceId,lazyLoad:!1,icon:""};n.push(r)})),e.treeview({data:n,onNodeSelected:function(t,n){window.nodeSelected(n,e)},emptyIcon:""})}else alert("暂无设备")}))}function m(t){if(!window.storeNewArr)return!1;switch(t){case"arr":return storeNewArr.treeviewArr;case"groupId":return storeNewArr.groupId;case"selectedId":return storeNewArr.id}}function y(t){var e=t.spaceId,n=t.node,r=t.text;switch(window.dataTypeName){case"jump":!function(t){var e=t.spaceId;$("#groupInfo").empty(),p({spaceId:e}).then((function(t){var n=!1,r="",i="",o="",a="",s="",u="",c="",f="",l="",h="",d="";if(t.data.basicArray.forEach((function(t){"subType"===t.url&&"assistance_camera"===t.name?n=!0:"nvrAddr"===t.url?r=t.name:"nvrChannel"===t.url?i=t.name:"aiAddr"===t.url?o=t.name:"arChannel"===t.url?a=t.name:"liveAddr"===t.url?s=t.name:"borkerAddr"===t.url?u=t.name:"model"===t.url?c=t.name:"manufacture"===t.url?f=t.name:"commissionDate"===t.url?l=t.name:"position"===t.url?h=t.name:"name"===t.url&&(d=t.name)})),n){var p=JSON.stringify({spaceId:e,nvrAddr:r,nvrChannel:i,aiAddr:o,arChannel:a,liveAddr:s,borkerAddr:u,model:c,manufacture:f,commissionDate:l,position:h});$("#number").val(p),$("#Name").val(d),window.flagId=p}})),window.typeKind="摄像头"}({spaceId:e});break;case"addGraph":!function(t){var e=t.spaceId;window.typeKind="图纸",function(t){var e=t.spaceId;return h.a.get("/diagram/getById/".concat(e))}({spaceId:e}).then((function(t){var e=$("<p>图纸</p>");e.addClass("p-style"),$("#groupInfo").empty().append(e),w(t.data,"图纸")}))}({spaceId:e});break;case"transformer":case"switchCabinet":case"robot":!function(t,e){$("#groupInfo").empty(),$("#equipmentData").html(""),window.typeKind="设备",$("#number").val(t.spaceId),$("#Name").val(e),window.equipmentId=t.spaceId,window.flagId=t.spaceId}(n,r);break;default:$("#number").val(e),function(t){var e=t.spaceId;t.groupType,p({spaceId:e}).then((function(t){w(t.data,"点号")}))}({spaceId:e})}}function w(t,e){var n=$("#equipmentData");if(n.html(""),t.length)t.forEach((function(t){var e=$("<span></span>");e.attr({id:t.varTag}).text(t.varName).addClass("spanStyleObj attribute"),n.append(e),e.click((function(){e.addClass("selects").siblings().removeClass("selects"),$("#attribute").css("display","flex"),$("#number").val($("#number").val()+","+t.varTag),$("#Name").val(t.varName)}));var r=m("selectedId");($("#number").val()||r)&&$("#"+r).addClass("selects")})),window.typeKind=e;else{var r=$("<span>暂无数据</span>");r.addClass("noData"),n.append(r)}}Object(h.a)({method:"get",url:"/platform/nodeType/queryAllNode"}).then((function(t){t.data.forEach((function(t){g[t.id]=t.url}))})),window.nodeSelected=function(t,e){for(var n=!0,r=[],i=t;n;){var o=i.parentId;if(0===o||o){var a=e.treeview("getNode",o);r.unshift({id:a.spaceId,nodeId:a.nodeId}),i=a}else n=!1}$("#number").val(""),$("#Name").val(""),window.treeId={treeId:t.spaceId,name:t.text},r.push({id:t.spaceId,nodeId:t.nodeId}),window.treeviewArr=r,y({spaceId:t.spaceId,node:t,text:t.text})},window.removeBangding=function(t){o.setDataBindings(),o.fp("dataBindings",!0,!1),v(0,$("#siteTree")),$("#attribute").css("display","none"),$("#yaoce").html(""),$(".shadow-box").css("display","none")},window.cancel=function(t){$(".shadow-box").css("display","none")},window.sure=function(t){var e=$("#number").val(),n=$("#Name").val();e&&n?((r=r||{})[i]||(r[i]={}),r[i][window.dataTypeName]||(r[i][window.dataTypeName]={}),e?(r[i][window.dataTypeName].id=e,r[i][window.dataTypeName].TypeName=n,r[i][window.dataTypeName].treeId=window.treeId,r[i][window.dataTypeName].treeviewArr=window.treeviewArr,r[i][window.dataTypeName].pictureId=window.pictureId,r[i][window.dataTypeName].typeId=window.typeId,r[i][window.dataTypeName].type=window.typeKind,r[i][window.dataTypeName].equipmentId=window.equipmentId,r[i][window.dataTypeName].robot=window.robot,r[i][window.dataTypeName].groupId=window.groupId,r[i][window.dataTypeName].groupType=window.groupType):delete r[i][window.dataTypeName],o.setDataBindings(r),o.setTag(e),o.fp("dataBindings",!0,!1),$(".shadow-box").css("display","none")):alert("请选择点号")},window.moveIn=function(t){$(t).addClass("moveIn").siblings().removeClass("moveIn")},window.moveout=function(t){$(".moveIn").removeClass("moveIn")},window.onload=function(){$("#equipmentData>child").mousemove((function(t){$(void 0).addClass("moveIn").siblings().removeClass("moveIn")}))};var b=1;e.a={onButtonClicked:function(t,e,n){var a=t.dm().getAttrObject("a").spaceUuid;if($(".shadow-box").css("display","block"),i=e,r=(o=t).getDataBindings(),$("#attributes").val(n),r&&r[i]&&r[i][n])$("#number").val(r[i][n].id),$("#Name").val(r[i][n].TypeName),window.treeId=r[i][n].treeId,window.treeviewArr=r[i][n].treeviewArr,window.flagId=r[i][n].id,window.typeId=r[i][n].typeId,window.pictureId=r[i][n].pictureId,window.typeKind=r[i][n].type,window.equipmentName=r[i][n].equipmentName,window.robot=r[i][n].robot;else if(r)return alert("只能绑定单个属性");if(window.dataTypeName=n,r&&r[i][n].treeviewArr)window.storeNewArr=r[i][n],function(t,e){var n=m("arr");d({parentId:0}).then(function(){var r=l()(s.a.mark((function r(i){var o,a,u,f,h;return s.a.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(o={},a=[],(u=i.data).length)return f=function(){var t=l()(s.a.mark((function t(){var e,r,i,a,u,f;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:t.prev=0,r=!(e=!0),i=void 0,t.prev=4,a=s.a.mark((function t(){var e,r,i,a,u;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=c()(f.value,2),r=e[0],i=e[1],a=i.id,r!==n.length-1)return t.next=5,d({parentId:a}).then((function(t){return t.data})).then((function(t){var e=t.map((function(t,e){return o[t.id]=e,{text:t.name,spaceId:t.id,lazyLoad:!0,state:{},icon:!0===t.hasChild?"glyphicon glyphicon-plus":""}})),n=o[a];h[n].state.expanded=!0,h[n].nodes=e,h[n].icon="",h=h[n].nodes}));t.next=7;break;case 5:t.next=11;break;case 7:u=o[a],h[u].state.selected=!0,$("#equipmentData").css("display","block"),y({spaceId:h[u].spaceId,node:h[u],text:h[u].text});case 11:case"end":return t.stop()}}),t)})),u=n.entries()[Symbol.iterator]();case 7:if(e=(f=u.next()).done){t.next=12;break}return t.delegateYield(a(),"t0",9);case 9:e=!0,t.next=7;break;case 12:t.next=18;break;case 14:t.prev=14,t.t1=t.catch(4),r=!0,i=t.t1;case 18:t.prev=18,t.prev=19,e||null==u.return||u.return();case 21:if(t.prev=21,r)throw i;t.next=24;break;case 24:return t.finish(21);case 25:return t.finish(18);case 26:t.next=33;break;case 28:t.prev=28,t.t2=t.catch(0),$("#attribute").css("display","none"),$("#equipmentData").css("display","none"),console.log(t.t2,999);case 33:case"end":return t.stop()}}),t,null,[[0,28],[4,14,18,26],[19,,21,25]])})));return function(){return t.apply(this,arguments)}}(),u.forEach((function(t,n){if(t.id===e){o[t.id]=0;var r={text:t.name,spaceId:t.id,lazyLoad:!0,state:{},icon:!0===t.hasChild?"glyphicon glyphicon-plus":""};a.push(r)}})),h=a,r.next=9,f();r.next=10;break;case 9:t.treeview({data:a,onNodeSelected:function(e,n){window.nodeSelected(n,t)},emptyIcon:""});case 10:case"end":return r.stop()}}),r)})));return function(t){return r.apply(this,arguments)}}())}($("#siteTree"),a);else if(1===b)v(0,$("#siteTree"));else{$("#attribute").css("display","none"),$("#equipmentData").html(""),$("#number").val(""),$("#Name").val("");var u=$("#siteTree").treeview("getSelected");console.log(u),u.length&&"transformer"!==n&&"switchCabinet"!==n?window.nodeSelected(u[0],$("#siteTree")):(u.length&&"transformer"===n||"switchCabinet"===n)&&$("#siteTree").treeview("unselectNode",[u[0],{silent:!0}])}b++,window.scroH&&($("#siteTree").scrollTop(window.scroH),$("#siteTree").scrollLeft(window.scroL)),$("#siteTree").scroll((function(t){var e=$("#siteTree").scrollTop(),n=$("#siteTree").scrollLeft();window.scroH=e,window.scroL=n})),new function(t){this.obj=document.querySelector(".title"),this.startx=0,this.starty,this.startLeft,this.startTop,this.mainDiv=this.obj.parentNode,this.isDown=!1,this.originIndex=this.mainDiv.style.zIndex;var e=this;this.movedown=function(t){t=t||window.event,window.captureEvents||this.setCapture(),e.isDown=!0,e.obj.style.cursor="move",e.mainDiv.style.zIndex=1e3,e.startx=t.clientX,e.starty=t.clientY,e.startLeft=parseInt(e.mainDiv.offsetLeft),e.startTop=parseInt(e.mainDiv.offsetTop)},this.move=function(t){t=t||window.event,e.isDown&&(e.mainDiv.style.left=t.clientX-(e.startx-e.startLeft)+"px",e.mainDiv.style.top=t.clientY-(e.starty-e.startTop)+"px")},this.moveup=function(){e.isDown=!1,e.obj.style.cursor="default",e.mainDiv.style.zIndex=e.originIndex,window.captureEvents||this.releaseCapture()},this.obj.onmousedown=this.movedown,this.obj.onmousemove=this.move,this.obj.onmouseup=this.moveup,document.addEventListener("mousemove",this.move,!0)}(".title")}}},function(t,e,n){"use strict";n(29),n(22),n(54),n(78),n(257),n(50),n(23);var r=n(13),i=n(10),o=i.a.getUrlParam("type");function a(t,e,n){var a=[{label:"添加图纸",type:"add",action:function(t,r){var i;i="tree"===n?e.dir:"dir"===e.file.fileType?e.file:e.dir,"add"===t.type&&("3d"===o?e.newScene():e.newDisplayView(),e.dm.a({spaceUuid:i.getAttr("uuid")}),e.save())}}],s=a.concat([{label:"拷贝",type:"copy",action:function(t,n){"copy"===t.type&&(window.customStates.stationsCopyDatas=e.explorer.list.getSelectionModel().getSelection()._as.map((function(t){return t.getAttrObject()})))}},{label:"导出",type:"export",action:function(t,n){if("export"===t.type){var r=e.explorer.list.getSelectionModel().getSelection()._as.map((function(t){return{name:t.getAttr("name"),data:JSON.stringify(t.getAttrObject())}}));i.a.upload(r)}}},{label:"重命名",type:"rename",action:function(t,n){if("rename"===t.type){var r=e.explorer.list.sm().ld();e.explorer.list.beginEditing(r)}}},{label:"删除",type:"remove",action:function(t,i){if("tree"===n?e.dir:e.file,"remove"===t.type){var o=[],a=[];e.explorer.list.getSelectionModel().getSelection()._as.forEach((function(t){o.push(t.getAttr("uuid")),a.push("displays/".concat(t.getName(),".json"))})),function(t,e){var n=new ht.widget.Dialog;n.setConfig({title:"删除(".concat(t.length,")"),width:250,height:100,content:"确定删除选中内容？",contentPadding:10,draggable:!0,closable:!0,resizeMode:"wh",buttons:[{label:"取消",action:function(t,e){n.hide()}},{label:"确定",action:function(i,o){Object(r.d)(t).then((function(){console.log(e),e.forEach((function(t){var e=editor.mainTabView.getTabModel().getDataByTag(t);e&&(e.a("dirty",!1),editor.closeTab(e))}))})),n.hide()}}],buttonsAlign:"right"}),n.show()}(o,a)}}}]),u={label:"粘贴",type:"paste",action:function(t,i){var o;o="tree"===n?e.dir:"dir"===e.file.fileType?e.file:e.dir,"paste"===t.type&&Object(r.b)(window.customStates.stationsCopyDatas,o.getAttr("uuid"))}},c=s.concat([u]),f=a.concat([u]),l=new ht.widget.ContextMenu;l.beforeShow=function(t){var r;r="tree"===n?e.dir:e.file;var i=0<window.customStates.stationsCopyDatas.length;r?"root"===r.fileType?this.setItems(null):"dir"===r.fileType&&i?this.setItems(f):"dir"===r.fileType?this.setItems(a):i?this.setItems(c):this.setItems(s):this.setItems(null)},l.addTo(t.getView())}var s=n(106),u=n(6),c=i.a.getUrlParam("type");e.a=function(t){var e=new ht.Tab;return e.setName("站点"),t.leftTopTabView.getTabModel().add(e,0),e.setView(function(t,e){var n={width:32,height:16,comps:[{type:"text",text:"##.#",align:"center",rect:[0,0,32,16]}]};window.customStates.stationsExplorer=new hteditor.Explorer(t,u.a.apiName,!1);var i=window.customStates.stationTreeData=[{id:"100000",name:"设备",type:null,url:null,addr:null,tag:null,desc:null,remark:"region",status:null,createTime:null,createBy:null,updateTime:null,updateBy:null,children:null,parentId:null,parentName:null,ownerId:null,nodeTypeParent:null,nodeType:null,lat:null,lng:null,isSide:null,icon:"guo",rootId:null,stationId:null,lineId:null,roomId:null,transformerId:null,transformerName:null,hasChild:!0,classifyId:null,classifyIdDesc:null,primaryId:null,path:null,pathName:null,ability:null,regionId:null,linkId:null,image:null,stationName:null,lineName:null,organizeName:null,regionName:null,roomName:null,model:null,spaceName:null,score:null,deviceNum:null,alarmNum:null,unAlarmNum:null,capacity:null,commissionDate:null,clas:null,comStatus:null,runStatus:null,position:null,value:null,pointName:null,unit:null,checkStatus:null,voltageLevel:null,towerName:null,towerId:null,powerCutCount:null,powerCutLength:null,rate:null,nodeTypeList:null,timestamp:null,manuFacture:null,ratedVolate:null,personInCharge:null,ratedCapacity:null,deviceId:null,channel:null,accidentCount:null,safeOperationTime:null,pinyin:null,lineIdList:null,organizeIdList:null}];return window.customStates.stationTree=function t(e,n,r,i){var o={},a=[];return e.forEach((function(e){for(var r=e.name,i=0;i<a.length;i++)a[i]===r&&(r+=" ");a.push(r);var s="".concat(n,"/").concat(r);window.customStates.stationTreeUuidToPath[e.id]=s,e.children&&0<e.children.length?o[r]={fileType:"dir",attrs:{uuid:e.id},children:t(e.children,s)}:o[r]={fileType:"dir",attrs:{uuid:e.id,needToLoad:!0}}})),o}(i,u.a.apiName),window.customStates.stationsExplorer.parse(window.customStates.stationTree),function(){try{JSON.parse(sessionStorage.getItem("selectTreeNode")).treeArrNodeExpand.forEach((function(t){var e=window.customStates.stationTreeUuidToPath[t],n=window.customStates.stationsExplorer.tree.getDataModel().getDataById(e);window.customStates.stationsExplorer.tree.expand(n)}))}catch(t){}}(),function(){try{var t=JSON.parse(sessionStorage.getItem("selectTreeNode"));if(!t)return;var e=window.customStates.stationTreeUuidToPath[t.selectTreeNodeUuid],n=t.graphUuid;window.customStates.stationsExplorer.tree.selectionIds=[e],window.customStates.getDiagramListPromise&&window.customStates.getDiagramListPromise.then((function(){n.forEach((function(t){var e=window.customStates.stationTreeUuidToPath[t],n=window.customStates.stationsExplorer.tree.getDataModel().getDataById(e);editor.openByJSON("display","".concat(n.url,".json"),n.getName(),n.getAttr("json").json)}))}))}catch(t){console.log(t,"8888")}}(),a(window.customStates.stationsExplorer.tree,t,"tree"),a(window.customStates.stationsExplorer.list,t,"list"),window.customStates.stationsExplorer.tree.setLoader({load:function(t){if(t&&t.a("needToLoad")){t.a("needToLoad",!1);var e=t.getAttr("uuid");Object(s.a)(e).then((function(e){e.data.forEach((function(e){var n;n={fileType:"dir",attrs:{uuid:e.id,needToLoad:!0},isExpanded:!0},window.customStates.stationsExplorer.parseChild(t,e.name,n)}))}))}},isLoaded:function(t){}}),window.customStates.stationsExplorer.tree.sm().ms((function(t){var e=t.datas.get(t.datas.size()-1);"set"===t.kind&&e&&"root"!==e.fileType&&Object(r.c)()})),window.customStates.stationsExplorer.list.mi((function(e){if("doubleClickData"===e.kind&&"diagram"===e.data.fileType){var n=e.data;e.data.url="displays/".concat(n.path,"/").concat(n.getName(),".json"),"3d"===c?(t.newScene(),t.scene.deserialize(n.getAttr("json").json),t.url="scenes/".concat(n.getName(),".json")):t.openByJSON("display","displays/".concat(n.getName(),".json"),n.getName(),n.getAttr("json").json),t.dm.a({uuid:n.getAttr("uuid"),spaceUuid:n.getAttr("spaceUuid")}),function(t){editor.rightTopBorderPane.getCenterView().dataModel.setAttr("diagramType",t)}(n.getAttr("diagramType"))}})),window.customStates.stationsExplorer.tree.handleCrossDrag=function(){},window.customStates.stationsExplorer.list.handleCrossDrag=function(e,n,i){if(e.preventDefault(),e.stopPropagation(),"drop"===n){var o=e.dataTransfer,a=[];if(void 0!==o.items)for(var s=0;s<o.items.length;s++){var u=o.items[s];if("file"===u.kind&&u.webkitGetAsEntry().isFile){var c=u.getAsFile();a.push(c)}}if(!t.dir.getAttr("uuid")){var f=new ht.widget.Dialog;return f.setConfig({title:"提示",width:250,height:100,content:"请选择站点",contentPadding:10,draggable:!0,closable:!0,resizeMode:"wh",buttons:[{label:"确定",action:function(t,e){f.hide()}}],buttonsAlign:"right"}),void f.show()}a.forEach((function(e){var n=e.name.indexOf("."),i=e.name.slice(0,n),o=new FileReader;o.readAsText(e),o.onload=function(e){var n=JSON.parse(e.target.result);console.log(n),Object(r.a)({name:i,type:0,json:JSON.stringify(n.json),spaceUuid:t.dir.getAttr("uuid"),addType:"drop"}).then((function(){Object(r.c)()}))}}))}},e&&(window.customStates.stationsExplorer.list.isDroppableToDisplayView=!0,window.customStates.stationsExplorer.list.handleDropToEditView=function(t,e,r,i){if(e.getIcon()===n){var o=new ht.Text;o.s({text:"##.#","text.align":"center"}),o.setDataBindings({s:{text:{id:e.getName()}}}),o.setDisplayName(e.getName()),o.p(r),t.addData(o)}else{var a=new ht.Node;a.setImage(e.getImage()),a.p(r),a.setDisplayName(e.getName()),t.addData(a)}}),window.customStates.stationsExplorer}(t,!1)),e}},function(t,e,n){"use strict";var r=n(72),i=n(7),o=n(26),a=n(21),s=n(32),u=n(24),c=n(96),f=n(73),l=Math.max,h=Math.min,d=Math.floor,p=/\$([$&'`]|\d\d?|<[^>]*>)/g,g=/\$([$&'`]|\d\d?)/g;r("replace",2,(function(t,e,n){return[function(n,r){var i=u(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,i,r):e.call(String(i),n,r)},function(t,o){var u=n(e,t,this,o);if(u.done)return u.value;var d=i(t),p=String(this),g="function"==typeof o;g||(o=String(o));var v=d.global;if(v){var m=d.unicode;d.lastIndex=0}for(var y=[];;){var w=f(d,p);if(null===w)break;if(y.push(w),!v)break;""===String(w[0])&&(d.lastIndex=c(p,a(d.lastIndex),m))}for(var b,_="",x=0,S=0;S<y.length;S++){w=y[S];for(var j=String(w[0]),k=l(h(s(w.index),p.length),0),E=[],T=1;T<w.length;T++)E.push(void 0===(b=w[T])?b:String(b));var A=w.groups;if(g){var O=[j].concat(E,k,p);void 0!==A&&O.push(A);var I=String(o.apply(void 0,O))}else I=r(j,p,k,E,A,o);x<=k&&(_+=p.slice(x,k)+I,x=k+j.length)}return _+p.slice(x)}];function r(t,n,r,i,a,s){var u=r+t.length,c=i.length,f=g;return void 0!==a&&(a=o(a),f=p),e.call(s,f,(function(e,o){var s;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(u);case"<":s=a[o.slice(1,-1)];break;default:var f=+o;if(0==f)return e;if(c<f){var l=d(f/10);return 0===l?e:l<=c?void 0===i[l-1]?o.charAt(1):i[l-1]+o.charAt(1):e}s=i[f-1]}return void 0===s?"":s}))}}))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";var r=n(15),i=n(111),o=n(177),a=n(117);function s(t){var e=new o(t),n=i(o.prototype.request,e);return r.extend(n,o.prototype,e),r.extend(n,e),n}var u=s(n(114));u.Axios=o,u.create=function(t){return s(a(u.defaults,t))},u.Cancel=n(118),u.CancelToken=n(189),u.isCancel=n(113),u.all=function(t){return Promise.all(t)},u.spread=n(190),t.exports=u,t.exports.default=u},function(t,e){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&null!=t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}},function(t,e,n){"use strict";var r=n(15),i=n(112),o=n(178),a=n(179),s=n(117);function u(t){this.defaults=t,this.interceptors={request:new o,response:new o}}u.prototype.request=function(t,e){"string"==typeof t?(t=e||{}).url=arguments[0]:t=t||{},(t=s(this.defaults,t)).method=t.method?t.method.toLowerCase():"get";var n=[a,void 0],r=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){n.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){n.push(t.fulfilled,t.rejected)}));n.length;)r=r.then(n.shift(),n.shift());return r},u.prototype.getUri=function(t){return t=s(this.defaults,t),i(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(t){u.prototype[t]=function(e,n){return this.request(r.merge(n||{},{method:t,url:e}))}})),r.forEach(["post","put","patch"],(function(t){u.prototype[t]=function(e,n,i){return this.request(r.merge(i||{},{method:t,url:e,data:n}))}})),t.exports=u},function(t,e,n){"use strict";var r=n(15);function i(){this.handlers=[]}i.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},i.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},i.prototype.forEach=function(t){r.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=i},function(t,e,n){"use strict";var r=n(15),i=n(180),o=n(113),a=n(114),s=n(187),u=n(188);function c(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return c(t),t.baseURL&&!s(t.url)&&(t.url=u(t.baseURL,t.url)),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||a.adapter)(t).then((function(e){return c(t),e.data=i(e.data,e.headers,t.transformResponse),e}),(function(e){return o(e)||(c(t),e&&e.response&&(e.response.data=i(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},function(t,e,n){"use strict";var r=n(15);t.exports=function(t,e,n){return r.forEach(n,(function(n){t=n(t,e)})),t}},function(t,e,n){"use strict";var r=n(15);t.exports=function(t,e){r.forEach(t,(function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])}))}},function(t,e,n){"use strict";var r=n(116);t.exports=function(t,e,n){var i=n.config.validateStatus;!i||i(n.status)?t(n):e(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,i){return t.config=e,n&&(t.code=n),t.request=r,t.response=i,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},function(t,e,n){"use strict";var r=n(15),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,o,a={};return t&&r.forEach(t.split("\n"),(function(t){if(o=t.indexOf(":"),e=r.trim(t.substr(0,o)).toLowerCase(),n=r.trim(t.substr(o+1)),e){if(a[e]&&0<=i.indexOf(e))return;a[e]="set-cookie"===e?(a[e]?a[e]:[]).concat([n]):a[e]?a[e]+", "+n:n}})),a}},function(t,e,n){"use strict";var r,i,o,a=n(15);function s(t){var e=t;return i&&(o.setAttribute("href",e),e=o.href),o.setAttribute("href",e),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}t.exports=a.isStandardBrowserEnv()?(i=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a"),r=s(window.location.href),function(t){var e=a.isString(t)?s(t):t;return e.protocol===r.protocol&&e.host===r.host}):function(){return!0}},function(t,e,n){"use strict";var r=n(15);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,i,o,a){var s=[];s.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(i)&&s.push("path="+i),r.isString(o)&&s.push("domain="+o),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";var r=n(118);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var n=this;t((function(t){n.reason||(n.reason=new r(t),e(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i((function(e){t=e})),cancel:t}},t.exports=i},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e){window.customStates={getDiagramListPromise:null,stationTreeUuidToPath:{},stationsExplorer:null,stationTree:{},stationsCopyDatas:[],stationTreeData:[]}},function(t,e,n){var r=n(9),i=n(16),o=n(7),a=n(69);t.exports=r?Object.defineProperties:function(t,e){o(t);for(var n,r=a(e),s=r.length,u=0;u<s;)i.f(t,n=r[u++],e[n]);return t}},function(t,e,n){var r=n(17),i=n(46).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,e,n){"use strict";var r=n(5),i=n(48).filter;r({target:"Array",proto:!0,forced:!n(59)("filter")},{filter:function(t,e){return i(this,t,1<arguments.length?e:void 0)}})},function(t,e,n){var r=n(5),i=n(4),o=n(17),a=n(30).f,s=n(9),u=i((function(){a(1)}));r({target:"Object",stat:!0,forced:!s||u,sham:!s},{getOwnPropertyDescriptor:function(t,e){return a(o(t),e)}})},function(t,e,n){var r=n(5),i=n(9),o=n(89),a=n(17),s=n(30),u=n(84);r({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(t){for(var e,n,r=a(t),i=s.f,c=o(r),f={},l=0;c.length>l;)void 0!==(n=i(r,e=c[l++]))&&u(f,e,n);return f}})},function(t,e,n){var r=n(5),i=n(26),o=n(69);r({target:"Object",stat:!0,forced:n(4)((function(){o(1)}))},{keys:function(t){return o(i(t))}})},function(t,e,n){var r=n(9),i=n(1),o=n(67),a=n(199),s=n(16).f,u=n(46).f,c=n(124),f=n(95),l=n(20),h=n(4),d=n(125),p=n(2)("match"),g=i.RegExp,v=g.prototype,m=/a/g,y=/a/g,w=new g(m)!==m;if(r&&o("RegExp",!w||h((function(){return y[p]=!1,g(m)!=m||g(y)==y||"/a/i"!=g(m,"i")})))){function b(t){t in _||s(_,t,{configurable:!0,get:function(){return g[t]},set:function(e){g[t]=e}})}for(var _=function(t,e){var n=this instanceof _,r=c(t),i=void 0===e;return!n&&r&&t.constructor===_&&i?t:a(w?new g(r&&!i?t.source:t,e):g((r=t instanceof _)?t.source:t,r&&i?f.call(t):e),n?this:v,_)},x=u(g),S=0;x.length>S;)b(x[S++]);(v.constructor=_).prototype=v,l(i,"RegExp",_)}d("RegExp")},function(t,e,n){var r=n(8),i=n(123);t.exports=function(t,e,n){var o,a;return i&&"function"==typeof(o=e.constructor)&&o!==n&&r(a=o.prototype)&&a!==n.prototype&&i(t,a),t}},function(t,e,n){var r=n(8);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){"use strict";var r=n(72),i=n(7),o=n(21),a=n(24),s=n(96),u=n(73);r("match",1,(function(t,e,n){return[function(e){var n=a(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var a=i(t),c=String(this);if(!a.global)return u(a,c);for(var f,l=a.unicode,h=[],d=a.lastIndex=0;null!==(f=u(a,c));){var p=String(f[0]);""===(h[d]=p)&&(a.lastIndex=s(c,o(a.lastIndex),l)),d++}return 0===d?null:h}]}))},function(t,e,n){"use strict";var r=n(72),i=n(7),o=n(24),a=n(203),s=n(73);r("search",1,(function(t,e,n){return[function(e){var n=o(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var o=i(t),u=String(this),c=o.lastIndex;a(c,0)||(o.lastIndex=0);var f=s(o,u);return a(o.lastIndex,c)||(o.lastIndex=c),null===f?-1:f.index}]}))},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){"use strict";function r(t,e,n){var r,i=o.getTypeOf(e),s=o.extend(n||{},u);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(t=g(t)),s.createFolders&&(r=p(t))&&v.call(this,r,!0);var l="string"===i&&!1===s.binary&&!1===s.base64;n&&void 0!==n.binary||(s.binary=!l),(e instanceof c&&0===e.uncompressedSize||s.dir||!e||0===e.length)&&(s.base64=!1,s.binary=!0,e="",s.compression="STORE",i="string");var m;m=e instanceof c||e instanceof a?e:h.isNode&&h.isStream(e)?new d(t,e):o.prepareContent(t,e,s.binary,s.optimizedBinaryString,s.base64);var y=new f(t,m,s);this.files[t]=y}var i=n(39),o=n(3),a=n(18),s=n(137),u=n(138),c=n(100),f=n(223),l=n(224),h=n(76),d=n(236),p=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return 0<e?t.substring(0,e):""},g=function(t){return"/"!==t.slice(-1)&&(t+="/"),t},v=function(t,e){return e=void 0!==e?e:u.createFolders,t=g(t),this.files[t]||r.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function m(t){return"[object RegExp]"===Object.prototype.toString.call(t)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,n,r;for(e in this.files)this.files.hasOwnProperty(e)&&(r=this.files[e],(n=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(n,r))},filter:function(t){var e=[];return this.forEach((function(n,r){t(n,r)&&e.push(r)})),e},file:function(t,e,n){if(1!==arguments.length)return t=this.root+t,r.call(this,t,e,n),this;if(m(t)){var i=t;return this.filter((function(t,e){return!e.dir&&i.test(t)}))}var o=this.files[this.root+t];return o&&!o.dir?o:null},folder:function(t){if(!t)return this;if(m(t))return this.filter((function(e,n){return n.dir&&t.test(e)}));var e=this.root+t,n=v.call(this,e),r=this.clone();return r.root=n.name,r},remove:function(t){t=this.root+t;var e=this.files[t];if(e||("/"!==t.slice(-1)&&(t+="/"),e=this.files[t]),e&&!e.dir)delete this.files[t];else for(var n=this.filter((function(e,n){return n.name.slice(0,t.length)===t})),r=0;r<n.length;r++)delete this.files[n[r].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,n={};try{if((n=o.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=n.type.toLowerCase(),n.compression=n.compression.toUpperCase(),"binarystring"===n.type&&(n.type="string"),!n.type)throw new Error("No output type specified.");o.checkSupport(n.type),"darwin"!==n.platform&&"freebsd"!==n.platform&&"linux"!==n.platform&&"sunos"!==n.platform||(n.platform="UNIX"),"win32"===n.platform&&(n.platform="DOS");var r=n.comment||this.comment||"";e=l.generateWorker(this,n,r)}catch(t){(e=new a("error")).error(t)}return new s(e,n.type||"string",n.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};t.exports=y},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),a=r[0],s=r[1],u=new o(function(t,e,n){return 3*(e+n)/4-n}(0,a,s)),f=0,l=0<s?a-4:a;for(n=0;n<l;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],u[f++]=e>>16&255,u[f++]=e>>8&255,u[f++]=255&e;return 2===s&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,u[f++]=255&e),1===s&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,u[f++]=e>>8&255,u[f++]=255&e),u},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],a=0,s=n-i;a<s;a+=16383)o.push(f(t,a,s<a+16383?s:a+16383));return 1==i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2==i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"=")),o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],i[a.charCodeAt(s)]=s;function c(t){var e=t.length;if(0<e%4)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function f(t,e,n){for(var i,o,a=[],s=e;s<n;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,a,s=8*i-r-1,u=(1<<s)-1,c=u>>1,f=-7,l=n?i-1:0,h=n?-1:1,d=t[e+l];for(l+=h,o=d&(1<<-f)-1,d>>=-f,f+=s;0<f;o=256*o+t[e+l],l+=h,f-=8);for(a=o&(1<<-f)-1,o>>=-f,f+=r;0<f;a=256*a+t[e+l],l+=h,f-=8);if(0===o)o=1-c;else{if(o===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),o-=c}return(d?-1:1)*a*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var a,s,u,c=8*o-i-1,f=(1<<c)-1,l=f>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=f):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),2<=(e+=1<=a+l?h/u:h*Math.pow(2,1-l))*u&&(a++,u/=2),f<=a+l?(s=0,a=f):1<=a+l?(s=(e*u-1)*Math.pow(2,i),a+=l):(s=e*Math.pow(2,l-1)*Math.pow(2,i),a=0));8<=i;t[n+d]=255&s,d+=p,s/=256,i-=8);for(a=a<<i|s,c+=i;0<c;t[n+d]=255&a,d+=p,a/=256,c-=8);t[n+d-p]|=128*g}},function(t,e,n){t.exports=i;var r=n(97).EventEmitter;function i(){r.call(this)}n(40)(i,r),i.Readable=n(98),i.Writable=n(214),i.Duplex=n(215),i.Transform=n(216),i.PassThrough=n(217),(i.Stream=i).prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",s),n.on("close",u));var a=!1;function s(){a||(a=!0,t.end())}function u(){a||(a=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(f(),0===r.listenerCount(this,"error"))throw t}function f(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",s),n.removeListener("close",u),n.removeListener("error",c),t.removeListener("error",c),n.removeListener("end",f),n.removeListener("close",f),t.removeListener("close",f)}return n.on("error",c),t.on("error",c),n.on("end",f),n.on("close",f),t.on("close",f),t.emit("pipe",n),t}},function(t,e){},function(t,e,n){"use strict";var r=n(75).Buffer,i=n(210);function o(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),this.head=null,this.tail=null,this.length=0}t.exports=(o.prototype.push=function(t){var e={data:t,next:null};0<this.length?this.tail.next=e:this.head=e,this.tail=e,++this.length},o.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},o.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},o.prototype.clear=function(){this.head=this.tail=null,this.length=0},o.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},o.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e,n,i=r.allocUnsafe(t>>>0),o=this.head,a=0;o;)e=i,n=a,o.data.copy(e,n),a+=o.data.length,o=o.next;return i},o),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,a,s=1,u={},c=!1,f=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,r="[object process]"==={}.toString.call(t.process)?function(t){e.nextTick((function(){d(t)}))}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?(a="setImmediate$"+Math.random()+"$",t.addEventListener?t.addEventListener("message",p,!1):t.attachEvent("onmessage",p),function(e){t.postMessage(a+e,"*")}):t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){d(t.data)},function(t){o.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,function(t){var e=f.createElement("script");e.onreadystatechange=function(){d(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):function(t){setTimeout(d,0,t)},l.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return u[s]=i,r(s),s++},l.clearImmediate=h}function h(t){delete u[t]}function d(t){if(c)setTimeout(d,0,t);else{var e=u[t];if(e){c=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{h(t),c=!1}}}}function p(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&d(+e.data.slice(a.length))}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(19),n(42))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(19))},function(t,e,n){"use strict";t.exports=o;var r=n(135),i=n(52);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(40),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(99)},function(t,e,n){t.exports=n(33)},function(t,e,n){t.exports=n(98).Transform},function(t,e,n){t.exports=n(98).PassThrough},function(t,e,n){"use strict";(function(e){t.exports="function"==typeof e?e:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t)}}).call(this,n(133).setImmediate)},function(t,e,n){"use strict";var r=n(220);function i(){}var o={},a=["REJECTED"],s=["FULFILLED"],u=["PENDING"];function c(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,t!==i&&d(this,t)}function f(t,e,n){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function l(t,e,n){r((function(){var r;try{r=e(n)}catch(r){return o.reject(t,r)}r===t?o.reject(t,new TypeError("Cannot resolve promise with itself")):o.resolve(t,r)}))}function h(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function d(t,e){var n=!1;function r(e){n||(n=!0,o.reject(t,e))}function i(e){n||(n=!0,o.resolve(t,e))}var a=p((function(){e(i,r)}));"error"===a.status&&r(a.value)}function p(t,e){var n={};try{n.value=t(e),n.status="success"}catch(t){n.status="error",n.value=t}return n}(t.exports=c).prototype.finally=function(t){if("function"!=typeof t)return this;var e=this.constructor;return this.then((function(n){return e.resolve(t()).then((function(){return n}))}),(function(n){return e.resolve(t()).then((function(){throw n}))}))},c.prototype.catch=function(t){return this.then(null,t)},c.prototype.then=function(t,e){if("function"!=typeof t&&this.state===s||"function"!=typeof e&&this.state===a)return this;var n=new this.constructor(i);return this.state!==u?l(n,this.state===s?t:e,this.outcome):this.queue.push(new f(n,t,e)),n},f.prototype.callFulfilled=function(t){o.resolve(this.promise,t)},f.prototype.otherCallFulfilled=function(t){l(this.promise,this.onFulfilled,t)},f.prototype.callRejected=function(t){o.reject(this.promise,t)},f.prototype.otherCallRejected=function(t){l(this.promise,this.onRejected,t)},o.resolve=function(t,e){var n=p(h,e);if("error"===n.status)return o.reject(t,n.value);var r=n.value;if(r)d(t,r);else{t.state=s,t.outcome=e;for(var i=-1,a=t.queue.length;++i<a;)t.queue[i].callFulfilled(e)}return t},o.reject=function(t,e){t.state=a,t.outcome=e;for(var n=-1,r=t.queue.length;++n<r;)t.queue[n].callRejected(e);return t},c.resolve=function(t){return t instanceof this?t:o.resolve(new this(i),t)},c.reject=function(t){var e=new this(i);return o.reject(e,t)},c.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n=t.length,r=!1;if(!n)return this.resolve([]);for(var a=new Array(n),s=0,u=-1,c=new this(i);++u<n;)f(t[u],u);return c;function f(t,i){e.resolve(t).then((function(t){a[i]=t,++s!==n||r||(r=!0,o.resolve(c,a))}),(function(t){r||(r=!0,o.reject(c,t))}))}},c.race=function(t){if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var e=t.length,n=!1;if(!e)return this.resolve([]);for(var r,a=-1,s=new this(i);++a<e;)r=t[a],this.resolve(r).then((function(t){n||(n=!0,o.resolve(s,t))}),(function(t){n||(n=!0,o.reject(s,t))}));return s}},function(t,e,n){"use strict";(function(e){var n,r,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var o=0,a=new i(f),s=e.document.createTextNode("");a.observe(s,{characterData:!0}),n=function(){s.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){f(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(f,0)};else{var u=new e.MessageChannel;u.port1.onmessage=f,n=function(){u.port2.postMessage(0)}}var c=[];function f(){var t,e;r=!0;for(var n=c.length;n;){for(e=c,c=[],t=-1;++t<n;)e[t]();n=c.length}r=!1}t.exports=function(t){1!==c.push(t)||r||n()}}).call(this,n(19))},function(t,e,n){"use strict";var r=n(18),i=n(3);function o(t){r.call(this,"ConvertWorker to "+t),this.destType=t}i.inherits(o,r),o.prototype.processChunk=function(t){this.push({data:i.transformTo(this.destType,t.data),meta:t.meta})},t.exports=o},function(t,e,n){"use strict";var r=n(129).Readable;function i(t,e,n){r.call(this,e),this._helper=t;var i=this;t.on("data",(function(t,e){i.push(t)||i._helper.pause(),n&&n(e)})).on("error",(function(t){i.emit("error",t)})).on("end",(function(){i.push(null)}))}n(3).inherits(i,r),i.prototype._read=function(){this._helper.resume()},t.exports=i},function(t,e,n){"use strict";function r(t,e,n){this.name=t,this.dir=n.dir,this.date=n.date,this.comment=n.comment,this.unixPermissions=n.unixPermissions,this.dosPermissions=n.dosPermissions,this._data=e,this._dataBinary=n.binary,this.options={compression:n.compression,compressionOptions:n.compressionOptions}}var i=n(137),o=n(139),a=n(39),s=n(100),u=n(18);r.prototype={internalStream:function(t){var e=null,n="string";try{if(!t)throw new Error("No output type specified.");var r="string"===(n=t.toLowerCase())||"text"===n;"binarystring"!==n&&"text"!==n||(n="string"),e=this._decompressWorker();var o=!this._dataBinary;o&&!r&&(e=e.pipe(new a.Utf8EncodeWorker)),!o&&r&&(e=e.pipe(new a.Utf8DecodeWorker))}catch(t){(e=new u("error")).error(t)}return new i(e,n,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof s&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var n=this._decompressWorker();return this._dataBinary||(n=n.pipe(new a.Utf8EncodeWorker)),s.createWorkerFrom(n,t,e)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof u?this._data:new o(this._data)}};for(var c=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],f=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},l=0;l<c.length;l++)r.prototype[c[l]]=f;t.exports=r},function(t,e,n){"use strict";var r=n(142),i=n(235);e.generateWorker=function(t,e,n){var o=new i(e.streamFiles,n,e.platform,e.encodeFileName),a=0;try{t.forEach((function(t,n){a++;var i=function(t,e){var n=t||e,i=r[n];if(!i)throw new Error(n+" is not a valid compression method !");return i}(n.options.compression,e.compression),s=n.options.compressionOptions||e.compressionOptions||{},u=n.dir,c=n.date;n._compressWorker(i,s).withStreamInfo("file",{name:t,dir:u,date:c,comment:n.comment||"",unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions}).pipe(o)})),o.entriesCount=a}catch(t){o.error(t)}return o}},function(t,e,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=n(226),o=n(3),a=n(18),s=r?"uint8array":"array";function u(t,e){a.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}e.magic="\b\0",o.inherits(u,a),u.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(s,t.data),!1)},u.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},e.compressWorker=function(t){return new u("Deflate",t)},e.uncompressWorker=function(){return new u("Inflate",{})}},function(t,e,n){"use strict";var r={};(0,n(28).assign)(r,n(227),n(230),n(147)),t.exports=r},function(t,e,n){"use strict";var r=n(228),i=n(28),o=n(145),a=n(102),s=n(146),u=Object.prototype.toString,c=0,f=-1,l=0,h=8;function d(t){if(!(this instanceof d))return new d(t);this.options=i.assign({level:f,method:h,chunkSize:16384,windowBits:15,memLevel:8,strategy:l,to:""},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(n!==c)throw new Error(a[n]);if(e.header&&r.deflateSetHeader(this.strm,e.header),e.dictionary){var p;if(p="string"==typeof e.dictionary?o.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(n=r.deflateSetDictionary(this.strm,p))!==c)throw new Error(a[n]);this._dict_set=!0}}function p(t,e){var n=new d(e);if(n.push(t,!0),n.err)throw n.msg||a[n.err];return n.result}d.prototype.push=function(t,e){var n,a,s=this.strm,f=this.options.chunkSize;if(this.ended)return!1;a=e===~~e?e:!0===e?4:0,"string"==typeof t?s.input=o.string2buf(t):"[object ArrayBuffer]"===u.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(f),s.next_out=0,s.avail_out=f),1!==(n=r.deflate(s,a))&&n!==c)return this.onEnd(n),!(this.ended=!0);0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((0<s.avail_in||0===s.avail_out)&&1!==n);return 4===a?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===c):2!==a||(this.onEnd(c),!(s.avail_out=0))},d.prototype.onData=function(t){this.chunks.push(t)},d.prototype.onEnd=function(t){t===c&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Deflate=d,e.deflate=p,e.deflateRaw=function(t,e){return(e=e||{}).raw=!0,p(t,e)},e.gzip=function(t,e){return(e=e||{}).gzip=!0,p(t,e)}},function(t,e,n){"use strict";var r,i=n(28),o=n(229),a=n(143),s=n(144),u=n(102),c=0,f=4,l=0,h=-2,d=-1,p=4,g=2,v=8,m=9,y=286,w=30,b=19,_=2*y+1,x=15,S=3,j=258,k=j+S+1,E=42,T=113,A=1,O=2,I=3,C=4;function R(t,e){return t.msg=u[e],e}function N(t){return(t<<1)-(4<t?9:0)}function L(t){for(var e=t.length;0<=--e;)t[e]=0}function P(t){var e=t.state,n=e.pending;n>t.avail_out&&(n=t.avail_out),0!==n&&(i.arraySet(t.output,e.pending_buf,e.pending_out,n,t.next_out),t.next_out+=n,e.pending_out+=n,t.total_out+=n,t.avail_out-=n,e.pending-=n,0===e.pending&&(e.pending_out=0))}function D(t,e){o._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,P(t.strm)}function z(t,e){t.pending_buf[t.pending++]=e}function B(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function U(t,e){var n,r,i=t.max_chain_length,o=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-k?t.strstart-(t.w_size-k):0,c=t.window,f=t.w_mask,l=t.prev,h=t.strstart+j,d=c[o+a-1],p=c[o+a];t.prev_length>=t.good_match&&(i>>=2),s>t.lookahead&&(s=t.lookahead);do{if(c[(n=e)+a]===p&&c[n+a-1]===d&&c[n]===c[o]&&c[++n]===c[o+1]){o+=2,n++;do{}while(c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&c[++o]===c[++n]&&o<h);if(r=j-(h-o),o=h-j,a<r){if(t.match_start=e,s<=(a=r))break;d=c[o+a-1],p=c[o+a]}}}while((e=l[e&f])>u&&0!=--i);return a<=t.lookahead?a:t.lookahead}function M(t){var e,n,r,o,u,c,f,l,h,d,p=t.w_size;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=p+(p-k)){for(i.arraySet(t.window,t.window,p,p,0),t.match_start-=p,t.strstart-=p,t.block_start-=p,e=n=t.hash_size;r=t.head[--e],t.head[e]=p<=r?r-p:0,--n;);for(e=n=p;r=t.prev[--e],t.prev[e]=p<=r?r-p:0,--n;);o+=p}if(0===t.strm.avail_in)break;if(c=t.strm,f=t.window,l=t.strstart+t.lookahead,d=void 0,(h=o)<(d=c.avail_in)&&(d=h),n=0===d?0:(c.avail_in-=d,i.arraySet(f,c.input,c.next_in,d,l),1===c.state.wrap?c.adler=a(c.adler,f,d,l):2===c.state.wrap&&(c.adler=s(c.adler,f,d,l)),c.next_in+=d,c.total_in+=d,d),t.lookahead+=n,t.lookahead+t.insert>=S)for(u=t.strstart-t.insert,t.ins_h=t.window[u],t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+S-1])&t.hash_mask,t.prev[u&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=u,u++,t.insert--,!(t.lookahead+t.insert<S)););}while(t.lookahead<k&&0!==t.strm.avail_in)}function F(t,e){for(var n,r;;){if(t.lookahead<k){if(M(t),t.lookahead<k&&e===c)return A;if(0===t.lookahead)break}if(n=0,t.lookahead>=S&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+S-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==n&&t.strstart-n<=t.w_size-k&&(t.match_length=U(t,n)),t.match_length>=S)if(r=o._tr_tally(t,t.strstart-t.match_start,t.match_length-S),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=S){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+S-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(r&&(D(t,!1),0===t.strm.avail_out))return A}return t.insert=t.strstart<S-1?t.strstart:S-1,e===f?(D(t,!0),0===t.strm.avail_out?I:C):t.last_lit&&(D(t,!1),0===t.strm.avail_out)?A:O}function W(t,e){for(var n,r,i;;){if(t.lookahead<k){if(M(t),t.lookahead<k&&e===c)return A;if(0===t.lookahead)break}if(n=0,t.lookahead>=S&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+S-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=S-1,0!==n&&t.prev_length<t.max_lazy_match&&t.strstart-n<=t.w_size-k&&(t.match_length=U(t,n),t.match_length<=5&&(1===t.strategy||t.match_length===S&&4096<t.strstart-t.match_start)&&(t.match_length=S-1)),t.prev_length>=S&&t.match_length<=t.prev_length){for(i=t.strstart+t.lookahead-S,r=o._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-S),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+S-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=S-1,t.strstart++,r&&(D(t,!1),0===t.strm.avail_out))return A}else if(t.match_available){if((r=o._tr_tally(t,0,t.window[t.strstart-1]))&&D(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return A}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(r=o._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<S-1?t.strstart:S-1,e===f?(D(t,!0),0===t.strm.avail_out?I:C):t.last_lit&&(D(t,!1),0===t.strm.avail_out)?A:O}function $(t,e,n,r,i){this.good_length=t,this.max_lazy=e,this.nice_length=n,this.max_chain=r,this.func=i}function V(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*_),this.dyn_dtree=new i.Buf16(2*(2*w+1)),this.bl_tree=new i.Buf16(2*(2*b+1)),L(this.dyn_ltree),L(this.dyn_dtree),L(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(x+1),this.heap=new i.Buf16(2*y+1),L(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*y+1),L(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function q(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=g,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?E:T,t.adler=2===e.wrap?0:1,e.last_flush=c,o._tr_init(e),l):R(t,h)}function Z(t){var e=q(t);return e===l&&function(t){t.window_size=2*t.w_size,L(t.head),t.max_lazy_match=r[t.level].max_lazy,t.good_match=r[t.level].good_length,t.nice_match=r[t.level].nice_length,t.max_chain_length=r[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=S-1,t.match_available=0,t.ins_h=0}(t.state),e}function Y(t,e,n,r,o,a){if(!t)return h;var s=1;if(e===d&&(e=6),r<0?(s=0,r=-r):15<r&&(s=2,r-=16),o<1||m<o||n!==v||r<8||15<r||e<0||9<e||a<0||p<a)return R(t,h);8===r&&(r=9);var u=new V;return(t.state=u).strm=t,u.wrap=s,u.gzhead=null,u.w_bits=r,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+S-1)/S),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=n,Z(t)}r=[new $(0,0,0,0,(function(t,e){var n=65535;for(n>t.pending_buf_size-5&&(n=t.pending_buf_size-5);;){if(t.lookahead<=1){if(M(t),0===t.lookahead&&e===c)return A;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var r=t.block_start+n;if((0===t.strstart||t.strstart>=r)&&(t.lookahead=t.strstart-r,t.strstart=r,D(t,!1),0===t.strm.avail_out))return A;if(t.strstart-t.block_start>=t.w_size-k&&(D(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(D(t,!0),0===t.strm.avail_out?I:C):(t.strstart>t.block_start&&(D(t,!1),t.strm.avail_out),A)})),new $(4,4,8,4,F),new $(4,5,16,8,F),new $(4,6,32,32,F),new $(4,4,16,16,W),new $(8,16,32,32,W),new $(8,16,128,128,W),new $(8,32,128,256,W),new $(32,128,258,1024,W),new $(32,258,258,4096,W)],e.deflateInit=function(t,e){return Y(t,e,v,15,8,0)},e.deflateInit2=Y,e.deflateReset=Z,e.deflateResetKeep=q,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?h:(t.state.gzhead=e,l):h},e.deflate=function(t,e){var n,i,a,u;if(!t||!t.state||5<e||e<0)return t?R(t,h):h;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&e!==f)return R(t,0===t.avail_out?-5:h);if(i.strm=t,n=i.last_flush,i.last_flush=e,i.status===E)if(2===i.wrap)t.adler=0,z(i,31),z(i,139),z(i,8),i.gzhead?(z(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),z(i,255&i.gzhead.time),z(i,i.gzhead.time>>8&255),z(i,i.gzhead.time>>16&255),z(i,i.gzhead.time>>24&255),z(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),z(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(z(i,255&i.gzhead.extra.length),z(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=s(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(z(i,0),z(i,0),z(i,0),z(i,0),z(i,0),z(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),z(i,3),i.status=T);else{var d=v+(i.w_bits-8<<4)<<8;d|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(d|=32),d+=31-d%31,i.status=T,B(i,d),0!==i.strstart&&(B(i,t.adler>>>16),B(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),P(t),a=i.pending,i.pending!==i.pending_buf_size));)z(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),P(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,z(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),P(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,z(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&P(t),i.pending+2<=i.pending_buf_size&&(z(i,255&t.adler),z(i,t.adler>>8&255),t.adler=0,i.status=T)):i.status=T),0!==i.pending){if(P(t),0===t.avail_out)return i.last_flush=-1,l}else if(0===t.avail_in&&N(e)<=N(n)&&e!==f)return R(t,-5);if(666===i.status&&0!==t.avail_in)return R(t,-5);if(0!==t.avail_in||0!==i.lookahead||e!==c&&666!==i.status){var p=2===i.strategy?function(t,e){for(var n;;){if(0===t.lookahead&&(M(t),0===t.lookahead)){if(e===c)return A;break}if(t.match_length=0,n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,n&&(D(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(D(t,!0),0===t.strm.avail_out?I:C):t.last_lit&&(D(t,!1),0===t.strm.avail_out)?A:O}(i,e):3===i.strategy?function(t,e){for(var n,r,i,a,s=t.window;;){if(t.lookahead<=j){if(M(t),t.lookahead<=j&&e===c)return A;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=S&&0<t.strstart&&(r=s[i=t.strstart-1])===s[++i]&&r===s[++i]&&r===s[++i]){a=t.strstart+j;do{}while(r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&i<a);t.match_length=j-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=S?(n=o._tr_tally(t,1,t.match_length-S),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),n&&(D(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(D(t,!0),0===t.strm.avail_out?I:C):t.last_lit&&(D(t,!1),0===t.strm.avail_out)?A:O}(i,e):r[i.level].func(i,e);if(p!==I&&p!==C||(i.status=666),p===A||p===I)return 0===t.avail_out&&(i.last_flush=-1),l;if(p===O&&(1===e?o._tr_align(i):5!==e&&(o._tr_stored_block(i,0,0,!1),3===e&&(L(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),P(t),0===t.avail_out))return i.last_flush=-1,l}return e!==f?l:i.wrap<=0?1:(2===i.wrap?(z(i,255&t.adler),z(i,t.adler>>8&255),z(i,t.adler>>16&255),z(i,t.adler>>24&255),z(i,255&t.total_in),z(i,t.total_in>>8&255),z(i,t.total_in>>16&255),z(i,t.total_in>>24&255)):(B(i,t.adler>>>16),B(i,65535&t.adler)),P(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?l:1)},e.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==E&&69!==e&&73!==e&&91!==e&&103!==e&&e!==T&&666!==e?R(t,h):(t.state=null,e===T?R(t,-3):l):h},e.deflateSetDictionary=function(t,e){var n,r,o,s,u,c,f,d,p=e.length;if(!t||!t.state)return h;if(2===(s=(n=t.state).wrap)||1===s&&n.status!==E||n.lookahead)return h;for(1===s&&(t.adler=a(t.adler,e,p,0)),n.wrap=0,p>=n.w_size&&(0===s&&(L(n.head),n.strstart=0,n.block_start=0,n.insert=0),d=new i.Buf8(n.w_size),i.arraySet(d,e,p-n.w_size,n.w_size,0),e=d,p=n.w_size),u=t.avail_in,c=t.next_in,f=t.input,t.avail_in=p,t.next_in=0,t.input=e,M(n);n.lookahead>=S;){for(r=n.strstart,o=n.lookahead-(S-1);n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+S-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++,--o;);n.strstart=r,n.lookahead=S-1,M(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=S-1,n.match_available=0,t.next_in=c,t.input=f,t.avail_in=u,n.wrap=s,l},e.deflateInfo="pako deflate (from Nodeca project)"},function(t,e,n){"use strict";var r=n(28);function i(t){for(var e=t.length;0<=--e;)t[e]=0}var o=0,a=256,s=a+1+29,u=30,c=19,f=2*s+1,l=15,h=16,d=256,p=16,g=17,v=18,m=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],y=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],w=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],b=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],_=new Array(2*(s+2));i(_);var x=new Array(2*u);i(x);var S=new Array(512);i(S);var j=new Array(256);i(j);var k=new Array(29);i(k);var E,T,A,O=new Array(u);function I(t,e,n,r,i){this.static_tree=t,this.extra_bits=e,this.extra_base=n,this.elems=r,this.max_length=i,this.has_stree=t&&t.length}function C(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function R(t){return t<256?S[t]:S[256+(t>>>7)]}function N(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function L(t,e,n){t.bi_valid>h-n?(t.bi_buf|=e<<t.bi_valid&65535,N(t,t.bi_buf),t.bi_buf=e>>h-t.bi_valid,t.bi_valid+=n-h):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=n)}function P(t,e,n){L(t,n[2*e],n[2*e+1])}function D(t,e){for(var n=0;n|=1&t,t>>>=1,n<<=1,0<--e;);return n>>>1}function z(t,e,n){var r,i,o=new Array(l+1),a=0;for(r=1;r<=l;r++)o[r]=a=a+n[r-1]<<1;for(i=0;i<=e;i++){var s=t[2*i+1];0!==s&&(t[2*i]=D(o[s]++,s))}}function B(t){var e;for(e=0;e<s;e++)t.dyn_ltree[2*e]=0;for(e=0;e<u;e++)t.dyn_dtree[2*e]=0;for(e=0;e<c;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*d]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function U(t){8<t.bi_valid?N(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function M(t,e,n,r){var i=2*e,o=2*n;return t[i]<t[o]||t[i]===t[o]&&r[e]<=r[n]}function F(t,e,n){for(var r=t.heap[n],i=n<<1;i<=t.heap_len&&(i<t.heap_len&&M(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!M(e,r,t.heap[i],t.depth));)t.heap[n]=t.heap[i],n=i,i<<=1;t.heap[n]=r}function W(t,e,n){var r,i,o,s,u=0;if(0!==t.last_lit)for(;r=t.pending_buf[t.d_buf+2*u]<<8|t.pending_buf[t.d_buf+2*u+1],i=t.pending_buf[t.l_buf+u],u++,0===r?P(t,i,e):(P(t,(o=j[i])+a+1,e),0!==(s=m[o])&&L(t,i-=k[o],s),P(t,o=R(--r),n),0!==(s=y[o])&&L(t,r-=O[o],s)),u<t.last_lit;);P(t,d,e)}function $(t,e){var n,r,i,o=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,u=e.stat_desc.elems,c=-1;for(t.heap_len=0,t.heap_max=f,n=0;n<u;n++)0!==o[2*n]?(t.heap[++t.heap_len]=c=n,t.depth[n]=0):o[2*n+1]=0;for(;t.heap_len<2;)o[2*(i=t.heap[++t.heap_len]=c<2?++c:0)]=1,t.depth[i]=0,t.opt_len--,s&&(t.static_len-=a[2*i+1]);for(e.max_code=c,n=t.heap_len>>1;1<=n;n--)F(t,o,n);for(i=u;n=t.heap[1],t.heap[1]=t.heap[t.heap_len--],F(t,o,1),r=t.heap[1],t.heap[--t.heap_max]=n,t.heap[--t.heap_max]=r,o[2*i]=o[2*n]+o[2*r],t.depth[i]=(t.depth[n]>=t.depth[r]?t.depth[n]:t.depth[r])+1,o[2*n+1]=o[2*r+1]=i,t.heap[1]=i++,F(t,o,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var n,r,i,o,a,s,u=e.dyn_tree,c=e.max_code,h=e.stat_desc.static_tree,d=e.stat_desc.has_stree,p=e.stat_desc.extra_bits,g=e.stat_desc.extra_base,v=e.stat_desc.max_length,m=0;for(o=0;o<=l;o++)t.bl_count[o]=0;for(u[2*t.heap[t.heap_max]+1]=0,n=t.heap_max+1;n<f;n++)v<(o=u[2*u[2*(r=t.heap[n])+1]+1]+1)&&(o=v,m++),u[2*r+1]=o,c<r||(t.bl_count[o]++,a=0,g<=r&&(a=p[r-g]),s=u[2*r],t.opt_len+=s*(o+a),d&&(t.static_len+=s*(h[2*r+1]+a)));if(0!==m){do{for(o=v-1;0===t.bl_count[o];)o--;t.bl_count[o]--,t.bl_count[o+1]+=2,t.bl_count[v]--,m-=2}while(0<m);for(o=v;0!==o;o--)for(r=t.bl_count[o];0!==r;)c<(i=t.heap[--n])||(u[2*i+1]!==o&&(t.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),r--)}}(t,e),z(o,c,t.bl_count)}function V(t,e,n){var r,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),e[2*(n+1)+1]=65535,r=0;r<=n;r++)i=a,a=e[2*(r+1)+1],++s<u&&i===a||(s<c?t.bl_tree[2*i]+=s:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[2*p]++):s<=10?t.bl_tree[2*g]++:t.bl_tree[2*v]++,o=i,c=(s=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4))}function q(t,e,n){var r,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),r=0;r<=n;r++)if(i=a,a=e[2*(r+1)+1],!(++s<u&&i===a)){if(s<c)for(;P(t,i,t.bl_tree),0!=--s;);else 0!==i?(i!==o&&(P(t,i,t.bl_tree),s--),P(t,p,t.bl_tree),L(t,s-3,2)):s<=10?(P(t,g,t.bl_tree),L(t,s-3,3)):(P(t,v,t.bl_tree),L(t,s-11,7));o=i,c=(s=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4)}}i(O);var Z=!1;function Y(t,e,n,i){L(t,(o<<1)+(i?1:0),3),function(t,e,n,i){U(t),N(t,n),N(t,~n),r.arraySet(t.pending_buf,t.window,e,n,t.pending),t.pending+=n}(t,e,n)}e._tr_init=function(t){Z||(function(){var t,e,n,r,i,o=new Array(l+1);for(r=n=0;r<28;r++)for(k[r]=n,t=0;t<1<<m[r];t++)j[n++]=r;for(j[n-1]=r,r=i=0;r<16;r++)for(O[r]=i,t=0;t<1<<y[r];t++)S[i++]=r;for(i>>=7;r<u;r++)for(O[r]=i<<7,t=0;t<1<<y[r]-7;t++)S[256+i++]=r;for(e=0;e<=l;e++)o[e]=0;for(t=0;t<=143;)_[2*t+1]=8,t++,o[8]++;for(;t<=255;)_[2*t+1]=9,t++,o[9]++;for(;t<=279;)_[2*t+1]=7,t++,o[7]++;for(;t<=287;)_[2*t+1]=8,t++,o[8]++;for(z(_,s+1,o),t=0;t<u;t++)x[2*t+1]=5,x[2*t]=D(t,5);E=new I(_,m,a+1,s,l),T=new I(x,y,0,u,l),A=new I(new Array(0),w,0,c,7)}(),Z=!0),t.l_desc=new C(t.dyn_ltree,E),t.d_desc=new C(t.dyn_dtree,T),t.bl_desc=new C(t.bl_tree,A),t.bi_buf=0,t.bi_valid=0,B(t)},e._tr_stored_block=Y,e._tr_flush_block=function(t,e,n,r){var i,o,s=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,n=4093624447;for(e=0;e<=31;e++,n>>>=1)if(1&n&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<a;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),$(t,t.l_desc),$(t,t.d_desc),s=function(t){var e;for(V(t,t.dyn_ltree,t.l_desc.max_code),V(t,t.dyn_dtree,t.d_desc.max_code),$(t,t.bl_desc),e=c-1;3<=e&&0===t.bl_tree[2*b[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),i=t.opt_len+3+7>>>3,(o=t.static_len+3+7>>>3)<=i&&(i=o)):i=o=n+5,n+4<=i&&-1!==e?Y(t,e,n,r):4===t.strategy||o===i?(L(t,2+(r?1:0),3),W(t,_,x)):(L(t,4+(r?1:0),3),function(t,e,n,r){var i;for(L(t,e-257,5),L(t,n-1,5),L(t,r-4,4),i=0;i<r;i++)L(t,t.bl_tree[2*b[i]+1],3);q(t,t.dyn_ltree,e-1),q(t,t.dyn_dtree,n-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),W(t,t.dyn_ltree,t.dyn_dtree)),B(t),r&&U(t)},e._tr_tally=function(t,e,n){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&n,t.last_lit++,0===e?t.dyn_ltree[2*n]++:(t.matches++,e--,t.dyn_ltree[2*(j[n]+a+1)]++,t.dyn_dtree[2*R(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){L(t,2,3),P(t,d,_),function(t){16===t.bi_valid?(N(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},function(t,e,n){"use strict";var r=n(231),i=n(28),o=n(145),a=n(147),s=n(102),u=n(146),c=n(234),f=Object.prototype.toString;function l(t){if(!(this instanceof l))return new l(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,e.windowBits);if(n!==a.Z_OK)throw new Error(s[n]);if(this.header=new c,r.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=o.string2buf(e.dictionary):"[object ArrayBuffer]"===f.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(n=r.inflateSetDictionary(this.strm,e.dictionary))!==a.Z_OK))throw new Error(s[n])}function h(t,e){var n=new l(e);if(n.push(t,!0),n.err)throw n.msg||s[n.err];return n.result}l.prototype.push=function(t,e){var n,s,u,c,l,h=this.strm,d=this.options.chunkSize,p=this.options.dictionary,g=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?h.input=o.binstring2buf(t):"[object ArrayBuffer]"===f.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new i.Buf8(d),h.next_out=0,h.avail_out=d),(n=r.inflate(h,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&p&&(n=r.inflateSetDictionary(this.strm,p)),n===a.Z_BUF_ERROR&&!0===g&&(n=a.Z_OK,g=!1),n!==a.Z_STREAM_END&&n!==a.Z_OK)return this.onEnd(n),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&n!==a.Z_STREAM_END&&(0!==h.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(h.output,h.next_out),c=h.next_out-u,l=o.buf2string(h.output,u),h.next_out=c,h.avail_out=d-c,c&&i.arraySet(h.output,h.output,u,c,0),this.onData(l)):this.onData(i.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(g=!0)}while((0<h.avail_in||0===h.avail_out)&&n!==a.Z_STREAM_END);return n===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),!(h.avail_out=0))},l.prototype.onData=function(t){this.chunks.push(t)},l.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=l,e.inflate=h,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,h(t,e)},e.ungzip=h},function(t,e,n){"use strict";var r=n(28),i=n(143),o=n(144),a=n(232),s=n(233),u=1,c=2,f=0,l=-2,h=1,d=852,p=592;function g(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function v(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function m(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=h,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new r.Buf32(d),e.distcode=e.distdyn=new r.Buf32(p),e.sane=1,e.back=-1,f):l}function y(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,m(t)):l}function w(t,e){var n,r;return t&&t.state?(r=t.state,e<0?(n=0,e=-e):(n=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?l:(null!==r.window&&r.wbits!==e&&(r.window=null),r.wrap=n,r.wbits=e,y(t))):l}function b(t,e){var n,r;return t?(r=new v,(t.state=r).window=null,(n=w(t,e))!==f&&(t.state=null),n):l}var _,x,S=!0;function j(t){if(S){var e;for(_=new r.Buf32(512),x=new r.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(u,t.lens,0,288,_,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(c,t.lens,0,32,x,0,t.work,{bits:5}),S=!1}t.lencode=_,t.lenbits=9,t.distcode=x,t.distbits=5}function k(t,e,n,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),i>=a.wsize?(r.arraySet(a.window,e,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i<(o=a.wsize-a.wnext)&&(o=i),r.arraySet(a.window,e,n-i,o,a.wnext),(i-=o)?(r.arraySet(a.window,e,n-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}e.inflateReset=y,e.inflateReset2=w,e.inflateResetKeep=m,e.inflateInit=function(t){return b(t,15)},e.inflateInit2=b,e.inflate=function(t,e){var n,d,p,v,m,y,w,b,_,x,S,E,T,A,O,I,C,R,N,L,P,D,z,B,U=0,M=new r.Buf8(4),F=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return l;12===(n=t.state).mode&&(n.mode=13),m=t.next_out,p=t.output,w=t.avail_out,v=t.next_in,d=t.input,y=t.avail_in,b=n.hold,_=n.bits,x=y,S=w,D=f;t:for(;;)switch(n.mode){case h:if(0===n.wrap){n.mode=13;break}for(;_<16;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if(2&n.wrap&&35615===b){M[n.check=0]=255&b,M[1]=b>>>8&255,n.check=o(n.check,M,2,0),_=b=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&b)<<8)+(b>>8))%31){t.msg="incorrect header check",n.mode=30;break}if(8!=(15&b)){t.msg="unknown compression method",n.mode=30;break}if(_-=4,P=8+(15&(b>>>=4)),0===n.wbits)n.wbits=P;else if(P>n.wbits){t.msg="invalid window size",n.mode=30;break}n.dmax=1<<P,t.adler=n.check=1,n.mode=512&b?10:12,_=b=0;break;case 2:for(;_<16;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if(n.flags=b,8!=(255&n.flags)){t.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){t.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=b>>8&1),512&n.flags&&(M[0]=255&b,M[1]=b>>>8&255,n.check=o(n.check,M,2,0)),_=b=0,n.mode=3;case 3:for(;_<32;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}n.head&&(n.head.time=b),512&n.flags&&(M[0]=255&b,M[1]=b>>>8&255,M[2]=b>>>16&255,M[3]=b>>>24&255,n.check=o(n.check,M,4,0)),_=b=0,n.mode=4;case 4:for(;_<16;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}n.head&&(n.head.xflags=255&b,n.head.os=b>>8),512&n.flags&&(M[0]=255&b,M[1]=b>>>8&255,n.check=o(n.check,M,2,0)),_=b=0,n.mode=5;case 5:if(1024&n.flags){for(;_<16;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}n.length=b,n.head&&(n.head.extra_len=b),512&n.flags&&(M[0]=255&b,M[1]=b>>>8&255,n.check=o(n.check,M,2,0)),_=b=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&(y<(E=n.length)&&(E=y),E&&(n.head&&(P=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,d,v,E,P)),512&n.flags&&(n.check=o(n.check,d,E,v)),y-=E,v+=E,n.length-=E),n.length))break t;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===y)break t;for(E=0;P=d[v+E++],n.head&&P&&n.length<65536&&(n.head.name+=String.fromCharCode(P)),P&&E<y;);if(512&n.flags&&(n.check=o(n.check,d,E,v)),y-=E,v+=E,P)break t}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===y)break t;for(E=0;P=d[v+E++],n.head&&P&&n.length<65536&&(n.head.comment+=String.fromCharCode(P)),P&&E<y;);if(512&n.flags&&(n.check=o(n.check,d,E,v)),y-=E,v+=E,P)break t}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;_<16;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if(b!==(65535&n.check)){t.msg="header crc mismatch",n.mode=30;break}_=b=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),t.adler=n.check=0,n.mode=12;break;case 10:for(;_<32;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}t.adler=n.check=g(b),_=b=0,n.mode=11;case 11:if(0===n.havedict)return t.next_out=m,t.avail_out=w,t.next_in=v,t.avail_in=y,n.hold=b,n.bits=_,2;t.adler=n.check=1,n.mode=12;case 12:if(5===e||6===e)break t;case 13:if(n.last){b>>>=7&_,_-=7&_,n.mode=27;break}for(;_<3;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}switch(n.last=1&b,_-=1,3&(b>>>=1)){case 0:n.mode=14;break;case 1:if(j(n),n.mode=20,6!==e)break;b>>>=2,_-=2;break t;case 2:n.mode=17;break;case 3:t.msg="invalid block type",n.mode=30}b>>>=2,_-=2;break;case 14:for(b>>>=7&_,_-=7&_;_<32;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if((65535&b)!=(b>>>16^65535)){t.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&b,_=b=0,n.mode=15,6===e)break t;case 15:n.mode=16;case 16:if(E=n.length){if(y<E&&(E=y),w<E&&(E=w),0===E)break t;r.arraySet(p,d,v,E,m),y-=E,v+=E,w-=E,m+=E,n.length-=E;break}n.mode=12;break;case 17:for(;_<14;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if(n.nlen=257+(31&b),b>>>=5,_-=5,n.ndist=1+(31&b),b>>>=5,_-=5,n.ncode=4+(15&b),b>>>=4,_-=4,286<n.nlen||30<n.ndist){t.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;_<3;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}n.lens[F[n.have++]]=7&b,b>>>=3,_-=3}for(;n.have<19;)n.lens[F[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,z={bits:n.lenbits},D=s(0,n.lens,0,19,n.lencode,0,n.work,z),n.lenbits=z.bits,D){t.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;I=(U=n.lencode[b&(1<<n.lenbits)-1])>>>16&255,C=65535&U,!((O=U>>>24)<=_);){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if(C<16)b>>>=O,_-=O,n.lens[n.have++]=C;else{if(16===C){for(B=O+2;_<B;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if(b>>>=O,_-=O,0===n.have){t.msg="invalid bit length repeat",n.mode=30;break}P=n.lens[n.have-1],E=3+(3&b),b>>>=2,_-=2}else if(17===C){for(B=O+3;_<B;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}_-=O,P=0,E=3+(7&(b>>>=O)),b>>>=3,_-=3}else{for(B=O+7;_<B;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}_-=O,P=0,E=11+(127&(b>>>=O)),b>>>=7,_-=7}if(n.have+E>n.nlen+n.ndist){t.msg="invalid bit length repeat",n.mode=30;break}for(;E--;)n.lens[n.have++]=P}}if(30===n.mode)break;if(0===n.lens[256]){t.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,z={bits:n.lenbits},D=s(u,n.lens,0,n.nlen,n.lencode,0,n.work,z),n.lenbits=z.bits,D){t.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,z={bits:n.distbits},D=s(c,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,z),n.distbits=z.bits,D){t.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===e)break t;case 20:n.mode=21;case 21:if(6<=y&&258<=w){t.next_out=m,t.avail_out=w,t.next_in=v,t.avail_in=y,n.hold=b,n.bits=_,a(t,S),m=t.next_out,p=t.output,w=t.avail_out,v=t.next_in,d=t.input,y=t.avail_in,b=n.hold,_=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;I=(U=n.lencode[b&(1<<n.lenbits)-1])>>>16&255,C=65535&U,!((O=U>>>24)<=_);){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if(I&&0==(240&I)){for(R=O,N=I,L=C;I=(U=n.lencode[L+((b&(1<<R+N)-1)>>R)])>>>16&255,C=65535&U,!(R+(O=U>>>24)<=_);){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}b>>>=R,_-=R,n.back+=R}if(b>>>=O,_-=O,n.back+=O,n.length=C,0===I){n.mode=26;break}if(32&I){n.back=-1,n.mode=12;break}if(64&I){t.msg="invalid literal/length code",n.mode=30;break}n.extra=15&I,n.mode=22;case 22:if(n.extra){for(B=n.extra;_<B;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}n.length+=b&(1<<n.extra)-1,b>>>=n.extra,_-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;I=(U=n.distcode[b&(1<<n.distbits)-1])>>>16&255,C=65535&U,!((O=U>>>24)<=_);){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if(0==(240&I)){for(R=O,N=I,L=C;I=(U=n.distcode[L+((b&(1<<R+N)-1)>>R)])>>>16&255,C=65535&U,!(R+(O=U>>>24)<=_);){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}b>>>=R,_-=R,n.back+=R}if(b>>>=O,_-=O,n.back+=O,64&I){t.msg="invalid distance code",n.mode=30;break}n.offset=C,n.extra=15&I,n.mode=24;case 24:if(n.extra){for(B=n.extra;_<B;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}n.offset+=b&(1<<n.extra)-1,b>>>=n.extra,_-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){t.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===w)break t;if(E=S-w,n.offset>E){if((E=n.offset-E)>n.whave&&n.sane){t.msg="invalid distance too far back",n.mode=30;break}T=E>n.wnext?(E-=n.wnext,n.wsize-E):n.wnext-E,E>n.length&&(E=n.length),A=n.window}else A=p,T=m-n.offset,E=n.length;for(w<E&&(E=w),w-=E,n.length-=E;p[m++]=A[T++],--E;);0===n.length&&(n.mode=21);break;case 26:if(0===w)break t;p[m++]=n.length,w--,n.mode=21;break;case 27:if(n.wrap){for(;_<32;){if(0===y)break t;y--,b|=d[v++]<<_,_+=8}if(S-=w,t.total_out+=S,n.total+=S,S&&(t.adler=n.check=n.flags?o(n.check,p,S,m-S):i(n.check,p,S,m-S)),S=w,(n.flags?b:g(b))!==n.check){t.msg="incorrect data check",n.mode=30;break}_=b=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;_<32;){if(0===y)break t;y--,b+=d[v++]<<_,_+=8}if(b!==(4294967295&n.total)){t.msg="incorrect length check",n.mode=30;break}_=b=0}n.mode=29;case 29:D=1;break t;case 30:D=-3;break t;case 31:return-4;case 32:default:return l}return t.next_out=m,t.avail_out=w,t.next_in=v,t.avail_in=y,n.hold=b,n.bits=_,(n.wsize||S!==t.avail_out&&n.mode<30&&(n.mode<27||4!==e))&&k(t,t.output,t.next_out,S-t.avail_out)?(n.mode=31,-4):(x-=t.avail_in,S-=t.avail_out,t.total_in+=x,t.total_out+=S,n.total+=S,n.wrap&&S&&(t.adler=n.check=n.flags?o(n.check,p,S,t.next_out-S):i(n.check,p,S,t.next_out-S)),t.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),(0==x&&0===S||4===e)&&D===f&&(D=-5),D)},e.inflateEnd=function(t){if(!t||!t.state)return l;var e=t.state;return e.window&&(e.window=null),t.state=null,f},e.inflateGetHeader=function(t,e){var n;return t&&t.state?0==(2&(n=t.state).wrap)?l:((n.head=e).done=!1,f):l},e.inflateSetDictionary=function(t,e){var n,r=e.length;return t&&t.state?0!==(n=t.state).wrap&&11!==n.mode?l:11===n.mode&&i(1,e,r,0)!==n.check?-3:k(t,e,r,r)?(n.mode=31,-4):(n.havedict=1,f):l},e.inflateInfo="pako inflate (from Nodeca project)"},function(t,e,n){"use strict";t.exports=function(t,e){var n,r,i,o,a,s,u,c,f,l,h,d,p,g,v,m,y,w,b,_,x,S,j,k,E;n=t.state,r=t.next_in,k=t.input,i=r+(t.avail_in-5),o=t.next_out,E=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=n.dmax,c=n.wsize,f=n.whave,l=n.wnext,h=n.window,d=n.hold,p=n.bits,g=n.lencode,v=n.distcode,m=(1<<n.lenbits)-1,y=(1<<n.distbits)-1;t:do{p<15&&(d+=k[r++]<<p,p+=8,d+=k[r++]<<p,p+=8),w=g[d&m];e:for(;;){if(d>>>=b=w>>>24,p-=b,0==(b=w>>>16&255))E[o++]=65535&w;else{if(!(16&b)){if(0==(64&b)){w=g[(65535&w)+(d&(1<<b)-1)];continue e}if(32&b){n.mode=12;break t}t.msg="invalid literal/length code",n.mode=30;break t}_=65535&w,(b&=15)&&(p<b&&(d+=k[r++]<<p,p+=8),_+=d&(1<<b)-1,d>>>=b,p-=b),p<15&&(d+=k[r++]<<p,p+=8,d+=k[r++]<<p,p+=8),w=v[d&y];n:for(;;){if(d>>>=b=w>>>24,p-=b,!(16&(b=w>>>16&255))){if(0==(64&b)){w=v[(65535&w)+(d&(1<<b)-1)];continue n}t.msg="invalid distance code",n.mode=30;break t}if(x=65535&w,p<(b&=15)&&(d+=k[r++]<<p,(p+=8)<b&&(d+=k[r++]<<p,p+=8)),u<(x+=d&(1<<b)-1)){t.msg="invalid distance too far back",n.mode=30;break t}if(d>>>=b,p-=b,(b=o-a)<x){if(f<(b=x-b)&&n.sane){t.msg="invalid distance too far back",n.mode=30;break t}if(j=h,(S=0)===l){if(S+=c-b,b<_){for(_-=b;E[o++]=h[S++],--b;);S=o-x,j=E}}else if(l<b){if(S+=c+l-b,(b-=l)<_){for(_-=b;E[o++]=h[S++],--b;);if(S=0,l<_){for(_-=b=l;E[o++]=h[S++],--b;);S=o-x,j=E}}}else if(S+=l-b,b<_){for(_-=b;E[o++]=h[S++],--b;);S=o-x,j=E}for(;2<_;)E[o++]=j[S++],E[o++]=j[S++],E[o++]=j[S++],_-=3;_&&(E[o++]=j[S++],1<_&&(E[o++]=j[S++]))}else{for(S=o-x;E[o++]=E[S++],E[o++]=E[S++],E[o++]=E[S++],2<(_-=3););_&&(E[o++]=E[S++],1<_&&(E[o++]=E[S++]))}break}}break}}while(r<i&&o<s);r-=_=p>>3,d&=(1<<(p-=_<<3))-1,t.next_in=r,t.next_out=o,t.avail_in=r<i?i-r+5:5-(r-i),t.avail_out=o<s?s-o+257:257-(o-s),n.hold=d,n.bits=p}},function(t,e,n){"use strict";var r=n(28),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,n,u,c,f,l,h){var d,p,g,v,m,y,w,b,_,x=h.bits,S=0,j=0,k=0,E=0,T=0,A=0,O=0,I=0,C=0,R=0,N=null,L=0,P=new r.Buf16(16),D=new r.Buf16(16),z=null,B=0;for(S=0;S<=15;S++)P[S]=0;for(j=0;j<u;j++)P[e[n+j]]++;for(T=x,E=15;1<=E&&0===P[E];E--);if(E<T&&(T=E),0===E)return c[f++]=20971520,c[f++]=20971520,h.bits=1,0;for(k=1;k<E&&0===P[k];k++);for(T<k&&(T=k),S=I=1;S<=15;S++)if(I<<=1,(I-=P[S])<0)return-1;if(0<I&&(0===t||1!==E))return-1;for(D[1]=0,S=1;S<15;S++)D[S+1]=D[S]+P[S];for(j=0;j<u;j++)0!==e[n+j]&&(l[D[e[n+j]]++]=j);if(y=0===t?(N=z=l,19):1===t?(N=i,L-=257,z=o,B-=257,256):(N=a,z=s,-1),S=k,m=f,O=j=R=0,g=-1,v=(C=1<<(A=T))-1,1===t&&852<C||2===t&&592<C)return 1;for(;;){for(w=S-O,_=l[j]<y?(b=0,l[j]):l[j]>y?(b=z[B+l[j]],N[L+l[j]]):(b=96,0),d=1<<S-O,k=p=1<<A;c[m+(R>>O)+(p-=d)]=w<<24|b<<16|_|0,0!==p;);for(d=1<<S-1;R&d;)d>>=1;if(0!==d?(R&=d-1,R+=d):R=0,j++,0==--P[S]){if(S===E)break;S=e[n+l[j]]}if(T<S&&(R&v)!==g){for(0===O&&(O=T),m+=k,I=1<<(A=S-O);A+O<E&&!((I-=P[A+O])<=0);)A++,I<<=1;if(C+=1<<A,1===t&&852<C||2===t&&592<C)return 1;c[g=R&v]=T<<24|A<<16|m-f|0}}return 0!==R&&(c[m+R]=S-O<<24|64<<16|0),h.bits=T,0}},function(t,e,n){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},function(t,e,n){"use strict";function r(t,e){var n,r="";for(n=0;n<e;n++)r+=String.fromCharCode(255&t),t>>>=8;return r}function i(t,e,n,i,a,f){var l,h,d=t.file,p=t.compression,g=f!==s.utf8encode,v=o.transformTo("string",f(d.name)),m=o.transformTo("string",s.utf8encode(d.name)),y=d.comment,w=o.transformTo("string",f(y)),b=o.transformTo("string",s.utf8encode(y)),_=m.length!==d.name.length,x=b.length!==y.length,S="",j="",k="",E=d.dir,T=d.date,A={crc32:0,compressedSize:0,uncompressedSize:0};e&&!n||(A.crc32=t.crc32,A.compressedSize=t.compressedSize,A.uncompressedSize=t.uncompressedSize);var O=0;e&&(O|=8),g||!_&&!x||(O|=2048);var I=0,C=0;E&&(I|=16),"UNIX"===a?(C=798,I|=function(t,e){var n=t;return t||(n=e?16893:33204),(65535&n)<<16}(d.unixPermissions,E)):(C=20,I|=function(t){return 63&(t||0)}(d.dosPermissions)),l=T.getUTCHours(),l<<=6,l|=T.getUTCMinutes(),l<<=5,l|=T.getUTCSeconds()/2,h=T.getUTCFullYear()-1980,h<<=4,h|=T.getUTCMonth()+1,h<<=5,h|=T.getUTCDate(),_&&(j=r(1,1)+r(u(v),4)+m,S+="up"+r(j.length,2)+j),x&&(k=r(1,1)+r(u(w),4)+b,S+="uc"+r(k.length,2)+k);var R="";return R+="\n\0",R+=r(O,2),R+=p.magic,R+=r(l,2),R+=r(h,2),R+=r(A.crc32,4),R+=r(A.compressedSize,4),R+=r(A.uncompressedSize,4),R+=r(v.length,2),R+=r(S.length,2),{fileRecord:c.LOCAL_FILE_HEADER+R+v+S,dirRecord:c.CENTRAL_FILE_HEADER+r(C,2)+R+r(w.length,2)+"\0\0\0\0"+r(I,4)+r(i,4)+v+S+w}}var o=n(3),a=n(18),s=n(39),u=n(101),c=n(148);function f(t,e,n,r){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=n,this.encodeFileName=r,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}o.inherits(f,a),f.prototype.push=function(t){var e=t.meta.percent||0,n=this.entriesCount,r=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,a.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:n?(e+100*(n-r-1))/n:100}}))},f.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var n=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:n.fileRecord,meta:{percent:0}})}else this.accumulate=!0},f.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,n=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),e)this.push({data:function(t){return c.DATA_DESCRIPTOR+r(t.crc32,4)+r(t.compressedSize,4)+r(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},f.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var n=this.bytesWritten-t,i=function(t,e,n,i,a){var s=o.transformTo("string",a(i));return c.CENTRAL_DIRECTORY_END+"\0\0\0\0"+r(t,2)+r(t,2)+r(e,4)+r(n,4)+r(s.length,2)+s}(this.dirRecords.length,n,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},f.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},f.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()})),t.on("error",(function(t){e.error(t)})),this},f.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},f.prototype.error=function(t){var e=this._sources;if(!a.prototype.error.call(this,t))return!1;for(var n=0;n<e.length;n++)try{e[n].error(t)}catch(t){}return!0},f.prototype.lock=function(){a.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},t.exports=f},function(t,e,n){"use strict";var r=n(3),i=n(18);function o(t,e){i.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e)}r.inherits(o,i),o.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on("data",(function(t){e.push({data:t,meta:{percent:0}})})).on("error",(function(t){e.isPaused?this.generatedError=t:e.error(t)})).on("end",(function(){e.isPaused?e._upstreamEnded=!0:e.end()}))},o.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=o},function(t,e,n){"use strict";var r=n(3),i=n(53),o=n(39),a=(r=n(3),n(238)),s=n(141),u=n(76);function c(t){return new i.Promise((function(e,n){var r=t.decompressed.getContentWorker().pipe(new s);r.on("error",(function(t){n(t)})).on("end",(function(){r.streamInfo.crc32!==t.decompressed.crc32?n(new Error("Corrupted zip : CRC32 mismatch")):e()})).resume()}))}t.exports=function(t,e){var n=this;return e=r.extend(e||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(t)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",t,!0,e.optimizedBinaryString,e.base64).then((function(t){var n=new a(e);return n.load(t),n})).then((function(t){var n=[i.Promise.resolve(t)],r=t.files;if(e.checkCRC32)for(var o=0;o<r.length;o++)n.push(c(r[o]));return i.Promise.all(n)})).then((function(t){for(var r=t.shift(),i=r.files,o=0;o<i.length;o++){var a=i[o];n.file(a.fileNameStr,a.decompressed,{binary:!0,optimizedBinaryString:!0,date:a.date,dir:a.dir,comment:a.fileCommentStr.length?a.fileCommentStr:null,unixPermissions:a.unixPermissions,dosPermissions:a.dosPermissions,createFolders:e.createFolders})}return r.zipComment.length&&(n.comment=r.zipComment),n}))}},function(t,e,n){"use strict";var r=n(149),i=n(3),o=n(148),a=n(241),s=(n(39),n(27));function u(t){this.files=[],this.loadOptions=t}u.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(e)+", expected "+i.pretty(t)+")")}},isSignature:function(t,e){var n=this.reader.index;this.reader.setIndex(t);var r=this.reader.readString(4)===e;return this.reader.setIndex(n),r},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=s.uint8array?"uint8array":"array",n=i.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(n)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,n,r=this.zip64EndOfCentralSize-44;0<r;)t=this.reader.readInt(2),e=this.reader.readInt(4),n=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(t<0)throw this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(t);var e=t;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var n=this.centralDirOffset+this.centralDirSize;this.zip64&&(n+=20,n+=12+this.zip64EndOfCentralSize);var r=e-n;if(0<r)this.isSignature(e,o.CENTRAL_FILE_HEADER)||(this.reader.zero=r);else if(r<0)throw new Error("Corrupted zip: missing "+Math.abs(r)+" bytes.")},prepareReader:function(t){this.reader=r(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=u},function(t,e,n){"use strict";var r=n(151);function i(t){r.call(this,t)}n(3).inherits(i,r),i.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},i.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},i.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=i},function(t,e,n){"use strict";var r=n(152);function i(t){r.call(this,t)}n(3).inherits(i,r),i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=i},function(t,e,n){"use strict";var r=n(149),i=n(3),o=n(100),a=n(101),s=n(39),u=n(142),c=n(27);function f(t,e){this.options=t,this.loadOptions=e}f.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,n;if(t.skip(22),this.fileNameLength=t.readInt(2),n=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(n),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in u)if(u.hasOwnProperty(e)&&u[e].magic===t)return u[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=r(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,n,r,i=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index<i;)e=t.readInt(2),n=t.readInt(2),r=t.readData(n),this.extraFields[e]={id:e,length:n,value:r}},handleUTF8:function(){var t=c.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=s.utf8decode(this.fileName),this.fileCommentStr=s.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var n=i.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(n)}var r=this.findExtraFieldUnicodeComment();if(null!==r)this.fileCommentStr=r;else{var o=i.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=r(t.value);return 1!==e.readInt(1)?null:a(this.fileName)!==e.readInt(4)?null:s.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=r(t.value);return 1!==e.readInt(1)?null:a(this.fileComment)!==e.readInt(4)?null:s.utf8decode(e.readData(t.length-5))}return null}},t.exports=f},function(t,e,n){"use strict";var r=n(153),i={};i[n(2)("toStringTag")]="z",t.exports="[object z]"!==String(i)?function(){return"[object "+r(this)+"]"}:i.toString},function(t,e,n){var r=n(1);t.exports=r.Promise},function(t,e,n){var r=n(20);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){function r(t,e){this.stopped=t,this.result=e}var i=n(7),o=n(247),a=n(21),s=n(68),u=n(248),c=n(249);(t.exports=function(t,e,n,f,l){var h,d,p,g,v,m,y=s(e,n,f?2:1);if(l)h=t;else{if("function"!=typeof(d=u(t)))throw TypeError("Target is not iterable");if(o(d)){for(p=0,g=a(t.length);p<g;p++)if((v=f?y(i(m=t[p])[0],m[1]):y(t[p]))&&v instanceof r)return v;return new r(!1)}h=d.call(t)}for(;!(m=h.next()).done;)if((v=c(h,y,m.value,f))&&v instanceof r)return v;return new r(!1)}).stop=function(t){return new r(!0,t)}},function(t,e,n){var r=n(2),i=n(55),o=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[o]===t)}},function(t,e,n){var r=n(153),i=n(55),o=n(2)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){var r=n(7);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,n){var r=n(2)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},t(o)}catch(t){}return n}},function(t,e,n){var r,i,o,a,s,u,c,f,l=n(1),h=n(30).f,d=n(25),p=n(155).set,g=n(156),v=l.MutationObserver||l.WebKitMutationObserver,m=l.process,y=l.Promise,w="process"==d(m),b=h(l,"queueMicrotask"),_=b&&b.value;_||(r=function(){var t,e;for(w&&(t=m.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?a():o=void 0,t}}o=void 0,t&&t.enter()},a=w?function(){m.nextTick(r)}:v&&!/(iphone|ipod|ipad).*applewebkit/i.test(g)?(s=!0,u=document.createTextNode(""),new v(r).observe(u,{characterData:!0}),function(){u.data=s=!s}):y&&y.resolve?(c=y.resolve(void 0),f=c.then,function(){f.call(c,r)}):function(){p.call(l,r)}),t.exports=_||function(t){var e={fn:t,next:void 0};o&&(o.next=e),i||(i=e,a()),o=e}},function(t,e,n){var r=n(7),i=n(8),o=n(157);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(1);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){var r=n(5),i=n(256);r({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},function(t,e,n){"use strict";var r=n(9),i=n(4),o=n(69),a=n(66),s=n(62),u=n(26),c=n(57),f=Object.assign;t.exports=!f||i((function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach((function(t){e[t]=t})),7!=f({},t)[n]||o(f({},e)).join("")!=r}))?function(t,e){for(var n=u(t),i=arguments.length,f=1,l=a.f,h=s.f;f<i;)for(var d,p=c(arguments[f++]),g=l?o(p).concat(l(p)):o(p),v=g.length,m=0;m<v;)d=g[m++],r&&!h.call(p,d)||(n[d]=p[d]);return n}:f},function(t,e,n){"use strict";var r=n(5),i=n(8),o=n(47),a=n(83),s=n(21),u=n(17),c=n(84),f=n(59),l=n(2)("species"),h=[].slice,d=Math.max;r({target:"Array",proto:!0,forced:!f("slice")},{slice:function(t,e){var n,r,f,p=u(this),g=s(p.length),v=a(t,g),m=a(void 0===e?g:e,g);if(o(p)&&("function"!=typeof(n=p.constructor)||n!==Array&&!o(n.prototype)?i(n)&&null===(n=n[l])&&(n=void 0):n=void 0,n===Array||void 0===n))return h.call(p,v,m);for(r=new(void 0===n?Array:n)(d(m-v,0)),f=0;v<m;v++,f++)v in p&&c(r,f,p[v]);return r.length=f,r}})},function(t,e,n){var r=n(2),i=n(94),o=n(12),a=r("unscopables"),s=Array.prototype;null==s[a]&&o(s,a,i(null)),t.exports=function(t){s[a][t]=!0}},function(t,e,n){"use strict";function r(){return this}var i=n(160).IteratorPrototype,o=n(94),a=n(35),s=n(70),u=n(55);t.exports=function(t,e,n){var c=e+" Iterator";return t.prototype=o(i,{next:a(1,n)}),s(t,c,!1,!0),u[c]=r,t}},function(t,e,n){var r=n(4);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){"use strict";var r=n(5),i=n(4),o=n(26),a=n(36);r({target:"Date",proto:!0,forced:i((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(t){var e=o(this),n=a(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){"use strict";n(5)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},function(t,e,n){"use strict";var r=n(5),i=n(9),o=n(1),a=n(11),s=n(8),u=n(16).f,c=n(88),f=o.Symbol;if(i&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},h=function(t){var e=arguments.length<1||void 0===t?void 0:String(t),n=this instanceof h?new f(e):void 0===e?f():f(e);return""===e&&(l[n]=!0),n};c(h,f);var d=h.prototype=f.prototype;d.constructor=h;var p=d.toString,g="Symbol(test)"==String(f("test")),v=/^Symbol\((.*)\)[^)]+$/;u(d,"description",{configurable:!0,get:function(){var t=s(this)?this.valueOf():this,e=p.call(t);if(a(l,t))return"";var n=g?e.slice(7,-1):e.replace(v,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:h})}},function(t,e,n){n(122)("iterator")},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(t,e,n){n(269)},function(t,e,n){"use strict";n.r(e),n(22),n(54),n(79),n(270),n(77),n(103),n(61),n(104),n(158),n(23),n(105);var r=n(6),i=n(13),o=n(14),a=n(10),s=a.a.getUrlParam("type"),u=r.a.apiName,c=r.a.key3d;window.MockService=function(t){this.handler=t,this.handler({type:"connected",message:"Mock service connected"})},ht.Default.def("MockService",Object,{request:function(t,e,n){this[t](e,n);var r=t;e&&("string"==typeof e?r=t+": "+e:e.path&&(r=t+": "+e.path)),this.handler({type:"request",message:r,cmd:t,data:e})},explore:function(t,e){e({"/displays":{},"/symbols":{"接线图":{"电抗器":{"分裂电抗器.json":!0,"电抗器.json":!0,"分裂电抗器.png":!0,"电力用户":{"电力用户1.json":!0,"电力用户1.png":!0},"电抗器.png":!0},"母线段":{},"站房":{},"馈线段":{},"组合开关":{"V型开关1 – 3.png":!0,"三工位负荷开关.png":!0,"双向隔离开关 1.png":!0,"联动开关1.json":!0,"T型开关1.png":!0,"三工位刀闸.json":!0,"手车负荷开关.png":!0,"T型开关1.json":!0,"V型开关1.png":!0,"三工位刀闸.png":!0,"断路器.png":!0,"手车开关.png":!0,"开关.png":!0,"V型开关1.json":!0,"V型开关1 – 3.json":!0,"手车负荷开关.json":!0,"联动开关1.png":!0,"V型开关1 – 1.png":!0,"三工位负荷开关.json":!0,"双向隔离开关 1.json":!0,"三工位断路器.png":!0,"三工位断路器.json":!0,"手车开关.json":!0,"V型开关1 – 1.json":!0,"断路器.json":!0,"开关.json":!0},"电压互感器":{"圆圈.png":!0,"圆圈.json":!0,"站房.png":!0,"电容器":{"串联电容器2.png":!0,"并联电容器 – 11.png":!0,"并联电容器 – 2.png":!0,"并联电容器 – 11.json":!0,"并联电容器 – 2.json":!0,"串联电容器2.json":!0},"站房.json":!0},"刀闸":{"换相刀闸1.png":!0,"刀闸 合.png":!0,"刀闸.json":!0,"换相刀闸 合 2.png":!0,"刀闸 合.json":!0,"换相刀闸1.json":!0,"刀闸.png":!0,"换相刀闸 合 2.json":!0},"配电变压器":{"公变.json":!0,"公变.png":!0,"三卷变压器.json":!0,"三卷变压器.png":!0},"负荷开关":{"负荷开关11 – 6.json":!0,"负荷开关11 – 6.png":!0},"电源":{"地热电厂 – 2.png":!0,"潮汐电站1.png":!0,"潮汐电站1.json":!0,"水电厂 – 3.png":!0,"火电厂 – 2.json":!0,"秸秆电站1.json":!0,"地热电厂 – 2.json":!0,"水电厂 – 3.json":!0,"秸秆电站1.png":!0,"风力发电站.png":!0,"垃圾电站1.json":!0,"风力发电站.json":!0,"电站.png":!0,"电站.json":!0,"水电厂 – 4.json":!0,"水电厂 – 4.png":!0,"垃圾电站1.png":!0,"地热电厂.json":!0,"地热电厂.png":!0,"火电厂 – 2.png":!0},"故障指示器":{"故障指示器.json":!0,"故障指示器.png":!0},"熔断器":{"跌落式熔断器 – 2.png":!0,"跌落式熔断器 – 2.json":!0,"熔丝1.json":!0,"熔丝1.png":!0},"储能类":{"储能.png":!0,"储能.json":!0},"塔杆":{"杆塔.json":!0,"杆塔.png":!0},"接地刀闸":{"接地刀闸1.png":!0,"接地刀闸1.json":!0}},"标.json":!0,"标.png":!0,"timg (1).jpg":!0,"环境设备":{"新摄像头1.png":!0,"空调.png":!0,"无锡站房":{"墙体.png":!0,"水泵.png":!0,"水泵.json":!0,"井盖.png":!0,"组 1292.svg":!0,"蓝色门.png":!0,"图标1.png":!0,"墙体.json":!0,"蓝色墙.png":!0,"窗户.svg":!0,"蓝色门.json":!0,"未标题-1(1).svg":!0,"矩形 689.svg":!0,"单墙体.png":!0,"蓝色墙.json":!0,"单墙体.json":!0,"井盖.json":!0,"图标1.json":!0},"空白框.json":!0,"门禁2.png":!0,"空白框3.json":!0,"局放.json":!0,"中压柜1.json":!0,"门禁.png":!0,"高压柜1.json":!0,"凝露.json":!0,"1beb60d7653e535701ceb6b231ceff0.png":!0,"井盖.json":!0,"风机1.png":!0,"摄像头.png":!0,"水浸1.png":!0,"风机.json":!0,"空白框1.json":!0,"水浸.png":!0,"温湿度5.json":!0,"局放2.json":!0,"变压器1.png":!0,"告警图标":{"无锡海岸城":{"墙体.png":!0,"墙体.json":!0,"窗户.svg":!0,"矩形 689.svg":!0,"无锡1.png":!0,"无锡1.json":!0},"未标题-1_32.png":!0,"温湿度.svg":!0},"组 884.svg":!0,"温度.json":!0,"新摄像头.png":!0,"局放1.png":!0,"墙体.json":!0,"球机.png":!0,"图框1.json":!0,"烟感.png":!0,"空白框2.png":!0,"墙体.png":!0,"水浸1.json":!0,"温湿度1.png":!0,"凝露1.json":!0,"SF6.json":!0,"井盖.png":!0,"凝露1.png":!0,"矩形 689.svg":!0,"图框1.png":!0,"温湿度1.json":!0,"门禁.json":!0,"图框图框.png":!0,"噪音.png":!0,"空白框2.json":!0,"新摄像头.json":!0,"温度1.png":!0,"风机.png":!0,"空白框.png":!0,"提示图标.json":!0,"图框图框.json":!0,"噪音.json":!0,"变压器1.json":!0,"图框.json":!0,"高压柜1.png":!0,"立式空调.json":!0,"未命名.png":!0,"温湿度.svg":!0,"门禁1.png":!0,"门.json":!0,"风机1.json":!0,"水泵-4.svg":!0,"未命名.json":!0,"温湿度.json":!0,"空调.json":!0,"温湿度2.json":!0,"门.png":!0,"噪音1.json":!0,"水浸.json":!0,"空白框3.png":!0,"图框6.png":!0,"泰州SF6.json":!0,"噪音1.png":!0,"球机.json":!0,"框.json":!0,"门禁2.json":!0,"温度.png":!0,"空白框1.png":!0,"蓄电池.png":!0,"测试图标.json":!0,"图框6.json":!0,"蓄电池.json":!0,"烟感1.json":!0,"温湿度5.png":!0,"门禁1.json":!0,"SF6.png":!0,"温湿度2.png":!0,"温湿度.png":!0,"烟感.json":!0,"立式空调.png":!0,"温度1.json":!0,"中压柜1.png":!0,"局放2.png":!0,"提示图标.png":!0,"局放1.json":!0,"泰州SF6.png":!0,"测试图标.png":!0,"摄像头.json":!0,"新摄像头1.json":!0,"局放.png":!0,"凝露.png":!0,"烟感1.png":!0,"图框.png":!0,"框.png":!0},"告警图例":{"枪机-故障.png":!0,"水浸-告警.json":!0,"空调-正常.png":!0,"烟感-告警.json":!0,"水位-故障.png":!0,"水浸-正常.json":!0,"温湿度-告警.json":!0,"烟感-正常.png":!0,"灯-正常.png":!0,"球机-正常.png":!0,"门-关.png":!0,"温湿度-故障.png":!0,"灯-正常.json":!0,"烟感-正常.json":!0,"空调-告警.json":!0,"水位-故障.json":!0,"枪机-故障.json":!0,"水位-告警.png":!0,"烟感-告警.png":!0,"温湿度-故障.json":!0,"空调-正常.json":!0,"温湿度-告警.png":!0,"门-开.json":!0,"空调-告警.png":!0,"门-关.json":!0,"枪机-正常.png":!0,"球机-故障.png":!0,"空调-故障.png":!0,"门-开.png":!0,"水位-正常.png":!0,"灯-告警.json":!0,"水浸.json":!0,"水浸-告警.png":!0,"枪机-正常.json":!0,"水浸.png":!0,"烟感-故障.png":!0,"温湿度-正常.png":!0,"球机-故障.json":!0,"空调-故障.json":!0,"水位-告警.json":!0,"灯-故障.png":!0,"球机-正常.json":!0,"温湿度-正常.json":!0,"灯-故障.json":!0,"水浸-正常.png":!0,"灯-告警.png":!0,"烟感-故障.json":!0,"水位-正常.json":!0},"线.png":!0,"3d":{"创阿金.png":!0,"asdfsdf.png":!0,"面板.png":!0,"面板.json":!0,"创阿金.json":!0,"面板.zip":!0,"asdfsdf.json":!0,"图扑软件.png":!0},"透明图元.png":!0,"按钮.json":!0,"测试.json":!0,"透明线框.json":!0,"告警状态图":{"圆圈.png":!0,"空调.png":!0,"水位.json":!0,"水位.png":!0,"温湿度.json":!0,"空调.json":!0,"门.png":!0,"水浸.json":!0,"水浸.png":!0,"灯.json":!0,"球机.png":!0,"灯.png":!0,"枪机.json":!0,"圆圈.json":!0,"枪机.png":!0,"温湿度.png":!0,"球机.json":!0,"烟感.json":!0,"烟感.png":!0,"门.json":!0},"充电桩.json":!0,"图扑内置":{"文本":{}},"图表":{"柱状图.png":!0,"柱状图.json":!0,"d.png":!0,"d.json":!0},"按钮.png":!0,"透明图元.json":!0,"图层切换.json":!0,"无锡接线专用图标":{"组 68.svg":!0,"组 203.json":!0,"电压互感器.png":!0,"电流互感器2.json":!0,"白底(1).json":!0,"电压互感器2.png":!0,"图标(1).zip":!0,"电流互感器.json":!0,"箭头.png":!0,"等电位.json":!0,"手车.png":!0,"组 11.json":!0,"电缆头.png":!0,"手车图标1.png":!0,"熔断器.png":!0,"主变.json":!0,"手车.json":!0,"手车1.json":!0,"组 202.json":!0,"组 10.json":!0,"箭头.json":!0,"组 11.png":!0,"组 201(1).json":!0,"手开负荷开关.json":!0,"虚线 14.png":!0,"电缆头.json":!0,"电抗器.json":!0,"手车1.png":!0,"组 10.png":!0,"避雷器.svg":!0,"电流互感器2.png":!0,"手车1 2.png":!0,"电压互感器.svg":!0,"接地开关 2.json":!0,"图标1.json":!0,"框.json":!0,"虚线 14.json":!0,"组 200.json":!0,"接地1.png":!0,"电压互感器.json":!0,"带电显示器.png":!0,"接地开关 2.png":!0,"组 1.png":!0,"手车图标1.json":!0,"接地.json":!0,"避雷器(1).json":!0,"手开负荷开关 2.png":!0,"图标2.json":!0,"手开负荷开关 2.json":!0,"白底(1).png":!0,"图标3.json":!0,"断路器.png":!0,"图标1.png":!0,"接地1.json":!0,"主变 2.json":!0,"组 200.png":!0,"等电位.png":!0,"带电显示器.json":!0,"电容器.png":!0,"电容器.json":!0,"电压互感器2.json":!0,"泰州接线图专用图标":{"泰州断路器.png":!0,"泰州手车.json":!0,"泰州手车.png":!0,"泰州断路器.json":!0,"箭头.png":!0,"箭头.json":!0},"图标2.png":!0,"组 203.png":!0,"接地.png":!0,"图标3.png":!0,"手车1 2.json":!0,"电抗器.png":!0,"熔断器.json":!0,"手开负荷开关.png":!0,"主变 2.png":!0,"窗户.svg":!0,"电流互感器.png":!0,"避雷器(1).png":!0,"组 202.png":!0,"组 201(1).png":!0,"避雷器2.svg":!0,"组 1.json":!0,"断路器.json":!0,"框.png":!0,"主变.png":!0},"透明线框.png":!0,"图标.json":!0,"测试.png":!0,"线.json":!0,"图层切换.png":!0,"绑定站点.json":!0,"绑定站点.png":!0,"开关":{"开关2.png":!0,"开关2-1.json":!0,"开关1.json":!0,"开关1.png":!0,"开关2.json":!0,"开关2-1.png":!0},basic:{"ht.png":!0,"ht.json":!0},"充电桩.png":!0,"图标.png":!0,"减去 172.svg":!0},"/components":{"图表":{"chart.json":!0,"chart.png":!0},progressBar:{"progressBar.png":!0,"circleProgressBar.json":!0,"progressBar.json":!0,"进度条.json":!0,"loading.json":!0,"circleProgressBar.png":!0,"loading.png":!0,"进度条.png":!0},"自定义组件":{},"图扑内置":{text:{}},clock:{"clock-scale.json":!0,"clock-pointer.json":!0,"clock-pointer.png":!0,"clock-scale.png":!0},table:{"table.png":!0,"table.json":!0,"grid.png":!0,"grid.json":!0}},"/scenes":{},"/models":{"测试模型添加":{"road.json":!0,"road.png":!0},"3d":{"shuangjian.png":!0,"yangan.json":!0,"___.json":!0,"wendu.json":!0,"shuijin.json":!0,"fadianji1.json":!0,"wendu.png":!0,"fadianji1.png":!0,"___.png":!0,"shuangjian.json":!0,"yangan.png":!0,"shuijin.png":!0},"机房":{"消防设施":{"消防设备.json":!0,"消防设备.png":!0},"桌椅储物":{"储物柜.png":!0,"储物柜.json":!0},"机柜相关":{"机柜3.json":!0,"配电箱.json":!0,"机柜2.png":!0,"配电箱.png":!0,"机柜2.json":!0,"机柜3.png":!0},"视频监控":{"配电箱.png":!0,"摄像头方.json":!0,"摄像头方.png":!0},"温度控制":{"空调精简.json":!0,"空调精简.png":!0}},"室内":{"地板.json":!0,"马桶.json":!0,"水龙头.json":!0,"小便池.png":!0,"地板.png":!0,"茶几.json":!0,"水龙头.png":!0,"马桶.png":!0,"单人沙发.json":!0,"小便池.json":!0,"单人沙发.png":!0,"茶几.png":!0}},"/assets":{"99999窗户.svg":!0,"编组3232.svg":!0,"3.svg":!0,"timg (1).jpg":!0,wc:{"格子地面.png":!0,"科技光圈2.png":!0,"标识-男性.png":!0,"磨砂地板.jpg":!0,"fxty.png":!0,"建筑投影.png":!0,"矿石履带.png":!0,"墙面灯光.png":!0,"地面灯光.png":!0,"标识-女性.png":!0,"标识-特殊.png":!0,"烟囱烟雾浅.png":!0,"科技光圈.png":!0,"烟囱烟雾.png":!0},"timg 3.jpg":!0,"组 535.svg":!0,"3d":{"fadianji2.png":!0,"shuijin.jpg":!0,"yangan.obj":!0,"wendu.obj":!0,"shuijin.mtl":!0,"fadianji3.png":!0,"机柜":{"rack_panel.png":!0,"rack_front_door.jpg":!0,"rack42u.png":!0,"rack_top.png":!0,"rack_back_door.png":!0,"head_rack_side.png":!0,"rack_door_back.png":!0,"rack_side.png":!0,"envmap1.jpg":!0,"outside_lightmap.jpg":!0},"shuangjian.obj":!0,"fadianji1.mtl":!0,"yangan.jpg":!0,"fadianji1.png":!0,"shuijin.obj":!0,"wendu.mtl":!0,"yangan.mtl":!0,"shuangjian.jpg":!0,"wendu.jpg":!0,"shuangjian.mtl":!0,"fadianji1.obj":!0},"2 2.svg":!0,"告警":{"df1d3f1924ff8cf3a2976a24fa71d9a.jpg":!0,"资源 24.svg":!0,"矩形 2 (3).svg":!0,"资源 15.svg":!0,"资源 9.svg":!0,"资源 23.svg":!0,"资源 10.svg":!0,"资源 5.svg":!0,"资源 25.svg":!0,"资源 19.svg":!0,"资源 16.svg":!0,"资源 4.svg":!0,"资源 11.svg":!0,"资源 8.svg":!0,"资源 20.svg":!0,"资源 18.svg":!0,"资源 26.svg":!0,"矩形 2 (2).svg":!0,"资源 3.svg":!0,"资源 21.svg":!0,"资源 7.svg":!0,"资源 6.svg":!0,"资源 17.svg":!0,"资源 22.svg":!0,"矩形 2.svg":!0},"组 1.svg":!0,"水泵-4.svg":!0,"alarm.json":!0,"井盖.svg":!0,svg:{"手关负荷开关1.svg":!0,"三工位刀闸 – 3.svg":!0,"双向隔离开关 1.svg":!0,"潮汐电站.svg":!0,"三工位负开 – 2.svg":!0,"公变.svg":!0,"三工位断路器 – 6.svg":!0,"分裂电抗器.svg":!0,"秸秆电站.svg":!0,"电抗器.svg":!0,"并联电容器 – 1.svg":!0,"垃圾电站.svg":!0,".DS_Store":!0,"联动开关.svg":!0,"资源 8.svg":!0,"跌落式熔断器 – 2.svg":!0,"杆塔.svg":!0,"三工位断路器 – 8.svg":!0,"手车开关1 – 2.svg":!0,"火电厂 – 1.svg":!0,"开关-关 (1).svg":!0,"资源 3.svg":!0,"三工位刀闸 – 5.svg":!0,"V型开关1 – 1.svg":!0,"手车开关1 – 1.svg":!0,"秸秆电站 – 1.svg":!0,"地热电厂 – 1.svg":!0,"手关负荷开关11 – 3.svg":!0,"三工位断路器 – 7.svg":!0,"接地刀闸2.svg":!0,"联动开关 – 2.svg":!0,"V型开关1 – 2.svg":!0,"串联电容器.svg":!0,"接地刀闸.svg":!0,"水电厂 – 2.svg":!0,"负荷开关1 – 1.svg":!0,"站房 – 1.svg":!0,"三工位负开.svg":!0,"资源 5.svg":!0,"双向隔离开关3.svg":!0,"V型开关1 – 3.svg":!0,"开关 – 1.svg":!0,"故障指示器.svg":!0,"故障指示器1.svg":!0,"开关.svg":!0,"3_1.svg":!0,"熔断式开关1 – 1.svg":!0,"手车开关1.svg":!0,"资源 4.svg":!0,"断路器1 – 1.svg":!0,"并联电容器 – 2.svg":!0,"三工位刀闸-11":!0,"联动开关1.svg":!0,"站房.svg":!0,"熔断式开关1.svg":!0,"电力用户.svg":!0,"熔断式开关1 – 2.svg":!0,"1_1.svg":!0,"储能.svg":!0,"资源 7.svg":!0,"双向隔离开关2.svg":!0,"资源 14.svg":!0,"T型开关1.svg":!0,"水电厂 – 3.svg":!0,"V型开关1 .svg":!0,"三工位负开 – 1.svg":!0,"负荷开关11 – 5.svg":!0},"矩形 2 (2).svg":!0,"1.svg":!0,"组 1292.svg":!0,objs:{custom:{ground:{water_treatment:{"zy09.png":!0,"road.mtl":!0,"zy10.png":!0,"zy07.png":!0,"zy08.png":!0,"road.obj":!0}}},"机房":{"peidiangui.png":!0,"airc.png":!0,"消防设施":{"消防设备.obj":!0,"消防设备.mtl":!0},"桌椅储物":{"储物柜.obj":!0,"储物柜.mtl":!0},"jg.png":!0,"机柜相关":{"机柜2.obj":!0,"配电箱.mtl":!0,"配电箱.obj":!0,"机柜3.obj":!0,"机柜2.mtl":!0,"机柜3.mtl":!0},"视频监控":{"摄像头方.obj":!0,"摄像头方.mtl":!0},"jg3.png":!0,"温度控制":{"空调精简.obj":!0,"空调精简.mtl":!0}},"室内":{"小便池.obj":!0,"单人沙发.mtl":!0,"单人沙发.obj":!0,"水龙头.mtl":!0,"kaobei.png":!0,"wood.png":!0,"茶几.obj":!0,"水龙头.obj":!0,"茶几.mtl":!0,"马桶.mtl":!0,"小便池.mtl":!0,"马桶.obj":!0}},"无锡接线":{"接地开关":!0,"熔断器.svg":!0,"组 133.svg":!0,"避雷器":!0,"组 98.svg":!0,"组 131.svg":!0,"组 130.svg":!0,"电缆头.svg":!0,"带电显示器":!0,"等电位.svg":!0,"组 158.svg":!0,"组 97.svg":!0,"电流互感器2.svg":!0,"组 132.svg":!0,"避雷器(1).svg":!0,"组 129.svg":!0,"组 157(1).svg":!0,"电压互感器.svg":!0,"避雷器2.svg":!0,"电流互感器.svg":!0,"组 89.svg":!0,"电容器.svg":!0},"sf6.svg":!0,"1268440462109327361.jpg":!0,"图标资源":{"白底(1).svg":!0,"组 8832.svg":!0,"未标题-1(1).svg":!0,"组 888.svg":!0,"温湿度.svg":!0,"组 535(2).svg":!0,"组 534(1).svg":!0,"组 1521(1).svg":!0},"矩形 689.svg":!0,"timg.jpg":!0}}[t])},mkdir:function(t,e){var n=this;Object(o.b)(t).then((function(r){e(!0),n.handler({type:"fileChanged",path:t})})).catch((function(){e(!1)}))},upload:function(t,e){console.log(t,"=======================================",editor.dm);var n=t.path,r=this,a=n.split("/"),s=a[0],c=a[a.length-1],f=c.indexOf(".");c=c.substring(0,f);var l=/\.(png|jpg|gif|jpeg|bmp)$/i.test(n)?t.content:null;f=n.indexOf(".");var h,d=n.substring(0,f),p=editor.mainTabView.getTabModel().getDataByTag(d+".json");p&&(h=p.getView().gv.getDataModel()),"displays"!==s&&"scenes"!==s||l||!editor.dm||editor.dm.getAttr("uuid")?"displays"!==s&&"scenes"!==s||!(l||editor.dm&&editor.dm.getAttr("uuid"))?s===u?Object(i.f)(l,c,h).then((function(){e(!0),r.handler({type:"updateStation",path:n})})):"previews"===s?Object(o.c)(n).then((function(r){Object(o.a)(n,t.content).then((function(t){e(!0)})).catch((function(){e(!1)}))})):Object(o.a)(n,t.content).then((function(t){e(!0),r.handler({type:"fileChanged",path:n})})).catch((function(){e(!1)})):Object(i.f)(l,c,h).then((function(){e(!0),r.handler({type:"updateStation",path:n})})):Object(i.a)({name:c}).then((function(){e(!0),r.handler({type:"updateStation",path:n})}))},rename:function(t,e){var n=this;if("diagram"===t.fileType){var r=t.new.split("/"),a="displays/"+editor.explorer.list.sm().ld().getName()+".json",u=r[r.length-1];Object(i.e)(u).then((function(){if(console.log(u,a),n.handler({type:"updateStation"}),s===c)editor.url="scenes/".concat(u,".json");else{var t=editor.mainTabView.getTabModel().getDataByTag(a);t.setName(u),t.setTag("displays/".concat(u,".json")),t.getView().url="displays/".concat(u,".json")}e(!1)})).catch((function(){e(!1)}))}else Object(o.f)(t.new,t.old).then((function(r){e(!0),n.handler({type:"fileChanged",path:t.old}),n.handler({type:"fileChanged",path:t.new})})).catch((function(){e(!1)}))},remove:function(t,e){console.log(t,"rrr");var n=this;Object(o.c)(t).then((function(r){e(!0),n.handler({type:"fileChanged",path:t})})).catch((function(){e(!1)}))},locate:function(t,e){},source:function(t,e){console.log(t,"ppp"),/\.(png|jpg|gif|jpeg|bmp)$/i.test(t.url)?ht.Default.xhrLoad(t.url,(function(t){var n=new FileReader;n.onload=function(t){e(t.target.result)},n.readAsDataURL(t)}),{responseType:"blob"}):Object(o.d)(t.url).then((function(t){var n=t.data[0];e(n)}))},export:function(t,e){var n="";switch(t[0].split("/")[0]){case"symbols":n="图标";break;case"components":n="组件";break;case"assets":n="资源"}var r=[];t.forEach((function(t){var e=t.lastIndexOf("."),n=t.substring(0,e)+".png";r.push(new Promise((function(t){ht.Default.xhrLoad(n,(function(e){var r=n.split("/"),i=r[r.length-1];t({path:i,data:e})}),{responseType:"blob"})}))),r.push(Object(o.d)(t).then((function(e){var n=t.split("/");return{path:n[n.length-1],data:e.data[0]}})))})),Promise.all(r).then((function(t){a.a.upload(t,n)}))}})},function(t,e,n){var r=n(5),i=n(271);r({target:"Array",proto:!0,forced:i!==[].lastIndexOf},{lastIndexOf:i})},function(t,e,n){"use strict";var r=n(17),i=n(32),o=n(21),a=n(60),s=Math.min,u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0,f=a("lastIndexOf");t.exports=c||f?function(t,e){if(c)return u.apply(this,arguments)||0;var n=r(this),a=o(n.length),f=a-1;for(1<arguments.length&&(f=s(f,i(e))),f<0&&(f=a+f);0<=f;f--)if(f in n&&n[f]===t)return f||0;return-1}:u},function(t,e,n){(function(t){var r=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},i=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(s(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,a=String(t).replace(i,(function(t){if("%%"===t)return"%";if(o<=n)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),u=r[n];n<o;u=r[++n])g(u)||!b(u)?a+=" "+u:a+=" "+s(u);return a},e.deprecate=function(n,r){if(void 0!==t&&!0===t.noDeprecation)return n;if(void 0===t)return function(){return e.deprecate(n,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(t.throwDeprecation)throw new Error(r);t.traceDeprecation?console.trace(r):console.error(r),i=!0}return n.apply(this,arguments)}};var o,a={};function s(t,n){var r={seen:[],stylize:c};return 3<=arguments.length&&(r.depth=arguments[2]),4<=arguments.length&&(r.colors=arguments[3]),p(n)?r.showHidden=n:n&&e._extend(r,n),y(r.showHidden)&&(r.showHidden=!1),y(r.depth)&&(r.depth=2),y(r.colors)&&(r.colors=!1),y(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=u),f(r,t,r.depth)}function u(t,e){var n=s.styles[e];return n?"["+s.colors[n][0]+"m"+t+"["+s.colors[n][1]+"m":t}function c(t,e){return t}function f(t,n,r){if(t.customInspect&&n&&S(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return m(i)||(i=f(t,i,r)),i}var o=function(t,e){if(y(e))return t.stylize("undefined","undefined");if(m(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return v(e)?t.stylize(""+e,"number"):p(e)?t.stylize(""+e,"boolean"):g(e)?t.stylize("null","null"):void 0}(t,n);if(o)return o;var a=Object.keys(n),s=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(n)),x(n)&&(0<=a.indexOf("message")||0<=a.indexOf("description")))return l(n);if(0===a.length){if(S(n)){var u=n.name?": "+n.name:"";return t.stylize("[Function"+u+"]","special")}if(w(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(_(n))return t.stylize(Date.prototype.toString.call(n),"date");if(x(n))return l(n)}var c,b="",j=!1,k=["{","}"];return d(n)&&(j=!0,k=["[","]"]),S(n)&&(b=" [Function"+(n.name?": "+n.name:"")+"]"),w(n)&&(b=" "+RegExp.prototype.toString.call(n)),_(n)&&(b=" "+Date.prototype.toUTCString.call(n)),x(n)&&(b=" "+l(n)),0!==a.length||j&&0!=n.length?r<0?w(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),c=j?function(t,e,n,r,i){for(var o=[],a=0,s=e.length;a<s;++a)T(e,String(a))?o.push(h(t,e,n,r,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(h(t,e,n,r,i,!0))})),o}(t,n,r,s,a):a.map((function(e){return h(t,n,r,s,e,j)})),t.seen.pop(),function(t,e,n){return 60<t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}(c,b,k)):k[0]+b+k[1]}function l(t){return"["+Error.prototype.toString.call(t)+"]"}function h(t,e,n,r,i,o){var a,s,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(s=t.stylize("[Setter]","special")),T(r,i)||(a="["+i+"]"),s||(t.seen.indexOf(u.value)<0?-1<(s=g(n)?f(t,u.value,null):f(t,u.value,n-1)).indexOf("\n")&&(s=o?s.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),y(a)){if(o&&i.match(/^\d+$/))return s;a=(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),t.stylize(a,"string"))}return a+": "+s}function d(t){return Array.isArray(t)}function p(t){return"boolean"==typeof t}function g(t){return null===t}function v(t){return"number"==typeof t}function m(t){return"string"==typeof t}function y(t){return void 0===t}function w(t){return b(t)&&"[object RegExp]"===j(t)}function b(t){return"object"==typeof t&&null!==t}function _(t){return b(t)&&"[object Date]"===j(t)}function x(t){return b(t)&&("[object Error]"===j(t)||t instanceof Error)}function S(t){return"function"==typeof t}function j(t){return Object.prototype.toString.call(t)}function k(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(n){if(y(o)&&(o=t.env.NODE_DEBUG||""),n=n.toUpperCase(),!a[n])if(new RegExp("\\b"+n+"\\b","i").test(o)){var r=t.pid;a[n]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",n,r,t)}}else a[n]=function(){};return a[n]},(e.inspect=s).colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=p,e.isNull=g,e.isNullOrUndefined=function(t){return null==t},e.isNumber=v,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=y,e.isRegExp=w,e.isObject=b,e.isDate=_,e.isError=x,e.isFunction=S,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(273);var E=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function T(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",function(){var t=new Date,e=[k(t.getHours()),k(t.getMinutes()),k(t.getSeconds())].join(":");return[t.getDate(),E[t.getMonth()],e].join(" ")}(),e.format.apply(e,arguments))},e.inherits=n(274),e._extend=function(t,e){if(!e||!b(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var A="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function O(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(A&&t[A]){var e;if("function"!=typeof(e=t[A]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,A,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,i)}catch(r){n(r)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),A&&Object.defineProperty(e,A,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,r(t))},e.promisify.custom=A,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");function o(){return i.apply(a,arguments)}var a=this;e.apply(this,n).then((function(e){t.nextTick(o,null,e)}),(function(e){t.nextTick(O,e,o)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(e)),Object.defineProperties(n,r(e)),n}}).call(this,n(42))},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){function n(){}t.super_=e,n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";var r=n(5),i=n(83),o=n(32),a=n(21),s=n(26),u=n(85),c=n(84),f=n(59),l=Math.max,h=Math.min;r({target:"Array",proto:!0,forced:!f("splice")},{splice:function(t,e){var n,r,f,d,p,g,v=s(this),m=a(v.length),y=i(t,m),w=arguments.length;if(0===w?n=r=0:r=1===w?(n=0,m-y):(n=w-2,h(l(o(e),0),m-y)),9007199254740991<m+n-r)throw TypeError("Maximum allowed length exceeded");for(f=u(v,r),d=0;d<r;d++)(p=y+d)in v&&c(f,d,v[p]);if(n<(f.length=r)){for(d=y;d<m-r;d++)g=d+n,(p=d+r)in v?v[g]=v[p]:delete v[g];for(d=m;m-r+n<d;d--)delete v[d-1]}else if(r<n)for(d=m-r;y<d;d--)g=d+n-1,(p=d+r-1)in v?v[g]=v[p]:delete v[g];for(d=0;d<n;d++)v[d+y]=arguments[d+2];return v.length=m-r+n,f}})},,,function(t,e,n){"use strict";function r(t,e,n){if(t){console.log(n);var r=ht.Default.convertURL(t);o.a.request({url:r,responseType:n.responseType,params:{timestamp:(new Date).getTime()},method:n.method||"GET",headers:{"Cache-Control":"no-cache","If-Modified-Since":"0"}}).then((function(t){e(t.data)}))}}n.r(e),n(29),n(22),n(92),n(23),n(110);var i=n(107),o=n.n(i),a=n(272);ht.Default.xhrLoad=function(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};Object(a.isArray)(t)?t.forEach((function(t){r(t,e,n)})):r(t,e,n)},n(50);var s=n(6),u=n(14),c=n(0),f=s.a.recoveryDataPath,l=s.a.apiAdd,h=s.a.apiName,d=(n(54),n(275),n(172)),p=n(13),g=n(169),v=n(171);window.isPracticing=0<=window.location.host.indexOf("hightopo"),window.hteditor_config={locale:"zh",componentsVisible:!isPracticing,displaysEditable:!isPracticing,symbolsEditable:!isPracticing,componentsEditable:!isPracticing,assetsEditable:!isPracticing,locateFileEnabled:!isPracticing,serviceClass:"MockService",expandedTitles:{TitleExtension:!1},subConfigs:["custom/configs/config-utils.js","custom/configs/config-inspectorTab.js","custom/configs/config-valueTypes.js","custom/configs/config-dataBindingsForSymbol.js","custom/configs/config-connectActions.js","custom/configs/config-inspectorFilter.js","custom/configs/config-customProperties.js","custom/configs/config-onEditorCreated.js","custom/configs/config-onTitleCreating.js","custom/configs/config-onTitleCreated.js","custom/configs/config-onMainToolbarCreated.js","custom/configs/config-onMainMenuCreated.js","custom/configs/config-onRightToolbarCreated.js"],libs:["custom/libs/jquery.min.js","custom/libs/bootstrap-treeview.min.js"],dataBindings:v.a,handleEvent:function(t,e,n){if("fileMoving"===e&&(function(){var t=new ht.widget.Dialog;t.setConfig({title:"禁止移动!",width:250,height:100,content:"禁止移动!",contentPadding:10,draggable:!0,closable:!0,resizeMode:"wh",buttons:[{label:"确定",action:function(e,n){t.hide()}}],buttonsAlign:"right"}),t.show()}(),n.preventDefault=!0),"tabUpdated"===e&&t.dm&&t.dm.getDatas&&t.dm.getDatas().forEach((function(t){Object(g.a)(t)})),"editorCreated"===e){var r=Object(d.a)(t);!function(t){var e=t.mainToolbar.getItems();e.splice(0,1),t.mainToolbar.setItems(e)}(t),function(t){var e=t.leftTopTabView.getTabModel().getDatas()._as[1].getId();t.leftTopTabView.getTabModel().removeDataById(e)}(t),t.leftTopTabView.getTabModel().sm().ss(r)}"updateStation"===e&&Object(p.c)(),"request"===e&&"EXPLORE"===n.cmd||"response"===e||"fileChanged"===e||(n&&n.message,hteditor.getString,"displayViewCreated"===e||"displayViewOpened"===e?(addSkewTranlateItem(n.displayView.graphView,"editor.displayView.graphView"),addPrintSelectionItem(n.displayView.displayTree,"editor.displayTree"),addPrintSelectionItem(n.displayView.graphView,"editor.displayView.graphView")):"symbolViewCreated"===e||"symbolViewOpened"===e?(addPrintSelectionItem(n.symbolView.symbolList,"editor.symbolList"),addPrintSelectionItem(n.symbolView.graphView,"editor.symbolView.graphView")):"displayViewSaving"===e||"displayViewNewNameInputing"===e||"symbolViewSaving"===e||"symbolViewNewNameInputing"===e||("paste"===e?n.datas.forEach((function(t){var e=t.getDataBindings();if(e){for(var n in e.a)(r=e.a[n]).id=r.id;for(var n in e.s)(r=e.s[n]).id=r.id;for(var n in e.p){var r;(r=e.p[n]).id=r.id}}})):"fileRenaming"!==e&&"fileMoving"!==e&&"fileDeleting"!==e||"custom/symbols/basic/ht.json"!==n.url&&"custom/symbols/basic"!==n.url&&"custom/displays/basic"!==n.url||(n.preventDefault=!0)))},handleInsertSceneFileToGraphView:function(t,e,n){var r=new ht.Node;if(r.a("sceneURL",e.url),r.setImage("symbols/html/scene.json"),n)r.p(n.x,n.y);else{var i=t.graphView.getViewRect();i&&r.p(i.x+i.width/2,i.y+i.height/2)}r.setDisplayName(hteditor.fileNameToDisplayName(e.url)),t.addData(r)},handleInsertModelFileToGraphView:function(t,e,n){var r=new ht.Node;if(r.a("modelURL",e.url),r.setImage("symbols/html/obj.json"),n)r.p(n.x,n.y);else{var i=t.graphView.getViewRect();i&&r.p(i.x+i.width/2,i.y+i.height/2)}r.setDisplayName(hteditor.fileNameToDisplayName(e.url)),t.addData(r)}};var m,y=window.hteditor_config;n(191),(m=y.subConfigs||[]).push("client.js"),ht.Default.loadJS(m,(function(){(m=["locales/"+hteditor.config.locale+".js","custom/locales/"+hteditor.config.locale+".js"]).push(hteditor.init),hteditor.config.libs&&(m=m.concat(hteditor.config.libs)),m.push("vs/loader.js"),m.push("vs/editor/editor.main.nls.js"),m.push("vs/editor/editor.main.js"),ht.Default.loadJS(m,(function(){window.editor=hteditor.createEditor()}))})),window.recoveryData=function(t){var e="/edit/diagramfile/".concat(f).concat(h,"/");Object(u.e)(e).then((function(t){for(var n in t.data)Object(u.d)(e+n).then((function(t){var e=t.data[0];try{e=JSON.parse(e);var n=!!r,r=r||e.spaceUuid,i=n?0:e.type,o=n?e.name+(new Date).getTime():e.name;c.a.post(l,{spaceUuid:r,diagram:e.diagram,type:i,name:o})}catch(t){}}))}))},n(268)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy91dGlscy91dGlsLmNvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9hcGkvcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvYXBpL2FwaS1jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9hcGkvYXBpLWxpc3QvZGlhZ3JhbS5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2FwaS9hcGktbGlzdC9maWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvc3RyZWFtL0dlbmVyaWNXb3JrZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL3V0ZjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL2V4dGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMtY29va2llL3NyYy9qcy5jb29raWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9ub2RlanNVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9jb21wcmVzc2VkT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvY3JjMzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvbWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2FwaS9hcGktbGlzdC90cmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dyYXBwZWQtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvcmVhZGFibGUtc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvYmFzZTY0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvc3RyZWFtL1N0cmVhbUhlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvc3RyZWFtL0RhdGFXb3JrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvc3RyZWFtL0NyYzMyUHJvYmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9jb21wcmVzc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvYWRsZXIzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvc3RyaW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi96c3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL3NpZ25hdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL3JlYWRlci9yZWFkZXJGb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9yZWFkZXIvQXJyYXlSZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9yZWFkZXIvRGF0YVJlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL3JlYWRlci9VaW50OEFycmF5UmVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZpbGUtc2F2ZXIvZGlzdC9GaWxlU2F2ZXIubWluLmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tbW9uL2NoYW5nZUNvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb25maWcvY29uZmlnLWRhdGFCaW5kaW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2FwaS9hcGktbGlzdC9kYXRhLWJpbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb25maWcvZGF0YUJpbmRpbmdzL2ZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9hcGkvYXBpLWxpc3QvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbmZpZy9jb25maWctYWRkLXN0YXRpb24tdGFiL2NvbnRleHRtZW51LmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29uZmlnL2NvbmZpZy1hZGQtc3RhdGlvbi10YWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvc3RvcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldC1pbW1lZGlhdGUtc2hpbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGllL2xpYi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9zdHJlYW0vQ29udmVydFdvcmtlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL25vZGVqcy9Ob2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvemlwT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvZ2VuZXJhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9mbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvZGVmbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9kZWZsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3RyZWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi9pbmZsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmxhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvaW5mZmFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZ0cmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL2dlbmVyYXRlL1ppcEZpbGVXb3JrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvbG9hZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanN6aXAvbGliL3ppcEVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi9yZWFkZXIvU3RyaW5nUmVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9saWIvcmVhZGVyL05vZGVCdWZmZXJSZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2xpYi96aXBFbnRyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9hcGkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9hcGkvbW9ja1NlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0aWwvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21tb24vcmV3cml0ZVhoci5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL3V0aWxzL2RhdGEtcmVjb3ZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb25maWcvMmQvY29uZmlnLmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29uZmlnLzJkL2NvbmZpZy1oYW5kbGVFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjLzJkLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiVlVFX0FQUF9WRVJTSU9OIiwidXRpbCIsImdldFVybFBhcmFtIiwiY29va2llcyIsImNvb2tpZVNldHRpbmciLCJjdXJyZW50Q29va2llU2V0dGluZyIsImV4cGlyZXMiLCJhc3NpZ24iLCJDb29raWVzIiwic2V0IiwicmVtb3ZlIiwicmVxUG9ydCIsImFwaUNvbmZpZyIsImRlZmF1bHRCYXNlUG9ydCIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwicmVxdWVzdCIsImF4aW9zIiwiYmFzZVVSTCIsImxvY2F0aW9uIiwiaHJlZiIsInNwbGl0IiwiaW50ZXJjZXB0b3JzIiwidXNlIiwiY29uZmlnIiwidG9rZW4iLCJoZWFkZXJzIiwidGVzdFRva2VuIiwiZXJyb3IiLCJQcm9taXNlIiwicmVqZWN0IiwicmVzcG9uc2UiLCJkYXRhQXhpb3MiLCJkYXRhIiwiY29kZSIsInN0YXR1cyIsIm1lc3NhZ2UiLCJjaGVjayIsIml0IiwiTWF0aCIsImdsb2JhbFRoaXMiLCJPIiwid2luZG93Iiwic2VsZiIsImdsb2JhbCIsIkZ1bmN0aW9uIiwic2hhcmVkIiwidWlkIiwiTkFUSVZFX1NZTUJPTCIsInN0b3JlIiwic3VwcG9ydCIsImJhc2U2NCIsIm5vZGVqc1V0aWxzIiwic2V0SW1tZWRpYXRlIiwiZXh0ZXJuYWwiLCJpZGVudGl0eSIsImlucHV0Iiwic3RyaW5nVG9BcnJheUxpa2UiLCJzdHIiLCJhcnJheSIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJuZXdCbG9iIiwicGFydCIsInR5cGUiLCJjaGVja1N1cHBvcnQiLCJCbG9iIiwiZSIsImJ1aWxkZXIiLCJCbG9iQnVpbGRlciIsIldlYktpdEJsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiYXBwZW5kIiwiZ2V0QmxvYiIsIkVycm9yIiwiYXJyYXlUb1N0cmluZ0hlbHBlciIsInN0cmluZ2lmeUJ5Q2h1bmsiLCJjaHVuayIsInJlc3VsdCIsImsiLCJsZW4iLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsInB1c2giLCJzbGljZSIsIm1pbiIsInN1YmFycmF5Iiwiam9pbiIsInN0cmluZ2lmeUJ5Q2hhciIsInJlc3VsdFN0ciIsImFwcGx5Q2FuQmVVc2VkIiwidWludDhhcnJheSIsIlVpbnQ4QXJyYXkiLCJub2RlYnVmZmVyIiwiYWxsb2NCdWZmZXIiLCJhcnJheUxpa2VUb1N0cmluZyIsImdldFR5cGVPZiIsImNhblVzZUFwcGx5IiwiZmxvb3IiLCJhcnJheUxpa2VUb0FycmF5TGlrZSIsImFycmF5RnJvbSIsImFycmF5VG8iLCJhcHBseUZyb21DaGFyQ29kZSIsInRyYW5zZm9ybSIsIkFycmF5IiwiYnVmZmVyIiwibmV3QnVmZmVyRnJvbSIsImJ5dGVMZW5ndGgiLCJ0cmFuc2Zvcm1UbyIsIm91dHB1dFR5cGUiLCJpbnB1dFR5cGUiLCJ0b1N0cmluZyIsImlzQnVmZmVyIiwiYXJyYXlidWZmZXIiLCJBcnJheUJ1ZmZlciIsInRvTG93ZXJDYXNlIiwiTUFYX1ZBTFVFXzE2QklUUyIsIk1BWF9WQUxVRV8zMkJJVFMiLCJwcmV0dHkiLCJyZXMiLCJ0b1VwcGVyQ2FzZSIsImRlbGF5IiwiY2FsbGJhY2siLCJhcmdzIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwiT2JqIiwiZXh0ZW5kIiwiYXR0ciIsImFyZ3VtZW50cyIsInByZXBhcmVDb250ZW50IiwiaW5wdXREYXRhIiwiaXNCaW5hcnkiLCJpc09wdGltaXplZEJpbmFyeVN0cmluZyIsImlzQmFzZTY0IiwicmVzb2x2ZSIsInRoZW4iLCJibG9iIiwiaW5kZXhPZiIsIkZpbGVSZWFkZXIiLCJyZWFkZXIiLCJvbmxvYWQiLCJ0YXJnZXQiLCJvbmVycm9yIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJkYXRhVHlwZSIsImRlY29kZSIsImV4ZWMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmIiwiaGlkZSIsInJlZGVmaW5lIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInNvdXJjZSIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0IiwiZm9yY2VkIiwic2hhbSIsImhvb2t1cCIsImFwaU5hbWUiLCJhcGlBZGQiLCJhcGlSZW1vdmUiLCJhcGlMaXN0IiwiYXBpVXBkYXRlIiwicGxhbiIsImV4cG9ydEFwaSIsImtleTNkIiwiZGVmYXVsdEJhc2VBcGkiLCJyZWNvdmVyeURhdGFQYXRoIiwiaXNPYmplY3QiLCJUeXBlRXJyb3IiLCJmYWlscyIsImEiLCJ1cmwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjbGljayIsInJlbW92ZUNoaWxkIiwiZ2V0RWxlbWVudEJ5SWQiLCJyZWciLCJSZWdFeHAiLCJzZWFyY2giLCJzdWJzdHIiLCJtYXRjaCIsImRlY29kZVVSSUNvbXBvbmVudCIsImZpbGVzIiwicmVzTmFtZSIsInppcCIsIkpTWmlwIiwiZm9yRWFjaCIsImZpbGUiLCJwYXRoIiwiZ2VuZXJhdGVBc3luYyIsImNvbXByZXNzaW9uIiwiY29tcHJlc3Npb25PcHRpb25zIiwibGV2ZWwiLCJjb250ZW50Iiwic2F2ZUFzIiwiREVTQ1JJUFRPUlMiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImV4cG9ydEFwaU5hbWUiLCJleHBvcnRBcGlBZGQiLCJ1cGRhdGVUcmVlIiwiY2hpbGREYXRhIiwiY3V0dGVudERpciIsImN1c3RvbVN0YXRlcyIsInN0YXRpb25zRXhwbG9yZXIiLCJ0cmVlIiwic20iLCJsZCIsImdldENoaWxkcmVuIiwiX2FzIiwidG9DaGlsZHJlbiIsImVhY2giLCJjaGlsZCIsImZpbGVUeXBlIiwiZG0iLCJkaWFncmFtIiwiSlNPTiIsInBhcnNlIiwianNvbiIsImZpbGVJY29uIiwiaWNvbiIsImF0dHJzIiwic3BhY2VVdWlkIiwic3BhY2VJZCIsInV1aWQiLCJpZCIsImRpYWdyYW1UeXBlIiwiaXNNYWluIiwicGFyc2VDaGlsZCIsImFkZERpYWdyYW0iLCJkaWFncmFtSnNvbiIsImRpYWdyYW1TcGFjZVV1aWQiLCJhZGRUeXBlIiwiY3VycmVudERpciIsImVkaXRvciIsImdldEF0dHIiLCJzdHJpbmdpZnkiLCJ0b0pTT04iLCJwb3N0IiwiYWRkRmlsZSIsImNhdGNoIiwiZGlhbG9nIiwiaHQiLCJ3aWRnZXQiLCJEaWFsb2ciLCJzZXRDb25maWciLCJ0aXRsZSIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGVudFBhZGRpbmciLCJkcmFnZ2FibGUiLCJjbG9zYWJsZSIsInJlc2l6ZU1vZGUiLCJidXR0b25zIiwibGFiZWwiLCJhY3Rpb24iLCJidXR0b24iLCJidXR0b25zQWxpZ24iLCJzaG93IiwicmVuYW1lRGlhZ3JhbSIsImV4cGxvcmVyIiwibGlzdCIsIm1ldGhvZCIsInVwZGF0ZURpYWdyYW0iLCJkYXRhTW9kZWwiLCJkb25lRG0iLCJnZXREaWFncmFtTGlzdCIsInJvd3MiLCJyZW1vdmVEaWFncmFtIiwidXVpZHMiLCJjb3B5RGlhZ3JhbXMiLCJkYXRhcyIsInJlcXMiLCJtYXAiLCJEYXRlIiwiZ2V0VGltZSIsImFsbCIsImRlbGV0ZUZpbGUiLCJmaWxlVXJsIiwidGVzdCIsInJlcGxhY2UiLCJnZXRGaWxlTGlzdCIsImZpbGVOYW1lIiwiY3JlYXRlTWtkaXIiLCJyZW5hbWVGaWxlIiwibmV3TmFtZSIsIm9sZE5hbWUiLCJvbGRGaWxlTmFtZURpciIsIm5ld0ZpbGVOYW1lRGlyIiwiZ2V0RmlsZUNvbnQiLCJpc0FycmF5IiwidmFsIiwiaXNGdW5jdGlvbiIsIm9iaiIsImZuIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiaXNWaWV3IiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwiZGVlcE1lcmdlIiwiYiIsInRoaXNBcmciLCJ0cmltIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJQIiwiQXR0cmlidXRlcyIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiR2VuZXJpY1dvcmtlciIsInRoaXMiLCJzdHJlYW1JbmZvIiwiZ2VuZXJhdGVkRXJyb3IiLCJleHRyYVN0cmVhbUluZm8iLCJpc1BhdXNlZCIsImlzRmluaXNoZWQiLCJpc0xvY2tlZCIsIl9saXN0ZW5lcnMiLCJwcmV2aW91cyIsImVtaXQiLCJlbmQiLCJmbHVzaCIsImNsZWFuVXAiLCJvbiIsImxpc3RlbmVyIiwiYXJnIiwibmV4dCIsInJlZ2lzdGVyUHJldmlvdXMiLCJtZXJnZVN0cmVhbUluZm8iLCJwcm9jZXNzQ2h1bmsiLCJwYXVzZSIsInJlc3VtZSIsIndpdGhFcnJvciIsIndpdGhTdHJlYW1JbmZvIiwibG9jayIsIm1lIiwiZyIsImhhcyIsIm5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmciLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwidG9JbnRlZ2VyIiwiYXJndW1lbnQiLCIkIiwicHJvdG8iLCJET01JdGVyYWJsZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsInVuZGVmaW5lZCIsInN0cmluZyIsIkJ1ZmZlciIsInNpemUiLCJub2Rlc3RyZWFtIiwiUmVhZGFibGUiLCJUWVBFRF9PSyIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsInNvdXJjZXMiLCJzaGlmdCIsInNocmlua0J1ZiIsImJ1ZiIsImZuVHlwZWQiLCJhcnJheVNldCIsImRlc3QiLCJzcmMiLCJzcmNfb2ZmcyIsImRlc3Rfb2ZmcyIsImZsYXR0ZW5DaHVua3MiLCJjaHVua3MiLCJwb3MiLCJmblVudHlwZWQiLCJjb25jYXQiLCJzZXRUeXBlZCIsIkJ1ZjgiLCJCdWYxNiIsIkJ1ZjMyIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImNyZWF0ZVByb3BlcnR5IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiU1BFQ0lFU19TVVBQT1JUIiwiRSIsIkEiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsInRvSW5kZXhlZE9iamVjdCIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIklTX1BVUkUiLCJTSEFSRUQiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwiY2VpbCIsImlzTmFOIiwicG5hIiwib2JqZWN0S2V5cyIsImtleXMiLCJEdXBsZXgiLCJXcml0YWJsZSIsInYiLCJyZWFkYWJsZSIsIndyaXRhYmxlIiwiYWxsb3dIYWxmT3BlbiIsIm9uY2UiLCJvbmVuZCIsIl93cml0YWJsZVN0YXRlIiwiZW5kZWQiLCJuZXh0VGljayIsIm9uRW5kTlQiLCJoaWdoV2F0ZXJNYXJrIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJfZGVzdHJveSIsImVyciIsImNiIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwiUFJFRkVSUkVEX1NUUklORyIsInZhbHVlT2YiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiV2Vha01hcCIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJnZXR0ZXJGb3IiLCJUWVBFIiwic3RhdGUiLCJ1dGlscyIsIl91dGY4bGVuIiwiVXRmOERlY29kZVdvcmtlciIsImxlZnRPdmVyIiwiVXRmOEVuY29kZVdvcmtlciIsInV0ZjhlbmNvZGUiLCJjMiIsIm1fcG9zIiwic3RyX2xlbiIsImJ1Zl9sZW4iLCJ1dGY4ZGVjb2RlIiwib3V0IiwiY19sZW4iLCJ1dGYxNmJ1ZiIsInByZXZpb3VzRGF0YSIsIm5leHRCb3VuZGFyeSIsIm1heCIsInVzYWJsZURhdGEiLCJtZXRhIiwic3VwZXJfIiwiY29uc3RydWN0b3IiLCJUZW1wQ3RvciIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsIkl0ZW0iLCJub29wIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsImludGVybmFsT2JqZWN0S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJjbGFzc29mIiwiY3JlYXRlTWV0aG9kIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwidGhhdCIsInNwZWNpZmljQ3JlYXRlIiwiYm91bmRGdW5jdGlvbiIsImluZGV4IiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsIlJhbmdlRXJyb3IiLCJfX3Byb3RvX18iLCJlbmNvZGluZ09yT2Zmc2V0IiwiZnJvbSIsImFsbG9jVW5zYWZlIiwiYnl0ZU9mZnNldCIsImZyb21BcnJheUxpa2UiLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsImNoZWNrZWQiLCJjb3B5IiwiYXNzZXJ0U2l6ZSIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiYXJyYXlJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnIiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImhleFdyaXRlIiwib2Zmc2V0IiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJhc2NpaVdyaXRlIiwiYmxpdEJ1ZmZlciIsImJ5dGVBcnJheSIsImJhc2U2NFNsaWNlIiwic3RhcnQiLCJmcm9tQnl0ZUFycmF5IiwidXRmOFNsaWNlIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsIngiLCJ5Iiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiaGV4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJlcXVhbHMiLCJpbnNwZWN0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ1bml0cyIsImhpIiwibG8iLCJfYXJyIiwicmV0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJkc3QiLCJvYmplY3RUb1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNTeW1ib2wiLCJpc1JlZ0V4cCIsInJlIiwiaXNFcnJvciIsImlzUHJpbWl0aXZlIiwiRVM2UHJvbWlzZSIsIiRpbmRleE9mIiwic2xvcHB5QXJyYXlNZXRob2QiLCJuYXRpdmVJbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIlNMT1BQWV9NRVRIT0QiLCJzZWFyY2hFbGVtZW50IiwiZmFjdG9yeSIsImF0dHJpYnV0ZXMiLCJpbml0IiwiY29udmVydGVyIiwiYXBpIiwiZGVmYXVsdHMiLCJ0b1VUQ1N0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsInN0cmluZ2lmaWVkQXR0cmlidXRlcyIsImF0dHJpYnV0ZU5hbWUiLCJjb29raWUiLCJqYXIiLCJwYXJ0cyIsImNoYXJBdCIsImdldEpTT04iLCJ3aXRoQ29udmVydGVyIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJwb3N0Zml4IiwicmFuZG9tIiwiU1BFQ0lFUyIsIk1FVEhPRF9OQU1FIiwiQm9vbGVhbiIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiViIsIkVYSVNUUyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInJlcGxhY2VtZW50IiwiZW51bUJ1Z0tleXMiLCJUT19TVFJJTkdfVEFHIiwiVEFHIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwibGFzdEluZGV4IiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsIndlbGxLbm93blN5bWJvbCIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsImdyb3VwcyIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIktFWSIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJtZXRob2RzIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwiZG9uZSIsInN0cmluZ01ldGhvZCIsInJlZ2V4TWV0aG9kIiwiUiIsIlMiLCJhcmcxIiwiYXJnMyIsImNvcHlQcm9wcyIsIlNhZmVCdWZmZXIiLCJpc05vZGUiLCJPYmplY3RQcm90b3R5cGUiLCIkbWFwIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkl0ZXJhdG9ycyIsImRlZmluZUl0ZXJhdG9yIiwiQVJSQVlfSVRFUkFUT1IiLCJzZXRJbnRlcm5hbFN0YXRlIiwiaXRlcmF0ZWQiLCJraW5kIiwiQXJndW1lbnRzIiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImludGVnZXIiLCJwcm9wZXJ0eUtleSIsIm9yaWdpbmFsQXJyYXkiLCJDIiwiJGZvckVhY2giLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZ2V0QnVpbHRJbiIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJuYW1lcyIsIkRhdGVQcm90b3R5cGUiLCJJTlZBTElEX0RBVEUiLCJUT19TVFJJTkciLCJuYXRpdmVEYXRlVG9TdHJpbmciLCJOYU4iLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsIkVtcHR5IiwiZGVmaW5lUHJvcGVydGllcyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIlBST1RPVFlQRSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwibHQiLCJjbG9zZSIsIkYiLCJQcm9wZXJ0aWVzIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsImRvdEFsbCIsInVuaWNvZGUiLCJzdGlja3kiLCJSZWZsZWN0T3duS2V5cyIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsIk51bWJlcklzTmFOIiwiRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsIl9hZGRMaXN0ZW5lciIsInByZXBlbmQiLCJldmVudHMiLCJleGlzdGluZyIsIm5ld0xpc3RlbmVyIiwidW5zaGlmdCIsIndhcm5lZCIsInciLCJlbWl0dGVyIiwiY291bnQiLCJ3YXJuaW5nIiwid2FybiIsIl9vbmNlV3JhcCIsImZpcmVkIiwid3JhcEZuIiwid3JhcHBlZCIsInVud3JhcCIsImV2bGlzdGVuZXIiLCJhcnJheUNsb25lIiwibGlzdGVuZXJDb3VudCIsImdldFByb3RvdHlwZU9mIiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVyIiwiY29udGV4dCIsImhhbmRsZXIiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJwb3AiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiUGFzc1Rocm91Z2giLCJDb3JrZWRSZXF1ZXN0IiwiX3RoaXMiLCJlbnRyeSIsImZpbmlzaCIsImNvcmtSZXEiLCJwZW5kaW5nY2IiLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJhc3luY1dyaXRlIiwiV3JpdGFibGVTdGF0ZSIsInJlYWxIYXNJbnN0YW5jZSIsImludGVybmFsVXRpbCIsImRlcHJlY2F0ZSIsIk91clVpbnQ4QXJyYXkiLCJkZXN0cm95SW1wbCIsIm5vcCIsInN0cmVhbSIsImlzRHVwbGV4Iiwib2JqZWN0TW9kZSIsIndyaXRhYmxlT2JqZWN0TW9kZSIsImh3bSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZGVmYXVsdEh3bSIsImZpbmFsQ2FsbGVkIiwibmVlZERyYWluIiwiZW5kaW5nIiwiZmluaXNoZWQiLCJub0RlY29kZSIsImRlY29kZVN0cmluZ3MiLCJkZWZhdWx0RW5jb2RpbmciLCJ3cml0aW5nIiwiY29ya2VkIiwic3luYyIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVjYiIsIndyaXRlbGVuIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJfd3JpdGUiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZGVzdHJveSIsImZpbmFsIiwiX2ZpbmFsIiwiZG9Xcml0ZSIsImhvbGRlciIsImFsbEJ1ZmZlcnMiLCJpc0J1ZiIsImNhbGxGaW5hbCIsIm5lZWQiLCJnZXRCdWZmZXIiLCJjdXJyZW50IiwiXyIsImhhc0luc3RhbmNlIiwidmFsaWQiLCJuZXdDaHVuayIsImxhc3QiLCJjb3JrIiwidW5jb3JrIiwic2V0RGVmYXVsdEVuY29kaW5nIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsIkRhdGFXb3JrZXIiLCJEYXRhTGVuZ3RoUHJvYmUiLCJDcmMzMlByb2JlIiwiQ29tcHJlc3NlZE9iamVjdCIsImNvbXByZXNzZWRTaXplIiwidW5jb21wcmVzc2VkU2l6ZSIsImNyYzMyIiwiY29tcHJlc3NlZENvbnRlbnQiLCJnZXRDb250ZW50V29ya2VyIiwid29ya2VyIiwidW5jb21wcmVzc1dvcmtlciIsImdldENvbXByZXNzZWRXb3JrZXIiLCJjcmVhdGVXb3JrZXJGcm9tIiwidW5jb21wcmVzc2VkV29ya2VyIiwiY29tcHJlc3NXb3JrZXIiLCJjcmNUYWJsZSIsInRhYmxlIiwiY3JjIiwiMiIsIjAiLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwicHJvbWlzZSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsIm1pY3JvdGFzayIsIm9rIiwiZXhpdGVkIiwicmVhY3Rpb24iLCJmYWlsIiwiZG9tYWluIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJlbnRlciIsImV4aXQiLCJvblVuaGFuZGxlZCIsImRpc3BhdGNoRXZlbnQiLCJyZWFzb24iLCJldmVudCIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJVTkhBTkRMRURfUkVKRUNUSU9OIiwiaG9zdFJlcG9ydEVycm9ycyIsImludGVybmFsUmVqZWN0IiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibmF0aXZlVGhlbiIsIk5hdGl2ZVByb21pc2UiLCJyZWRlZmluZUFsbCIsInNldFRvU3RyaW5nVGFnIiwic2V0U3BlY2llcyIsImFuSW5zdGFuY2UiLCJpdGVyYXRlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwic3BlY2llc0NvbnN0cnVjdG9yIiwidGFzayIsInByb21pc2VSZXNvbHZlIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwidXNlckFnZW50IiwiUFJPTUlTRSIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiJGZldGNoIiwiZmV0Y2giLCJ2OCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiSVNfTk9ERSIsIkZPUkNFRCIsImVtcHR5IiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiaXRlcmFibGUiLCJpc1VuaGFuZGxlZCIsInBhcmVudCIsImludGVybmFsUmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIndyYXAiLCJjYXBhYmlsaXR5IiwiJHByb21pc2VSZXNvbHZlIiwidmFsdWVzIiwiY291bnRlciIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiU1RSSU5HX0lURVJBVE9SIiwicG9pbnQiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIklURVJBVE9SIiwiQXJyYXlWYWx1ZXMiLCJnZXRUcmVlTGFuIiwicGFyZW50SWQiLCJwYXJhbXMiLCJub2RlVHlwZSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiaW5mbyIsIkZVTkNfRVJST1JfVEVYVCIsIkhBU0hfVU5ERUZJTkVEIiwiUExBQ0VIT0xERVIiLCJXUkFQX0FSWV9GTEFHIiwiTkFOIiwiTUFYX0FSUkFZX0xFTkdUSCIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicHJvbWlzZVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW0iLCJyZVRyaW1TdGFydCIsInJlVHJpbUVuZCIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNBc3RyYWxSYW5nZSIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNEaW5nYmF0UmFuZ2UiLCJyc0xvd2VyUmFuZ2UiLCJyc1VwcGVyUmFuZ2UiLCJyc1ZhclJhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzWldKIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJzT3B0Q29udHJMb3dlciIsInJzT3B0Q29udHJVcHBlciIsInJlT3B0TW9kIiwicnNPcHRWYXIiLCJyc1NlcSIsInJzRW1vamkiLCJyc1N5bWJvbCIsInJlQXBvcyIsInJlQ29tYm9NYXJrIiwicmVVbmljb2RlIiwicmVVbmljb2RlV29yZCIsInJlSGFzVW5pY29kZSIsInJlSGFzVW5pY29kZVdvcmQiLCJjb250ZXh0UHJvcHMiLCJ0ZW1wbGF0ZUNvdW50ZXIiLCJ0eXBlZEFycmF5VGFncyIsImNsb25lYWJsZVRhZ3MiLCJzdHJpbmdFc2NhcGVzIiwiZnJlZVBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiZnJlZVBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwicm9vdCIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsIm5vZGVVdGlsIiwicmVxdWlyZSIsInR5cGVzIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJmdW5jIiwiYXJyYXlBZ2dyZWdhdG9yIiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiY29sbGVjdGlvbiIsImVhY2hGdW5jIiwiYmFzZUZpbmRJbmRleCIsImZyb21SaWdodCIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImJhc2VUaW1lcyIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJwcm9wcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwibWFwVG9BcnJheSIsIm92ZXJBcmciLCJyZXBsYWNlSG9sZGVycyIsInBsYWNlaG9sZGVyIiwic2V0VG9BcnJheSIsInN0cmluZ1NpemUiLCJzdHJpbmdUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsInJ1bkluQ29udGV4dCIsInBpY2siLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwiaWRDb3VudGVyIiwibWFza1NyY0tleSIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwic3BsaWNlIiwic3ByZWFkYWJsZVN5bWJvbCIsInN5bUl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJuYXRpdmVDZWlsIiwibmF0aXZlRmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwicmV2ZXJzZSIsIkRhdGFWaWV3IiwiTWFwIiwiU2V0IiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwic3ltYm9sVG9TdHJpbmciLCJsb2Rhc2giLCJpc09iamVjdExpa2UiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwiYWRkIiwiU3RhY2siLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInBhdGhzIiwic2tpcCIsIm51bWJlciIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJrZXlzSW4iLCJnZXRTeW1ib2xzIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImNsb25lVHlwZWRBcnJheSIsInN5bWJvbCIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImdldE1hcERhdGEiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJjcmVhdGVCYXNlRWFjaCIsImJhc2VGb3JPd24iLCJiYXNlRWFjaFJpZ2h0IiwiYmFzZUZvck93blJpZ2h0IiwiYmFzZUV2ZXJ5IiwiYmFzZUV4dHJlbXVtIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJiYXNlR2V0IiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiYmFzZUd0Iiwib3RoZXIiLCJiYXNlSGFzIiwiYmFzZUhhc0luIiwiYmFzZUludGVyc2VjdGlvbiIsImFycmF5cyIsIm90aExlbmd0aCIsIm90aEluZGV4IiwiY2FjaGVzIiwibWF4TGVuZ3RoIiwic2VlbiIsImJhc2VJbnZva2UiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImJhc2VJc05hdGl2ZSIsImJhc2VJdGVyYXRlZSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsInNvcnQiLCJvYmpDcml0ZXJpYSIsImNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VSZXN0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsIm5lc3RlZCIsImJhc2VTZXREYXRhIiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsImhpZ2giLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsIndvcmRzIiwiZGVidXJyIiwiY3JlYXRlQ3RvciIsInRoaXNCaW5kaW5nIiwiY3JlYXRlRmluZCIsImZpbmRJbmRleEZ1bmMiLCJjcmVhdGVGbG93IiwiZmxhdFJlc3QiLCJmdW5jcyIsInByZXJlcSIsInRocnUiLCJnZXRGdW5jTmFtZSIsImZ1bmNOYW1lIiwiZ2V0RGF0YSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJvbGRBcnJheSIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwic3RlcCIsInRvRmluaXRlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInBhaXIiLCJjcmVhdGVUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyVmFsdWUiLCJmbGF0dGVuIiwib3RoZXJGdW5jIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwic2hvcnRPdXQiLCJyZWZlcmVuY2UiLCJkZXRhaWxzIiwibGFzdENhbGxlZCIsInN0YW1wIiwicmFuZCIsIm1lbW9pemUiLCJxdW90ZSIsInN1YlN0cmluZyIsImNsb25lIiwiZGlmZmVyZW5jZSIsImRpZmZlcmVuY2VCeSIsImRpZmZlcmVuY2VXaXRoIiwiZmluZExhc3RJbmRleCIsImhlYWQiLCJpbnRlcnNlY3Rpb24iLCJtYXBwZWQiLCJpbnRlcnNlY3Rpb25CeSIsImludGVyc2VjdGlvbldpdGgiLCJwdWxsIiwicHVsbEFsbCIsInB1bGxBdCIsInVuaW9uIiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuemlwIiwiZ3JvdXAiLCJ1bnppcFdpdGgiLCJ3aXRob3V0IiwieG9yIiwieG9yQnkiLCJ4b3JXaXRoIiwiemlwV2l0aCIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmRMYXN0IiwiZm9yRWFjaFJpZ2h0IiwiZ3JvdXBCeSIsImludm9rZU1hcCIsImtleUJ5IiwicGFydGl0aW9uIiwic29ydEJ5IiwiYmVmb3JlIiwiYmluZEtleSIsIldSQVBfQklORF9GTEFHIiwiZGVib3VuY2UiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGltZSIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiZGVmZXIiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJuZWdhdGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0IiwiZ3RlIiwiaXNJbnRlZ2VyIiwibHRlIiwidG9BcnJheSIsInJlbWFpbmRlciIsImFzc2lnbkluIiwiYXNzaWduSW5XaXRoIiwiYXNzaWduV2l0aCIsImF0IiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiZGVmYXVsdHNEZWVwIiwibWVyZ2VXaXRoIiwiaW52ZXJ0IiwiaW52ZXJ0QnkiLCJpbnZva2UiLCJpc1Byb3RvIiwiYmFzZUtleXNJbiIsIm9taXQiLCJDTE9ORV9ERUVQX0ZMQUciLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJwYXR0ZXJuIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwicmFuZ2UiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwicm91bmQiLCJzdWJ0cmFjdCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiYWZ0ZXIiLCJjYXN0QXJyYXkiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmRXaXRoIiwiY2xhbXAiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVuZHNXaXRoIiwiZXNjYXBlUmVnRXhwIiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibWF4QnkiLCJtZWFuIiwibWVhbkJ5IiwibWluQnkiLCJzdHViT2JqZWN0Iiwic3R1YlN0cmluZyIsInN0dWJUcnVlIiwibnRoIiwibm9Db25mbGljdCIsInBhZCIsInN0ckxlbmd0aCIsInBhZEVuZCIsInBhZFN0YXJ0IiwicmFkaXgiLCJmbG9hdGluZyIsInRlbXAiLCJyZWR1Y2UiLCJyZWR1Y2VSaWdodCIsInJlcGVhdCIsInNhbXBsZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZURlbGltaXRlcnMiLCJldmFsdWF0ZSIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ0aW1lcyIsInRvTG93ZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsIm9taXNzaW9uIiwic3Vic3RyaW5nIiwibmV3RW5kIiwidW5lc2NhcGUiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2hSaWdodCIsImZpcnN0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJpc1JpZ2h0IiwidmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJlbmNvZGUiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInRvSVNPU3RyaW5nIiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJhZGFwdGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsImNvbmZpZzEiLCJjb25maWcyIiwiQ2FuY2VsIiwiZGVzY3JpcHRpb24iLCJBbGxTeW1ib2xzIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiJFN5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3RQcm90b3R5cGVTeW1ib2xzIiwiSElEREVOIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsImRlZmluZVdlbGxLbm93blN5bWJvbCIsIlRPX1BSSU1JVElWRSIsIm5hdGl2ZUpTT05TdHJpbmdpZnkiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsIlFPYmplY3QiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwia2V5Rm9yIiwic3ltIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJOQU1FIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwic2V0UHJvdG90eXBlT2YiLCJDT1JSRUNUX1NFVFRFUiIsIk1BVENIIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkNvbnN0cnVjdG9yIiwiZmxhZ3MiLCJSZWdFeHBQcm90b3R5cGUiLCJuYXRpdmVUb1N0cmluZyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJyZiIsIkNPTlZFUlRfVE9fU1RSSU5HIiwic2Vjb25kIiwiY29kZUF0IiwiRUVsaXN0ZW5lckNvdW50IiwiUmVhZGFibGVTdGF0ZSIsImRlYnVnVXRpbCIsImRlYnVnIiwiZGVidWdsb2ciLCJTdHJpbmdEZWNvZGVyIiwiQnVmZmVyTGlzdCIsImtQcm94eUV2ZW50cyIsInJlYWRhYmxlT2JqZWN0TW9kZSIsInJlYWRhYmxlSHdtIiwicmVhZGFibGVIaWdoV2F0ZXJNYXJrIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsImVuZEVtaXR0ZWQiLCJyZWFkaW5nIiwibmVlZFJlYWRhYmxlIiwiZW1pdHRlZFJlYWRhYmxlIiwicmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWVTY2hlZHVsZWQiLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJkZWNvZGVyIiwiX3JlYWQiLCJyZWFkYWJsZUFkZENodW5rIiwiYWRkVG9Gcm9udCIsInNraXBDaHVua0NoZWNrIiwiZW1pdFJlYWRhYmxlIiwiYWRkQ2h1bmsiLCJtYXliZVJlYWRNb3JlIiwic2V0RW5jb2RpbmciLCJlbmMiLCJNQVhfSFdNIiwiaG93TXVjaFRvUmVhZCIsImVtaXRSZWFkYWJsZV8iLCJtYXliZVJlYWRNb3JlXyIsIm5SZWFkaW5nTmV4dFRpY2siLCJyZXN1bWVfIiwiZnJvbUxpc3QiLCJoYXNTdHJpbmdzIiwibmIiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ4cyIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsInVucGlwZSIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmNsb3NlIiwib25maW5pc2giLCJvbmRyYWluIiwib25kYXRhIiwiY2xlYW5lZFVwIiwiaW5jcmVhc2VkQXdhaXREcmFpbiIsImRlc3RzIiwiZXYiLCJwYXVzZWQiLCJfZnJvbUxpc3QiLCJlbWl0RXJyb3JOVCIsInJlYWRhYmxlRGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2NvcGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIml0ZW0iLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJuZW5jIiwicmV0cmllZCIsInRleHQiLCJ1dGYxNlRleHQiLCJ1dGYxNkVuZCIsImZpbGxMYXN0IiwidXRmOEZpbGxMYXN0IiwiYmFzZTY0VGV4dCIsImJhc2U2NEVuZCIsInNpbXBsZVdyaXRlIiwic2ltcGxlRW5kIiwibGFzdE5lZWQiLCJsYXN0VG90YWwiLCJsYXN0Q2hhciIsInV0ZjhDaGVja0J5dGUiLCJieXRlIiwidG90YWwiLCJfdHJhbnNmb3JtU3RhdGUiLCJhZnRlclRyYW5zZm9ybSIsInRzIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJfdHJhbnNmb3JtIiwiX2ZsdXNoIiwicHJlZmluaXNoIiwiX3RoaXMyIiwiZXJyMiIsIl9rZXlTdHIiLCJjaHIxIiwiY2hyMiIsImNocjMiLCJlbmMxIiwiZW5jMiIsImVuYzMiLCJlbmM0Iiwib3V0cHV0IiwicmVtYWluaW5nQnl0ZXMiLCJyZXN1bHRJbmRleCIsInRvdGFsTGVuZ3RoIiwiQ29udmVydFdvcmtlciIsIk5vZGVqc1N0cmVhbU91dHB1dEFkYXB0ZXIiLCJTdHJlYW1IZWxwZXIiLCJtaW1lVHlwZSIsImludGVybmFsVHlwZSIsIl9pbnRlcm5hbFR5cGUiLCJfb3V0cHV0VHlwZSIsIl9taW1lVHlwZSIsIl93b3JrZXIiLCJhY2N1bXVsYXRlIiwidXBkYXRlQ2IiLCJoZWxwZXIiLCJ1cGRhdGVDYWxsYmFjayIsImRhdGFBcnJheSIsImNodW5rVHlwZSIsInJlc3VsdFR5cGUiLCJldnQiLCJ0b05vZGVqc1N0cmVhbSIsImJpbmFyeSIsImNyZWF0ZUZvbGRlcnMiLCJkYXRlIiwiY29tbWVudCIsInVuaXhQZXJtaXNzaW9ucyIsImRvc1Blcm1pc3Npb25zIiwiZGF0YVAiLCJkYXRhSXNSZWFkeSIsIl90aWNrU2NoZWR1bGVkIiwiX3RpY2tBbmRSZXBlYXQiLCJfdGljayIsIm5leHRJbmRleCIsInBlcmNlbnQiLCJwcm9wTmFtZSIsIlNUT1JFIiwibWFnaWMiLCJERUZMQVRFIiwiYWRsZXIiLCJzMSIsInMyIiwiU1RSX0FQUExZX09LIiwiU1RSX0FQUExZX1VJQV9PSyIsIl9fIiwicSIsImJ1ZjJiaW5zdHJpbmciLCJzdHJpbmcyYnVmIiwiYmluc3RyaW5nMmJ1ZiIsImJ1ZjJzdHJpbmciLCJ1dGY4Ym9yZGVyIiwibmV4dF9pbiIsImF2YWlsX2luIiwidG90YWxfaW4iLCJuZXh0X291dCIsImF2YWlsX291dCIsInRvdGFsX291dCIsIm1zZyIsImRhdGFfdHlwZSIsIlpfTk9fRkxVU0giLCJaX1BBUlRJQUxfRkxVU0giLCJaX1NZTkNfRkxVU0giLCJaX0ZVTExfRkxVU0giLCJaX0ZJTklTSCIsIlpfQkxPQ0siLCJaX1RSRUVTIiwiWl9PSyIsIlpfU1RSRUFNX0VORCIsIlpfTkVFRF9ESUNUIiwiWl9FUlJOTyIsIlpfU1RSRUFNX0VSUk9SIiwiWl9EQVRBX0VSUk9SIiwiWl9CVUZfRVJST1IiLCJaX05PX0NPTVBSRVNTSU9OIiwiWl9CRVNUX1NQRUVEIiwiWl9CRVNUX0NPTVBSRVNTSU9OIiwiWl9ERUZBVUxUX0NPTVBSRVNTSU9OIiwiWl9GSUxURVJFRCIsIlpfSFVGRk1BTl9PTkxZIiwiWl9STEUiLCJaX0ZJWEVEIiwiWl9ERUZBVUxUX1NUUkFURUdZIiwiWl9CSU5BUlkiLCJaX1RFWFQiLCJaX1VOS05PV04iLCJaX0RFRkxBVEVEIiwiTE9DQUxfRklMRV9IRUFERVIiLCJDRU5UUkFMX0ZJTEVfSEVBREVSIiwiQ0VOVFJBTF9ESVJFQ1RPUllfRU5EIiwiWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiIsIlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCIsIkRBVEFfREVTQ1JJUFRPUiIsIkFycmF5UmVhZGVyIiwiU3RyaW5nUmVhZGVyIiwiTm9kZUJ1ZmZlclJlYWRlciIsIlVpbnQ4QXJyYXlSZWFkZXIiLCJEYXRhUmVhZGVyIiwiYnl0ZUF0IiwiemVybyIsImxhc3RJbmRleE9mU2lnbmF0dXJlIiwic2lnIiwic2lnMCIsInNpZzEiLCJzaWcyIiwic2lnMyIsInJlYWRBbmRDaGVja1NpZ25hdHVyZSIsInJlYWREYXRhIiwiY2hlY2tJbmRleCIsIm5ld0luZGV4Iiwic2V0SW5kZXgiLCJyZWFkSW50IiwicmVhZFN0cmluZyIsInJlYWREYXRlIiwiZG9zdGltZSIsIlVUQyIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsImNhbGxlZSIsImRlZmF1bHRDb25zdHJ1Y3RvciIsInJ1bm5lciIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJob3N0IiwiY2hhbm5lbCIsInBvcnQiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiT05SRUFEWVNUQVRFQ0hBTkdFIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJQcm9taXNlQ2FwYWJpbGl0eSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJjYWxsUmVnRXhwRXhlYyIsIk1BWF9VSU5UMzIiLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsIm1heWJlQ2FsbE5hdGl2ZSIsImludGVybmFsU3BsaXQiLCJsaW0iLCJsYXN0TGVuZ3RoIiwibGFzdExhc3RJbmRleCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInJ4IiwidW5pY29kZU1hdGNoaW5nIiwieiIsInJldHVyblRoaXMiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiSXRlcmF0b3JzQ29yZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIlZBTFVFUyIsIkl0ZXJhYmxlIiwiSXRlcmF0b3JDb25zdHJ1Y3RvciIsIkRFRkFVTFQiLCJJU19TRVQiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsInBhcnNlSW50SW1wbGVtZW50YXRpb24iLCJ3aGl0ZXNwYWNlcyIsImhleCIsImx0cmltIiwicnRyaW0iLCJ3aGl0ZXNwYWNlIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhdG9yTWV0aG9kIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIm5ld09iaiIsImxvYWRBc3luYyIsIk1vdXNlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsIkhUTUxBbmNob3JFbGVtZW50IiwiaCIsIlVSTCIsIndlYmtpdFVSTCIsImRvd25sb2FkIiwicmVsIiwib3JpZ2luIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwibXNTYXZlT3JPcGVuQmxvYiIsImF1dG9Cb20iLCJpbm5lclRleHQiLCJIVE1MRWxlbWVudCIsInNhZmFyaSIsIm9ubG9hZGVuZCIsInJlYWRBc0RhdGFVUkwiLCJoYW5kbGVQb3dlciIsImVkZ2VzIiwiZ2V0U291cmNlRWRnZXMiLCJlZGdlIiwiaGFuZGxlU3dpdGNoIiwiZ2V0QXR0YWNoZXMiLCJnZXRTdHlsZSIsInNldFN0eWxlIiwiaGFuZGxlU3RhdGUiLCJOb2RlIiwib25Qcm9wZXJ0eUNoYW5nZWQiLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0Iiwibm9uSXRlcmFibGVSZXN0IiwiUHJpbWl0aXZlIiwiYWNjZXNzVHlwZSIsIlByaW1pdGl2ZURhdGEiLCJnZXRUcmVlRGF0YSIsImdyb3VwSW5mbyIsInR5cGVMaXN0IiwiZ2V0RGV2aWNlRGF0YSIsImVsZSIsIm5ld1RyZWVBcnIiLCJkZXZpY2VJZCIsImxhenlMb2FkIiwidHJlZXZpZXciLCJvbk5vZGVTZWxlY3RlZCIsIm5vZGUiLCJub2RlU2VsZWN0ZWQiLCJlbXB0eUljb24iLCJhbGVydCIsImdldFN0b3JlSWQiLCJzdG9yZU5ld0FyciIsInRyZWV2aWV3QXJyIiwiZ3JvdXBJZCIsImhhbmRsZVNwZWNpYWxQZWwiLCJkYXRhVHlwZU5hbWUiLCJpc0NhbWVyYSIsIm52ckFkZHIiLCJudnJDaGFubmVsIiwiYWlBZGRyIiwiYXJDaGFubmVsIiwibGl2ZUFkZHIiLCJib3JrZXJBZGRyIiwibW9kZWwiLCJtYW51ZmFjdHVyZSIsImNvbW1pc3Npb25EYXRlIiwiYmFzaWNBcnJheSIsImJhc2ljRGF0YSIsImZsYWdJZCIsInR5cGVLaW5kIiwiYWRkQ2xhc3MiLCJoYW5kbGVEYXRhUGljIiwiZXF1aXBtZW50SWQiLCJUcmFuc2Zvcm1lcnMiLCJncm91cFR5cGUiLCJnZXREYXRhUG9pbnQiLCJyZXNEYXRhIiwiZXF1aXBtZW50RGF0YSIsInNwYW4iLCJ2YXJUYWciLCJ2YXJOYW1lIiwic2libGluZ3MiLCJyZW1vdmVDbGFzcyIsImNzcyIsInNlbGVjdGVkSWQiLCJyb3ciLCJpc1F1ZXJ5IiwicGFyZW50cyIsImN1ck5vZGUiLCJub2RlSWQiLCJ0cmVlSWQiLCJyZW1vdmVCYW5nZGluZyIsInNldERhdGFCaW5kaW5ncyIsImZwIiwic3VyZSIsIlR5cGVOYW1lIiwicGljdHVyZUlkIiwidHlwZUlkIiwicm9ib3QiLCJtb3ZlSW4iLCJtb3Zlb3V0IiwibW91c2Vtb3ZlIiwiYWJjIiwib25CdXR0b25DbGlja2VkIiwiUHJpbWl0aXZlVHlwZSIsImdldEF0dHJPYmplY3QiLCJnZXREYXRhQmluZGluZ3MiLCJlcXVpcG1lbnROYW1lIiwiaWRUb0luZGV4IiwiYXBwZW5kTm9kZXMiLCJpZHgiLCJ0cmVlTm9kZSIsIm5vZGVzIiwiZG9uZU5vZGVzIiwibm9kZUluZGV4IiwiaGFzQ2hpbGQiLCJwYXJlbnRJbmRleCIsInF1ZXJ5QXJyIiwiZXhwYW5kZWQiLCJzZWxlY3RlZCIsImFhYWEiLCJzaWxlbnQiLCJzY3JvSCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJzY3JvTCIsInNjcm9sbCIsInF1ZXJ5U2VsZWN0b3IiLCJzdGFydHgiLCJzdGFydHkiLCJzdGFydExlZnQiLCJzdGFydFRvcCIsIm1haW5EaXYiLCJwYXJlbnROb2RlIiwiaXNEb3duIiwib3JpZ2luSW5kZXgiLCJ6SW5kZXgiLCJtb3ZlZG93biIsImNhcHR1cmVFdmVudHMiLCJzZXRDYXB0dXJlIiwiY3Vyc29yIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwibW92ZSIsImxlZnQiLCJ0b3AiLCJtb3ZldXAiLCJyZWxlYXNlQ2FwdHVyZSIsIm9ubW91c2Vkb3duIiwib25tb3VzZW1vdmUiLCJvbm1vdXNldXAiLCJlZGl0b3JUeXBlIiwianNvbkRpciIsInNlbGVjdCIsIm5ld1NjZW5lIiwibmV3RGlzcGxheVZpZXciLCJzYXZlIiwianNvbkRpYWdyYW0iLCJzdGF0aW9uc0NvcHlEYXRhcyIsImdldFNlbGVjdGlvbk1vZGVsIiwiZ2V0U2VsZWN0aW9uIiwiYmVnaW5FZGl0aW5nIiwidGFncyIsImdldE5hbWUiLCJtYWluVGFiVmlldyIsImdldFRhYk1vZGVsIiwiZ2V0RGF0YUJ5VGFnIiwiY2xvc2VUYWIiLCJwYXN0ZUJ0biIsImpzb25EaWFncmFtUGFzdGUiLCJqc29uRGlyUGFzdGUiLCJjb250ZXh0bWVudSIsIkNvbnRleHRNZW51IiwiYmVmb3JlU2hvdyIsImlzUGFzdGUiLCJzZXRJdGVtcyIsImFkZFRvIiwiZ2V0VmlldyIsInBvaW50c1RhYiIsIlRhYiIsInNldE5hbWUiLCJsZWZ0VG9wVGFiVmlldyIsInNldFZpZXciLCJ0ZXh0SWNvbiIsImNvbXBzIiwiYWxpZ24iLCJyZWN0IiwiaHRlZGl0b3IiLCJFeHBsb3JlciIsInN0YXRpb25MaXN0Iiwic3RhdGlvblRyZWVEYXRhIiwic3RhdGlvblRyZWUiLCJwYXJzZVN0YXRpb25EYXRhIiwiZGF0YUxpc3QiLCJwYXJlbnRQYXRoIiwib2xkRGF0YUxpc3QiLCJvbGRVdWlkIiwicmVwZWF0TmFtZSIsInN0YXRpb25UcmVlVXVpZFRvUGF0aCIsImNoaWxkcmVuIiwibmVlZFRvTG9hZCIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsInRyZWVBcnJOb2RlRXhwYW5kIiwiZ2V0RGF0YU1vZGVsIiwiZ2V0RGF0YUJ5SWQiLCJleHBhbmQiLCJzZWxlY3RUcmVlTm9kZSIsImRlZmF1bHRTZWxlY3RQYXRoIiwic2VsZWN0VHJlZU5vZGVVdWlkIiwiZGVmYXVsdE9wZW5BcnIiLCJncmFwaFV1aWQiLCJzZWxlY3Rpb25JZHMiLCJnZXREaWFncmFtTGlzdFByb21pc2UiLCJvcGVuQnlKU09OIiwiYWRkQ29udGV4dE1lbnUiLCJzZXRMb2FkZXIiLCJsb2FkIiwiaXNFeHBhbmRlZCIsImlzTG9hZGVkIiwibXMiLCJtaSIsInNjZW5lIiwiZGVzZXJpYWxpemUiLCJyaWdodFRvcEJvcmRlclBhbmUiLCJnZXRDZW50ZXJWaWV3Iiwic2V0QXR0ciIsImhhbmRsZUNyb3NzRHJhZyIsImRyYWdJbmZvIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJkZiIsImRhdGFUcmFuc2ZlciIsImRyb3BGaWxlcyIsIml0ZW1zIiwid2Via2l0R2V0QXNFbnRyeSIsImdldEFzRmlsZSIsInJlYWRBc1RleHQiLCJjb250IiwiaXNEcm9wcGFibGVUb0Rpc3BsYXlWaWV3IiwiaGFuZGxlRHJvcFRvRWRpdFZpZXciLCJmaWxlTm9kZSIsImdldEljb24iLCJUZXh0Iiwic2V0RGlzcGxheU5hbWUiLCJhZGREYXRhIiwic2V0SW1hZ2UiLCJnZXRJbWFnZSIsImNyZWF0ZVN0YXRpb25FeHBsb3JlciIsInJlZ0V4cEV4ZWMiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiUkVQTEFDRSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwic3ltYm9scyIsImNoIiwiY2FwdHVyZSIsIndlYnBhY2tQb2x5ZmlsbCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwiZGVmYXVsdCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImZucyIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImlnbm9yZUR1cGxpY2F0ZU9mIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJoYXNoIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJzZWN1cmUiLCJ0b0dNVFN0cmluZyIsInJlbGF0aXZlVVJMIiwicmVzb2x2ZVByb21pc2UiLCJ3aW5kb3dOYW1lcyIsIiRmaWx0ZXIiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImluaGVyaXRJZlJlcXVpcmVkIiwiZ2V0RmxhZ3MiLCJOYXRpdmVSZWdFeHAiLCJDT1JSRUNUX05FVyIsInByb3h5IiwiUmVnRXhwV3JhcHBlciIsInRoaXNJc1JlZ0V4cCIsInBhdHRlcm5Jc1JlZ0V4cCIsImZsYWdzQXJlVW5kZWZpbmVkIiwiZHVtbXkiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwibmF0aXZlTWF0Y2giLCJtYXRjaGVyIiwibWF0Y2hTdHIiLCJzYW1lVmFsdWUiLCJTRUFSQ0giLCJuYXRpdmVTZWFyY2giLCJzZWFyY2hlciIsInByZXZpb3VzTGFzdEluZGV4IiwiaXMiLCJmaWxlQWRkIiwib3JpZ2luYWxPcHRpb25zIiwiZm9yY2VUcmFpbGluZ1NsYXNoIiwicGFyZW50Rm9sZGVyIiwiZm9sZGVyQWRkIiwiaXNVbmljb2RlU3RyaW5nIiwiemlwT2JqZWN0Q29udGVudCIsIk5vZGVqc1N0cmVhbUlucHV0QWRhcHRlciIsIm9wdGltaXplZEJpbmFyeVN0cmluZyIsIlppcE9iamVjdCIsInV0ZjgiLCJnZW5lcmF0ZSIsImxhc3RTbGFzaCIsImZpbGVuYW1lIiwicmVsYXRpdmVQYXRoIiwiZm9sZGVyIiwibmV3Rm9sZGVyIiwia2lkcyIsImdlbmVyYXRlSW50ZXJuYWxTdHJlYW0iLCJvcHRzIiwic3RyZWFtRmlsZXMiLCJwbGF0Zm9ybSIsImVuY29kZUZpbGVOYW1lIiwiZ2VuZXJhdGVXb3JrZXIiLCJvblVwZGF0ZSIsImdlbmVyYXRlTm9kZVN0cmVhbSIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0bXAiLCJBcnIiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJydCIsImFicyIsIkxOMiIsIkVFIiwiX2lzU3RkaW8iLCJkaWRPbkVuZCIsImNsZWFudXAiLCJjdXN0b20iLCJyZWdpc3RlckltbWVkaWF0ZSIsIm1lc3NhZ2VQcmVmaXgiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9uR2xvYmFsTWVzc2FnZSIsImF0dGFjaEV2ZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0IiwibG9jYWxTdG9yYWdlIiwidHJhY2UiLCJpbW1lZGlhdGUiLCJJTlRFUk5BTCIsIlJFSkVDVEVEIiwiRlVMRklMTEVEIiwiUEVORElORyIsIm91dGNvbWUiLCJzYWZlbHlSZXNvbHZlVGhlbmFibGUiLCJRdWV1ZUl0ZW0iLCJjYWxsRnVsZmlsbGVkIiwib3RoZXJDYWxsRnVsZmlsbGVkIiwiY2FsbFJlamVjdGVkIiwib3RoZXJDYWxsUmVqZWN0ZWQiLCJyZXR1cm5WYWx1ZSIsImdldFRoZW4iLCJ0aGVuYWJsZSIsImNhbGxlZCIsIm9uRXJyb3IiLCJvblN1Y2Nlc3MiLCJyZXNvbHZlZCIsImFsbFJlc29sdmVyIiwib3V0VmFsdWUiLCJzY2hlZHVsZURyYWluIiwiTXV0YXRpb24iLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmVyIiwiZWxlbWVudCIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJzY3JpcHRFbCIsIm9sZFF1ZXVlIiwiZGVzdFR5cGUiLCJfaGVscGVyIiwiX2RhdGEiLCJfZGF0YUJpbmFyeSIsImludGVybmFsU3RyZWFtIiwiYXNrVW5pY29kZVN0cmluZyIsIl9kZWNvbXByZXNzV29ya2VyIiwibm9kZVN0cmVhbSIsIl9jb21wcmVzc1dvcmtlciIsInJlbW92ZWRNZXRob2RzIiwicmVtb3ZlZEZuIiwiY29tcHJlc3Npb25zIiwiWmlwRmlsZVdvcmtlciIsInppcEZpbGVXb3JrZXIiLCJlbnRyaWVzQ291bnQiLCJmaWxlQ29tcHJlc3Npb24iLCJ6aXBDb21wcmVzc2lvbiIsImNvbXByZXNzaW9uTmFtZSIsIlVTRV9UWVBFREFSUkFZIiwiVWludDMyQXJyYXkiLCJwYWtvIiwiQVJSQVlfVFlQRSIsIkZsYXRlV29ya2VyIiwiX3Bha28iLCJfcGFrb0FjdGlvbiIsIl9wYWtvT3B0aW9ucyIsIl9jcmVhdGVQYWtvIiwicmF3Iiwib25EYXRhIiwiemxpYl9kZWZsYXRlIiwic3RyaW5ncyIsIlpTdHJlYW0iLCJEZWZsYXRlIiwiY2h1bmtTaXplIiwid2luZG93Qml0cyIsIm1lbUxldmVsIiwic3RyYXRlZ3kiLCJ0byIsIm9wdCIsImd6aXAiLCJzdHJtIiwiZGVmbGF0ZUluaXQyIiwiaGVhZGVyIiwiZGVmbGF0ZVNldEhlYWRlciIsImRpY3Rpb25hcnkiLCJkaWN0IiwiZGVmbGF0ZVNldERpY3Rpb25hcnkiLCJfZGljdF9zZXQiLCJkZWZsYXRlIiwiZGVmbGF0b3IiLCJfbW9kZSIsIm9uRW5kIiwiZGVmbGF0ZUVuZCIsImRlZmxhdGVSYXciLCJjb25maWd1cmF0aW9uX3RhYmxlIiwidHJlZXMiLCJhZGxlcjMyIiwiTUFYX01FTV9MRVZFTCIsIkxfQ09ERVMiLCJMSVRFUkFMUyIsIkRfQ09ERVMiLCJCTF9DT0RFUyIsIkhFQVBfU0laRSIsIk1BWF9CSVRTIiwiTUlOX01BVENIIiwiTUFYX01BVENIIiwiTUlOX0xPT0tBSEVBRCIsIklOSVRfU1RBVEUiLCJCVVNZX1NUQVRFIiwiQlNfTkVFRF9NT1JFIiwiQlNfQkxPQ0tfRE9ORSIsIkJTX0ZJTklTSF9TVEFSVEVEIiwiQlNfRklOSVNIX0RPTkUiLCJlcnJvckNvZGUiLCJyYW5rIiwiZmx1c2hfcGVuZGluZyIsInBlbmRpbmciLCJwZW5kaW5nX2J1ZiIsInBlbmRpbmdfb3V0IiwiZmx1c2hfYmxvY2tfb25seSIsIl90cl9mbHVzaF9ibG9jayIsImJsb2NrX3N0YXJ0Iiwic3Ryc3RhcnQiLCJwdXRfYnl0ZSIsInB1dFNob3J0TVNCIiwibG9uZ2VzdF9tYXRjaCIsImN1cl9tYXRjaCIsImNoYWluX2xlbmd0aCIsIm1heF9jaGFpbl9sZW5ndGgiLCJzY2FuIiwiYmVzdF9sZW4iLCJwcmV2X2xlbmd0aCIsIm5pY2VfbWF0Y2giLCJ3X3NpemUiLCJfd2luIiwid21hc2siLCJ3X21hc2siLCJzdHJlbmQiLCJzY2FuX2VuZDEiLCJzY2FuX2VuZCIsImdvb2RfbWF0Y2giLCJsb29rYWhlYWQiLCJtYXRjaF9zdGFydCIsImZpbGxfd2luZG93IiwibW9yZSIsIl93X3NpemUiLCJ3aW5kb3dfc2l6ZSIsImhhc2hfc2l6ZSIsImluc2VydCIsImluc19oIiwiaGFzaF9zaGlmdCIsImhhc2hfbWFzayIsImRlZmxhdGVfZmFzdCIsImhhc2hfaGVhZCIsImJmbHVzaCIsIm1hdGNoX2xlbmd0aCIsIl90cl90YWxseSIsIm1heF9sYXp5X21hdGNoIiwibGFzdF9saXQiLCJkZWZsYXRlX3Nsb3ciLCJtYXhfaW5zZXJ0IiwicHJldl9tYXRjaCIsIm1hdGNoX2F2YWlsYWJsZSIsIkNvbmZpZyIsImdvb2RfbGVuZ3RoIiwibWF4X2xhenkiLCJuaWNlX2xlbmd0aCIsIm1heF9jaGFpbiIsIkRlZmxhdGVTdGF0ZSIsInBlbmRpbmdfYnVmX3NpemUiLCJnemhlYWQiLCJnemluZGV4IiwibGFzdF9mbHVzaCIsIndfYml0cyIsImhhc2hfYml0cyIsImR5bl9sdHJlZSIsImR5bl9kdHJlZSIsImJsX3RyZWUiLCJsX2Rlc2MiLCJkX2Rlc2MiLCJibF9kZXNjIiwiYmxfY291bnQiLCJoZWFwIiwiaGVhcF9sZW4iLCJoZWFwX21heCIsImxfYnVmIiwibGl0X2J1ZnNpemUiLCJkX2J1ZiIsIm9wdF9sZW4iLCJzdGF0aWNfbGVuIiwiYmlfYnVmIiwiYmlfdmFsaWQiLCJkZWZsYXRlUmVzZXRLZWVwIiwiX3RyX2luaXQiLCJkZWZsYXRlUmVzZXQiLCJtYXhfYmxvY2tfc2l6ZSIsIm1heF9zdGFydCIsImRlZmxhdGVJbml0Iiwib2xkX2ZsdXNoIiwiYmVnIiwiaGNyYyIsImV4dHJhIiwib3MiLCJic3RhdGUiLCJfdHJfYWxpZ24iLCJfdHJfc3RvcmVkX2Jsb2NrIiwiYXZhaWwiLCJ0bXBEaWN0IiwiZGljdExlbmd0aCIsImRlZmxhdGVJbmZvIiwiU1RPUkVEX0JMT0NLIiwiQnVmX3NpemUiLCJFTkRfQkxPQ0siLCJSRVBfM182IiwiUkVQWl8zXzEwIiwiUkVQWl8xMV8xMzgiLCJleHRyYV9sYml0cyIsImV4dHJhX2RiaXRzIiwiZXh0cmFfYmxiaXRzIiwiYmxfb3JkZXIiLCJzdGF0aWNfbHRyZWUiLCJzdGF0aWNfZHRyZWUiLCJfZGlzdF9jb2RlIiwiX2xlbmd0aF9jb2RlIiwiYmFzZV9sZW5ndGgiLCJzdGF0aWNfbF9kZXNjIiwic3RhdGljX2RfZGVzYyIsInN0YXRpY19ibF9kZXNjIiwiYmFzZV9kaXN0IiwiU3RhdGljVHJlZURlc2MiLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwiZWxlbXMiLCJtYXhfbGVuZ3RoIiwiaGFzX3N0cmVlIiwiVHJlZURlc2MiLCJkeW5fdHJlZSIsInN0YXRfZGVzYyIsIm1heF9jb2RlIiwiZF9jb2RlIiwiZGlzdCIsInB1dF9zaG9ydCIsInNlbmRfYml0cyIsInNlbmRfY29kZSIsImJpX3JldmVyc2UiLCJnZW5fY29kZXMiLCJiaXRzIiwibmV4dF9jb2RlIiwiaW5pdF9ibG9jayIsImJpX3dpbmR1cCIsInNtYWxsZXIiLCJfbjIiLCJfbTIiLCJwcWRvd25oZWFwIiwiY29tcHJlc3NfYmxvY2siLCJsdHJlZSIsImR0cmVlIiwibGMiLCJseCIsImJ1aWxkX3RyZWUiLCJkZXNjIiwic3RyZWUiLCJ4Yml0cyIsImJhc2UiLCJvdmVyZmxvdyIsInNjYW5fdHJlZSIsImN1cmxlbiIsInByZXZsZW4iLCJuZXh0bGVuIiwibWF4X2NvdW50IiwibWluX2NvdW50Iiwic2VuZF90cmVlIiwic3RhdGljX2luaXRfZG9uZSIsInN0b3JlZF9sZW4iLCJMRU5HVEhfQ09ERVMiLCJvcHRfbGVuYiIsInN0YXRpY19sZW5iIiwibWF4X2JsaW5kZXgiLCJibGFja19tYXNrIiwibGNvZGVzIiwiZGNvZGVzIiwiYmxjb2RlcyIsIlNUQVRJQ19UUkVFUyIsInpsaWJfaW5mbGF0ZSIsIkdaaGVhZGVyIiwiSW5mbGF0ZSIsImluZmxhdGVJbml0MiIsImluZmxhdGVHZXRIZWFkZXIiLCJpbmZsYXRlU2V0RGljdGlvbmFyeSIsImluZmxhdGUiLCJpbmZsYXRvciIsIm5leHRfb3V0X3V0ZjgiLCJ1dGY4c3RyIiwiYWxsb3dCdWZFcnJvciIsImluZmxhdGVFbmQiLCJpbmZsYXRlUmF3IiwidW5nemlwIiwiaW5mbGF0ZV9mYXN0IiwiaW5mbGF0ZV90YWJsZSIsIkxFTlMiLCJESVNUUyIsIkhFQUQiLCJFTk9VR0hfTEVOUyIsIkVOT1VHSF9ESVNUUyIsInpzd2FwMzIiLCJJbmZsYXRlU3RhdGUiLCJoYXZlZGljdCIsImRtYXgiLCJ3Yml0cyIsIndzaXplIiwid2hhdmUiLCJ3bmV4dCIsImhvbGQiLCJsZW5jb2RlIiwiZGlzdGNvZGUiLCJsZW5iaXRzIiwiZGlzdGJpdHMiLCJuY29kZSIsIm5sZW4iLCJuZGlzdCIsImhhdmUiLCJ3b3JrIiwibGVuZHluIiwiZGlzdGR5biIsInNhbmUiLCJiYWNrIiwid2FzIiwiaW5mbGF0ZVJlc2V0S2VlcCIsImluZmxhdGVSZXNldCIsImluZmxhdGVSZXNldDIiLCJsZW5maXgiLCJkaXN0Zml4IiwidmlyZ2luIiwiZml4ZWR0YWJsZXMiLCJ1cGRhdGV3aW5kb3ciLCJpbmZsYXRlSW5pdCIsInB1dCIsIl9pbiIsIl9vdXQiLCJmcm9tX3NvdXJjZSIsImhlcmVfYml0cyIsImhlcmVfb3AiLCJoZXJlX3ZhbCIsImxhc3RfYml0cyIsImxhc3Rfb3AiLCJsYXN0X3ZhbCIsImhlcmUiLCJoYnVmIiwib3JkZXIiLCJpbmZfbGVhdmUiLCJ4ZmxhZ3MiLCJleHRyYV9sZW4iLCJpbmZsYXRlSW5mbyIsInNfd2luZG93IiwibGNvZGUiLCJkY29kZSIsImxtYXNrIiwiZG1hc2siLCJvcCIsImRvbGVuIiwiZG9kaXN0IiwibGJhc2UiLCJsZXh0IiwiZGJhc2UiLCJkZXh0IiwibGVuc19pbmRleCIsImNvZGVzIiwidGFibGVfaW5kZXgiLCJpbmNyIiwibWFzayIsImN1cnIiLCJ1c2VkIiwiaHVmZiIsImJhc2VfaW5kZXgiLCJNQVhCSVRTIiwib2ZmcyIsImV4dHJhX2luZGV4IiwiZGVjVG9IZXgiLCJkZWMiLCJnZW5lcmF0ZVppcFBhcnRzIiwic3RyZWFtZWRDb250ZW50Iiwic3RyZWFtaW5nRW5kZWQiLCJkb3NUaW1lIiwiZG9zRGF0ZSIsInVzZUN1c3RvbUVuY29kaW5nIiwiZW5jb2RlZEZpbGVOYW1lIiwidXRmRW5jb2RlZEZpbGVOYW1lIiwiZW5jb2RlZENvbW1lbnQiLCJ1dGZFbmNvZGVkQ29tbWVudCIsInVzZVVURjhGb3JGaWxlTmFtZSIsInVzZVVURjhGb3JDb21tZW50IiwiZXh0cmFGaWVsZHMiLCJ1bmljb2RlUGF0aEV4dHJhRmllbGQiLCJ1bmljb2RlQ29tbWVudEV4dHJhRmllbGQiLCJkYXRhSW5mbyIsImJpdGZsYWciLCJleHRGaWxlQXR0ciIsInZlcnNpb25NYWRlQnkiLCJpc0RpciIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImZpbGVSZWNvcmQiLCJzaWduYXR1cmUiLCJkaXJSZWNvcmQiLCJieXRlc1dyaXR0ZW4iLCJ6aXBDb21tZW50IiwiemlwUGxhdGZvcm0iLCJjb250ZW50QnVmZmVyIiwiZGlyUmVjb3JkcyIsImN1cnJlbnRTb3VyY2VPZmZzZXQiLCJjdXJyZW50RmlsZSIsIl9zb3VyY2VzIiwiY3VycmVudEZpbGVQZXJjZW50IiwicmVtYWluaW5nRmlsZXMiLCJvcGVuZWRTb3VyY2UiLCJjbG9zZWRTb3VyY2UiLCJsb2NhbERpckxlbmd0aCIsImNlbnRyYWxEaXJMZW5ndGgiLCJkaXJFbmQiLCJwcmVwYXJlTmV4dFNvdXJjZSIsIl91cHN0cmVhbUVuZGVkIiwiX2JpbmRTdHJlYW0iLCJfc3RyZWFtIiwiWmlwRW50cmllcyIsImNoZWNrRW50cnlDUkMzMiIsInppcEVudHJ5IiwiZGVjb21wcmVzc2VkIiwiY2hlY2tDUkMzMiIsImRlY29kZUZpbGVOYW1lIiwiemlwRW50cmllcyIsImZpbGVOYW1lU3RyIiwiZmlsZUNvbW1lbnRTdHIiLCJyZWFkZXJGb3IiLCJaaXBFbnRyeSIsImxvYWRPcHRpb25zIiwiY2hlY2tTaWduYXR1cmUiLCJleHBlY3RlZFNpZ25hdHVyZSIsImlzU2lnbmF0dXJlIiwiYXNrZWRJbmRleCIsImN1cnJlbnRJbmRleCIsInJlYWRCbG9ja0VuZE9mQ2VudHJhbCIsImRpc2tOdW1iZXIiLCJkaXNrV2l0aENlbnRyYWxEaXJTdGFydCIsImNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzayIsImNlbnRyYWxEaXJSZWNvcmRzIiwiY2VudHJhbERpclNpemUiLCJjZW50cmFsRGlyT2Zmc2V0IiwiemlwQ29tbWVudExlbmd0aCIsImRlY29kZVBhcmFtVHlwZSIsImRlY29kZUNvbnRlbnQiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCIsInppcDY0RW5kT2ZDZW50cmFsU2l6ZSIsInppcDY0RXh0ZW5zaWJsZURhdGEiLCJleHRyYUZpZWxkSWQiLCJleHRyYUZpZWxkTGVuZ3RoIiwiZXh0cmFGaWVsZFZhbHVlIiwiZXh0cmFEYXRhU2l6ZSIsInJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsTG9jYXRvciIsImRpc2tXaXRoWmlwNjRDZW50cmFsRGlyU3RhcnQiLCJyZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyIiwiZGlza3NDb3VudCIsInJlYWRMb2NhbEZpbGVzIiwibG9jYWxIZWFkZXJPZmZzZXQiLCJyZWFkTG9jYWxQYXJ0IiwiaGFuZGxlVVRGOCIsInByb2Nlc3NBdHRyaWJ1dGVzIiwicmVhZENlbnRyYWxEaXIiLCJ6aXA2NCIsInJlYWRDZW50cmFsUGFydCIsInJlYWRFbmRPZkNlbnRyYWwiLCJlbmRPZkNlbnRyYWxEaXJPZmZzZXQiLCJleHBlY3RlZEVuZE9mQ2VudHJhbERpck9mZnNldCIsInByZXBhcmVSZWFkZXIiLCJjcmMzMmZuIiwiaXNFbmNyeXB0ZWQiLCJiaXRGbGFnIiwidXNlVVRGOCIsImxvY2FsRXh0cmFGaWVsZHNMZW5ndGgiLCJmaWxlTmFtZUxlbmd0aCIsImNvbXByZXNzaW9uTWV0aG9kIiwiZXh0cmFGaWVsZHNMZW5ndGgiLCJmaWxlQ29tbWVudExlbmd0aCIsImRpc2tOdW1iZXJTdGFydCIsImludGVybmFsRmlsZUF0dHJpYnV0ZXMiLCJleHRlcm5hbEZpbGVBdHRyaWJ1dGVzIiwicmVhZEV4dHJhRmllbGRzIiwicGFyc2VaSVA2NEV4dHJhRmllbGQiLCJmaWxlQ29tbWVudCIsIm1hZGVCeSIsImV4dHJhUmVhZGVyIiwidXBhdGgiLCJmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoIiwiZmlsZU5hbWVCeXRlQXJyYXkiLCJ1Y29tbWVudCIsImZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQiLCJjb21tZW50Qnl0ZUFycmF5IiwidXBhdGhGaWVsZCIsInVjb21tZW50RmllbGQiLCJSZXN1bHQiLCJzdG9wcGVkIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiaXRlckZuIiwiQXJyYXlQcm90b3R5cGUiLCJFTlRSSUVTIiwicmV0dXJuTWV0aG9kIiwiU0FGRV9DTE9TSU5HIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJ0b2dnbGUiLCJtYWNyb3Rhc2siLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJxdWV1ZU1pY3JvdGFzayIsInByb21pc2VDYXBhYmlsaXR5IiwibmF0aXZlQXNzaWduIiwiQiIsImFscGhhYmV0IiwiVCIsImFyZ3VtZW50c0xlbmd0aCIsIm5hdGl2ZVNsaWNlIiwiZmluIiwiVU5TQ09QQUJMRVMiLCJwdiIsIk5hdGl2ZVN5bWJvbCIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJzeW1ib2xQcm90b3R5cGUiLCJuYXRpdmUiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwiTW9ja1NlcnZpY2UiLCJEZWZhdWx0IiwiZGVmIiwiY21kIiwiZXhwbG9yZSIsIm1rZGlyIiwidXBsb2FkUGF0aEFyciIsImRvdEluZGV4IiwiZG9uZVBhdGgiLCJ0YWIiLCJndiIsInJlbmFtZSIsImFkZEFyciIsIm5ldyIsInRhYkRhdGEiLCJvbGQiLCJsb2NhdGUiLCJ4aHJMb2FkIiwiZXhwb3J0IiwiZXhwb3J0TmFtZSIsInByb3MiLCJpbWdQYXRoIiwicGF0aEFyciIsIm5hdGl2ZUxhc3RJbmRleE9mIiwiZGVzY3JpcHRvcnMiLCJmb3JtYXRSZWdFeHAiLCJmb3JtYXQiLCJvYmplY3RzIiwibm9EZXByZWNhdGlvbiIsInRocm93RGVwcmVjYXRpb24iLCJ0cmFjZURlcHJlY2F0aW9uIiwiZGVidWdFbnZpcm9uIiwiZGVidWdzIiwiY3R4Iiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiY29sb3JzIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGVzIiwicmVjdXJzZVRpbWVzIiwicHJpbWl0aXZlIiwidmlzaWJsZUtleXMiLCJmb3JtYXRFcnJvciIsImJyYWNlcyIsImZvcm1hdFByb3BlcnR5IiwiY3VyIiwiYXIiLCJOT0RFX0RFQlVHIiwicGlkIiwibW9udGhzIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldERhdGUiLCJnZXRNb250aCIsImtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCIsImNhbGxiYWNraWZ5T25SZWplY3RlZCIsIm5ld1JlYXNvbiIsInByb21pc2lmeSIsIm9yaWdpbmFsIiwicHJvbWlzZVJlamVjdCIsImNhbGxiYWNraWZ5IiwiY2FsbGJhY2tpZmllZCIsIm1heWJlQ2IiLCJyZWoiLCJkZWxldGVDb3VudCIsImluc2VydENvdW50IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJhY3R1YWxTdGFydCIsInhociIsIm9wdGlvbiIsImRvbmVVcmwiLCJjb252ZXJ0VVJMIiwidGltZXN0YW1wIiwidXJscyIsImlzUHJhY3RpY2luZyIsImh0ZWRpdG9yX2NvbmZpZyIsImxvY2FsZSIsImNvbXBvbmVudHNWaXNpYmxlIiwiZGlzcGxheXNFZGl0YWJsZSIsInN5bWJvbHNFZGl0YWJsZSIsImNvbXBvbmVudHNFZGl0YWJsZSIsImFzc2V0c0VkaXRhYmxlIiwibG9jYXRlRmlsZUVuYWJsZWQiLCJzZXJ2aWNlQ2xhc3MiLCJleHBhbmRlZFRpdGxlcyIsIlRpdGxlRXh0ZW5zaW9uIiwic3ViQ29uZmlncyIsImxpYnMiLCJkYXRhQmluZGluZ3MiLCJoYW5kbGVFdmVudCIsImdldERhdGFzIiwiY2hhbmdlQ29sb3IiLCJzdGF0aW9uVGFiIiwiYWRkU3RhdGlvblRhYiIsIm1haW5Ub29sYmFyIiwiZ2V0SXRlbXMiLCJkaXNwbGF5RGF0YUlEIiwiZ2V0SWQiLCJyZW1vdmVEYXRhQnlJZCIsInNzIiwiZ2V0U3RyaW5nIiwiYWRkU2tld1RyYW5sYXRlSXRlbSIsImRpc3BsYXlWaWV3IiwiZ3JhcGhWaWV3IiwiYWRkUHJpbnRTZWxlY3Rpb25JdGVtIiwiZGlzcGxheVRyZWUiLCJzeW1ib2xWaWV3Iiwic3ltYm9sTGlzdCIsImRiIiwiaGFuZGxlSW5zZXJ0U2NlbmVGaWxlVG9HcmFwaFZpZXciLCJnZXRWaWV3UmVjdCIsImZpbGVOYW1lVG9EaXNwbGF5TmFtZSIsImhhbmRsZUluc2VydE1vZGVsRmlsZVRvR3JhcGhWaWV3IiwibG9hZEpTIiwiY3JlYXRlRWRpdG9yIiwicmVjb3ZlcnlEYXRhIiwiYmFzZVBhdGgiLCJmaWxlTGlzdFJlcyIsImZpbGVSZXMiLCJpc0NvcHkiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFFQSxFQUNGSCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0s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LElBQzFFLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUN0QixJQUFRLElBQU0sSUFBUSxJQUN0QixJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQ3RCLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUNuQyxJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBRVIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUMxQixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdEYsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3RGLElBQVUsSUFBTSxJQUFVLElBQzFCLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFD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RUFBSyxlQUFjLEVBQUssZ0JBQWUsRUFBSyxjQUFhLEVBQUssaUJBQWdCLEVBQUssZ0JBQWUsRUFBSyxhQUFZLEVBQUssYUFBWSxFQUFLLGNBQWEsRUFBSyxjQUFhLEVBQUssVUFBUyxFQUFLLFdBQVUsRUFBSyxnQkFBZSxFQUFLLGVBQWMsRUFBSyxhQUFZLEVBQUssYUFBWSxFQUFLLFlBQVcsRUFBSyxlQUFjLEdBQU0sUUFBUSxDQUFDLGNBQWEsRUFBSyxhQUFZLEdBQU0sTUFBTSxDQUFDLGtCQUFpQixFQUFLLG1CQUFrQixFQUFLLFlBQVcsRUFBSyxXQUFVLEdBQU0sTUFBTSxDQUFDLFVBQVMsRUFBSyxXQUFVLEdBQU0sS0FBSyxDQUFDLFdBQVUsRUFBSyxVQUFTLEdBQU0sT0FBTyxDQUFDLGFBQVksRUFBSyxjQUFhLElBQU8sVUFBUyxFQUFLLFNBQVEsRUFBSyxnQkFBZSxFQUFLLE9BQU8sQ0FBQyxhQUFZLEVBQUssVUFBUyxFQUFLLE9BQU8sQ0FBQyxVQUFTLEVBQUssVUFBUyxFQUFLLFdBQVUsRUFBSyxVQUFTLEVBQUssY0FBYSxFQUFLLFdBQVUsRUFBSyxXQUFVLEVBQUssV0FBVSxFQUFLLFdBQVUsRUFBSyxVQUFTLEVBQUssWUFBVyxFQUFLLGdCQUFlLEVBQUssY0FBYSxFQUFLLFdBQVUsRUFBSyxZQUFXLEVBQUssWUFBVyxFQUFLLFdBQVUsRUFBSyxZQUFXLEdBQU0sWUFBVyxFQUFLLFdBQVUsRUFBSyxhQUFZLEVBQUssV0FBVSxFQUFLLGFBQVksRUFBSyxVQUFTLEVBQUssYUFBWSxFQUFLLFdBQVUsRUFBSyx1Q0FBc0MsRUFBSyxXQUFVLEVBQUssV0FBVSxFQUFLLFdBQVUsRUFBSyxXQUFVLEVBQUssV0FBVSxFQUFLLGFBQVksRUFBSyxVQUFTLEVBQUssYUFBWSxFQUFLLFlBQVcsRUFBSyxZQUFXLEVBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFTLEVBQUssV0FBVSxFQUFLLFVBQVMsRUFBSyxjQUFhLEVBQUssV0FBVSxFQUFLLFlBQVcsR0FBTSxnQkFBZSxFQUFLLFdBQVUsR0FBTSxhQUFZLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxXQUFVLEVBQUssV0FBVSxFQUFLLFVBQVMsRUFBSyxZQUFXLEVBQUssVUFBUyxFQUFLLFlBQVcsRUFBSyxVQUFTLEVBQUssWUFBVyxFQUFLLFlBQVcsRUFBSyxZQUFXLEVBQUssWUFBVyxFQUFLLFVBQVMsRUFBSyxXQUFVLEVBQUssY0FBYSxFQUFLLFdBQVUsRUFBSyxhQUFZLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxVQUFTLEVBQUssYUFBWSxFQUFLLGFBQVksRUFBSyxXQUFVLEVBQUssVUFBUyxFQUFLLFdBQVUsRUFBSyxhQUFZLEVBQUssYUFBWSxFQUFLLFdBQVUsRUFBSyxhQUFZLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxhQUFZLEVBQUssV0FBVSxFQUFLLFdBQVUsRUFBSyxXQUFVLEVBQUssVUFBUyxFQUFLLFlBQVcsRUFBSyxZQUFXLEVBQUssWUFBVyxFQUFLLFlBQVcsRUFBSyxXQUFVLEVBQUssYUFBWSxFQUFLLFNBQVEsRUFBSyxZQUFXLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxXQUFVLEVBQUssY0FBYSxFQUFLLFdBQVUsRUFBSyxXQUFVLEVBQUssVUFBUyxFQUFLLFlBQVcsRUFBSyxVQUFTLEVBQUssWUFBVyxFQUFLLFdBQVUsRUFBSyxhQUFZLEVBQUssWUFBVyxFQUFLLFlBQVcsRUFBSyxZQUFXLEVBQUssWUFBVyxFQUFLLFlBQVcsRUFBSyxXQUFVLEVBQUssWUFBVyxFQUFLLFdBQVUsRUFBSyxXQUFVLEVBQUssWUFBVyxFQUFLLFlBQVcsRUFBSyxZQUFXLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxZQUFXLEVBQUssYUFBWSxFQUFLLFlBQVcsRUFBSyxZQUFXLEVBQUssY0FBYSxFQUFLLFVBQVMsRUFBSyxVQUFTLEVBQUssV0FBVSxFQUFLLFVBQVMsRUFBSyxTQUFRLEdBQU0sT0FBTyxDQUFDLGFBQVksRUFBSyxjQUFhLEVBQUssYUFBWSxFQUFLLGNBQWEsRUFBSyxhQUFZLEVBQUssY0FBYSxFQUFLLGVBQWMsRUFBSyxhQUFZLEVBQUssWUFBVyxFQUFLLGFBQVksRUFBSyxXQUFVLEVBQUssY0FBYSxFQUFLLGFBQVksRUFBSyxjQUFhLEVBQUssY0FBYSxFQUFLLGNBQWEsRUFBSyxjQUFhLEVBQUssYUFBWSxFQUFLLGFBQVksRUFBSyxlQUFjLEVBQUssY0FBYSxFQUFLLGNBQWEsRUFBSyxZQUFXLEVBQUssYUFBWSxFQUFLLFlBQVcsRUFBSyxhQUFZLEVBQUssYUFBWSxFQUFLLGFBQVksRUFBSyxXQUFVLEVBQUssYUFBWSxFQUFLLGFBQVksRUFBSyxXQUFVLEVBQUssYUFBWSxFQUFLLGNBQWEsRUFBSyxVQUFTLEVBQUssYUFBWSxFQUFLLGNBQWEsRUFBSyxjQUFhLEVBQUssY0FBYSxFQUFLLGNBQWEsRUFBSyxZQUFXLEVBQUssY0FBYSxFQUFLLGVBQWMsRUFBSyxhQUFZLEVBQUssYUFBWSxFQUFLLFlBQVcsRUFBSyxjQUFhLEVBQUssY0FBYSxHQUFNLFNBQVEsRUFBSyxLQUFLLENBQUMsV0FBVSxFQUFLLGVBQWMsRUFBSyxVQUFTLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxVQUFTLEVBQUssZ0JBQWUsRUFBSyxZQUFXLEdBQU0sWUFBVyxFQUFLLFdBQVUsRUFBSyxXQUFVLEVBQUssYUFBWSxFQUFLLFFBQVEsQ0FBQyxVQUFTLEVBQUssVUFBUyxFQUFLLFdBQVUsRUFBSyxVQUFTLEVBQUssWUFBVyxFQUFLLFdBQVUsRUFBSyxTQUFRLEVBQUssV0FBVSxFQUFLLFVBQVMsRUFBSyxVQUFTLEVBQUssVUFBUyxFQUFLLFNBQVEsRUFBSyxXQUFVLEVBQUssV0FBVSxFQUFLLFVBQVMsRUFBSyxXQUFVLEVBQUssV0FBVSxFQUFLLFdBQVUsRUFBSyxVQUFTLEVBQUssVUFBUyxHQUFNLFlBQVcsRUFBSyxPQUFPLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxXQUFVLEVBQUssWUFBVyxFQUFLLFNBQVEsRUFBSyxVQUFTLEdBQU0sVUFBUyxFQUFLLGFBQVksRUFBSyxhQUFZLEVBQUssV0FBVyxDQUFDLFlBQVcsRUFBSyxjQUFhLEVBQUssYUFBWSxFQUFLLGVBQWMsRUFBSyxjQUFhLEVBQUssY0FBYSxFQUFLLGFBQVksRUFBSyxjQUFhLEVBQUssVUFBUyxFQUFLLFlBQVcsRUFBSyxVQUFTLEVBQUssYUFBWSxFQUFLLFdBQVUsRUFBSyxhQUFZLEVBQUssV0FBVSxFQUFLLFdBQVUsRUFBSyxXQUFVLEVBQUssWUFBVyxFQUFLLGNBQWEsRUFBSyxhQUFZLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxpQkFBZ0IsRUFBSyxlQUFjLEVBQUssYUFBWSxFQUFLLFlBQVcsRUFBSyxZQUFXLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxXQUFVLEVBQUssY0FBYSxFQUFLLGFBQVksRUFBSyxhQUFZLEVBQUssZUFBYyxFQUFLLFlBQVcsRUFBSyxVQUFTLEVBQUssY0FBYSxFQUFLLGNBQWEsRUFBSyxXQUFVLEVBQUssY0FBYSxFQUFLLGFBQVksRUFBSyxjQUFhLEVBQUssV0FBVSxFQUFLLGNBQWEsRUFBSyxXQUFVLEVBQUssZUFBYyxFQUFLLGdCQUFlLEVBQUssWUFBVyxFQUFLLGlCQUFnQixFQUFLLGFBQVksRUFBSyxZQUFXLEVBQUssV0FBVSxFQUFLLFdBQVUsRUFBSyxZQUFXLEVBQUssYUFBWSxFQUFLLGFBQVksRUFBSyxXQUFVLEVBQUssY0FBYSxFQUFLLFdBQVUsRUFBSyxZQUFXLEVBQUssZUFBYyxFQUFLLFlBQVksQ0FBQyxhQUFZLEVBQUssYUFBWSxFQUFLLFlBQVcsRUFBSyxjQUFhLEVBQUssVUFBUyxFQUFLLFdBQVUsR0FBTSxXQUFVLEVBQUssYUFBWSxFQUFLLFVBQVMsRUFBSyxXQUFVLEVBQUssY0FBYSxFQUFLLFdBQVUsRUFBSyxZQUFXLEVBQUssY0FBYSxFQUFLLFlBQVcsRUFBSyxVQUFTLEVBQUssYUFBWSxFQUFLLGNBQWEsRUFBSyxhQUFZLEVBQUssZ0JBQWUsRUFBSyxZQUFXLEVBQUssWUFBVyxFQUFLLFlBQVcsRUFBSyxTQUFRLEVBQUssVUFBUyxHQUFNLFlBQVcsRUFBSyxXQUFVLEVBQUssVUFBUyxFQUFLLFVBQVMsRUFBSyxZQUFXLEVBQUssYUFBWSxFQUFLLFlBQVcsRUFBSyxLQUFLLENBQUMsV0FBVSxFQUFLLGNBQWEsRUFBSyxZQUFXLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxhQUFZLEdBQU0sTUFBUSxDQUFDLFVBQVMsRUFBSyxXQUFVLEdBQU0sV0FBVSxFQUFLLFVBQVMsRUFBSyxjQUFhLEdBQ2o3TixjQUFjLENBQUMsS0FBSyxDQUFDLGNBQWEsRUFBSyxhQUFZLEdBQU0sWUFBYyxDQUFDLG1CQUFrQixFQUFLLDBCQUF5QixFQUFLLG9CQUFtQixFQUFLLFlBQVcsRUFBSyxnQkFBZSxFQUFLLHlCQUF3QixFQUFLLGVBQWMsRUFBSyxXQUFVLEdBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFPLElBQUksTUFBUSxDQUFDLG9CQUFtQixFQUFLLHNCQUFxQixFQUFLLHFCQUFvQixFQUFLLG1CQUFrQixHQUFNLE1BQVEsQ0FBQyxhQUFZLEVBQUssY0FBYSxFQUFLLFlBQVcsRUFBSyxhQUFZLElBQzNjLFVBQVUsR0FDVixVQUFVLENBQUMsU0FBUyxDQUFDLGFBQVksRUFBSyxZQUFXLEdBQU0sS0FBSyxDQUFDLGtCQUFpQixFQUFLLGVBQWMsRUFBSyxZQUFXLEVBQUssY0FBYSxFQUFLLGdCQUFlLEVBQUssa0JBQWlCLEVBQUssYUFBWSxFQUFLLGlCQUFnQixFQUFLLFdBQVUsRUFBSyxtQkFBa0IsRUFBSyxjQUFhLEVBQUssZUFBYyxHQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBWSxFQUFLLFlBQVcsR0FBTSxPQUFPLENBQUMsV0FBVSxFQUFLLFlBQVcsR0FBTSxPQUFPLENBQUMsWUFBVyxFQUFLLFlBQVcsRUFBSyxXQUFVLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxXQUFVLEdBQU0sT0FBTyxDQUFDLFdBQVUsRUFBSyxhQUFZLEVBQUssWUFBVyxHQUFNLE9BQU8sQ0FBQyxhQUFZLEVBQUssWUFBVyxJQUFPLEtBQUssQ0FBQyxXQUFVLEVBQUssV0FBVSxFQUFLLFlBQVcsRUFBSyxXQUFVLEVBQUssVUFBUyxFQUFLLFdBQVUsRUFBSyxXQUFVLEVBQUssVUFBUyxFQUFLLGFBQVksRUFBSyxZQUFXLEVBQUssWUFBVyxFQUFLLFVBQVMsSUFDN3ZCLFVBQVUsQ0FBQyxlQUFjLEVBQUssY0FBYSxFQUFLLFNBQVEsRUFBSyxnQkFBZSxFQUFLLEdBQUssQ0FBQyxZQUFXLEVBQUssYUFBWSxFQUFLLGFBQVksRUFBSyxZQUFXLEVBQUssWUFBVyxFQUFLLFlBQVcsRUFBSyxZQUFXLEVBQUssWUFBVyxFQUFLLFlBQVcsRUFBSyxhQUFZLEVBQUssYUFBWSxFQUFLLGFBQVksRUFBSyxZQUFXLEVBQUssWUFBVyxHQUFNLGNBQWEsRUFBSyxhQUFZLEVBQUssS0FBSyxDQUFDLGlCQUFnQixFQUFLLGVBQWMsRUFBSyxjQUFhLEVBQUssYUFBWSxFQUFLLGVBQWMsRUFBSyxpQkFBZ0IsRUFBSyxLQUFLLENBQUMsa0JBQWlCLEVBQUssdUJBQXNCLEVBQUssZUFBYyxFQUFLLGdCQUFlLEVBQUssc0JBQXFCLEVBQUssc0JBQXFCLEVBQUssc0JBQXFCLEVBQUssaUJBQWdCLEVBQUssZUFBYyxFQUFLLHdCQUF1QixHQUFNLGtCQUFpQixFQUFLLGlCQUFnQixFQUFLLGNBQWEsRUFBSyxpQkFBZ0IsRUFBSyxlQUFjLEVBQUssYUFBWSxFQUFLLGNBQWEsRUFBSyxrQkFBaUIsRUFBSyxhQUFZLEVBQUssa0JBQWlCLEVBQUssaUJBQWdCLEdBQU0sV0FBVSxFQUFLLEtBQUssQ0FBQyx1Q0FBc0MsRUFBSyxhQUFZLEVBQUssZ0JBQWUsRUFBSyxhQUFZLEVBQUssWUFBVyxFQUFLLGFBQVksRUFBSyxhQUFZLEVBQUssWUFBVyxFQUFLLGFBQVksRUFBSyxhQUFZLEVBQUssYUFBWSxFQUFLLFlBQVcsRUFBSyxhQUFZLEVBQUssWUFBVyxFQUFLLGFBQVksRUFBSyxhQUFZLEVBQUssYUFBWSxFQUFLLGdCQUFlLEVBQUssWUFBVyxFQUFLLGFBQVksRUFBSyxZQUFXLEVBQUssWUFBVyxFQUFLLGFBQVksRUFBSyxhQUFZLEVBQUssWUFBVyxHQUFNLFdBQVUsRUFBSyxZQUFXLEVB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RyxLQUFLLEdBQ3hCLElBQ0VBLEVBQU95TSxLQUFLQyxNQUFNMU0sR0FJbEIsSUFBSXM4RyxJQUFXdnZHLEVBQ1hBLEVBQVlBLEdBQWEvTSxFQUFLK00sVUFDOUJoTCxFQUFPdTZHLEVBQVMsRUFBSXQ4RyxFQUFLK0IsS0FDekIxRixFQUFPaWdILEVBQVN0OEcsRUFBSzNELFVBQVc4VCxNQUFPQyxVQUFZcFEsRUFBSzNELEtBQzVEMEMsSUFBUWdQLEtBQUtwRixFQUFRLENBQ25Cb0UsWUFDQVAsUUFBU3hNLEVBQUt3TSxRQUNkekssT0FDQTFGLFNBRUYsTUFBTzZGLFlHSmpCMG9DLEVBQVEiLCJmaWxlIjoiYXBwMmQuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDI3OCk7XG4iLCIvKlxuICogQGRlc2NyaXB0aW9uOiBlZGl0b3JcbiAqIEB2ZXJzaW9uOiAwLjAuMVxuICogQEF1dGhvcjogZGFpX3poZW5nXG4gKiBARGF0ZTogMjAxOS0wOS0yMCAxNjo1NTo0NFxuICogQExhc3RFZGl0b3JzOiBkYWlfemhlbmdcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMDktMjMgMTc6MzQ6MzNcbiAqL1xuaW1wb3J0IHV0aWwgZnJvbSAnLi91dGlscydcbmltcG9ydCBDb29raWVzIGZyb20gJ2pzLWNvb2tpZSdcblxudmFyIFZVRV9BUFBfVkVSU0lPTiA9IHV0aWwuZ2V0VXJsUGFyYW0oJ3ZlcnNpb24nKVxuY29uc3QgY29va2llcyA9IHt9XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIOWtmOWCqCBjb29raWUg5YC8XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBjb29raWUgbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIGNvb2tpZSB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmcgY29va2llIHNldHRpbmdcbiAqL1xuY29va2llcy5zZXQgPSBmdW5jdGlvbihuYW1lID0gJ2RlZmF1bHQnLCB2YWx1ZSA9ICcnLCBjb29raWVTZXR0aW5nID0ge30pIHtcbiAgbGV0IGN1cnJlbnRDb29raWVTZXR0aW5nID0ge1xuICAgIGV4cGlyZXM6IDFcbiAgfVxuICBPYmplY3QuYXNzaWduKGN1cnJlbnRDb29raWVTZXR0aW5nLCBjb29raWVTZXR0aW5nKVxuICBDb29raWVzLnNldChgZDJhZG1pbi0ke1ZVRV9BUFBfVkVSU0lPTn0tJHtuYW1lfWAsIHZhbHVlLCBjdXJyZW50Q29va2llU2V0dGluZylcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24g5ou/5YiwIGNvb2tpZSDlgLxcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIGNvb2tpZSBuYW1lXG4gKi9cbmNvb2tpZXMuZ2V0ID0gZnVuY3Rpb24obmFtZSA9ICdkZWZhdWx0Jykge1xuICByZXR1cm4gQ29va2llcy5nZXQoYGQyYWRtaW4tJHtWVUVfQVBQX1ZFUlNJT059LSR7bmFtZX1gKVxufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiDmi7/liLAgY29va2llIOWFqOmDqOeahOWAvFxuICovXG5jb29raWVzLmdldEFsbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQ29va2llcy5nZXQoKVxufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiDliKDpmaQgY29va2llXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBjb29raWUgbmFtZVxuICovXG5jb29raWVzLnJlbW92ZSA9IGZ1bmN0aW9uKG5hbWUgPSAnZGVmYXVsdCcpIHtcbiAgcmV0dXJuIENvb2tpZXMucmVtb3ZlKGBkMmFkbWluLSR7VlVFX0FQUF9WRVJTSU9OfS0ke25hbWV9YClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29va2llc1xuIiwiLypcbiAqIEBkZXNjcmlwdGlvbjogZWRpdG9yXG4gKiBAdmVyc2lvbjogMC4wLjFcbiAqIEBBdXRob3I6IGRhaV96aGVuZ1xuICogQERhdGU6IDIwMTktMDktMTcgMTQ6NTg6NDBcbiAqIEBMYXN0RWRpdG9yczogUGxlYXNlIHNldCBMYXN0RWRpdG9yc1xuICogQExhc3RFZGl0VGltZTogMjAyMC0wMy0yNSAwOTo0NDowNlxuICovXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQgYXBpQ29uZmlnIGZyb20gJy4vYXBpLWNvbmZpZydcbmltcG9ydCB1dGlsIGZyb20gJ0AvdXRpbHMvdXRpbHMnXG5pbXBvcnQgY29va2llcyBmcm9tICdAL3V0aWxzL3V0aWwuY29va2llcy5qcydcbnZhciBlbnZpcm9ubWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WXG5cbnZhciByZXFQb3J0ID0gdXRpbC5nZXRVcmxQYXJhbSgncG9ydCcpIHx8IGFwaUNvbmZpZy5kZWZhdWx0QmFzZVBvcnRcbmNvbnNvbGUubG9nKGVudmlyb25tZW50LCAnZW52aXJvbm1lbnQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09JylcbnZhciBiYXNlQXBpXG5pZiAoZW52aXJvbm1lbnQgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgYmFzZUFwaSA9IGAke2FwaUNvbmZpZy5kZWZhdWx0QmFzZUFwaX0ke3JlcVBvcnR9YFxufSBlbHNlIHtcbiAgLy8gYmFzZUFwaSA9IGBodHRwOi8vJHt3aW5kb3cubG9jYXRpb24uaG9zdG5hbWV9JHtyZXFQb3J0fWBcbiAgYmFzZUFwaSA9IGBodHRwOi8vJHt1dGlsLmdldFVybFBhcmFtKCdkYXRhJyl9JHtyZXFQb3J0fWBcbn1cbnZhciByZXF1ZXN0ID0gYXhpb3MuY3JlYXRlKHtcbiAgYmFzZVVSTDogJ2h0dHA6Ly8nK2xvY2F0aW9uLmhyZWYuc3BsaXQoJy8nKVsyXVxufSlcblxuZnVuY3Rpb24gaW50ZXJjZXB0b3JzUmVxU3VjY2VzcyAoY29uZmlnKSB7XG4gIC8vIOWcqOivt+axguWPkemAgeS5i+WJjeWBmuS4gOS6m+WkhOeQhlxuICB2YXIgdG9rZW4gPSBjb29raWVzLmdldCgndG9rZW4nKVxuICAvLyDorqnmr4/kuKror7fmsYLmkLrluKZ0b2tlbi0tIFsnWC1Ub2tlbidd5Li66Ieq5a6a5LmJa2V5IOivt+agueaNruWunumZheaDheWGteiHquihjOS/ruaUuVxuICBjb25maWcuaGVhZGVyc1sndG9rZW4nXSA9IHRva2VuIHx8IGFwaUNvbmZpZy50ZXN0VG9rZW5cbiAgcmV0dXJuIGNvbmZpZ1xufVxuXG5mdW5jdGlvbiBpbnRlcmNlcHRvcnNSZXNTdWNjZXNzIChyZXNwb25zZSkge1xuICAvLyBkYXRhQXhpb3Mg5pivIGF4aW9zIOi/lOWbnuaVsOaNruS4reeahCBkYXRhXG4gIHZhciBkYXRhQXhpb3MgPSByZXNwb25zZS5kYXRhXG4gIC8vIOi/meS4queKtuaAgeeggeaYr+WSjOWQjuerr+e6puWumueahFxuICB2YXIgY29kZSA9IGRhdGFBeGlvcy5jb2RlXG4gIC8vIOagueaNriBjb2RlIOi/m+ihjOWIpOaWrVxuICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkIHx8IGNvZGUgPT09ICcwJykge1xuICAgIHJldHVybiBkYXRhQXhpb3NcbiAgfSBlbHNlIGlmIChjb2RlICE9PSAnMCcpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZGF0YUF4aW9zKVxuICB9XG59XG5cbmZ1bmN0aW9uIGludGVyY2VwdG9yUmVzRXJyb3IgKGVycm9yKSB7XG4gIGlmIChlcnJvciAmJiBlcnJvci5yZXNwb25zZSkge1xuICAgIHN3aXRjaCAoZXJyb3IucmVzcG9uc2Uuc3RhdHVzKSB7XG4gICAgICBjYXNlIDQwMDpcbiAgICAgICAgZXJyb3IubWVzc2FnZSA9ICfor7fmsYLplJnor68nXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDQwMTpcbiAgICAgICAgZXJyb3IubWVzc2FnZSA9ICfmnKrmjojmnYPvvIzor7fnmbvlvZUnXG5cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNDAzOlxuICAgICAgICBlcnJvci5tZXNzYWdlID0gJ+aLkue7neiuv+mXridcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNDA0OlxuICAgICAgICBlcnJvci5tZXNzYWdlID0gYOivt+axguWcsOWdgOWHuumUmWBcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNDA4OlxuICAgICAgICBlcnJvci5tZXNzYWdlID0gJ+ivt+axgui2heaXtidcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNTAwOlxuICAgICAgICBlcnJvci5tZXNzYWdlID0gJ+acjeWKoeWZqOWGhemDqOmUmeivrydcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNTAxOlxuICAgICAgICBlcnJvci5tZXNzYWdlID0gJ+acjeWKoeacquWunueOsCdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNTAyOlxuICAgICAgICBlcnJvci5tZXNzYWdlID0gJ+e9keWFs+mUmeivrydcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNTAzOlxuICAgICAgICBlcnJvci5tZXNzYWdlID0gJ+acjeWKoeS4jeWPr+eUqCdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNTA0OlxuICAgICAgICBlcnJvci5tZXNzYWdlID0gJ+e9keWFs+i2heaXtidcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNTA1OlxuICAgICAgICBlcnJvci5tZXNzYWdlID0gJ0hUVFDniYjmnKzkuI3lj5fmlK/mjIEnXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpXG59XG5yZXF1ZXN0LmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShpbnRlcmNlcHRvcnNSZXFTdWNjZXNzLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgLy8g5Y+R6YCB5aSx6LSlXG4gIFByb21pc2UucmVqZWN0KGVycm9yKVxufSlcbi8vIOWTjeW6lOaLpuaIquWZqFxucmVxdWVzdC5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGludGVyY2VwdG9yc1Jlc1N1Y2Nlc3MsIGludGVyY2VwdG9yUmVzRXJyb3IpXG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0IiwidmFyIE8gPSAnb2JqZWN0JztcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09IE8gJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSBPICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gTyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09IE8gJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgc3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPSBOQVRJVkVfU1lNQk9MICYmIFN5bWJvbFtuYW1lXVxuICAgIHx8IChOQVRJVkVfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3VwcG9ydCA9IHJlcXVpcmUoJy4vc3VwcG9ydCcpO1xudmFyIGJhc2U2NCA9IHJlcXVpcmUoJy4vYmFzZTY0Jyk7XG52YXIgbm9kZWpzVXRpbHMgPSByZXF1aXJlKCcuL25vZGVqc1V0aWxzJyk7XG52YXIgc2V0SW1tZWRpYXRlID0gcmVxdWlyZSgnc2V0LWltbWVkaWF0ZS1zaGltJyk7XG52YXIgZXh0ZXJuYWwgPSByZXF1aXJlKFwiLi9leHRlcm5hbFwiKTtcblxuXG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdGhhdCBwYXNzIGFzIGEgXCJiaW5hcnkgc3RyaW5nXCI6IGl0IHNob3VsZCByZXByZXNlbnQgYSBieXRlXG4gKiBhcnJheSBidXQgbWF5IGhhdmUgPiAyNTUgY2hhciBjb2Rlcy4gQmUgc3VyZSB0byB0YWtlIG9ubHkgdGhlIGZpcnN0IGJ5dGVcbiAqIGFuZCByZXR1cm5zIHRoZSBieXRlIGFycmF5LlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4ge0FycmF5fFVpbnQ4QXJyYXl9IHRoZSBzdHJpbmcgaW4gYSBiaW5hcnkgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBzdHJpbmcyYmluYXJ5KHN0cikge1xuICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgIGlmIChzdXBwb3J0LnVpbnQ4YXJyYXkpIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHN0ci5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBuZXcgQXJyYXkoc3RyLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdUb0FycmF5TGlrZShzdHIsIHJlc3VsdCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGJsb2Igd2l0aCB0aGUgZ2l2ZW4gY29udGVudCBhbmQgdGhlIGdpdmVuIHR5cGUuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcn0gcGFydCB0aGUgY29udGVudCB0byBwdXQgaW4gdGhlIGJsb2IuIERPIE5PVCB1c2VcbiAqIGFuIFVpbnQ4QXJyYXkgYmVjYXVzZSB0aGUgc3RvY2sgYnJvd3NlciBvZiBhbmRyb2lkIDQgd29uJ3QgYWNjZXB0IGl0IChpdFxuICogd2lsbCBiZSBzaWxlbnRseSBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcsIFwiW29iamVjdCBVaW50OEFycmF5XVwiKS5cbiAqXG4gKiBVc2Ugb25seSBPTkUgcGFydCB0byBidWlsZCB0aGUgYmxvYiB0byBhdm9pZCBhIG1lbW9yeSBsZWFrIGluIElFMTEgLyBFZGdlOlxuICogd2hlbiBhIGxhcmdlIGFtb3VudCBvZiBBcnJheSBpcyB1c2VkIHRvIGNyZWF0ZSB0aGUgQmxvYiwgdGhlIGFtb3VudCBvZlxuICogbWVtb3J5IGNvbnN1bWVkIGlzIG5lYXJseSAxMDAgdGltZXMgdGhlIG9yaWdpbmFsIGRhdGEgYW1vdW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSBtaW1lIHR5cGUgb2YgdGhlIGJsb2IuXG4gKiBAcmV0dXJuIHtCbG9ifSB0aGUgY3JlYXRlZCBibG9iLlxuICovXG5leHBvcnRzLm5ld0Jsb2IgPSBmdW5jdGlvbihwYXJ0LCB0eXBlKSB7XG4gICAgZXhwb3J0cy5jaGVja1N1cHBvcnQoXCJibG9iXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQmxvYiBjb25zdHJ1Y3RvclxuICAgICAgICByZXR1cm4gbmV3IEJsb2IoW3BhcnRdLCB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBkZXByZWNhdGVkLCBicm93c2VyIG9ubHksIG9sZCB3YXlcbiAgICAgICAgICAgIHZhciBCdWlsZGVyID0gc2VsZi5CbG9iQnVpbGRlciB8fCBzZWxmLldlYktpdEJsb2JCdWlsZGVyIHx8IHNlbGYuTW96QmxvYkJ1aWxkZXIgfHwgc2VsZi5NU0Jsb2JCdWlsZGVyO1xuICAgICAgICAgICAgdmFyIGJ1aWxkZXIgPSBuZXcgQnVpbGRlcigpO1xuICAgICAgICAgICAgYnVpbGRlci5hcHBlbmQocGFydCk7XG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlci5nZXRCbG9iKHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG5cbiAgICAgICAgICAgIC8vIHdlbGwsIGZ1Y2sgPyFcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJ1ZyA6IGNhbid0IGNvbnN0cnVjdCB0aGUgQmxvYi5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cblxufTtcbi8qKlxuICogVGhlIGlkZW50aXR5IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0IHRoZSBpbnB1dC5cbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIHNhbWUgaW5wdXQuXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0O1xufVxuXG4vKipcbiAqIEZpbGwgaW4gYW4gYXJyYXkgd2l0aCBhIHN0cmluZy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgdGhlIHN0cmluZyB0byB1c2UuXG4gKiBAcGFyYW0ge0FycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBhcnJheSB0aGUgYXJyYXkgdG8gZmlsbCBpbiAod2lsbCBiZSBtdXRhdGVkKS5cbiAqIEByZXR1cm4ge0FycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSB0aGUgdXBkYXRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9BcnJheUxpa2Uoc3RyLCBhcnJheSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFycmF5W2ldID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQW4gaGVscGVyIGZvciB0aGUgZnVuY3Rpb24gYXJyYXlMaWtlVG9TdHJpbmcuXG4gKiBUaGlzIGNvbnRhaW5zIHN0YXRpYyBpbmZvcm1hdGlvbnMgYW5kIGZ1bmN0aW9ucyB0aGF0XG4gKiBjYW4gYmUgb3B0aW1pemVkIGJ5IHRoZSBicm93c2VyIEpJVCBjb21waWxlci5cbiAqL1xudmFyIGFycmF5VG9TdHJpbmdIZWxwZXIgPSB7XG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtIGFuIGFycmF5IG9mIGludCBpbnRvIGEgc3RyaW5nLCBjaHVuayBieSBjaHVuay5cbiAgICAgKiBTZWUgdGhlIHBlcmZvcm1hbmNlcyBub3RlcyBvbiBhcnJheUxpa2VUb1N0cmluZy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBhcnJheSB0aGUgYXJyYXkgdG8gdHJhbnNmb3JtLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSB0eXBlIG9mIHRoZSBhcnJheS5cbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGNodW5rIHRoZSBjaHVuayBzaXplLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHJlc3VsdGluZyBzdHJpbmcuXG4gICAgICogQHRocm93cyBFcnJvciBpZiB0aGUgY2h1bmsgaXMgdG9vIGJpZyBmb3IgdGhlIHN0YWNrLlxuICAgICAqL1xuICAgIHN0cmluZ2lmeUJ5Q2h1bms6IGZ1bmN0aW9uKGFycmF5LCB0eXBlLCBjaHVuaykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW10sIGsgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIC8vIHNob3J0Y3V0XG4gICAgICAgIGlmIChsZW4gPD0gY2h1bmspIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoayA8IGxlbikge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiYXJyYXlcIiB8fCB0eXBlID09PSBcIm5vZGVidWZmZXJcIikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYXJyYXkuc2xpY2UoaywgTWF0aC5taW4oayArIGNodW5rLCBsZW4pKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhcnJheS5zdWJhcnJheShrLCBNYXRoLm1pbihrICsgY2h1bmssIGxlbikpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrICs9IGNodW5rO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENhbGwgU3RyaW5nLmZyb21DaGFyQ29kZSBvbiBldmVyeSBpdGVtIGluIHRoZSBhcnJheS5cbiAgICAgKiBUaGlzIGlzIHRoZSBuYWl2ZSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggZ2VuZXJhdGUgQSBMT1Qgb2YgaW50ZXJtZWRpYXRlIHN0cmluZy5cbiAgICAgKiBUaGlzIHNob3VsZCBiZSB1c2VkIHdoZW4gZXZlcnl0aGluZyBlbHNlIGZhaWwuXG4gICAgICogQHBhcmFtIHtBcnJheXxBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gYXJyYXkgdGhlIGFycmF5IHRvIHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSByZXN1bHQuXG4gICAgICovXG4gICAgc3RyaW5naWZ5QnlDaGFyOiBmdW5jdGlvbihhcnJheSl7XG4gICAgICAgIHZhciByZXN1bHRTdHIgPSBcIlwiO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdFN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0U3RyO1xuICAgIH0sXG4gICAgYXBwbHlDYW5CZVVzZWQgOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0cnVlIGlmIHRoZSBicm93c2VyIGFjY2VwdHMgdG8gdXNlIFN0cmluZy5mcm9tQ2hhckNvZGUgb24gVWludDhBcnJheVxuICAgICAgICAgKi9cbiAgICAgICAgdWludDhhcnJheSA6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdXBwb3J0LnVpbnQ4YXJyYXkgJiYgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSkubGVuZ3RoID09PSAxO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRydWUgaWYgdGhlIGJyb3dzZXIgYWNjZXB0cyB0byB1c2UgU3RyaW5nLmZyb21DaGFyQ29kZSBvbiBub2RlanMgQnVmZmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgbm9kZWJ1ZmZlciA6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdXBwb3J0Lm5vZGVidWZmZXIgJiYgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBub2RlanNVdGlscy5hbGxvY0J1ZmZlcigxKSkubGVuZ3RoID09PSAxO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKVxuICAgIH1cbn07XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHtBcnJheXxBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gYXJyYXkgdGhlIGFycmF5IHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHJlc3VsdC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlVG9TdHJpbmcoYXJyYXkpIHtcbiAgICAvLyBQZXJmb3JtYW5jZXMgbm90ZXMgOlxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhcnJheSkgaXMgdGhlIGZhc3Rlc3QsIHNlZVxuICAgIC8vIHNlZSBodHRwOi8vanNwZXJmLmNvbS9jb252ZXJ0aW5nLWEtdWludDhhcnJheS10by1hLXN0cmluZy8yXG4gICAgLy8gYnV0IHRoZSBzdGFjayBpcyBsaW1pdGVkIChhbmQgd2UgY2FuIGdldCBodWdlIGFycmF5cyAhKS5cbiAgICAvL1xuICAgIC8vIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGFycmF5W2ldKTsgZ2VuZXJhdGUgdG9vIG1hbnkgc3RyaW5ncyAhXG4gICAgLy9cbiAgICAvLyBUaGlzIGNvZGUgaXMgaW5zcGlyZWQgYnkgaHR0cDovL2pzcGVyZi5jb20vYXJyYXlidWZmZXItdG8tc3RyaW5nLWFwcGx5LXBlcmZvcm1hbmNlLzJcbiAgICAvLyBUT0RPIDogd2Ugbm93IGhhdmUgd29ya2VycyB0aGF0IHNwbGl0IHRoZSB3b3JrLiBEbyB3ZSBzdGlsbCBuZWVkIHRoYXQgP1xuICAgIHZhciBjaHVuayA9IDY1NTM2LFxuICAgICAgICB0eXBlID0gZXhwb3J0cy5nZXRUeXBlT2YoYXJyYXkpLFxuICAgICAgICBjYW5Vc2VBcHBseSA9IHRydWU7XG4gICAgaWYgKHR5cGUgPT09IFwidWludDhhcnJheVwiKSB7XG4gICAgICAgIGNhblVzZUFwcGx5ID0gYXJyYXlUb1N0cmluZ0hlbHBlci5hcHBseUNhbkJlVXNlZC51aW50OGFycmF5O1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJub2RlYnVmZmVyXCIpIHtcbiAgICAgICAgY2FuVXNlQXBwbHkgPSBhcnJheVRvU3RyaW5nSGVscGVyLmFwcGx5Q2FuQmVVc2VkLm5vZGVidWZmZXI7XG4gICAgfVxuXG4gICAgaWYgKGNhblVzZUFwcGx5KSB7XG4gICAgICAgIHdoaWxlIChjaHVuayA+IDEpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5VG9TdHJpbmdIZWxwZXIuc3RyaW5naWZ5QnlDaHVuayhhcnJheSwgdHlwZSwgY2h1bmspO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNodW5rID0gTWF0aC5mbG9vcihjaHVuayAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gbm8gYXBwbHkgb3IgY2h1bmsgZXJyb3IgOiBzbG93IGFuZCBwYWluZnVsIGFsZ29yaXRobVxuICAgIC8vIGRlZmF1bHQgYnJvd3NlciBvbiBhbmRyb2lkIDQuKlxuICAgIHJldHVybiBhcnJheVRvU3RyaW5nSGVscGVyLnN0cmluZ2lmeUJ5Q2hhcihhcnJheSk7XG59XG5cbmV4cG9ydHMuYXBwbHlGcm9tQ2hhckNvZGUgPSBhcnJheUxpa2VUb1N0cmluZztcblxuXG4vKipcbiAqIENvcHkgdGhlIGRhdGEgZnJvbSBhbiBhcnJheS1saWtlIHRvIGFuIG90aGVyIGFycmF5LWxpa2UuXG4gKiBAcGFyYW0ge0FycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBhcnJheUZyb20gdGhlIG9yaWdpbiBhcnJheS5cbiAqIEBwYXJhbSB7QXJyYXl8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGFycmF5VG8gdGhlIGRlc3RpbmF0aW9uIGFycmF5IHdoaWNoIHdpbGwgYmUgbXV0YXRlZC5cbiAqIEByZXR1cm4ge0FycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSB0aGUgdXBkYXRlZCBkZXN0aW5hdGlvbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlVG9BcnJheUxpa2UoYXJyYXlGcm9tLCBhcnJheVRvKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheUZyb20ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlUb1tpXSA9IGFycmF5RnJvbVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5VG87XG59XG5cbi8vIGEgbWF0cml4IGNvbnRhaW5pbmcgZnVuY3Rpb25zIHRvIHRyYW5zZm9ybSBldmVyeXRoaW5nIGludG8gZXZlcnl0aGluZy5cbnZhciB0cmFuc2Zvcm0gPSB7fTtcblxuLy8gc3RyaW5nIHRvID9cbnRyYW5zZm9ybVtcInN0cmluZ1wiXSA9IHtcbiAgICBcInN0cmluZ1wiOiBpZGVudGl0eSxcbiAgICBcImFycmF5XCI6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdUb0FycmF5TGlrZShpbnB1dCwgbmV3IEFycmF5KGlucHV0Lmxlbmd0aCkpO1xuICAgIH0sXG4gICAgXCJhcnJheWJ1ZmZlclwiOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtW1wic3RyaW5nXCJdW1widWludDhhcnJheVwiXShpbnB1dCkuYnVmZmVyO1xuICAgIH0sXG4gICAgXCJ1aW50OGFycmF5XCI6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdUb0FycmF5TGlrZShpbnB1dCwgbmV3IFVpbnQ4QXJyYXkoaW5wdXQubGVuZ3RoKSk7XG4gICAgfSxcbiAgICBcIm5vZGVidWZmZXJcIjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ1RvQXJyYXlMaWtlKGlucHV0LCBub2RlanNVdGlscy5hbGxvY0J1ZmZlcihpbnB1dC5sZW5ndGgpKTtcbiAgICB9XG59O1xuXG4vLyBhcnJheSB0byA/XG50cmFuc2Zvcm1bXCJhcnJheVwiXSA9IHtcbiAgICBcInN0cmluZ1wiOiBhcnJheUxpa2VUb1N0cmluZyxcbiAgICBcImFycmF5XCI6IGlkZW50aXR5LFxuICAgIFwiYXJyYXlidWZmZXJcIjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChuZXcgVWludDhBcnJheShpbnB1dCkpLmJ1ZmZlcjtcbiAgICB9LFxuICAgIFwidWludDhhcnJheVwiOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaW5wdXQpO1xuICAgIH0sXG4gICAgXCJub2RlYnVmZmVyXCI6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBub2RlanNVdGlscy5uZXdCdWZmZXJGcm9tKGlucHV0KTtcbiAgICB9XG59O1xuXG4vLyBhcnJheWJ1ZmZlciB0byA/XG50cmFuc2Zvcm1bXCJhcnJheWJ1ZmZlclwiXSA9IHtcbiAgICBcInN0cmluZ1wiOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gYXJyYXlMaWtlVG9TdHJpbmcobmV3IFVpbnQ4QXJyYXkoaW5wdXQpKTtcbiAgICB9LFxuICAgIFwiYXJyYXlcIjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXlMaWtlKG5ldyBVaW50OEFycmF5KGlucHV0KSwgbmV3IEFycmF5KGlucHV0LmJ5dGVMZW5ndGgpKTtcbiAgICB9LFxuICAgIFwiYXJyYXlidWZmZXJcIjogaWRlbnRpdHksXG4gICAgXCJ1aW50OGFycmF5XCI6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShpbnB1dCk7XG4gICAgfSxcbiAgICBcIm5vZGVidWZmZXJcIjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVqc1V0aWxzLm5ld0J1ZmZlckZyb20obmV3IFVpbnQ4QXJyYXkoaW5wdXQpKTtcbiAgICB9XG59O1xuXG4vLyB1aW50OGFycmF5IHRvID9cbnRyYW5zZm9ybVtcInVpbnQ4YXJyYXlcIl0gPSB7XG4gICAgXCJzdHJpbmdcIjogYXJyYXlMaWtlVG9TdHJpbmcsXG4gICAgXCJhcnJheVwiOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gYXJyYXlMaWtlVG9BcnJheUxpa2UoaW5wdXQsIG5ldyBBcnJheShpbnB1dC5sZW5ndGgpKTtcbiAgICB9LFxuICAgIFwiYXJyYXlidWZmZXJcIjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LmJ1ZmZlcjtcbiAgICB9LFxuICAgIFwidWludDhhcnJheVwiOiBpZGVudGl0eSxcbiAgICBcIm5vZGVidWZmZXJcIjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVqc1V0aWxzLm5ld0J1ZmZlckZyb20oaW5wdXQpO1xuICAgIH1cbn07XG5cbi8vIG5vZGVidWZmZXIgdG8gP1xudHJhbnNmb3JtW1wibm9kZWJ1ZmZlclwiXSA9IHtcbiAgICBcInN0cmluZ1wiOiBhcnJheUxpa2VUb1N0cmluZyxcbiAgICBcImFycmF5XCI6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBhcnJheUxpa2VUb0FycmF5TGlrZShpbnB1dCwgbmV3IEFycmF5KGlucHV0Lmxlbmd0aCkpO1xuICAgIH0sXG4gICAgXCJhcnJheWJ1ZmZlclwiOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtW1wibm9kZWJ1ZmZlclwiXVtcInVpbnQ4YXJyYXlcIl0oaW5wdXQpLmJ1ZmZlcjtcbiAgICB9LFxuICAgIFwidWludDhhcnJheVwiOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gYXJyYXlMaWtlVG9BcnJheUxpa2UoaW5wdXQsIG5ldyBVaW50OEFycmF5KGlucHV0Lmxlbmd0aCkpO1xuICAgIH0sXG4gICAgXCJub2RlYnVmZmVyXCI6IGlkZW50aXR5XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBpbnB1dCBpbnRvIGFueSB0eXBlLlxuICogVGhlIHN1cHBvcnRlZCBvdXRwdXQgdHlwZSBhcmUgOiBzdHJpbmcsIGFycmF5LCB1aW50OGFycmF5LCBhcnJheWJ1ZmZlciwgbm9kZWJ1ZmZlci5cbiAqIElmIG5vIG91dHB1dCB0eXBlIGlzIHNwZWNpZmllZCwgdGhlIHVubW9kaWZpZWQgaW5wdXQgd2lsbCBiZSByZXR1cm5lZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBvdXRwdXRUeXBlIHRoZSBvdXRwdXQgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBpbnB1dCB0aGUgaW5wdXQgdG8gY29udmVydC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBhbiBFcnJvciBpZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIHJlcXVlc3RlZCBvdXRwdXQgdHlwZS5cbiAqL1xuZXhwb3J0cy50cmFuc2Zvcm1UbyA9IGZ1bmN0aW9uKG91dHB1dFR5cGUsIGlucHV0KSB7XG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgICAvLyB1bmRlZmluZWQsIG51bGwsIGV0Y1xuICAgICAgICAvLyBhbiBlbXB0eSBzdHJpbmcgd29uJ3QgaGFybS5cbiAgICAgICAgaW5wdXQgPSBcIlwiO1xuICAgIH1cbiAgICBpZiAoIW91dHB1dFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBleHBvcnRzLmNoZWNrU3VwcG9ydChvdXRwdXRUeXBlKTtcbiAgICB2YXIgaW5wdXRUeXBlID0gZXhwb3J0cy5nZXRUeXBlT2YoaW5wdXQpO1xuICAgIHZhciByZXN1bHQgPSB0cmFuc2Zvcm1baW5wdXRUeXBlXVtvdXRwdXRUeXBlXShpbnB1dCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSB0eXBlIG9mIHRoZSBpbnB1dC5cbiAqIFRoZSB0eXBlIHdpbGwgYmUgaW4gYSBmb3JtYXQgdmFsaWQgZm9yIEpTWmlwLnV0aWxzLnRyYW5zZm9ybVRvIDogc3RyaW5nLCBhcnJheSwgdWludDhhcnJheSwgYXJyYXlidWZmZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXQgdGhlIGlucHV0IHRvIGlkZW50aWZ5LlxuICogQHJldHVybiB7U3RyaW5nfSB0aGUgKGxvd2VyY2FzZSkgdHlwZSBvZiB0aGUgaW5wdXQuXG4gKi9cbmV4cG9ydHMuZ2V0VHlwZU9mID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7XG4gICAgICAgIHJldHVybiBcImFycmF5XCI7XG4gICAgfVxuICAgIGlmIChzdXBwb3J0Lm5vZGVidWZmZXIgJiYgbm9kZWpzVXRpbHMuaXNCdWZmZXIoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBcIm5vZGVidWZmZXJcIjtcbiAgICB9XG4gICAgaWYgKHN1cHBvcnQudWludDhhcnJheSAmJiBpbnB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIFwidWludDhhcnJheVwiO1xuICAgIH1cbiAgICBpZiAoc3VwcG9ydC5hcnJheWJ1ZmZlciAmJiBpbnB1dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBcImFycmF5YnVmZmVyXCI7XG4gICAgfVxufTtcblxuLyoqXG4gKiBUaHJvdyBhbiBleGNlcHRpb24gaWYgdGhlIHR5cGUgaXMgbm90IHN1cHBvcnRlZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSB0eXBlIHRvIGNoZWNrLlxuICogQHRocm93cyB7RXJyb3J9IGFuIEVycm9yIGlmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgcmVxdWVzdGVkIHR5cGUuXG4gKi9cbmV4cG9ydHMuY2hlY2tTdXBwb3J0ID0gZnVuY3Rpb24odHlwZSkge1xuICAgIHZhciBzdXBwb3J0ZWQgPSBzdXBwb3J0W3R5cGUudG9Mb3dlckNhc2UoKV07XG4gICAgaWYgKCFzdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHR5cGUgKyBcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgcGxhdGZvcm1cIik7XG4gICAgfVxufTtcblxuZXhwb3J0cy5NQVhfVkFMVUVfMTZCSVRTID0gNjU1MzU7XG5leHBvcnRzLk1BWF9WQUxVRV8zMkJJVFMgPSAtMTsgLy8gd2VsbCwgXCJcXHhGRlxceEZGXFx4RkZcXHhGRlxceEZGXFx4RkZcXHhGRlxceEZGXCIgaXMgcGFyc2VkIGFzIC0xXG5cbi8qKlxuICogUHJldHRpZnkgYSBzdHJpbmcgcmVhZCBhcyBiaW5hcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gcHJldHRpZnkuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGEgcHJldHR5IHN0cmluZy5cbiAqL1xuZXhwb3J0cy5wcmV0dHkgPSBmdW5jdGlvbihzdHIpIHtcbiAgICB2YXIgcmVzID0gJycsXG4gICAgICAgIGNvZGUsIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IChzdHIgfHwgXCJcIikubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICByZXMgKz0gJ1xcXFx4JyArIChjb2RlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgY29kZS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn07XG5cbi8qKlxuICogRGVmZXIgdGhlIGNhbGwgb2YgYSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRoZSBmdW5jdGlvbiB0byBjYWxsIGFzeW5jaHJvbm91c2x5LlxuICogQHBhcmFtIHtBcnJheX0gYXJncyB0aGUgYXJndW1lbnRzIHRvIGdpdmUgdG8gdGhlIGNhbGxiYWNrLlxuICovXG5leHBvcnRzLmRlbGF5ID0gZnVuY3Rpb24oY2FsbGJhY2ssIGFyZ3MsIHNlbGYpIHtcbiAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjay5hcHBseShzZWxmIHx8IG51bGwsIGFyZ3MgfHwgW10pO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBFeHRlbmRzIGEgcHJvdG90eXBlIHdpdGggYW4gb3RoZXIsIHdpdGhvdXQgY2FsbGluZyBhIGNvbnN0cnVjdG9yIHdpdGhcbiAqIHNpZGUgZWZmZWN0cy4gSW5zcGlyZWQgYnkgbm9kZWpzJyBgdXRpbHMuaW5oZXJpdHNgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdG9yIHRoZSBjb25zdHJ1Y3RvciB0byBhdWdtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdXBlckN0b3IgdGhlIHBhcmVudCBjb25zdHJ1Y3RvciB0byB1c2VcbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IGZ1bmN0aW9uIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICB2YXIgT2JqID0gZnVuY3Rpb24oKSB7fTtcbiAgICBPYmoucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBPYmooKTtcbn07XG5cbi8qKlxuICogTWVyZ2UgdGhlIG9iamVjdHMgcGFzc2VkIGFzIHBhcmFtZXRlcnMgaW50byBhIG5ldyBvbmUuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsuLi5PYmplY3R9IHZhcl9hcmdzIEFsbCBvYmplY3RzIHRvIG1lcmdlLlxuICogQHJldHVybiB7T2JqZWN0fSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgZGF0YSBvZiB0aGUgb3RoZXJzLlxuICovXG5leHBvcnRzLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQgPSB7fSwgaSwgYXR0cjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IC8vIGFyZ3VtZW50cyBpcyBub3QgZW51bWVyYWJsZSBpbiBzb21lIGJyb3dzZXJzXG4gICAgICAgIGZvciAoYXR0ciBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0uaGFzT3duUHJvcGVydHkoYXR0cikgJiYgdHlwZW9mIHJlc3VsdFthdHRyXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHJlc3VsdFthdHRyXSA9IGFyZ3VtZW50c1tpXVthdHRyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gYXJiaXRyYXJ5IGNvbnRlbnQgaW50byBhIFByb21pc2UuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBhIG5hbWUgZm9yIHRoZSBjb250ZW50IGJlaW5nIHByb2Nlc3NlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGEgdGhlIGNvbnRlbnQgdG8gcHJvY2Vzcy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNCaW5hcnkgdHJ1ZSBpZiB0aGUgY29udGVudCBpcyBub3QgYW4gdW5pY29kZSBzdHJpbmdcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNPcHRpbWl6ZWRCaW5hcnlTdHJpbmcgdHJ1ZSBpZiB0aGUgc3RyaW5nIGNvbnRlbnQgb25seSBoYXMgb25lIGJ5dGUgcGVyIGNoYXJhY3Rlci5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNCYXNlNjQgdHJ1ZSBpZiB0aGUgc3RyaW5nIGNvbnRlbnQgaXMgZW5jb2RlZCB3aXRoIGJhc2U2NC5cbiAqIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSBpbiBhIGZvcm1hdCB1c2FibGUgYnkgSlNaaXAuXG4gKi9cbmV4cG9ydHMucHJlcGFyZUNvbnRlbnQgPSBmdW5jdGlvbihuYW1lLCBpbnB1dERhdGEsIGlzQmluYXJ5LCBpc09wdGltaXplZEJpbmFyeVN0cmluZywgaXNCYXNlNjQpIHtcblxuICAgIC8vIGlmIGlucHV0RGF0YSBpcyBhbHJlYWR5IGEgcHJvbWlzZSwgdGhpcyBmbGF0dGVuIGl0LlxuICAgIHZhciBwcm9taXNlID0gZXh0ZXJuYWwuUHJvbWlzZS5yZXNvbHZlKGlucHV0RGF0YSkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdmFyIGlzQmxvYiA9IHN1cHBvcnQuYmxvYiAmJiAoZGF0YSBpbnN0YW5jZW9mIEJsb2IgfHwgWydbb2JqZWN0IEZpbGVdJywgJ1tvYmplY3QgQmxvYl0nXS5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKSkgIT09IC0xKTtcblxuICAgICAgICBpZiAoaXNCbG9iICYmIHR5cGVvZiBGaWxlUmVhZGVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGV4dGVybmFsLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlLnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgdmFyIGRhdGFUeXBlID0gZXhwb3J0cy5nZXRUeXBlT2YoZGF0YSk7XG5cbiAgICAgICAgaWYgKCFkYXRhVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGV4dGVybmFsLlByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgICAgIG5ldyBFcnJvcihcIkNhbid0IHJlYWQgdGhlIGRhdGEgb2YgJ1wiICsgbmFtZSArIFwiJy4gSXMgaXQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImluIGEgc3VwcG9ydGVkIEphdmFTY3JpcHQgdHlwZSAoU3RyaW5nLCBCbG9iLCBBcnJheUJ1ZmZlciwgZXRjKSA/XCIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSA6IGl0J3Mgd2F5IGVhc2llciB0byB3b3JrIHdpdGggVWludDhBcnJheSB0aGFuIHdpdGggQXJyYXlCdWZmZXJcbiAgICAgICAgaWYgKGRhdGFUeXBlID09PSBcImFycmF5YnVmZmVyXCIpIHtcbiAgICAgICAgICAgIGRhdGEgPSBleHBvcnRzLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhVHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKGlzQmFzZTY0KSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGJhc2U2NC5kZWNvZGUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0JpbmFyeSkge1xuICAgICAgICAgICAgICAgIC8vIG9wdGltaXplZEJpbmFyeVN0cmluZyA9PT0gdHJ1ZSBtZWFucyB0aGF0IHRoZSBmaWxlIGhhcyBhbHJlYWR5IGJlZW4gZmlsdGVyZWQgd2l0aCBhIDB4RkYgbWFza1xuICAgICAgICAgICAgICAgIGlmIChpc09wdGltaXplZEJpbmFyeVN0cmluZyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGEgc3RyaW5nLCBub3QgaW4gYSBiYXNlNjQgZm9ybWF0LlxuICAgICAgICAgICAgICAgICAgICAvLyBCZSBzdXJlIHRoYXQgdGhpcyBpcyBhIGNvcnJlY3QgXCJiaW5hcnkgc3RyaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHN0cmluZzJiaW5hcnkoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBoaWRlKHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsIi8qXG4gKiBAZGVzY3JpcHRpb246IGFwaemFjee9rlxuICogQHZlcnNpb246IDAuMC4xXG4gKiBAQXV0aG9yOiBkYWlfemhlbmdcbiAqIEBEYXRlOiAyMDE5LTA5LTE5IDE0OjM4OjE4XG4gKiBATGFzdEVkaXRvcnM6IFBsZWFzZSBzZXQgTGFzdEVkaXRvcnNcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjAtMTAtMTYgMDk6NTI6MTNcbiAqL1xuaW1wb3J0IHV0aWwgZnJvbSAnQC91dGlscy91dGlscy5qcydcblxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOaOpee6v+WbvlxuICovXG4vLyB2YXIgc3BhY2VJZCA9IGVkaXRvci5kaXIuZ2V0QXR0cigndXVpZCcpXG52YXIgYXBpQ29uZmlnID0ge1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uOiDlubPpnaLlm75cbiAgICovXG4gIGhvb2t1cDoge1xuICAgIGFwaU5hbWU6ICfmjqXnur/lm77nrqHnkIYnLFxuICAgIGFwaUFkZDogJy9kaWFncmFtL2FkZCcsXG4gICAgYXBpUmVtb3ZlOiAnL2RpYWdyYW0vcmVtb3ZlLycsXG4gICAgYXBpTGlzdDogJy9zcGFjZS9kaWFncmFtL3NlbGVjdCcsXG4gICAgYXBpVXBkYXRlOiAnL3NwYWNlL2RpYWdyYW0vdXBkYXRlJ1xuICB9LFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uOiDlpIfku73ot6/lvoRcbiAgICovXG4gIHBsYW46IHtcbiAgICBhcGlOYW1lOiAn5bmz6Z2i5Zu+566h55CGJyxcbiAgICBhcGlBZGQ6ICcvZGlhZ3JhbS9hZGQnLFxuICAgIGFwaVJlbW92ZTogJy9kaWFncmFtL3JlbW92ZS8nLFxuICAgIC8vIGFwaUxpc3Q6ICcvZGlhZ3JhbS9kaWFncmFtMmQvcXVlcnknLCBcbiAgICBhcGlVcGRhdGU6ICcvZGlhZ3JhbS97aWR9L3VwZGF0ZSdcbiAgfSxcbiAgJzNkJzoge1xuICAgIGFwaU5hbWU6ICczZOWbvueuoeeQhicsXG4gICAgYXBpQWRkOiAnL2RpYWdyYW0vZGlhZ3JhbTJkL2FkZCcsXG4gICAgYXBpUmVtb3ZlOiAnL2RpYWdyYW0vZGlhZ3JhbTJkL2JhdGNoRGVsZXRlJyxcbiAgICAvLyBhcGlMaXN0OiAnL2RpYWdyYW0vZGlhZ3JhbTJkL3F1ZXJ5JywgIC8vIOatpOaOpeWPo+eahOmFjee9ruW3suS4jeWcqOi/memHjFxuICAgIGFwaVVwZGF0ZTogJy9kaWFncmFtL2RpYWdyYW0yZC97aWR9L3VwZGF0ZScgLy8g5q2k5o6l5Y+j55qE6YWN572u5bey5LiN5Zyo6L+Z6YeMXG4gIH1cbn1cbnZhciBlZGl0b3JUeXBlID0gdXRpbC5nZXRVcmxQYXJhbSgndHlwZScpXG52YXIgZXhwb3J0QXBpID0gYXBpQ29uZmlnW2VkaXRvclR5cGVdIHx8IGFwaUNvbmZpZ1snaG9va3VwJ11cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4uZXhwb3J0QXBpLFxuICBrZXkzZDogJzNkJyxcbiAgZGVmYXVsdEJhc2VBcGk6ICdodHRwOi8vMTkyLjE2OC4xMC4xMTEnLFxuICBkZWZhdWx0QmFzZVBvcnQ6ICc6MTAyNDAnLFxuICB0ZXN0VG9rZW46ICdleUowZVhBaU9pSktWMVFpTENKaGJHY2lPaUpJVXpJMU5pSjkuZXlKaGRXUWlPaUl4TXpBMU16azBPREV6TURrM05EWTNPVEEySWl3aWJtSm1Jam94TmpBNU56SXhOems0TENKcGMzTWlPaUpwTFhwa0xtNWxkQ0lzSW1WNGNDSTZNVFl4TWpNeE16YzVPQ3dpYVdGMElqb3hOakE1TnpJeE56azRMQ0oxYzJWeVNXUWlPakV6TURVek9UUTRNVE13T1RjME5qYzVNRFo5LkZ4cmFfdHNMdXVXaXdVT1F2OENyVE41bE5JUlhsSWR5aVk2R0tPbFVsZUEnLFxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb246IOWkh+S7veWcsOWdgFxuICAgKi9cbiAgcmVjb3ZlcnlEYXRhUGF0aDogJ2JhY2t1cHMvJ1xufSIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvKlxuICogQGRlc2NyaXB0aW9uOiBlZGl0b3JcbiAqIEB2ZXJzaW9uOiAwLjAuMVxuICogQEF1dGhvcjogZGFpX3poZW5nXG4gKiBARGF0ZTogMjAxOS0wOS0xOSAxMDoyMzozMVxuICogQExhc3RFZGl0b3JzOiBkYWlfemhlbmdcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTAtMTQgMTA6MDg6MzZcbiAqL1xuXG5pbXBvcnQgSlNaaXAgZnJvbSAnanN6aXAnXG5pbXBvcnQgeyBzYXZlQXMgfSBmcm9tICdmaWxlLXNhdmVyJ1xuLyoqXG4gKiBAZGVzY3JpcHRpb24g5omT5byA5paw6aG16Z2iXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsIOWcsOWdgFxuICovXG52YXIgdXRpbCA9IHt9XG51dGlsLmJhc2U2NFRlc3QgPSAvXlxccypkYXRhOihbYS16XStcXC9bYS16MC05LSsuXSsoO1thLXotXSs9W2EtejAtOS1dKyk/KT8oO2Jhc2U2NCk/LC9pXG51dGlsLm9wZW4gPSBmdW5jdGlvbih1cmwpIHtcbiAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcbiAgYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB1cmwpXG4gIGEuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJylcbiAgYS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2QyYWRtaW4tbGluay10ZW1wJylcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKVxuICBhLmNsaWNrKClcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZDJhZG1pbi1saW5rLXRlbXAnKSlcbn1cbnV0aWwuZ2V0VXJsUGFyYW0gPSBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciByZWcgPSBuZXcgUmVnRXhwKCcoXnwmKScgKyBuYW1lICsgJz0oW14mXSopKCZ8JCknKSAvL+aehOmAoOS4gOS4quWQq+acieebruagh+WPguaVsOeahOato+WImeihqOi+vuW8j+WvueixoVxuICB2YXIgciA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpLm1hdGNoKHJlZykgLy/ljLnphY3nm67moIflj4LmlbBcbiAgaWYgKHIgIT0gbnVsbCkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoclsyXSlcbiAgfVxuICByZXR1cm4gbnVsbCAvL+i/lOWbnuWPguaVsOWAvFxufVxudXRpbC51cGxvYWQgPSAoZmlsZXMsIHJlc05hbWUgPSAn5Zu+57q4JykgPT4ge1xuICB2YXIgemlwID0gbmV3IEpTWmlwKClcbiAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICBpZiAoZmlsZS5wYXRoKSB7XG4gICAgICB6aXAuZmlsZShmaWxlLnBhdGgsIGZpbGUuZGF0YSwgZmlsZS5jb25maWcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHppcC5maWxlKGAke2ZpbGUubmFtZX0uanNvbmAsIGZpbGUuZGF0YSwgZmlsZS5jb25maWcpXG4gICAgfVxuICB9KVxuICB6aXBcbiAgICAuZ2VuZXJhdGVBc3luYyh7XG4gICAgICB0eXBlOiAnYmxvYicsXG4gICAgICBjb21wcmVzc2lvbjogJ0RFRkxBVEUnLFxuICAgICAgY29tcHJlc3Npb25PcHRpb25zOiB7XG4gICAgICAgIGxldmVsOiA5XG4gICAgICB9XG4gICAgfSlcbiAgICAudGhlbihjb250ZW50ID0+IHtcbiAgICAgIHNhdmVBcyhjb250ZW50LCBgJHtyZXNOYW1lfS56aXBgKVxuICAgIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IHV0aWxcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvKlxuICogQGRlc2NyaXB0aW9uOiBlZGl0b3JcbiAqIEB2ZXJzaW9uOiAwLjAuMVxuICogQEF1dGhvcjogZGFpX3poZW5nXG4gKiBARGF0ZTogMjAxOS0wOS0yMyAxMTowMTo0NFxuICogQExhc3RFZGl0b3JzOiBQbGVhc2Ugc2V0IExhc3RFZGl0b3JzXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIwLTA3LTAyIDE4OjAzOjMyXG4gKi9cbmltcG9ydCByZXF1ZXN0IGZyb20gJy4uL3JlcXVlc3QuanMnXG5pbXBvcnQgYXBpQ29uZmlnIGZyb20gJy4uL2FwaS1jb25maWcuanMnXG5pbXBvcnQgeyBjbG9uZURlZXAgYXMgX2Nsb25lRGVlcCB9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCB7IGFkZEZpbGUgfSBmcm9tICcuL2ZpbGUnXG52YXIgZXhwb3J0QXBpTmFtZSA9IGFwaUNvbmZpZy5hcGlOYW1lXG4vLyB2YXIgZXhwb3J0QXBpVXBkYXRlID0gYXBpQ29uZmlnLmFwaVVwZGF0ZVxudmFyIGV4cG9ydEFwaUFkZCA9IGFwaUNvbmZpZy5hcGlBZGRcbnZhciByZWNvdmVyeURhdGFQYXRoID0gYXBpQ29uZmlnLnJlY292ZXJ5RGF0YVBhdGhcblxuLy8g5pu05paw5bem5L6n5pWw5o2uXG5mdW5jdGlvbiB1cGRhdGVUcmVlIChjaGlsZERhdGEpIHtcbiAgdmFyIGN1dHRlbnREaXIgPSB3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25zRXhwbG9yZXIudHJlZS5zbSgpLmxkKClcbiAgbGV0IGNoaWxkcmVuTGlzdCA9IGN1dHRlbnREaXIuZ2V0Q2hpbGRyZW4oKS5fYXNcbiAgaWYgKGNoaWxkcmVuTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgY3V0dGVudERpci50b0NoaWxkcmVuKCkuZWFjaChjaGlsZCA9PiB7XG4gICAgICBpZiAoY2hpbGQuZmlsZVR5cGUgPT0gJ2RpYWdyYW0nKSB7XG4gICAgICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci50cmVlLmRtKCkucmVtb3ZlKGNoaWxkKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjaGlsZERhdGEuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIGxldCBkaWFncmFtID0gSlNPTi5wYXJzZShjaGlsZC5qc29uKVxuICAgICAgbGV0IHZhbHVlID0ge31cbiAgICAgIHZhbHVlID0ge1xuICAgICAgICBmaWxlVHlwZTogJ2RpYWdyYW0nLFxuICAgICAgICBmaWxlSWNvbjogZGlhZ3JhbS5pY29uLFxuICAgICAgICBhdHRyczoge1xuICAgICAgICAgIG5hbWU6IGNoaWxkLm5hbWUsXG4gICAgICAgICAgc3BhY2VVdWlkOiBjaGlsZC5zcGFjZUlkLFxuICAgICAgICAgIHV1aWQ6IGNoaWxkLmlkLFxuICAgICAgICAgIGRpYWdyYW1UeXBlOiBjaGlsZC5pc01haW4gPT09IGZhbHNlID8gMCA6IDEgfHwgMCxcbiAgICAgICAgICBqc29uOiBkaWFncmFtXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci5wYXJzZUNoaWxkKGN1dHRlbnREaXIsIGNoaWxkLm5hbWUsIHZhbHVlKTtcbiAgICB9KVxuICB9IGVsc2UgeyAvLyDkuI3lrZjlnKjlrZfoioLngrnml7ZcbiAgICBjaGlsZERhdGEuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIGxldCBkaWFncmFtID0gSlNPTi5wYXJzZShjaGlsZC5qc29uKVxuICAgICAgbGV0IHZhbHVlID0ge31cbiAgICAgIHZhbHVlID0ge1xuICAgICAgICBmaWxlVHlwZTogJ2RpYWdyYW0nLFxuICAgICAgICBmaWxlSWNvbjogZGlhZ3JhbS5pY29uLFxuICAgICAgICBhdHRyczoge1xuICAgICAgICAgIG5hbWU6IGNoaWxkLm5hbWUsXG4gICAgICAgICAgc3BhY2VVdWlkOiBjaGlsZC5zcGFjZUlkLFxuICAgICAgICAgIHV1aWQ6IGNoaWxkLmlkLFxuICAgICAgICAgIGRpYWdyYW1UeXBlOiBjaGlsZC5pc01haW4gPT09IGZhbHNlID8gMCA6IDEgfHwgMCxcbiAgICAgICAgICBqc29uOiBkaWFncmFtXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci5wYXJzZUNoaWxkKGN1dHRlbnREaXIsIGNoaWxkLm5hbWUsIHZhbHVlKTtcbiAgICB9KVxuICB9XG59XG5cbi8vIOWIoOmZpOW3suacieeahOWtkOiKgueCuVxuZnVuY3Rpb24gZGVsQ2hpbGQgKGNoaWxkcmVuTGlzdCkge1xuICBjb25zb2xlLmxvZyhjaGlsZHJlbkxpc3QsIDEyMzQ1NjYpXG4gIGNoaWxkcmVuTGlzdC5tYXAoY2hpbGQgPT4ge1xuICAgIGlmIChjaGlsZC5maWxlVHlwZSA9PSAnZGlhZ3JhbScpIHtcbiAgICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci50cmVlLmRtKCkucmVtb3ZlKGNoaWxkKVxuICAgIH1cbiAgfSlcbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiDmlrDlop7lm77nurhcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZSDmmK/lkKbkuLvlm74gLy8g54m55Yir5rOo5oSPLCDmlrDlop7nmoTml7blgJnkvJrpu5jorqTmiZPlvIDlm77nurhcbiAqIEByZXR1cm46XG4gKi9cbmV4cG9ydCBjb25zdCBhZGREaWFncmFtID0gKHsgbmFtZSwgdHlwZSwganNvbiwgc3BhY2VVdWlkLCBhZGRUeXBlIH0pID0+IHtcbiAgdmFyIGRpYWdyYW1UeXBlID0gMFxuICB2YXIgZGlhZ3JhbUpzb25cbiAgdmFyIGRpYWdyYW1TcGFjZVV1aWRcbiAgbGV0IGN1cnJlbnREaXIgPSB3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25zRXhwbG9yZXIudHJlZS5zbSgpLmxkKClcbiAgaWYgKHR5cGVvZiB0eXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRpYWdyYW1UeXBlID0gdHlwZVxuICB9IGVsc2UgaWYgKFxuICAgIGVkaXRvci5kbSAmJlxuICAgIHR5cGVvZiBlZGl0b3IuZG0uZ2V0QXR0cignZGlhZ3JhbVR5cGUnKSAhPT0gJ3VuZGVmaW5lZCdcbiAgKSB7XG4gICAgZGlhZ3JhbVR5cGUgPSBlZGl0b3IuZG0uZ2V0QXR0cignZGlhZ3JhbVR5cGUnKVxuICB9XG4gIGlmICh0eXBlb2YganNvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkaWFncmFtSnNvbiA9IGpzb25cbiAgfSBlbHNlIGlmIChlZGl0b3IuZG0pIHtcbiAgICBkaWFncmFtSnNvbiA9IEpTT04uc3RyaW5naWZ5KHsganNvbjogZWRpdG9yLmRtLnRvSlNPTigpIH0pXG4gIH1cbiAgaWYgKHR5cGVvZiBzcGFjZVV1aWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGlhZ3JhbVNwYWNlVXVpZCA9IHNwYWNlVXVpZFxuICB9IGVsc2UgaWYgKGVkaXRvci5kbSAmJiBlZGl0b3IuZG0uZ2V0QXR0cignc3BhY2VVdWlkJykpIHtcbiAgICBkaWFncmFtU3BhY2VVdWlkID0gZWRpdG9yLmRtLmdldEF0dHIoJ3NwYWNlVXVpZCcpXG4gIH0gZWxzZSBpZiAoY3VycmVudERpcikge1xuICAgIGRpYWdyYW1TcGFjZVV1aWQgPSBjdXJyZW50RGlyLmdldEF0dHIoJ3V1aWQnKVxuICB9XG4gIHJldHVybiByZXF1ZXN0XG4gICAgLnBvc3QoZXhwb3J0QXBpQWRkLCB7XG4gICAgICBpZDogZGlhZ3JhbVNwYWNlVXVpZCxcbiAgICAgIGNvbnRlbnQ6IGRpYWdyYW1Kc29uLFxuICAgICAgLy8gaXNNYWluOiBkaWFncmFtVHlwZSA9PT0gMCA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgIC8vIG5hbWU6IG5hbWVcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIOWIpOaWreaYr+WQpuS4uuaLluaLveaWsOWinizku6XlhY1pZOabv+aNouaOieW3sue7j+aJk+W8gOeahOaWh+S7tlxuICAgICAgaWYgKGFkZFR5cGUgIT09ICdkcm9wJykge1xuICAgICAgICBlZGl0b3IuZG0gJiYgZWRpdG9yLmRtLmEoJ3NwYWNlVXVpZCcsIGRpYWdyYW1TcGFjZVV1aWQpXG4gICAgICAgIGVkaXRvci5kbSAmJiBlZGl0b3IuZG0uYSgndXVpZCcsIHJlcy5kYXRhLmlkKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEBkZXNjcmlwdGlvbjog5a2Y5YWl5paH5Lu25aSH5Lu9XG4gICAgICAgKi9cbiAgICAgIGFkZEZpbGUoXG4gICAgICAgIHJlY292ZXJ5RGF0YVBhdGggKyBleHBvcnRBcGlOYW1lICsgJy8nICsgcmVzLmRhdGEuaWQgKyAnLmpzb24nLFxuICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgc3BhY2VVdWlkOiBkaWFncmFtU3BhY2VVdWlkLFxuICAgICAgICAgIGRpYWdyYW06IGRpYWdyYW1Kc29uLFxuICAgICAgICAgIHR5cGU6IGRpYWdyYW1UeXBlLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9KVxuICAgIC5jYXRjaChlID0+IHtcbiAgICAgIGxldCBkaWFsb2cgPSBuZXcgaHQud2lkZ2V0LkRpYWxvZygpXG4gICAgICBkaWFsb2cuc2V0Q29uZmlnKHtcbiAgICAgICAgdGl0bGU6ICfmlofku7blkI3lhrLnqoEhJyxcbiAgICAgICAgd2lkdGg6IDI1MCxcbiAgICAgICAgaGVpZ2h0OiAxMDAsXG4gICAgICAgIGNvbnRlbnQ6IG5hbWUgKyAn5bey5a2Y5ZyoJyxcbiAgICAgICAgY29udGVudFBhZGRpbmc6IDEwLFxuICAgICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICAgIGNsb3NhYmxlOiB0cnVlLFxuICAgICAgICByZXNpemVNb2RlOiAnd2gnLFxuICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICfnoa7lrponLFxuICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoYnV0dG9uLCBlKSB7XG4gICAgICAgICAgICAgIGRpYWxvZy5oaWRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGJ1dHRvbnNBbGlnbjogJ3JpZ2h0J1xuICAgICAgfSlcbiAgICAgIGRpYWxvZy5zaG93KClcbiAgICB9KVxufVxuZXhwb3J0IGNvbnN0IHJlbmFtZURpYWdyYW0gPSBuYW1lID0+IHtcbiAgdmFyIGxkID0gZWRpdG9yLmV4cGxvcmVyLmxpc3Quc20oKS5sZCgpXG4gIGxldCBpZCA9IGxkLmdldEF0dHIoJ3V1aWQnKVxuICBsZXQgZGlhZ3JhbSA9IEpTT04uc3RyaW5naWZ5KGxkLmdldEF0dHIoJ2pzb24nKSlcbiAgbGV0IGRpYWdyYW1UeXBlID0gbGQuZ2V0QXR0cignZGlhZ3JhbVR5cGUnKVxuICBjb25zb2xlLmxvZyhsZC5nZXRBdHRyKCdzcGFjZVV1aWQnKSwnJHtsZC5nZXRBdHRyc3BhY2VVdWlkJylcbiAgcmV0dXJuIHJlcXVlc3Qoe1xuICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgIHVybDogYC9kaWFncmFtL3VwZGF0ZWAsXG4gICAgZGF0YToge1xuICAgICAgaWQ6IGxkLmdldEF0dHIoJ3NwYWNlVXVpZCcpLFxuICAgICAgY29udGVudDogZGlhZ3JhbVxuICAgIH1cbiAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAvKipcbiAgICAgICAqIEBkZXNjcmlwdGlvbjog5a2Y5YWl5paH5Lu25aSH5Lu9XG4gICAgICAgKi9cbiAgICAgIC8vIGFkZEZpbGUoXG4gICAgICAvLyAgIHJlY292ZXJ5RGF0YVBhdGggKyBleHBvcnRBcGlOYW1lICsgJy8nICsgaWQgKyAnLmpzb24nLFxuICAgICAgLy8gICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAvLyAgICAgc3BhY2VVdWlkOiBsZC5nZXRBdHRyKCdzcGFjZVV1aWQnKSxcbiAgICAgIC8vICAgICBkaWFncmFtLFxuICAgICAgLy8gICAgIHR5cGU6IGRpYWdyYW1UeXBlLFxuICAgICAgLy8gICAgIG5hbWU6IG5hbWUsXG4gICAgICAvLyAgICAgdXVpZDogaWRcbiAgICAgIC8vICAgfSlcbiAgICAgIC8vIClcbiAgICB9KVxufVxuZXhwb3J0IGNvbnN0IHVwZGF0ZURpYWdyYW0gPSAoaWNvbiwgbmFtZSwgZGF0YU1vZGVsKSA9PiB7XG4gIGxldCBkb25lRG0gPSBkYXRhTW9kZWwgPyBkYXRhTW9kZWwgOiBlZGl0b3IuZG1cbiAgdmFyIGRpYWdyYW1UeXBlID1cbiAgICB0eXBlb2YgZG9uZURtLmdldEF0dHIoJ2RpYWdyYW1UeXBlJykgPT09ICd1bmRlZmluZWQnXG4gICAgICA/IDBcbiAgICAgIDogZG9uZURtLmdldEF0dHIoJ2RpYWdyYW1UeXBlJylcbiAgdmFyIGRpYWdyYW1Kc29uID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgIGpzb246IGRvbmVEbS50b0pTT04oKSxcbiAgICBpY29uOiBpY29uXG4gIH0pXG4gIGxldCBzcGFjZVV1aWQgPSBkb25lRG0uZ2V0QXR0cignc3BhY2VVdWlkJylcbiAgdmFyIGlkID0gZG9uZURtLmdldEF0dHIoJ3V1aWQnKVxuICByZXR1cm4gcmVxdWVzdCh7XG4gICAgbWV0aG9kOiAncG9zdCcsXG4gICAgdXJsOiBgL2RpYWdyYW0vdXBkYXRlYCxcbiAgICBkYXRhOiB7XG4gICAgICBpZDogaWQsXG4gICAgICBjb250ZW50OiBkaWFncmFtSnNvbixcbiAgICB9XG4gIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAZGVzY3JpcHRpb246IOWtmOWFpeaWh+S7tuWkh+S7vVxuICAgICAgICovXG4gICAgICBhZGRGaWxlKFxuICAgICAgICByZWNvdmVyeURhdGFQYXRoICsgZXhwb3J0QXBpTmFtZSArICcvJyArIGlkICsgJy5qc29uJyxcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHNwYWNlVXVpZCxcbiAgICAgICAgICBkaWFncmFtOiBkaWFncmFtSnNvbixcbiAgICAgICAgICB0eXBlOiBkaWFncmFtVHlwZSxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHV1aWQ6IGlkXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSlcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOiOt+WPluaOpee6v+WbvuWIl+ihqFxuICovXG5leHBvcnQgY29uc3QgZ2V0RGlhZ3JhbUxpc3QgPSAoKSA9PiB7XG4gIHZhciBzcGFjZUlkID0gd2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uc0V4cGxvcmVyLnRyZWVcbiAgICAuc20oKVxuICAgIC5sZCgpXG4gICAgLmdldEF0dHIoJ3V1aWQnKVxuICByZXR1cm4gcmVxdWVzdFxuICAgIC5nZXQoYC9kaWFncmFtL2dldEJ5SWQvJHtzcGFjZUlkfWApXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB2YXIgcm93cyA9IFtyZXMuZGF0YV1cbiAgICAgIHJvd3NbMF0ubmFtZSA9ICflm77nurgnXG4gICAgICByb3dzWzBdLmpzb24gPSByZXMuZGF0YS5jb250ZW50XG4gICAgICB1cGRhdGVUcmVlKHJvd3MpXG4gICAgICAgIHVwZGF0ZVRyZWUocm93cylcbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgICB9KVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVEaWFncmFtID0gdXVpZHMgPT4ge1xuICByZXR1cm4gcmVxdWVzdFxuICAgIC5wb3N0KGFwaUNvbmZpZy5hcGlSZW1vdmUrYC8ke3V1aWRzLnRvU3RyaW5nKCl9YCwge1xuXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICBnZXREaWFncmFtTGlzdCgpXG4gICAgfSlcbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiDmlrDlop7lm77nurgtLeWkjeWItuWKn+iDveS9v+eUqFxuICogQHBhcmFtIHthcnJheX0gZGF0YXNcbiAqIEByZXR1cm46XG4gKi9cbmV4cG9ydCBjb25zdCBjb3B5RGlhZ3JhbXMgPSAoZGF0YXMsIHNwYWNlVXVpZCkgPT4ge1xuICBsZXQgcmVxcyA9IGRhdGFzLm1hcChkYXRhID0+IHtcbiAgICByZXR1cm4gcmVxdWVzdC5wb3N0KGFwaUNvbmZpZy5hcGlBZGQsIHtcbiAgICAgIHNwYWNlSWQ6IHNwYWNlVXVpZCxcbiAgICAgIGpzb246IEpTT04uc3RyaW5naWZ5KGRhdGEuanNvbiksXG4gICAgICBpc01haW46IGZhbHNlLFxuICAgICAgbmFtZTogYCR7ZGF0YS5uYW1lfV8ke25ldyBEYXRlKCkuZ2V0VGltZSgpfWBcbiAgICB9KVxuICB9KVxuICByZXR1cm4gUHJvbWlzZS5hbGwocmVxcykudGhlbigoKSA9PiB7XG4gICAgZ2V0RGlhZ3JhbUxpc3QoKVxuICB9KVxufVxuIiwiLypcbiAqIEBkZXNjcmlwdGlvbjogZWRpdG9yXG4gKiBAdmVyc2lvbjogMC4wLjFcbiAqIEBBdXRob3I6IGRhaV96aGVuZ1xuICogQERhdGU6IDIwMTktMDktMjMgMTE6MDI6MDNcbiAqIEBMYXN0RWRpdG9yczogUGxlYXNlIHNldCBMYXN0RWRpdG9yc1xuICogQExhc3RFZGl0VGltZTogMjAyMC0wNC0yNCAxMDo1MTo1MVxuICovXG5pbXBvcnQgYXBpQ29uZmlnIGZyb20gJy4uL2FwaS1jb25maWcuanMnXG5pbXBvcnQgcmVxdWVzdCBmcm9tICcuLi9yZXF1ZXN0LmpzJ1xudmFyIHJlY292ZXJ5RGF0YVBhdGggPSBhcGlDb25maWcucmVjb3ZlcnlEYXRhUGF0aFxuY29uc3QgYmFja3VwRmlsZSA9IChwYXRoLCBjb250ZW50KSA9PiB7XG4gIHJlcXVlc3QucG9zdChcbiAgICAnL3BsYXRmb3JtL2ZpbGUvZGlhZ3JhbTJkL3VwbG9hZCcsIHtcbiAgICBjb250ZW50LFxuICAgIGZpbGVVcmw6IHJlY292ZXJ5RGF0YVBhdGggKyBwYXRoXG4gIH0sIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfVxuICB9XG4gIClcbn1cbmNvbnN0IHJlbmFtZUJhY2tVcEZpbGUgPSAobmV3TmFtZSwgb2xkTmFtZSkgPT4ge1xuICByZXF1ZXN0LnBvc3QoJy9wbGF0Zm9ybS9maWxlL3JlTmFtZUZpbGUnLCB7XG4gICAgb2xkRmlsZU5hbWVEaXI6IHJlY292ZXJ5RGF0YVBhdGggKyBvbGROYW1lLFxuICAgIG5ld0ZpbGVOYW1lRGlyOiByZWNvdmVyeURhdGFQYXRoICsgbmV3TmFtZVxuICB9KVxufVxuY29uc3QgZGVsZXRlQmFja1VwRmlsZSA9IHBhdGggPT4ge1xuICByZXF1ZXN0LnBvc3QoJy9wbGF0Zm9ybS9maWxlL2RlbGV0ZScsIHtcbiAgICBmaWxlVXJsOiByZWNvdmVyeURhdGFQYXRoICsgcGF0aFxuICB9KVxufVxuZXhwb3J0IGNvbnN0IGRlbGV0ZUZpbGUgPSBwYXRoID0+IHtcbiAgaWYgKHBhdGguaW5kZXhPZignLicpICE9PSAtMSkge1xuICAgIGRlbGV0ZUJhY2tVcEZpbGUocGF0aClcbiAgfVxuICByZXR1cm4gcmVxdWVzdC5wb3N0KCcvcGxhdGZvcm0vZmlsZS9kZWxldGUnLCB7XG4gICAgZmlsZVVybDogcGF0aFxuICB9KVxufVxuZXhwb3J0IGNvbnN0IGFkZEZpbGUgPSAocGF0aCwgY29udGVudCkgPT4ge1xuICB2YXIgYyA9IGNvbnRlbnRcbiAgdmFyIHAgPSAvXlxccypkYXRhOihbYS16XStcXC9bYS16MC05LSsuXSsoO1thLXotXSs9W2EtejAtOS1dKyk/KT8oO2Jhc2U2NCk/LC9pXG4gIHAudGVzdChjKSAmJiAoYyA9IGMucmVwbGFjZShwLCAnJykpXG4gIGJhY2t1cEZpbGUocGF0aCwgYylcblxuICByZXR1cm4gcmVxdWVzdC5wb3N0KFxuICAgICcvcGxhdGZvcm0vZmlsZS9kaWFncmFtMmQvdXBsb2FkJywge1xuICAgIGNvbnRlbnQ6IGMsXG4gICAgZmlsZVVybDogcGF0aFxuICB9LCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH1cbiAgfVxuICApXG59XG4vLyDojrflj5bmlofku7bliJfooags6I635Y+W5Yiw55qE5piv5Zu+5qCH44CB57uE5Lu244CB6LWE5rqQXG5leHBvcnQgY29uc3QgZ2V0RmlsZUxpc3QgPSBmaWxlTmFtZSA9PiB7IC8vIOatpOaOpeWPo+W3sue7j+iBlOiwg+WujOaIkFxuICByZXR1cm4gcmVxdWVzdCh7XG4gICAgbWV0aG9kOiAncG9zdCcsXG4gICAgdXJsOiAnL3BsYXRmb3JtL2ZpbGUvZ2V0QWxsRmlsZXMnLFxuICAgIGRhdGE6IHtcbiAgICAgIGZpbGVVcmw6IGZpbGVOYW1lXG4gICAgfVxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTWtkaXIgPSBmaWxlTmFtZSA9PiB7XG4gIHJldHVybiByZXF1ZXN0LnBvc3QoJy9wbGF0Zm9ybS9maWxlL2NyZWF0ZURpcicsIHtcbiAgICBmaWxlVXJsOiBmaWxlTmFtZVxuICB9KVxufVxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOmHjeWRveWQjeaWh+S7tlxuICogQHBhcmFtIHtzdHJpbmd9IG5ld05hbWUg5paw5ZCN5a2XXG4gKiBAcGFyYW0ge3N0cmluZ30gb2xkTmFtZSDml6flkI3lrZdcbiAqIEByZXR1cm46XG4gKi9cbmV4cG9ydCBjb25zdCByZW5hbWVGaWxlID0gKG5ld05hbWUsIG9sZE5hbWUpID0+IHtcbiAgcmVuYW1lQmFja1VwRmlsZShuZXdOYW1lLCBvbGROYW1lKVxuICByZXR1cm4gcmVxdWVzdC5wb3N0KCcvcGxhdGZvcm0vZmlsZS9yZU5hbWVGaWxlJywge1xuICAgIG9sZEZpbGVOYW1lRGlyOiBvbGROYW1lLFxuICAgIG5ld0ZpbGVOYW1lRGlyOiBuZXdOYW1lXG4gIH0pXG59XG4vKipcbiAqIEBkZXNjcmlwdGlvbjog6I635Y+W5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZU5hbWUg5paH5Lu26Lev5b6EXG4gKiBAcmV0dXJuOiB7ZGF0YTphcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEZpbGVDb250ID0gZmlsZU5hbWUgPT4ge1xuICByZXR1cm4gcmVxdWVzdC5wb3N0KCcvcGxhdGZvcm0vZmlsZS9nZXRGaWxlQ29udGVudCcsIHtcbiAgICBmaWxlVXJsOiBmaWxlTmFtZVxuICB9KVxufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgd29ya2VyIHRoYXQgZG9lcyBub3RoaW5nIGJ1dCBwYXNzaW5nIGNodW5rcyB0byB0aGUgbmV4dCBvbmUuIFRoaXMgaXMgbGlrZVxuICogYSBub2RlanMgc3RyZWFtIGJ1dCB3aXRoIHNvbWUgZGlmZmVyZW5jZXMuIE9uIHRoZSBnb29kIHNpZGUgOlxuICogLSBpdCB3b3JrcyBvbiBJRSA2LTkgd2l0aG91dCBhbnkgaXNzdWUgLyBwb2x5ZmlsbFxuICogLSBpdCB3ZWlnaHRzIGxlc3MgdGhhbiB0aGUgZnVsbCBkZXBlbmRlbmNpZXMgYnVuZGxlZCB3aXRoIGJyb3dzZXJpZnlcbiAqIC0gaXQgZm9yd2FyZHMgZXJyb3JzIChubyBuZWVkIHRvIGRlY2xhcmUgYW4gZXJyb3IgaGFuZGxlciBFVkVSWVdIRVJFKVxuICpcbiAqIEEgY2h1bmsgaXMgYW4gb2JqZWN0IHdpdGggMiBhdHRyaWJ1dGVzIDogYG1ldGFgIGFuZCBgZGF0YWAuIFRoZSBmb3JtZXIgaXMgYW5cbiAqIG9iamVjdCBjb250YWluaW5nIGFueXRoaW5nIChgcGVyY2VudGAgZm9yIGV4YW1wbGUpLCBzZWUgZWFjaCB3b3JrZXIgZm9yIG1vcmVcbiAqIGRldGFpbHMuIFRoZSBsYXR0ZXIgaXMgdGhlIHJlYWwgZGF0YSAoU3RyaW5nLCBVaW50OEFycmF5LCBldGMpLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgdGhlIG5hbWUgb2YgdGhlIHN0cmVhbSAobWFpbmx5IHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3NlcylcbiAqL1xuZnVuY3Rpb24gR2VuZXJpY1dvcmtlcihuYW1lKSB7XG4gICAgLy8gdGhlIG5hbWUgb2YgdGhlIHdvcmtlclxuICAgIHRoaXMubmFtZSA9IG5hbWUgfHwgXCJkZWZhdWx0XCI7XG4gICAgLy8gYW4gb2JqZWN0IGNvbnRhaW5pbmcgbWV0YWRhdGEgYWJvdXQgdGhlIHdvcmtlcnMgY2hhaW5cbiAgICB0aGlzLnN0cmVhbUluZm8gPSB7fTtcbiAgICAvLyBhbiBlcnJvciB3aGljaCBoYXBwZW5lZCB3aGVuIHRoZSB3b3JrZXIgd2FzIHBhdXNlZFxuICAgIHRoaXMuZ2VuZXJhdGVkRXJyb3IgPSBudWxsO1xuICAgIC8vIGFuIG9iamVjdCBjb250YWluaW5nIG1ldGFkYXRhIHRvIGJlIG1lcmdlZCBieSB0aGlzIHdvcmtlciBpbnRvIHRoZSBnZW5lcmFsIG1ldGFkYXRhXG4gICAgdGhpcy5leHRyYVN0cmVhbUluZm8gPSB7fTtcbiAgICAvLyB0cnVlIGlmIHRoZSBzdHJlYW0gaXMgcGF1c2VkIChhbmQgc2hvdWxkIG5vdCBkbyBhbnl0aGluZyksIGZhbHNlIG90aGVyd2lzZVxuICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgIC8vIHRydWUgaWYgdGhlIHN0cmVhbSBpcyBmaW5pc2hlZCAoYW5kIHNob3VsZCBub3QgZG8gYW55dGhpbmcpLCBmYWxzZSBvdGhlcndpc2VcbiAgICB0aGlzLmlzRmluaXNoZWQgPSBmYWxzZTtcbiAgICAvLyB0cnVlIGlmIHRoZSBzdHJlYW0gaXMgbG9ja2VkIHRvIHByZXZlbnQgZnVydGhlciBzdHJ1Y3R1cmUgdXBkYXRlcyAocGlwZSksIGZhbHNlIG90aGVyd2lzZVxuICAgIHRoaXMuaXNMb2NrZWQgPSBmYWxzZTtcbiAgICAvLyB0aGUgZXZlbnQgbGlzdGVuZXJzXG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge1xuICAgICAgICAnZGF0YSc6W10sXG4gICAgICAgICdlbmQnOltdLFxuICAgICAgICAnZXJyb3InOltdXG4gICAgfTtcbiAgICAvLyB0aGUgcHJldmlvdXMgd29ya2VyLCBpZiBhbnlcbiAgICB0aGlzLnByZXZpb3VzID0gbnVsbDtcbn1cblxuR2VuZXJpY1dvcmtlci5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogUHVzaCBhIGNodW5rIHRvIHRoZSBuZXh0IHdvcmtlcnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNodW5rIHRoZSBjaHVuayB0byBwdXNoXG4gICAgICovXG4gICAgcHVzaCA6IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIGNodW5rKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEVuZCB0aGUgc3RyZWFtLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhpcyBjYWxsIGVuZGVkIHRoZSB3b3JrZXIsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBlbmQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRmluaXNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYW5VcCgpO1xuICAgICAgICAgICAgdGhpcy5pc0ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBFbmQgdGhlIHN0cmVhbSB3aXRoIGFuIGVycm9yLlxuICAgICAqIEBwYXJhbSB7RXJyb3J9IGUgdGhlIGVycm9yIHdoaWNoIGNhdXNlZCB0aGUgcHJlbWF0dXJlIGVuZC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoaXMgY2FsbCBlbmRlZCB0aGUgd29ya2VyIHdpdGggYW4gZXJyb3IsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBlcnJvciA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRmluaXNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMuaXNQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVkRXJyb3IgPSBlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc0ZpbmlzaGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZSk7XG5cbiAgICAgICAgICAgIC8vIGluIHRoZSB3b3JrZXJzIGNoYWluIGV4cGxvZGVkIGluIHRoZSBtaWRkbGUgb2YgdGhlIGNoYWluLFxuICAgICAgICAgICAgLy8gdGhlIGVycm9yIGV2ZW50IHdpbGwgZ28gZG93bndhcmQgYnV0IHdlIGFsc28gbmVlZCB0byBub3RpZnlcbiAgICAgICAgICAgIC8vIHdvcmtlcnMgdXB3YXJkIHRoYXQgdGhlcmUgaGFzIGJlZW4gYW4gZXJyb3IuXG4gICAgICAgICAgICBpZih0aGlzLnByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91cy5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jbGVhblVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBZGQgYSBjYWxsYmFjayBvbiBhbiBldmVudC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgZXZlbnQgKGRhdGEsIGVuZCwgZXJyb3IpXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgdGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkXG4gICAgICogQHJldHVybiB7R2VuZXJpY1dvcmtlcn0gdGhlIGN1cnJlbnQgb2JqZWN0IGZvciBjaGFpbmFiaWxpdHlcbiAgICAgKi9cbiAgICBvbiA6IGZ1bmN0aW9uIChuYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnNbbmFtZV0ucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ2xlYW4gYW55IHJlZmVyZW5jZXMgd2hlbiBhIHdvcmtlciBpcyBlbmRpbmcuXG4gICAgICovXG4gICAgY2xlYW5VcCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdHJlYW1JbmZvID0gdGhpcy5nZW5lcmF0ZWRFcnJvciA9IHRoaXMuZXh0cmFTdHJlYW1JbmZvID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGFuIGV2ZW50LiBUaGlzIHdpbGwgY2FsbCByZWdpc3RlcmVkIGNhbGxiYWNrIHdpdGggdGhlIHByb3ZpZGVkIGFyZy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgZXZlbnQgKGRhdGEsIGVuZCwgZXJyb3IpXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFyZyB0aGUgYXJndW1lbnQgdG8gY2FsbCB0aGUgY2FsbGJhY2sgd2l0aC5cbiAgICAgKi9cbiAgICBlbWl0IDogZnVuY3Rpb24gKG5hbWUsIGFyZykge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJzW25hbWVdKSB7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5fbGlzdGVuZXJzW25hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW25hbWVdW2ldLmNhbGwodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ2hhaW4gYSB3b3JrZXIgd2l0aCBhbiBvdGhlci5cbiAgICAgKiBAcGFyYW0ge1dvcmtlcn0gbmV4dCB0aGUgd29ya2VyIHJlY2VpdmluZyBldmVudHMgZnJvbSB0aGUgY3VycmVudCBvbmUuXG4gICAgICogQHJldHVybiB7d29ya2VyfSB0aGUgbmV4dCB3b3JrZXIgZm9yIGNoYWluYWJpbGl0eVxuICAgICAqL1xuICAgIHBpcGUgOiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgICByZXR1cm4gbmV4dC5yZWdpc3RlclByZXZpb3VzKHRoaXMpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2FtZSBhcyBgcGlwZWAgaW4gdGhlIG90aGVyIGRpcmVjdGlvbi5cbiAgICAgKiBVc2luZyBhbiBBUEkgd2l0aCBgcGlwZShuZXh0KWAgaXMgdmVyeSBlYXN5LlxuICAgICAqIEltcGxlbWVudGluZyB0aGUgQVBJIHdpdGggdGhlIHBvaW50IG9mIHZpZXcgb2YgdGhlIG5leHQgb25lIHJlZ2lzdGVyaW5nXG4gICAgICogYSBzb3VyY2UgaXMgZWFzaWVyLCBzZWUgdGhlIFppcEZpbGVXb3JrZXIuXG4gICAgICogQHBhcmFtIHtXb3JrZXJ9IHByZXZpb3VzIHRoZSBwcmV2aW91cyB3b3JrZXIsIHNlbmRpbmcgZXZlbnRzIHRvIHRoaXMgb25lXG4gICAgICogQHJldHVybiB7V29ya2VyfSB0aGUgY3VycmVudCB3b3JrZXIgZm9yIGNoYWluYWJpbGl0eVxuICAgICAqL1xuICAgIHJlZ2lzdGVyUHJldmlvdXMgOiBmdW5jdGlvbiAocHJldmlvdXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNMb2NrZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHJlYW0gJ1wiICsgdGhpcyArIFwiJyBoYXMgYWxyZWFkeSBiZWVuIHVzZWQuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hhcmluZyB0aGUgc3RyZWFtSW5mby4uLlxuICAgICAgICB0aGlzLnN0cmVhbUluZm8gPSBwcmV2aW91cy5zdHJlYW1JbmZvO1xuICAgICAgICAvLyAuLi4gYW5kIGFkZGluZyBvdXIgb3duIGJpdHNcbiAgICAgICAgdGhpcy5tZXJnZVN0cmVhbUluZm8oKTtcbiAgICAgICAgdGhpcy5wcmV2aW91cyA9ICBwcmV2aW91cztcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBwcmV2aW91cy5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICAgICAgc2VsZi5wcm9jZXNzQ2h1bmsoY2h1bmspO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJldmlvdXMub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwcmV2aW91cy5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgc2VsZi5lcnJvcihlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUGF1c2UgdGhlIHN0cmVhbSBzbyBpdCBkb2Vzbid0IHNlbmQgZXZlbnRzIGFueW1vcmUuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGlzIGNhbGwgcGF1c2VkIHRoZSB3b3JrZXIsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBwYXVzZSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYodGhpcy5pc1BhdXNlZCB8fCB0aGlzLmlzRmluaXNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcblxuICAgICAgICBpZih0aGlzLnByZXZpb3VzKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZXN1bWUgYSBwYXVzZWQgc3RyZWFtLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhpcyBjYWxsIHJlc3VtZWQgdGhlIHdvcmtlciwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIHJlc3VtZSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYoIXRoaXMuaXNQYXVzZWQgfHwgdGhpcy5pc0ZpbmlzaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIGlmIHRydWUsIHRoZSB3b3JrZXIgdHJpZWQgdG8gcmVzdW1lIGJ1dCBmYWlsZWRcbiAgICAgICAgdmFyIHdpdGhFcnJvciA9IGZhbHNlO1xuICAgICAgICBpZih0aGlzLmdlbmVyYXRlZEVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKHRoaXMuZ2VuZXJhdGVkRXJyb3IpO1xuICAgICAgICAgICAgd2l0aEVycm9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLnByZXZpb3VzKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzLnJlc3VtZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICF3aXRoRXJyb3I7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGbHVzaCBhbnkgcmVtYWluaW5nIGJ5dGVzIGFzIHRoZSBzdHJlYW0gaXMgZW5kaW5nLlxuICAgICAqL1xuICAgIGZsdXNoIDogZnVuY3Rpb24gKCkge30sXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyBhIGNodW5rLiBUaGlzIGlzIHVzdWFsbHkgdGhlIG1ldGhvZCBvdmVycmlkZGVuLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaHVuayB0aGUgY2h1bmsgdG8gcHJvY2Vzcy5cbiAgICAgKi9cbiAgICBwcm9jZXNzQ2h1bmsgOiBmdW5jdGlvbihjaHVuaykge1xuICAgICAgICB0aGlzLnB1c2goY2h1bmspO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQWRkIGEga2V5L3ZhbHVlIHRvIGJlIGFkZGVkIGluIHRoZSB3b3JrZXJzIGNoYWluIHN0cmVhbUluZm8gb25jZSBhY3RpdmF0ZWQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSB0aGUga2V5IHRvIHVzZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSB0aGUgYXNzb2NpYXRlZCB2YWx1ZVxuICAgICAqIEByZXR1cm4ge1dvcmtlcn0gdGhlIGN1cnJlbnQgd29ya2VyIGZvciBjaGFpbmFiaWxpdHlcbiAgICAgKi9cbiAgICB3aXRoU3RyZWFtSW5mbyA6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZXh0cmFTdHJlYW1JbmZvW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5tZXJnZVN0cmVhbUluZm8oKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBNZXJnZSB0aGlzIHdvcmtlcidzIHN0cmVhbUluZm8gaW50byB0aGUgY2hhaW4ncyBzdHJlYW1JbmZvLlxuICAgICAqL1xuICAgIG1lcmdlU3RyZWFtSW5mbyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yKHZhciBrZXkgaW4gdGhpcy5leHRyYVN0cmVhbUluZm8pIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5leHRyYVN0cmVhbUluZm8uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdHJlYW1JbmZvW2tleV0gPSB0aGlzLmV4dHJhU3RyZWFtSW5mb1trZXldO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExvY2sgdGhlIHN0cmVhbSB0byBwcmV2ZW50IGZ1cnRoZXIgdXBkYXRlcyBvbiB0aGUgd29ya2VycyBjaGFpbi5cbiAgICAgKiBBZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kLCBhbGwgY2FsbHMgdG8gcGlwZSB3aWxsIGZhaWwuXG4gICAgICovXG4gICAgbG9jazogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0xvY2tlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIgKyB0aGlzICsgXCInIGhhcyBhbHJlYWR5IGJlZW4gdXNlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc0xvY2tlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnByZXZpb3VzKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzLmxvY2soKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFByZXR0eSBwcmludCB0aGUgd29ya2VycyBjaGFpbi5cbiAgICAgKi9cbiAgICB0b1N0cmluZyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1lID0gXCJXb3JrZXIgXCIgKyB0aGlzLm5hbWU7XG4gICAgICAgIGlmICh0aGlzLnByZXZpb3VzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91cyArIFwiIC0+IFwiICsgbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWU7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdlbmVyaWNXb3JrZXI7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBuYXRpdmVGdW5jdGlvblRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhuYXRpdmVGdW5jdGlvblRvU3RyaW5nKS5zcGxpdCgndG9TdHJpbmcnKTtcblxuc2hhcmVkKCdpbnNwZWN0U291cmNlJywgZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xufSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgaGlkZSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBoaWRlKE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCAhPT0gZm9yRWFjaCkgdHJ5IHtcbiAgICBoaWRlKENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufVxuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuYmFzZTY0ID0gdHJ1ZTtcbmV4cG9ydHMuYXJyYXkgPSB0cnVlO1xuZXhwb3J0cy5zdHJpbmcgPSB0cnVlO1xuZXhwb3J0cy5hcnJheWJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgVWludDhBcnJheSAhPT0gXCJ1bmRlZmluZWRcIjtcbmV4cG9ydHMubm9kZWJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCI7XG4vLyBjb250YWlucyB0cnVlIGlmIEpTWmlwIGNhbiByZWFkL2dlbmVyYXRlIFVpbnQ4QXJyYXksIGZhbHNlIG90aGVyd2lzZS5cbmV4cG9ydHMudWludDhhcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiO1xuXG5pZiAodHlwZW9mIEFycmF5QnVmZmVyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZXhwb3J0cy5ibG9iID0gZmFsc2U7XG59XG5lbHNlIHtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgIHRyeSB7XG4gICAgICAgIGV4cG9ydHMuYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7XG4gICAgICAgICAgICB0eXBlOiBcImFwcGxpY2F0aW9uL3ppcFwiXG4gICAgICAgIH0pLnNpemUgPT09IDA7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgQnVpbGRlciA9IHNlbGYuQmxvYkJ1aWxkZXIgfHwgc2VsZi5XZWJLaXRCbG9iQnVpbGRlciB8fCBzZWxmLk1vekJsb2JCdWlsZGVyIHx8IHNlbGYuTVNCbG9iQnVpbGRlcjtcbiAgICAgICAgICAgIHZhciBidWlsZGVyID0gbmV3IEJ1aWxkZXIoKTtcbiAgICAgICAgICAgIGJ1aWxkZXIuYXBwZW5kKGJ1ZmZlcik7XG4gICAgICAgICAgICBleHBvcnRzLmJsb2IgPSBidWlsZGVyLmdldEJsb2IoJ2FwcGxpY2F0aW9uL3ppcCcpLnNpemUgPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuYmxvYiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG50cnkge1xuICAgIGV4cG9ydHMubm9kZXN0cmVhbSA9ICEhcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJykuUmVhZGFibGU7XG59IGNhdGNoKGUpIHtcbiAgICBleHBvcnRzLm5vZGVzdHJlYW0gPSBmYWxzZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgVFlQRURfT0sgPSAgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIFVpbnQxNkFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKTtcblxuZnVuY3Rpb24gX2hhcyhvYmosIGtleSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxuZXhwb3J0cy5hc3NpZ24gPSBmdW5jdGlvbiAob2JqIC8qZnJvbTEsIGZyb20yLCBmcm9tMywgLi4uKi8pIHtcbiAgdmFyIHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICB2YXIgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xuICAgIGlmICghc291cmNlKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgbm9uLW9iamVjdCcpO1xuICAgIH1cblxuICAgIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgICBpZiAoX2hhcyhzb3VyY2UsIHApKSB7XG4gICAgICAgIG9ialtwXSA9IHNvdXJjZVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxuXG4vLyByZWR1Y2UgYnVmZmVyIHNpemUsIGF2b2lkaW5nIG1lbSBjb3B5XG5leHBvcnRzLnNocmlua0J1ZiA9IGZ1bmN0aW9uIChidWYsIHNpemUpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IHNpemUpIHsgcmV0dXJuIGJ1ZjsgfVxuICBpZiAoYnVmLnN1YmFycmF5KSB7IHJldHVybiBidWYuc3ViYXJyYXkoMCwgc2l6ZSk7IH1cbiAgYnVmLmxlbmd0aCA9IHNpemU7XG4gIHJldHVybiBidWY7XG59O1xuXG5cbnZhciBmblR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgaWYgKHNyYy5zdWJhcnJheSAmJiBkZXN0LnN1YmFycmF5KSB7XG4gICAgICBkZXN0LnNldChzcmMuc3ViYXJyYXkoc3JjX29mZnMsIHNyY19vZmZzICsgbGVuKSwgZGVzdF9vZmZzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgdG8gb3JkaW5hcnkgYXJyYXlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0W2Rlc3Rfb2ZmcyArIGldID0gc3JjW3NyY19vZmZzICsgaV07XG4gICAgfVxuICB9LFxuICAvLyBKb2luIGFycmF5IG9mIGNodW5rcyB0byBzaW5nbGUgYXJyYXkuXG4gIGZsYXR0ZW5DaHVua3M6IGZ1bmN0aW9uIChjaHVua3MpIHtcbiAgICB2YXIgaSwgbCwgbGVuLCBwb3MsIGNodW5rLCByZXN1bHQ7XG5cbiAgICAvLyBjYWxjdWxhdGUgZGF0YSBsZW5ndGhcbiAgICBsZW4gPSAwO1xuICAgIGZvciAoaSA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBqb2luIGNodW5rc1xuICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgcG9zID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY2h1bmsgPSBjaHVua3NbaV07XG4gICAgICByZXN1bHQuc2V0KGNodW5rLCBwb3MpO1xuICAgICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgZm5VbnR5cGVkID0ge1xuICBhcnJheVNldDogZnVuY3Rpb24gKGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgY2h1bmtzKTtcbiAgfVxufTtcblxuXG4vLyBFbmFibGUvRGlzYWJsZSB0eXBlZCBhcnJheXMgdXNlLCBmb3IgdGVzdGluZ1xuLy9cbmV4cG9ydHMuc2V0VHlwZWQgPSBmdW5jdGlvbiAob24pIHtcbiAgaWYgKG9uKSB7XG4gICAgZXhwb3J0cy5CdWY4ICA9IFVpbnQ4QXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IFVpbnQxNkFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBJbnQzMkFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVHlwZWQpO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjE2ID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYzMiA9IEFycmF5O1xuICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVW50eXBlZCk7XG4gIH1cbn07XG5cbmV4cG9ydHMuc2V0VHlwZWQoVFlQRURfT0spO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gdG9MZW5ndGgoRS5sZW5ndGgpO1xuICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjIuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGhpZGUoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBzdXBwb3J0ID0gcmVxdWlyZSgnLi9zdXBwb3J0Jyk7XG52YXIgbm9kZWpzVXRpbHMgPSByZXF1aXJlKCcuL25vZGVqc1V0aWxzJyk7XG52YXIgR2VuZXJpY1dvcmtlciA9IHJlcXVpcmUoJy4vc3RyZWFtL0dlbmVyaWNXb3JrZXInKTtcblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBjb21lIGZyb20gcGFrbywgZnJvbSBwYWtvL2xpYi91dGlscy9zdHJpbmdzXG4gKiByZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UsIHNlZSBwYWtvIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrby9cbiAqL1xuXG4vLyBUYWJsZSB3aXRoIHV0ZjggbGVuZ3RocyAoY2FsY3VsYXRlZCBieSBmaXJzdCBieXRlIG9mIHNlcXVlbmNlKVxuLy8gTm90ZSwgdGhhdCA1ICYgNi1ieXRlIHZhbHVlcyBhbmQgc29tZSA0LWJ5dGUgdmFsdWVzIGNhbiBub3QgYmUgcmVwcmVzZW50ZWQgaW4gSlMsXG4vLyBiZWNhdXNlIG1heCBwb3NzaWJsZSBjb2RlcG9pbnQgaXMgMHgxMGZmZmZcbnZhciBfdXRmOGxlbiA9IG5ldyBBcnJheSgyNTYpO1xuZm9yICh2YXIgaT0wOyBpPDI1NjsgaSsrKSB7XG4gIF91dGY4bGVuW2ldID0gKGkgPj0gMjUyID8gNiA6IGkgPj0gMjQ4ID8gNSA6IGkgPj0gMjQwID8gNCA6IGkgPj0gMjI0ID8gMyA6IGkgPj0gMTkyID8gMiA6IDEpO1xufVxuX3V0ZjhsZW5bMjU0XT1fdXRmOGxlblsyNTRdPTE7IC8vIEludmFsaWQgc2VxdWVuY2Ugc3RhcnRcblxuLy8gY29udmVydCBzdHJpbmcgdG8gYXJyYXkgKHR5cGVkLCB3aGVuIHBvc3NpYmxlKVxudmFyIHN0cmluZzJidWYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdmFyIGJ1ZiwgYywgYzIsIG1fcG9zLCBpLCBzdHJfbGVuID0gc3RyLmxlbmd0aCwgYnVmX2xlbiA9IDA7XG5cbiAgICAvLyBjb3VudCBiaW5hcnkgc2l6ZVxuICAgIGZvciAobV9wb3MgPSAwOyBtX3BvcyA8IHN0cl9sZW47IG1fcG9zKyspIHtcbiAgICAgICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcbiAgICAgICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIChtX3BvcysxIDwgc3RyX2xlbikpIHtcbiAgICAgICAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MrMSk7XG4gICAgICAgICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgLSAweGQ4MDApIDw8IDEwKSArIChjMiAtIDB4ZGMwMCk7XG4gICAgICAgICAgICAgICAgbV9wb3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBidWZfbGVuICs9IGMgPCAweDgwID8gMSA6IGMgPCAweDgwMCA/IDIgOiBjIDwgMHgxMDAwMCA/IDMgOiA0O1xuICAgIH1cblxuICAgIC8vIGFsbG9jYXRlIGJ1ZmZlclxuICAgIGlmIChzdXBwb3J0LnVpbnQ4YXJyYXkpIHtcbiAgICAgICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYnVmX2xlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYnVmID0gbmV3IEFycmF5KGJ1Zl9sZW4pO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnRcbiAgICBmb3IgKGk9MCwgbV9wb3MgPSAwOyBpIDwgYnVmX2xlbjsgbV9wb3MrKykge1xuICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpO1xuICAgICAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKG1fcG9zKzEgPCBzdHJfbGVuKSkge1xuICAgICAgICAgICAgYzIgPSBzdHIuY2hhckNvZGVBdChtX3BvcysxKTtcbiAgICAgICAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgICAgICAgICAgICBjID0gMHgxMDAwMCArICgoYyAtIDB4ZDgwMCkgPDwgMTApICsgKGMyIC0gMHhkYzAwKTtcbiAgICAgICAgICAgICAgICBtX3BvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgLyogb25lIGJ5dGUgKi9cbiAgICAgICAgICAgIGJ1ZltpKytdID0gYztcbiAgICAgICAgfSBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIC8qIHR3byBieXRlcyAqL1xuICAgICAgICAgICAgYnVmW2krK10gPSAweEMwIHwgKGMgPj4+IDYpO1xuICAgICAgICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICAgICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkge1xuICAgICAgICAgICAgLyogdGhyZWUgYnl0ZXMgKi9cbiAgICAgICAgICAgIGJ1ZltpKytdID0gMHhFMCB8IChjID4+PiAxMik7XG4gICAgICAgICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuICAgICAgICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8qIGZvdXIgYnl0ZXMgKi9cbiAgICAgICAgICAgIGJ1ZltpKytdID0gMHhmMCB8IChjID4+PiAxOCk7XG4gICAgICAgICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gMTIgJiAweDNmKTtcbiAgICAgICAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiA2ICYgMHgzZik7XG4gICAgICAgICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1Zjtcbn07XG5cbi8vIENhbGN1bGF0ZSBtYXggcG9zc2libGUgcG9zaXRpb24gaW4gdXRmOCBidWZmZXIsXG4vLyB0aGF0IHdpbGwgbm90IGJyZWFrIHNlcXVlbmNlLiBJZiB0aGF0J3Mgbm90IHBvc3NpYmxlXG4vLyAtICh2ZXJ5IHNtYWxsIGxpbWl0cykgcmV0dXJuIG1heCBzaXplIGFzIGlzLlxuLy9cbi8vIGJ1ZltdIC0gdXRmOCBieXRlcyBhcnJheVxuLy8gbWF4ICAgLSBsZW5ndGggbGltaXQgKG1hbmRhdG9yeSk7XG52YXIgdXRmOGJvcmRlciA9IGZ1bmN0aW9uKGJ1ZiwgbWF4KSB7XG4gICAgdmFyIHBvcztcblxuICAgIG1heCA9IG1heCB8fCBidWYubGVuZ3RoO1xuICAgIGlmIChtYXggPiBidWYubGVuZ3RoKSB7IG1heCA9IGJ1Zi5sZW5ndGg7IH1cblxuICAgIC8vIGdvIGJhY2sgZnJvbSBsYXN0IHBvc2l0aW9uLCB1bnRpbCBzdGFydCBvZiBzZXF1ZW5jZSBmb3VuZFxuICAgIHBvcyA9IG1heC0xO1xuICAgIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAweEMwKSA9PT0gMHg4MCkgeyBwb3MtLTsgfVxuXG4gICAgLy8gRnVja3VwIC0gdmVyeSBzbWFsbCBhbmQgYnJva2VuIHNlcXVlbmNlLFxuICAgIC8vIHJldHVybiBtYXgsIGJlY2F1c2Ugd2Ugc2hvdWxkIHJldHVybiBzb21ldGhpbmcgYW55d2F5LlxuICAgIGlmIChwb3MgPCAwKSB7IHJldHVybiBtYXg7IH1cblxuICAgIC8vIElmIHdlIGNhbWUgdG8gc3RhcnQgb2YgYnVmZmVyIC0gdGhhdCBtZWFucyB2dWZmZXIgaXMgdG9vIHNtYWxsLFxuICAgIC8vIHJldHVybiBtYXggdG9vLlxuICAgIGlmIChwb3MgPT09IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gICAgcmV0dXJuIChwb3MgKyBfdXRmOGxlbltidWZbcG9zXV0gPiBtYXgpID8gcG9zIDogbWF4O1xufTtcblxuLy8gY29udmVydCBhcnJheSB0byBzdHJpbmdcbnZhciBidWYyc3RyaW5nID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgIHZhciBzdHIsIGksIG91dCwgYywgY19sZW47XG4gICAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG5cbiAgICAvLyBSZXNlcnZlIG1heCBwb3NzaWJsZSBsZW5ndGggKDIgd29yZHMgcGVyIGNoYXIpXG4gICAgLy8gTkI6IGJ5IHVua25vd24gcmVhc29ucywgQXJyYXkgaXMgc2lnbmlmaWNhbnRseSBmYXN0ZXIgZm9yXG4gICAgLy8gICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkgdGhhbiBVaW50MTZBcnJheS5cbiAgICB2YXIgdXRmMTZidWYgPSBuZXcgQXJyYXkobGVuKjIpO1xuXG4gICAgZm9yIChvdXQ9MCwgaT0wOyBpPGxlbjspIHtcbiAgICAgICAgYyA9IGJ1ZltpKytdO1xuICAgICAgICAvLyBxdWljayBwcm9jZXNzIGFzY2lpXG4gICAgICAgIGlmIChjIDwgMHg4MCkgeyB1dGYxNmJ1ZltvdXQrK10gPSBjOyBjb250aW51ZTsgfVxuXG4gICAgICAgIGNfbGVuID0gX3V0ZjhsZW5bY107XG4gICAgICAgIC8vIHNraXAgNSAmIDYgYnl0ZSBjb2Rlc1xuICAgICAgICBpZiAoY19sZW4gPiA0KSB7IHV0ZjE2YnVmW291dCsrXSA9IDB4ZmZmZDsgaSArPSBjX2xlbi0xOyBjb250aW51ZTsgfVxuXG4gICAgICAgIC8vIGFwcGx5IG1hc2sgb24gZmlyc3QgYnl0ZVxuICAgICAgICBjICY9IGNfbGVuID09PSAyID8gMHgxZiA6IGNfbGVuID09PSAzID8gMHgwZiA6IDB4MDc7XG4gICAgICAgIC8vIGpvaW4gdGhlIHJlc3RcbiAgICAgICAgd2hpbGUgKGNfbGVuID4gMSAmJiBpIDwgbGVuKSB7XG4gICAgICAgICAgICBjID0gKGMgPDwgNikgfCAoYnVmW2krK10gJiAweDNmKTtcbiAgICAgICAgICAgIGNfbGVuLS07XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0ZXJtaW5hdGVkIGJ5IGVuZCBvZiBzdHJpbmc/XG4gICAgICAgIGlmIChjX2xlbiA+IDEpIHsgdXRmMTZidWZbb3V0KytdID0gMHhmZmZkOyBjb250aW51ZTsgfVxuXG4gICAgICAgIGlmIChjIDwgMHgxMDAwMCkge1xuICAgICAgICAgICAgdXRmMTZidWZbb3V0KytdID0gYztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgICAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZDgwMCB8ICgoYyA+PiAxMCkgJiAweDNmZik7XG4gICAgICAgICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGRjMDAgfCAoYyAmIDB4M2ZmKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNocmlua0J1Zih1dGYxNmJ1Ziwgb3V0KVxuICAgIGlmICh1dGYxNmJ1Zi5sZW5ndGggIT09IG91dCkge1xuICAgICAgICBpZih1dGYxNmJ1Zi5zdWJhcnJheSkge1xuICAgICAgICAgICAgdXRmMTZidWYgPSB1dGYxNmJ1Zi5zdWJhcnJheSgwLCBvdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXRmMTZidWYubGVuZ3RoID0gb3V0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgdXRmMTZidWYpO1xuICAgIHJldHVybiB1dGlscy5hcHBseUZyb21DaGFyQ29kZSh1dGYxNmJ1Zik7XG59O1xuXG5cbi8vIFRoYXQncyBhbGwgZm9yIHRoZSBwYWtvIGZ1bmN0aW9ucy5cblxuXG4vKipcbiAqIFRyYW5zZm9ybSBhIGphdmFzY3JpcHQgc3RyaW5nIGludG8gYW4gYXJyYXkgKHR5cGVkIGlmIHBvc3NpYmxlKSBvZiBieXRlcyxcbiAqIFVURi04IGVuY29kZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gZW5jb2RlXG4gKiBAcmV0dXJuIHtBcnJheXxVaW50OEFycmF5fEJ1ZmZlcn0gdGhlIFVURi04IGVuY29kZWQgc3RyaW5nLlxuICovXG5leHBvcnRzLnV0ZjhlbmNvZGUgPSBmdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cikge1xuICAgIGlmIChzdXBwb3J0Lm5vZGVidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVqc1V0aWxzLm5ld0J1ZmZlckZyb20oc3RyLCBcInV0Zi04XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmcyYnVmKHN0cik7XG59O1xuXG5cbi8qKlxuICogVHJhbnNmb3JtIGEgYnl0ZXMgYXJyYXkgKG9yIGEgcmVwcmVzZW50YXRpb24pIHJlcHJlc2VudGluZyBhbiBVVEYtOCBlbmNvZGVkXG4gKiBzdHJpbmcgaW50byBhIGphdmFzY3JpcHQgc3RyaW5nLlxuICogQHBhcmFtIHtBcnJheXxVaW50OEFycmF5fEJ1ZmZlcn0gYnVmIHRoZSBkYXRhIGRlIGRlY29kZVxuICogQHJldHVybiB7U3RyaW5nfSB0aGUgZGVjb2RlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydHMudXRmOGRlY29kZSA9IGZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnVmKSB7XG4gICAgaWYgKHN1cHBvcnQubm9kZWJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gdXRpbHMudHJhbnNmb3JtVG8oXCJub2RlYnVmZmVyXCIsIGJ1ZikudG9TdHJpbmcoXCJ1dGYtOFwiKTtcbiAgICB9XG5cbiAgICBidWYgPSB1dGlscy50cmFuc2Zvcm1UbyhzdXBwb3J0LnVpbnQ4YXJyYXkgPyBcInVpbnQ4YXJyYXlcIiA6IFwiYXJyYXlcIiwgYnVmKTtcblxuICAgIHJldHVybiBidWYyc3RyaW5nKGJ1Zik7XG59O1xuXG4vKipcbiAqIEEgd29ya2VyIHRvIGRlY29kZSB1dGY4IGVuY29kZWQgYmluYXJ5IGNodW5rcyBpbnRvIHN0cmluZyBjaHVua3MuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gVXRmOERlY29kZVdvcmtlcigpIHtcbiAgICBHZW5lcmljV29ya2VyLmNhbGwodGhpcywgXCJ1dGYtOCBkZWNvZGVcIik7XG4gICAgLy8gdGhlIGxhc3QgYnl0ZXMgaWYgYSBjaHVuayBkaWRuJ3QgZW5kIHdpdGggYSBjb21wbGV0ZSBjb2RlcG9pbnQuXG4gICAgdGhpcy5sZWZ0T3ZlciA9IG51bGw7XG59XG51dGlscy5pbmhlcml0cyhVdGY4RGVjb2RlV29ya2VyLCBHZW5lcmljV29ya2VyKTtcblxuLyoqXG4gKiBAc2VlIEdlbmVyaWNXb3JrZXIucHJvY2Vzc0NodW5rXG4gKi9cblV0ZjhEZWNvZGVXb3JrZXIucHJvdG90eXBlLnByb2Nlc3NDaHVuayA9IGZ1bmN0aW9uIChjaHVuaykge1xuXG4gICAgdmFyIGRhdGEgPSB1dGlscy50cmFuc2Zvcm1UbyhzdXBwb3J0LnVpbnQ4YXJyYXkgPyBcInVpbnQ4YXJyYXlcIiA6IFwiYXJyYXlcIiwgY2h1bmsuZGF0YSk7XG5cbiAgICAvLyAxc3Qgc3RlcCwgcmUtdXNlIHdoYXQncyBsZWZ0IG9mIHRoZSBwcmV2aW91cyBjaHVua1xuICAgIGlmICh0aGlzLmxlZnRPdmVyICYmIHRoaXMubGVmdE92ZXIubGVuZ3RoKSB7XG4gICAgICAgIGlmKHN1cHBvcnQudWludDhhcnJheSkge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzRGF0YSA9IGRhdGE7XG4gICAgICAgICAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkocHJldmlvdXNEYXRhLmxlbmd0aCArIHRoaXMubGVmdE92ZXIubGVuZ3RoKTtcbiAgICAgICAgICAgIGRhdGEuc2V0KHRoaXMubGVmdE92ZXIsIDApO1xuICAgICAgICAgICAgZGF0YS5zZXQocHJldmlvdXNEYXRhLCB0aGlzLmxlZnRPdmVyLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5sZWZ0T3Zlci5jb25jYXQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZWZ0T3ZlciA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG5leHRCb3VuZGFyeSA9IHV0Zjhib3JkZXIoZGF0YSk7XG4gICAgdmFyIHVzYWJsZURhdGEgPSBkYXRhO1xuICAgIGlmIChuZXh0Qm91bmRhcnkgIT09IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgIGlmIChzdXBwb3J0LnVpbnQ4YXJyYXkpIHtcbiAgICAgICAgICAgIHVzYWJsZURhdGEgPSBkYXRhLnN1YmFycmF5KDAsIG5leHRCb3VuZGFyeSk7XG4gICAgICAgICAgICB0aGlzLmxlZnRPdmVyID0gZGF0YS5zdWJhcnJheShuZXh0Qm91bmRhcnksIGRhdGEubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVzYWJsZURhdGEgPSBkYXRhLnNsaWNlKDAsIG5leHRCb3VuZGFyeSk7XG4gICAgICAgICAgICB0aGlzLmxlZnRPdmVyID0gZGF0YS5zbGljZShuZXh0Qm91bmRhcnksIGRhdGEubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucHVzaCh7XG4gICAgICAgIGRhdGEgOiBleHBvcnRzLnV0ZjhkZWNvZGUodXNhYmxlRGF0YSksXG4gICAgICAgIG1ldGEgOiBjaHVuay5tZXRhXG4gICAgfSk7XG59O1xuXG4vKipcbiAqIEBzZWUgR2VuZXJpY1dvcmtlci5mbHVzaFxuICovXG5VdGY4RGVjb2RlV29ya2VyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZih0aGlzLmxlZnRPdmVyICYmIHRoaXMubGVmdE92ZXIubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucHVzaCh7XG4gICAgICAgICAgICBkYXRhIDogZXhwb3J0cy51dGY4ZGVjb2RlKHRoaXMubGVmdE92ZXIpLFxuICAgICAgICAgICAgbWV0YSA6IHt9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxlZnRPdmVyID0gbnVsbDtcbiAgICB9XG59O1xuZXhwb3J0cy5VdGY4RGVjb2RlV29ya2VyID0gVXRmOERlY29kZVdvcmtlcjtcblxuLyoqXG4gKiBBIHdvcmtlciB0byBlbmRjb2RlIHN0cmluZyBjaHVua3MgaW50byB1dGY4IGVuY29kZWQgYmluYXJ5IGNodW5rcy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBVdGY4RW5jb2RlV29ya2VyKCkge1xuICAgIEdlbmVyaWNXb3JrZXIuY2FsbCh0aGlzLCBcInV0Zi04IGVuY29kZVwiKTtcbn1cbnV0aWxzLmluaGVyaXRzKFV0ZjhFbmNvZGVXb3JrZXIsIEdlbmVyaWNXb3JrZXIpO1xuXG4vKipcbiAqIEBzZWUgR2VuZXJpY1dvcmtlci5wcm9jZXNzQ2h1bmtcbiAqL1xuVXRmOEVuY29kZVdvcmtlci5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgdGhpcy5wdXNoKHtcbiAgICAgICAgZGF0YSA6IGV4cG9ydHMudXRmOGVuY29kZShjaHVuay5kYXRhKSxcbiAgICAgICAgbWV0YSA6IGNodW5rLm1ldGFcbiAgICB9KTtcbn07XG5leHBvcnRzLlV0ZjhFbmNvZGVXb3JrZXIgPSBVdGY4RW5jb2RlV29ya2VyO1xuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgaGlkZShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pXG4gICAgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmluZC1jb250ZXh0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBmb3JFYWNoLCBtYXAsIGZpbHRlciwgc29tZSwgZXZlcnksIGZpbmQsIGZpbmRJbmRleCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0LCBzcGVjaWZpY0NyZWF0ZSkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhKE5BTUUgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcuY2FsbCh0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCIvKiBnbG9iYWwgUHJvbWlzZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBsb2FkIHRoZSBnbG9iYWwgb2JqZWN0IGZpcnN0OlxuLy8gLSBpdCBzaG91bGQgYmUgYmV0dGVyIGludGVncmF0ZWQgaW4gdGhlIHN5c3RlbSAodW5oYW5kbGVkUmVqZWN0aW9uIGluIG5vZGUpXG4vLyAtIHRoZSBlbnZpcm9ubWVudCBtYXkgaGF2ZSBhIGN1c3RvbSBQcm9taXNlIGltcGxlbWVudGF0aW9uIChzZWUgem9uZS5qcylcbnZhciBFUzZQcm9taXNlID0gbnVsbDtcbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIEVTNlByb21pc2UgPSBQcm9taXNlO1xufSBlbHNlIHtcbiAgICBFUzZQcm9taXNlID0gcmVxdWlyZShcImxpZVwiKTtcbn1cblxuLyoqXG4gKiBMZXQgdGhlIHVzZXIgdXNlL2NoYW5nZSBzb21lIGltcGxlbWVudGF0aW9ucy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUHJvbWlzZTogRVM2UHJvbWlzZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbnZhciBuYXRpdmVJbmRleE9mID0gW10uaW5kZXhPZjtcblxudmFyIE5FR0FUSVZFX1pFUk8gPSAhIW5hdGl2ZUluZGV4T2YgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG52YXIgU0xPUFBZX01FVEhPRCA9IHNsb3BweUFycmF5TWV0aG9kKCdpbmRleE9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogTkVHQVRJVkVfWkVSTyB8fCBTTE9QUFlfTUVUSE9EIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IG5hdGl2ZUluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiLyohXG4gKiBKYXZhU2NyaXB0IENvb2tpZSB2Mi4yLjFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcy1jb29raWUvanMtY29va2llXG4gKlxuICogQ29weXJpZ2h0IDIwMDYsIDIwMTUgS2xhdXMgSGFydGwgJiBGYWduZXIgQnJhY2tcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICovXG47KGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdHZhciByZWdpc3RlcmVkSW5Nb2R1bGVMb2FkZXI7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZmFjdG9yeSk7XG5cdFx0cmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gdHJ1ZTtcblx0fVxuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdFx0cmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gdHJ1ZTtcblx0fVxuXHRpZiAoIXJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlcikge1xuXHRcdHZhciBPbGRDb29raWVzID0gd2luZG93LkNvb2tpZXM7XG5cdFx0dmFyIGFwaSA9IHdpbmRvdy5Db29raWVzID0gZmFjdG9yeSgpO1xuXHRcdGFwaS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0d2luZG93LkNvb2tpZXMgPSBPbGRDb29raWVzO1xuXHRcdFx0cmV0dXJuIGFwaTtcblx0XHR9O1xuXHR9XG59KGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gZXh0ZW5kICgpIHtcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xuXHRcdGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXR0cmlidXRlcyA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0cmVzdWx0W2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBkZWNvZGUgKHMpIHtcblx0XHRyZXR1cm4gcy5yZXBsYWNlKC8oJVswLTlBLVpdezJ9KSsvZywgZGVjb2RlVVJJQ29tcG9uZW50KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGluaXQgKGNvbnZlcnRlcikge1xuXHRcdGZ1bmN0aW9uIGFwaSgpIHt9XG5cblx0XHRmdW5jdGlvbiBzZXQgKGtleSwgdmFsdWUsIGF0dHJpYnV0ZXMpIHtcblx0XHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0YXR0cmlidXRlcyA9IGV4dGVuZCh7XG5cdFx0XHRcdHBhdGg6ICcvJ1xuXHRcdFx0fSwgYXBpLmRlZmF1bHRzLCBhdHRyaWJ1dGVzKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhdHRyaWJ1dGVzLmV4cGlyZXMgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGF0dHJpYnV0ZXMuZXhwaXJlcyA9IG5ldyBEYXRlKG5ldyBEYXRlKCkgKiAxICsgYXR0cmlidXRlcy5leHBpcmVzICogODY0ZSs1KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2UncmUgdXNpbmcgXCJleHBpcmVzXCIgYmVjYXVzZSBcIm1heC1hZ2VcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFXG5cdFx0XHRhdHRyaWJ1dGVzLmV4cGlyZXMgPSBhdHRyaWJ1dGVzLmV4cGlyZXMgPyBhdHRyaWJ1dGVzLmV4cGlyZXMudG9VVENTdHJpbmcoKSA6ICcnO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdFx0XHRpZiAoL15bXFx7XFxbXS8udGVzdChyZXN1bHQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSByZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cblx0XHRcdHZhbHVlID0gY29udmVydGVyLndyaXRlID9cblx0XHRcdFx0Y29udmVydGVyLndyaXRlKHZhbHVlLCBrZXkpIDpcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh2YWx1ZSkpXG5cdFx0XHRcdFx0LnJlcGxhY2UoLyUoMjN8MjR8MjZ8MkJ8M0F8M0N8M0V8M0R8MkZ8M0Z8NDB8NUJ8NUR8NUV8NjB8N0J8N0R8N0MpL2csIGRlY29kZVVSSUNvbXBvbmVudCk7XG5cblx0XHRcdGtleSA9IGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoa2V5KSlcblx0XHRcdFx0LnJlcGxhY2UoLyUoMjN8MjR8MjZ8MkJ8NUV8NjB8N0MpL2csIGRlY29kZVVSSUNvbXBvbmVudClcblx0XHRcdFx0LnJlcGxhY2UoL1tcXChcXCldL2csIGVzY2FwZSk7XG5cblx0XHRcdHZhciBzdHJpbmdpZmllZEF0dHJpYnV0ZXMgPSAnJztcblx0XHRcdGZvciAodmFyIGF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcykge1xuXHRcdFx0XHRpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdHJpbmdpZmllZEF0dHJpYnV0ZXMgKz0gJzsgJyArIGF0dHJpYnV0ZU5hbWU7XG5cdFx0XHRcdGlmIChhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDb25zaWRlcnMgUkZDIDYyNjUgc2VjdGlvbiA1LjI6XG5cdFx0XHRcdC8vIC4uLlxuXHRcdFx0XHQvLyAzLiAgSWYgdGhlIHJlbWFpbmluZyB1bnBhcnNlZC1hdHRyaWJ1dGVzIGNvbnRhaW5zIGEgJXgzQiAoXCI7XCIpXG5cdFx0XHRcdC8vICAgICBjaGFyYWN0ZXI6XG5cdFx0XHRcdC8vIENvbnN1bWUgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIHVucGFyc2VkLWF0dHJpYnV0ZXMgdXAgdG8sXG5cdFx0XHRcdC8vIG5vdCBpbmNsdWRpbmcsIHRoZSBmaXJzdCAleDNCIChcIjtcIikgY2hhcmFjdGVyLlxuXHRcdFx0XHQvLyAuLi5cblx0XHRcdFx0c3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc9JyArIGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0uc3BsaXQoJzsnKVswXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIChkb2N1bWVudC5jb29raWUgPSBrZXkgKyAnPScgKyB2YWx1ZSArIHN0cmluZ2lmaWVkQXR0cmlidXRlcyk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0IChrZXksIGpzb24pIHtcblx0XHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGphciA9IHt9O1xuXHRcdFx0Ly8gVG8gcHJldmVudCB0aGUgZm9yIGxvb3AgaW4gdGhlIGZpcnN0IHBsYWNlIGFzc2lnbiBhbiBlbXB0eSBhcnJheVxuXHRcdFx0Ly8gaW4gY2FzZSB0aGVyZSBhcmUgbm8gY29va2llcyBhdCBhbGwuXG5cdFx0XHR2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZSA/IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKSA6IFtdO1xuXHRcdFx0dmFyIGkgPSAwO1xuXG5cdFx0XHRmb3IgKDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcnRzID0gY29va2llc1tpXS5zcGxpdCgnPScpO1xuXHRcdFx0XHR2YXIgY29va2llID0gcGFydHMuc2xpY2UoMSkuam9pbignPScpO1xuXG5cdFx0XHRcdGlmICghanNvbiAmJiBjb29raWUuY2hhckF0KDApID09PSAnXCInKSB7XG5cdFx0XHRcdFx0Y29va2llID0gY29va2llLnNsaWNlKDEsIC0xKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBkZWNvZGUocGFydHNbMF0pO1xuXHRcdFx0XHRcdGNvb2tpZSA9IChjb252ZXJ0ZXIucmVhZCB8fCBjb252ZXJ0ZXIpKGNvb2tpZSwgbmFtZSkgfHxcblx0XHRcdFx0XHRcdGRlY29kZShjb29raWUpO1xuXG5cdFx0XHRcdFx0aWYgKGpzb24pIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGNvb2tpZSA9IEpTT04ucGFyc2UoY29va2llKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0amFyW25hbWVdID0gY29va2llO1xuXG5cdFx0XHRcdFx0aWYgKGtleSA9PT0gbmFtZSkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ga2V5ID8gamFyW2tleV0gOiBqYXI7XG5cdFx0fVxuXG5cdFx0YXBpLnNldCA9IHNldDtcblx0XHRhcGkuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGdldChrZXksIGZhbHNlIC8qIHJlYWQgYXMgcmF3ICovKTtcblx0XHR9O1xuXHRcdGFwaS5nZXRKU09OID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGdldChrZXksIHRydWUgLyogcmVhZCBhcyBqc29uICovKTtcblx0XHR9O1xuXHRcdGFwaS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5LCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRzZXQoa2V5LCAnJywgZXh0ZW5kKGF0dHJpYnV0ZXMsIHtcblx0XHRcdFx0ZXhwaXJlczogLTFcblx0XHRcdH0pKTtcblx0XHR9O1xuXG5cdFx0YXBpLmRlZmF1bHRzID0ge307XG5cblx0XHRhcGkud2l0aENvbnZlcnRlciA9IGluaXQ7XG5cblx0XHRyZXR1cm4gYXBpO1xuXHR9XG5cblx0cmV0dXJuIGluaXQoZnVuY3Rpb24gKCkge30pO1xufSkpO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhbWV0aG9kIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9yZWdleHAtZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgICBpZiAoc2hhbSkgaGlkZShSZWdFeHAucHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG4gIH1cbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG5cbiAgcmV0dXJuIHJlZ2V4cEV4ZWMuY2FsbChSLCBTKTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fFxuICAgICFwcm9jZXNzLnZlcnNpb24gfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjAuJykgPT09IDAgfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuJykgPT09IDAgJiYgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLjguJykgIT09IDApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7IG5leHRUaWNrOiBuZXh0VGljayB9O1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzLCBpO1xuICBzd2l0Y2ggKGxlbikge1xuICBjYXNlIDA6XG4gIGNhc2UgMTpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gIGNhc2UgMjpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tPbmUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEpO1xuICAgIH0pO1xuICBjYXNlIDM6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVHdvKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyKTtcbiAgICB9KTtcbiAgY2FzZSA0OlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1RocmVlKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9KTtcbiAgZGVmYXVsdDpcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrKCkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSk7XG4gIH1cbn1cblxuIiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiB0aGlzIGlzIHJ1bm5pbmcgaW4gTm9kZWpzLCB3aWxsIGJlIHVuZGVmaW5lZCBpbiBhIGJyb3dzZXIuXG4gICAgICogSW4gYSBicm93c2VyLCBicm93c2VyaWZ5IHdvbid0IGluY2x1ZGUgdGhpcyBmaWxlIGFuZCB0aGUgd2hvbGUgbW9kdWxlXG4gICAgICogd2lsbCBiZSByZXNvbHZlZCBhbiBlbXB0eSBvYmplY3QuXG4gICAgICovXG4gICAgaXNOb2RlIDogdHlwZW9mIEJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIixcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgbm9kZWpzIEJ1ZmZlciBmcm9tIGFuIGV4aXN0aW5nIGNvbnRlbnQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgdGhlIGRhdGEgdG8gcGFzcyB0byB0aGUgY29uc3RydWN0b3IuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVuY29kaW5nIHRoZSBlbmNvZGluZyB0byB1c2UuXG4gICAgICogQHJldHVybiB7QnVmZmVyfSBhIG5ldyBCdWZmZXIuXG4gICAgICovXG4gICAgbmV3QnVmZmVyRnJvbTogZnVuY3Rpb24oZGF0YSwgZW5jb2RpbmcpIHtcbiAgICAgICAgaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20pIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBTYWZlZ3VhcmQgZm9yIG9sZCBOb2RlLmpzIHZlcnNpb25zLiBPbiBuZXdlciB2ZXJzaW9ucyxcbiAgICAgICAgICAgICAgICAvLyBCdWZmZXIuZnJvbShudW1iZXIpIC8gQnVmZmVyKG51bWJlciwgZW5jb2RpbmcpIGFscmVhZHkgdGhyb3cuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIFxcXCJkYXRhXFxcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyKGRhdGEsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IG5vZGVqcyBCdWZmZXIgd2l0aCB0aGUgc3BlY2lmaWVkIHNpemUuXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBzaXplIHRoZSBzaXplIG9mIHRoZSBidWZmZXIuXG4gICAgICogQHJldHVybiB7QnVmZmVyfSBhIG5ldyBCdWZmZXIuXG4gICAgICovXG4gICAgYWxsb2NCdWZmZXI6IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICAgIGlmIChCdWZmZXIuYWxsb2MpIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2Moc2l6ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgICAgICAgICAgIGJ1Zi5maWxsKDApO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogRmluZCBvdXQgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBiIHRoZSBvYmplY3QgdG8gdGVzdC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSBvYmplY3QgaXMgYSBCdWZmZXIsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBpc0J1ZmZlciA6IGZ1bmN0aW9uKGIpe1xuICAgICAgICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGIpO1xuICAgIH0sXG5cbiAgICBpc1N0cmVhbSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJlxuICAgICAgICAgICAgdHlwZW9mIG9iai5vbiA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICB0eXBlb2Ygb2JqLnBhdXNlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvYmoucmVzdW1lID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICh0b1N0cmluZyAhPT0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nKSB7XG4gIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIWFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYXJlZCgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGxlbmd0aCwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgc2xvcHB5QXJyYXlNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2xvcHB5LWFycmF5LW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gc2xvcHB5QXJyYXlNZXRob2QoJ2ZvckVhY2gnKSA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0gOiBbXS5mb3JFYWNoO1xuIiwiLy8gYSBzdHJpbmcgb2YgYWxsIHZhbGlkIHVuaWNvZGUgd2hpdGVzcGFjZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gIVN0cmluZyhTeW1ib2woKSk7XG59KTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgbmF0aXZlRGF0ZVRvU3RyaW5nID0gRGF0ZVByb3RvdHlwZVtUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG90eXBlLmdldFRpbWU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVkZWZpbmUoRGF0ZVByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyBuYXRpdmVEYXRlVG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIHNjcmlwdCA9ICdzY3JpcHQnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBqcyA9ICdqYXZhJyArIHNjcmlwdCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gU3RyaW5nKGpzKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArIHNjcmlwdCArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy8nICsgc2NyaXB0ICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSAkZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgUmVmbGVjdEFwcGx5KHRoaXMubGlzdGVuZXIsIHRoaXMudGFyZ2V0LCBhcmdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IGV4cG9ydHM7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHBuYS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcG5hLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cbiAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBjb3JrUmVxO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5lbmQoKTtcbiAgY2IoZXJyKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXh0ZXJuYWwgPSByZXF1aXJlKFwiLi9leHRlcm5hbFwiKTtcbnZhciBEYXRhV29ya2VyID0gcmVxdWlyZSgnLi9zdHJlYW0vRGF0YVdvcmtlcicpO1xudmFyIERhdGFMZW5ndGhQcm9iZSA9IHJlcXVpcmUoJy4vc3RyZWFtL0RhdGFMZW5ndGhQcm9iZScpO1xudmFyIENyYzMyUHJvYmUgPSByZXF1aXJlKCcuL3N0cmVhbS9DcmMzMlByb2JlJyk7XG52YXIgRGF0YUxlbmd0aFByb2JlID0gcmVxdWlyZSgnLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlJyk7XG5cbi8qKlxuICogUmVwcmVzZW50IGEgY29tcHJlc3NlZCBvYmplY3QsIHdpdGggZXZlcnl0aGluZyBuZWVkZWQgdG8gZGVjb21wcmVzcyBpdC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtudW1iZXJ9IGNvbXByZXNzZWRTaXplIHRoZSBzaXplIG9mIHRoZSBkYXRhIGNvbXByZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gdW5jb21wcmVzc2VkU2l6ZSB0aGUgc2l6ZSBvZiB0aGUgZGF0YSBhZnRlciBkZWNvbXByZXNzaW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGNyYzMyIHRoZSBjcmMzMiBvZiB0aGUgZGVjb21wcmVzc2VkIGZpbGUuXG4gKiBAcGFyYW0ge29iamVjdH0gY29tcHJlc3Npb24gdGhlIHR5cGUgb2YgY29tcHJlc3Npb24sIHNlZSBsaWIvY29tcHJlc3Npb25zLmpzLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGRhdGEgdGhlIGNvbXByZXNzZWQgZGF0YS5cbiAqL1xuZnVuY3Rpb24gQ29tcHJlc3NlZE9iamVjdChjb21wcmVzc2VkU2l6ZSwgdW5jb21wcmVzc2VkU2l6ZSwgY3JjMzIsIGNvbXByZXNzaW9uLCBkYXRhKSB7XG4gICAgdGhpcy5jb21wcmVzc2VkU2l6ZSA9IGNvbXByZXNzZWRTaXplO1xuICAgIHRoaXMudW5jb21wcmVzc2VkU2l6ZSA9IHVuY29tcHJlc3NlZFNpemU7XG4gICAgdGhpcy5jcmMzMiA9IGNyYzMyO1xuICAgIHRoaXMuY29tcHJlc3Npb24gPSBjb21wcmVzc2lvbjtcbiAgICB0aGlzLmNvbXByZXNzZWRDb250ZW50ID0gZGF0YTtcbn1cblxuQ29tcHJlc3NlZE9iamVjdC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgd29ya2VyIHRvIGdldCB0aGUgdW5jb21wcmVzc2VkIGNvbnRlbnQuXG4gICAgICogQHJldHVybiB7R2VuZXJpY1dvcmtlcn0gdGhlIHdvcmtlci5cbiAgICAgKi9cbiAgICBnZXRDb250ZW50V29ya2VyIDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd29ya2VyID0gbmV3IERhdGFXb3JrZXIoZXh0ZXJuYWwuUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKVxuICAgICAgICAucGlwZSh0aGlzLmNvbXByZXNzaW9uLnVuY29tcHJlc3NXb3JrZXIoKSlcbiAgICAgICAgLnBpcGUobmV3IERhdGFMZW5ndGhQcm9iZShcImRhdGFfbGVuZ3RoXCIpKTtcblxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHdvcmtlci5vbihcImVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZih0aGlzLnN0cmVhbUluZm9bJ2RhdGFfbGVuZ3RoJ10gIT09IHRoYXQudW5jb21wcmVzc2VkU2l6ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJ1ZyA6IHVuY29tcHJlc3NlZCBkYXRhIHNpemUgbWlzbWF0Y2hcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd29ya2VyO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgd29ya2VyIHRvIGdldCB0aGUgY29tcHJlc3NlZCBjb250ZW50LlxuICAgICAqIEByZXR1cm4ge0dlbmVyaWNXb3JrZXJ9IHRoZSB3b3JrZXIuXG4gICAgICovXG4gICAgZ2V0Q29tcHJlc3NlZFdvcmtlciA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhV29ya2VyKGV4dGVybmFsLlByb21pc2UucmVzb2x2ZSh0aGlzLmNvbXByZXNzZWRDb250ZW50KSlcbiAgICAgICAgLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3NlZFNpemVcIiwgdGhpcy5jb21wcmVzc2VkU2l6ZSlcbiAgICAgICAgLndpdGhTdHJlYW1JbmZvKFwidW5jb21wcmVzc2VkU2l6ZVwiLCB0aGlzLnVuY29tcHJlc3NlZFNpemUpXG4gICAgICAgIC53aXRoU3RyZWFtSW5mbyhcImNyYzMyXCIsIHRoaXMuY3JjMzIpXG4gICAgICAgIC53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzaW9uXCIsIHRoaXMuY29tcHJlc3Npb24pXG4gICAgICAgIDtcbiAgICB9XG59O1xuXG4vKipcbiAqIENoYWluIHRoZSBnaXZlbiB3b3JrZXIgd2l0aCBvdGhlciB3b3JrZXJzIHRvIGNvbXByZXNzIHRoZSBjb250ZW50IHdpdGggdGhlXG4gKiBnaXZlbiBjb21wcmVzaW9uLlxuICogQHBhcmFtIHtHZW5lcmljV29ya2VyfSB1bmNvbXByZXNzZWRXb3JrZXIgdGhlIHdvcmtlciB0byBwaXBlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbXByZXNzaW9uIHRoZSBjb21wcmVzc2lvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gY29tcHJlc3Npb25PcHRpb25zIHRoZSBvcHRpb25zIHRvIHVzZSB3aGVuIGNvbXByZXNzaW5nLlxuICogQHJldHVybiB7R2VuZXJpY1dvcmtlcn0gdGhlIG5ldyB3b3JrZXIgY29tcHJlc3NpbmcgdGhlIGNvbnRlbnQuXG4gKi9cbkNvbXByZXNzZWRPYmplY3QuY3JlYXRlV29ya2VyRnJvbSA9IGZ1bmN0aW9uICh1bmNvbXByZXNzZWRXb3JrZXIsIGNvbXByZXNzaW9uLCBjb21wcmVzc2lvbk9wdGlvbnMpIHtcbiAgICByZXR1cm4gdW5jb21wcmVzc2VkV29ya2VyXG4gICAgLnBpcGUobmV3IENyYzMyUHJvYmUoKSlcbiAgICAucGlwZShuZXcgRGF0YUxlbmd0aFByb2JlKFwidW5jb21wcmVzc2VkU2l6ZVwiKSlcbiAgICAucGlwZShjb21wcmVzc2lvbi5jb21wcmVzc1dvcmtlcihjb21wcmVzc2lvbk9wdGlvbnMpKVxuICAgIC5waXBlKG5ldyBEYXRhTGVuZ3RoUHJvYmUoXCJjb21wcmVzc2VkU2l6ZVwiKSlcbiAgICAud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2lvblwiLCBjb21wcmVzc2lvbik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXByZXNzZWRPYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBjb21lIGZyb20gcGFrbywgZnJvbSBwYWtvL2xpYi96bGliL2NyYzMyLmpzXG4gKiByZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UsIHNlZSBwYWtvIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrby9cbiAqL1xuXG4vLyBVc2Ugb3JkaW5hcnkgYXJyYXksIHNpbmNlIHVudHlwZWQgbWFrZXMgbm8gYm9vc3QgaGVyZVxuZnVuY3Rpb24gbWFrZVRhYmxlKCkge1xuICAgIHZhciBjLCB0YWJsZSA9IFtdO1xuXG4gICAgZm9yKHZhciBuID0wOyBuIDwgMjU2OyBuKyspe1xuICAgICAgICBjID0gbjtcbiAgICAgICAgZm9yKHZhciBrID0wOyBrIDwgODsgaysrKXtcbiAgICAgICAgICAgIGMgPSAoKGMmMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuICAgICAgICB9XG4gICAgICAgIHRhYmxlW25dID0gYztcbiAgICB9XG5cbiAgICByZXR1cm4gdGFibGU7XG59XG5cbi8vIENyZWF0ZSB0YWJsZSBvbiBsb2FkLiBKdXN0IDI1NSBzaWduZWQgbG9uZ3MuIE5vdCBhIHByb2JsZW0uXG52YXIgY3JjVGFibGUgPSBtYWtlVGFibGUoKTtcblxuXG5mdW5jdGlvbiBjcmMzMihjcmMsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgICB2YXIgdCA9IGNyY1RhYmxlLCBlbmQgPSBwb3MgKyBsZW47XG5cbiAgICBjcmMgPSBjcmMgXiAoLTEpO1xuXG4gICAgZm9yICh2YXIgaSA9IHBvczsgaSA8IGVuZDsgaSsrICkge1xuICAgICAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRbKGNyYyBeIGJ1ZltpXSkgJiAweEZGXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcbn1cblxuLy8gVGhhdCdzIGFsbCBmb3IgdGhlIHBha28gZnVuY3Rpb25zLlxuXG4vKipcbiAqIENvbXB1dGUgdGhlIGNyYzMyIG9mIGEgc3RyaW5nLlxuICogVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgdGhlIGZ1bmN0aW9uIGNyYzMyLCBidXQgZm9yIHN0cmluZ3MuIFVzaW5nIHRoZVxuICogc2FtZSBmdW5jdGlvbiBmb3IgdGhlIHR3byB1c2UgY2FzZXMgbGVhZHMgdG8gaG9ycmlibGUgcGVyZm9ybWFuY2VzLlxuICogQHBhcmFtIHtOdW1iZXJ9IGNyYyB0aGUgc3RhcnRpbmcgdmFsdWUgb2YgdGhlIGNyYy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgdGhlIHN0cmluZyB0byB1c2UuXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuIHRoZSBsZW5ndGggb2YgdGhlIHN0cmluZy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwb3MgdGhlIHN0YXJ0aW5nIHBvc2l0aW9uIGZvciB0aGUgY3JjMzIgY29tcHV0YXRpb24uXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBjb21wdXRlZCBjcmMzMi5cbiAqL1xuZnVuY3Rpb24gY3JjMzJzdHIoY3JjLCBzdHIsIGxlbiwgcG9zKSB7XG4gICAgdmFyIHQgPSBjcmNUYWJsZSwgZW5kID0gcG9zICsgbGVuO1xuXG4gICAgY3JjID0gY3JjIF4gKC0xKTtcblxuICAgIGZvciAodmFyIGkgPSBwb3M7IGkgPCBlbmQ7IGkrKyApIHtcbiAgICAgICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0WyhjcmMgXiBzdHIuY2hhckNvZGVBdChpKSkgJiAweEZGXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmMzMndyYXBwZXIoaW5wdXQsIGNyYykge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwidW5kZWZpbmVkXCIgfHwgIWlucHV0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgaXNBcnJheSA9IHV0aWxzLmdldFR5cGVPZihpbnB1dCkgIT09IFwic3RyaW5nXCI7XG5cbiAgICBpZihpc0FycmF5KSB7XG4gICAgICAgIHJldHVybiBjcmMzMihjcmN8MCwgaW5wdXQsIGlucHV0Lmxlbmd0aCwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyYzMyc3RyKGNyY3wwLCBpbnB1dCwgaW5wdXQubGVuZ3RoLCAwKTtcbiAgICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAyOiAgICAgICduZWVkIGRpY3Rpb25hcnknLCAgICAgLyogWl9ORUVEX0RJQ1QgICAgICAgMiAgKi9cbiAgMTogICAgICAnc3RyZWFtIGVuZCcsICAgICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovXG4gIDA6ICAgICAgJycsICAgICAgICAgICAgICAgICAgICAvKiBaX09LICAgICAgICAgICAgICAwICAqL1xuICAnLTEnOiAgICdmaWxlIGVycm9yJywgICAgICAgICAgLyogWl9FUlJOTyAgICAgICAgICgtMSkgKi9cbiAgJy0yJzogICAnc3RyZWFtIGVycm9yJywgICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovXG4gICctMyc6ICAgJ2RhdGEgZXJyb3InLCAgICAgICAgICAvKiBaX0RBVEFfRVJST1IgICAgKC0zKSAqL1xuICAnLTQnOiAgICdpbnN1ZmZpY2llbnQgbWVtb3J5JywgLyogWl9NRU1fRVJST1IgICAgICgtNCkgKi9cbiAgJy01JzogICAnYnVmZmVyIGVycm9yJywgICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovXG4gICctNic6ICAgJ2luY29tcGF0aWJsZSB2ZXJzaW9uJyAvKiBaX1ZFUlNJT05fRVJST1IgKC02KSAqL1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUnKTtcbnZhciBob3N0UmVwb3J0RXJyb3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycycpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlci1hZ2VudCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRmZXRjaCA9IGdsb2JhbC5mZXRjaDtcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbU1BFQ0lFU10gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgfTtcbiAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICByZXR1cm4gISgoSVNfTk9ERSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgJiYgKCFJU19QVVJFIHx8IHByb21pc2VbJ2ZpbmFsbHknXSlcbiAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTEpO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIGlzUmVqZWN0KSB7XG4gIGlmIChzdGF0ZS5ub3RpZmllZCkgcmV0dXJuO1xuICBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHN0YXRlLnJlYWN0aW9ucztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gY2hhaW5baW5kZXgrK107XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRCkgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSwgc3RhdGUpO1xuICAgICAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gY2FuIHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5yZWFjdGlvbnMgPSBbXTtcbiAgICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKSBvblVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gIH0pO1xufTtcblxudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gIHZhciBldmVudCwgaGFuZGxlcjtcbiAgaWYgKERJU1BBVENIX0VWRU5UKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBldmVudC5yZWFzb24gPSByZWFzb247XG4gICAgZXZlbnQuaW5pdEV2ZW50KG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0gZWxzZSBldmVudCA9IHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiByZWFzb24gfTtcbiAgaWYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSBoYW5kbGVyKGV2ZW50KTtcbiAgZWxzZSBpZiAobmFtZSA9PT0gVU5IQU5ETEVEX1JFSkVDVElPTikgaG9zdFJlcG9ydEVycm9ycygnVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgcmVhc29uKTtcbn07XG5cbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgdmFyIElTX1VOSEFORExFRCA9IGlzVW5oYW5kbGVkKHN0YXRlKTtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmIChJU19VTkhBTkRMRUQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChVTkhBTkRMRURfUkVKRUNUSU9OLCBwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBzdGF0ZS5yZWplY3Rpb24gPSBJU19OT0RFIHx8IGlzVW5oYW5kbGVkKHN0YXRlKSA/IFVOSEFORExFRCA6IEhBTkRMRUQ7XG4gICAgICBpZiAocmVzdWx0LmVycm9yKSB0aHJvdyByZXN1bHQudmFsdWU7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUucmVqZWN0aW9uICE9PSBIQU5ETEVEICYmICFzdGF0ZS5wYXJlbnQ7XG59O1xuXG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBwcm9taXNlLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAocHJvbWlzZSwgc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICB2YXIgdGhlbiA9IGlzVGhlbmFibGUodmFsdWUpO1xuICAgIGlmICh0aGVuKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdChwcm9taXNlLCB3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHByb21pc2UsIHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoYmluZChpbnRlcm5hbFJlc29sdmUsIHRoaXMsIHN0YXRlKSwgYmluZChpbnRlcm5hbFJlamVjdCwgdGhpcywgc3RhdGUpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaW50ZXJuYWxSZWplY3QodGhpcywgc3RhdGUsIGVycm9yKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIHR5cGU6IFBST01JU0UsXG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIG5vdGlmaWVkOiBmYWxzZSxcbiAgICAgIHBhcmVudDogZmFsc2UsXG4gICAgICByZWFjdGlvbnM6IFtdLFxuICAgICAgcmVqZWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0YXRlOiBQRU5ESU5HLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZWRlZmluZUFsbChQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLnRoZW5gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnJlYWN0aW9ucy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmIChzdGF0ZS5zdGF0ZSAhPSBQRU5ESU5HKSBub3RpZnkodGhpcywgc3RhdGUsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHByb21pc2UpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gYmluZChpbnRlcm5hbFJlc29sdmUsIHByb21pc2UsIHN0YXRlKTtcbiAgICB0aGlzLnJlamVjdCA9IGJpbmQoaW50ZXJuYWxSZWplY3QsIHByb21pc2UsIHN0YXRlKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicpIHtcbiAgICBuYXRpdmVUaGVuID0gTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUudGhlbjtcblxuICAgIC8vIHdyYXAgbmF0aXZlIFByb21pc2UjdGhlbiBmb3IgbmF0aXZlIGFzeW5jIGZ1bmN0aW9uc1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbmF0aXZlVGhlbi5jYWxsKHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShQcm9taXNlQ29uc3RydWN0b3IsICRmZXRjaC5hcHBseShnbG9iYWwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IHBhdGhbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoSVNfUFVSRSAmJiB0aGlzID09PSBQcm9taXNlV3JhcHBlciA/IFByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgLy8gYFByb21pc2UuYWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIGBQcm9taXNlLnJhY2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBoaWRlKENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkgaGlkZShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGhpZGUoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qXG4gKiBAZGVzY3JpcHRpb246IGVkaXRvclxuICogQHZlcnNpb246IDAuMC4xXG4gKiBAQXV0aG9yOiBkYWlfemhlbmdcbiAqIEBEYXRlOiAyMDE5LTA5LTIzIDExOjEwOjU5XG4gKiBATGFzdEVkaXRvcnM6IFBsZWFzZSBzZXQgTGFzdEVkaXRvcnNcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjAtMDgtMTkgMTM6NTU6MTRcbiAqL1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAnLi4vcmVxdWVzdC5qcydcbi8vIOWKoOi9veWFqOmDqOagkVxuZXhwb3J0IGNvbnN0IGdldFRyZWUgPSAoKSA9PiB7XG4gIHJldHVybiByZXF1ZXN0KHtcbiAgICB1cmw6IGAvZGV2aWNlL3NwYWNlL2dldFNwYWNlVHJlZWAsXG4gICAgbWV0aG9kOiAnZ2V0J1xuICB9KVxufVxuLy8g5Yqg6L295oeS5Yqg6L295qCRXG4vLyDojrflj5bmoJHoioLngrnliJfooajvvIzluKblhbPms6hcbi8vIGV4cG9ydCBjb25zdCBnZXRUcmVlTGFuID0gKHBhcmVudElkKSA9PiB7XG4vLyAgIHJldHVybiByZXF1ZXN0KHtcbi8vICAgICB1cmw6IGAvcGxhdGZvcm0vdXNlclNwYWNlL2p1ZGdlSXNVc2VyU3BhY2UvJHtwYXJlbnRJZH1gLFxuLy8gICAgIG1ldGhvZDogJ2dldCdcbi8vICAgfSlcbi8vIH1cblxuZXhwb3J0IGNvbnN0IGdldFRyZWVMYW4gPSAocGFyZW50SWQpID0+IHtcbiAgcmV0dXJuIHJlcXVlc3Qoe1xuICAgIHVybDogYC9kZXZpY2Uvc3BhY2UvZ2V0TGF6eVJlZ2lvblRyZWVgLFxuICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgIHBhcmFtczoge1xuICAgICAgcGFyZW50SWQ6IHBhcmVudElkLFxuICAgICAgbm9kZVR5cGU6ICcnLFxuICAgICAgdHlwZTogJ2FsYXJtLWV2ZW50J1xuICAgIH1cbiAgfSlcbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiDojrflj5bnq5nngrnor6bmg4VcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFRyZWVEZXRhaWwgPSB1dWlkID0+IHtcbiAgcmV0dXJuIHJlcXVlc3QucG9zdCgnL2RldmljZS9zcGFjZS9nZXRTcGFjZUJhc2ljQW5kR3JvdXBCeVNwYWNlSWQnLCB7XG4gICAgdXVpZFxuICB9KVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QobmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKFdlYWtNYXApKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMTUnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltID0gL15cXHMrfFxccyskL2csXG4gICAgICByZVRyaW1TdGFydCA9IC9eXFxzKy8sXG4gICAgICByZVRyaW1FbmQgPSAvXFxzKyQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gICAqL1xuICBmdW5jdGlvbiBjb3VudEhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gMDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICsrcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICAgKi9cbiAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICB2YXIgZGF0YSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICByZXN1bHQucHVzaChkYXRhLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGl0cyB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb1BhaXJzKHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW3ZhbHVlLCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubGFzdEluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGEgVW5pY29kZSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBgY29udGV4dGAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gQ3JlYXRlIGEgc3VwZWQtdXAgYGRlZmVyYCBpbiBOb2RlLmpzLlxuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgdmFyIHJ1bkluQ29udGV4dCA9IChmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSk7XG5cbiAgICAvKiogQnVpbHQtaW4gY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG4gICAgdmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgICAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xuICAgIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sLFxuICAgICAgICBVaW50OEFycmF5ID0gY29udGV4dC5VaW50OEFycmF5LFxuICAgICAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgICAgICBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICAgICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKSk7XG5cbiAgICAvKiogTW9ja2VkIGJ1aWx0LWlucy4gKi9cbiAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBjdHhOb3cgPSBEYXRlICYmIERhdGUubm93ICE9PSByb290LkRhdGUubm93ICYmIERhdGUubm93LFxuICAgICAgICBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgICAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luLFxuICAgICAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluLFxuICAgICAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICAgICAgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbiAgICB2YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUoY29udGV4dCwgJ0RhdGFWaWV3JyksXG4gICAgICAgIE1hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnTWFwJyksXG4gICAgICAgIFByb21pc2UgPSBnZXROYXRpdmUoY29udGV4dCwgJ1Byb21pc2UnKSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpLFxuICAgICAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbiAgICAvKiogVXNlZCB0byBzdG9yZSBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgICB2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cbiAgICAvKiogVXNlZCB0byBsb29rdXAgdW5taW5pZmllZCBmdW5jdGlvbiBuYW1lcy4gKi9cbiAgICB2YXIgcmVhbE5hbWVzID0ge307XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgICAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgICAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICAgICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xuICAgIHZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzLiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsXG4gICAgICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG4gICAgICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICAgICAqIGFuZCByZXR1cm4gdGhlIHVud3JhcHBlZCB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluIHNlcXVlbmNlcywgd2hpY2ggbXVzdCBiZSB1bndyYXBwZWQgd2l0aCBgXyN2YWx1ZWAsIG1heSBiZVxuICAgICAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuICAgICAqXG4gICAgICogVGhlIGV4ZWN1dGlvbiBvZiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgaXQncyBkZWZlcnJlZCB1bnRpbFxuICAgICAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uXG4gICAgICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcbiAgICAgKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBpdGVyYXRlZSBleGVjdXRpb25zLiBTZWN0aW9ucyBvZiBhIGNoYWluIHNlcXVlbmNlIHF1YWxpZnkgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuICAgICAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICAgICAqIGBmaW5kTGFzdGAsIGBoZWFkYCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcmVqZWN0YCwgYHJldmVyc2VgLCBgc2xpY2VgLFxuICAgICAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBtZXRob2RzIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG4gICAgICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICAgICAqIGBjb21taXRgLCBgY29tcGFjdGAsIGBjb25jYXRgLCBgY29uZm9ybXNgLCBgY29uc3RhbnRgLCBgY291bnRCeWAsIGBjcmVhdGVgLFxuICAgICAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuICAgICAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gICAgICogYGRyb3BSaWdodFdoaWxlYCwgYGRyb3BXaGlsZWAsIGBleHRlbmRgLCBgZXh0ZW5kV2l0aGAsIGBmaWxsYCwgYGZpbHRlcmAsXG4gICAgICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuICAgICAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAgICAgKiBgZnVuY3Rpb25zSW5gLCBgZ3JvdXBCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnRlcnNlY3Rpb25CeWAsXG4gICAgICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG4gICAgICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gICAgICogYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWVyZ2VXaXRoYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsIGBuZWdhdGVgLFxuICAgICAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuICAgICAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICAgICAqIGBwaWNrQnlgLCBgcGxhbnRgLCBgcHJvcGVydHlgLCBgcHJvcGVydHlPZmAsIGBwdWxsYCwgYHB1bGxBbGxgLCBgcHVsbEFsbEJ5YCxcbiAgICAgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuICAgICAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gICAgICogYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcbiAgICAgKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAgICAgKiBgdW5pb25gLCBgdW5pb25CeWAsIGB1bmlvbldpdGhgLCBgdW5pcWAsIGB1bmlxQnlgLCBgdW5pcVdpdGhgLCBgdW5zZXRgLFxuICAgICAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuICAgICAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAgICAgKiBgemlwT2JqZWN0YCwgYHppcE9iamVjdERlZXBgLCBhbmQgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsYW1wYCwgYGNsb25lYCxcbiAgICAgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcbiAgICAgKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICAgICAqIGBlc2NhcGVSZWdFeHBgLCBgZXZlcnlgLCBgZmluZGAsIGBmaW5kSW5kZXhgLCBgZmluZEtleWAsIGBmaW5kTGFzdGAsXG4gICAgICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuICAgICAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gICAgICogYGhhc0luYCwgYGhlYWRgLCBgaWRlbnRpdHlgLCBgaW5jbHVkZXNgLCBgaW5kZXhPZmAsIGBpblJhbmdlYCwgYGludm9rZWAsXG4gICAgICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG4gICAgICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gICAgICogYGlzRXF1YWxXaXRoYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc0ludGVnZXJgLCBgaXNMZW5ndGhgLFxuICAgICAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG4gICAgICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAgICAgKiBgaXNTYWZlSW50ZWdlcmAsIGBpc1NldGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBpc1R5cGVkQXJyYXlgLFxuICAgICAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuICAgICAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAgICAgKiBgbWluYCwgYG1pbkJ5YCwgYG11bHRpcGx5YCwgYG5vQ29uZmxpY3RgLCBgbm9vcGAsIGBub3dgLCBgbnRoYCwgYHBhZGAsXG4gICAgICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG4gICAgICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkSW5kZXhCeWAsIGBzb3J0ZWRMYXN0SW5kZXhgLFxuICAgICAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcbiAgICAgKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRpbWVzYCwgYHRvRmluaXRlYCwgYHRvSW50ZWdlcmAsIGB0b0pTT05gLCBgdG9MZW5ndGhgLFxuICAgICAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAgICAgKiBgdXBwZXJGaXJzdGAsIGB2YWx1ZWAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYW4gdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGNoYWluIHNlcXVlbmNlIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX19pbmRleF9fID0gMDtcbiAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICAgICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG5cbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsYXp5IHdyYXBwZXIgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGxhenkgZXZhbHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2Rpcl9fID0gMTtcbiAgICAgIHRoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7XG4gICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgIHRoaXMuX190YWtlQ291bnRfXyA9IE1BWF9BUlJBWV9MRU5HVEg7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBjb3B5QXJyYXkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCAoIWlzUmlnaHQgJiYgYXJyTGVuZ3RoID09IGxlbmd0aCAmJiB0YWtlQ291bnQgPT0gbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZShhcnJheSwgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgIGluZGV4ICs9IGRpcjtcblxuICAgICAgICB2YXIgaXRlckluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKytpdGVySW5kZXggPCBpdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRlZXNbaXRlckluZGV4XSxcbiAgICAgICAgICAgICAgaXRlcmF0ZWUgPSBkYXRhLml0ZXJhdGVlLFxuICAgICAgICAgICAgICB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09IExBWllfTUFQX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29tcHV0ZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09IExBWllfRklMVEVSX0ZMQUcpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBgTGF6eVdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgIEhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG4gICAgSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbiAgICBIYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC0tdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAgICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBhbGlhcyBwdXNoXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICAgICAgfVxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcbiAgICBTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG4gICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlU2l6ZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZVNpemUoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpLCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gICAgICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZ2dyZWdhdGVzIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBvbiBgYWNjdW11bGF0b3JgIHdpdGgga2V5cyB0cmFuc2Zvcm1lZFxuICAgICAqIGJ5IGBpdGVyYXRlZWAgYW5kIHZhbHVlcyBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBZ2dyZWdhdG9yKGNvbGxlY3Rpb24sIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAgICAgKiB2YWx1ZSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXQob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc2tpcCA/IHVuZGVmaW5lZCA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICAgICAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBEZWVwIGNsb25lXG4gICAgICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gICAgICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgICAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQ7XG4gICAgICB9XG4gICAgICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubnRoYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VOdGgoYXJyYXksIG4pIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuICs9IG4gPCAwID8gbGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiBpc0luZGV4KG4sIGxlbmd0aCkgPyBhcnJheVtuXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMubGVuZ3RoID8gaXRlcmF0ZWVzIDogW2lkZW50aXR5XSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YWx1ZSA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCA0MF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgICAgIC8vIHdpdGggbG9va3VwIChpbiBjYXNlIG9mIGUuZy4gcHJvdG90eXBlIHBvbGx1dGlvbiksIGFuZCBzdHJpcCBuZXdsaW5lcyBpZiBhbnkuXG4gICAgICAvLyBBIG5ld2xpbmUgd291bGRuJ3QgYmUgYSB2YWxpZCBzb3VyY2VVUkwgYW55d2F5LCBhbmQgaXQnZCBlbmFibGUgY29kZSBpbmplY3Rpb24uXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgICAgICAgID8gKG9wdGlvbnMuc291cmNlVVJMICsgJycpLnJlcGxhY2UoL1tcXHJcXG5dL2csICcgJylcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgLy8gTGlrZSB3aXRoIHNvdXJjZVVSTCwgd2UgdGFrZSBjYXJlIHRvIG5vdCBjaGVjayB0aGUgb3B0aW9uJ3MgcHJvdG90eXBlLFxuICAgICAgLy8gYXMgdGhpcyBjb25maWd1cmF0aW9uIGlzIGEgY29kZSBpbmplY3Rpb24gdmVjdG9yLlxuICAgICAgdmFyIHZhcmlhYmxlID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAndmFyaWFibGUnKSAmJiBvcHRpb25zLnZhcmlhYmxlO1xuICAgICAgaWYgKCF2YXJpYWJsZSkge1xuICAgICAgICBzb3VyY2UgPSAnd2l0aCAob2JqKSB7XFxuJyArIHNvdXJjZSArICdcXG59XFxuJztcbiAgICAgIH1cbiAgICAgIC8vIENsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5ncy5cbiAgICAgIHNvdXJjZSA9IChpc0V2YWx1YXRpbmcgPyBzb3VyY2UucmVwbGFjZShyZUVtcHR5U3RyaW5nTGVhZGluZywgJycpIDogc291cmNlKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nTWlkZGxlLCAnJDEnKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTtcblxuICAgICAgLy8gRnJhbWUgY29kZSBhcyB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICAgIHNvdXJjZSA9ICdmdW5jdGlvbignICsgKHZhcmlhYmxlIHx8ICdvYmonKSArICcpIHtcXG4nICtcbiAgICAgICAgKHZhcmlhYmxlXG4gICAgICAgICAgPyAnJ1xuICAgICAgICAgIDogJ29iaiB8fCAob2JqID0ge30pO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIFwidmFyIF9fdCwgX19wID0gJydcIiArXG4gICAgICAgIChpc0VzY2FwaW5nXG4gICAgICAgICAgID8gJywgX19lID0gXy5lc2NhcGUnXG4gICAgICAgICAgIDogJydcbiAgICAgICAgKSArXG4gICAgICAgIChpc0V2YWx1YXRpbmdcbiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xcbicgK1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgICAgIDogJztcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBzb3VyY2UgK1xuICAgICAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYXR0ZW1wdChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKGltcG9ydHNLZXlzLCBzb3VyY2VVUkwgKyAncmV0dXJuICcgKyBzb3VyY2UpXG4gICAgICAgICAgLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kIG9yXG4gICAgICAvLyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IgaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzLlxuICAgICAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIGlmIChpc0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gbG93ZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvTG93ZXJDYXNlXShodHRwczovL21kbi5pby90b0xvd2VyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1mb28tYmFyLS0nXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29iYXInXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ19fZm9vX2Jhcl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTG93ZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gdXBwZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvVXBwZXJDYXNlXShodHRwczovL21kbi5pby90b1VwcGVyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1GT08tQkFSLS0nXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT09CQVInXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ19fRk9PX0JBUl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvVXBwZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy5tYXAoWycgIGZvbyAgJywgJyAgYmFyICAnXSwgXy50cmltKTtcbiAgICAgKiAvLyA9PiBbJ2ZvbycsICdiYXInXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW0oc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGNoclN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KGNoYXJzKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICctXy1hYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbUVuZChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1FbmQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSkgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMgICdcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjLV8tJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1TdGFydChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1TdGFydCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSk7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRydW5jYXRlcyBgc3RyaW5nYCBpZiBpdCdzIGxvbmdlciB0aGFuIHRoZSBnaXZlbiBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogVGhlIGxhc3QgY2hhcmFjdGVycyBvZiB0aGUgdHJ1bmNhdGVkIHN0cmluZyBhcmUgcmVwbGFjZWQgd2l0aCB0aGUgb21pc3Npb25cbiAgICAgKiBzdHJpbmcgd2hpY2ggZGVmYXVsdHMgdG8gXCIuLi5cIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubGVuZ3RoPTMwXSBUaGUgbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vbWlzc2lvbj0nLi4uJ10gVGhlIHN0cmluZyB0byBpbmRpY2F0ZSB0ZXh0IGlzIG9taXR0ZWQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbb3B0aW9ucy5zZXBhcmF0b3JdIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byB0cnVuY2F0ZSB0by5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cnVuY2F0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJyk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hiby4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogJyAnXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6IC8sPyArL1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ29taXNzaW9uJzogJyBbLi4uXSdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnIFsuLi5dJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRydW5jYXRlKHN0cmluZywgb3B0aW9ucykge1xuICAgICAgdmFyIGxlbmd0aCA9IERFRkFVTFRfVFJVTkNfTEVOR1RILFxuICAgICAgICAgIG9taXNzaW9uID0gREVGQVVMVF9UUlVOQ19PTUlTU0lPTjtcblxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSAnc2VwYXJhdG9yJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zZXBhcmF0b3IgOiBzZXBhcmF0b3I7XG4gICAgICAgIGxlbmd0aCA9ICdsZW5ndGgnIGluIG9wdGlvbnMgPyB0b0ludGVnZXIob3B0aW9ucy5sZW5ndGgpIDogbGVuZ3RoO1xuICAgICAgICBvbWlzc2lvbiA9ICdvbWlzc2lvbicgaW4gb3B0aW9ucyA/IGJhc2VUb1N0cmluZyhvcHRpb25zLm9taXNzaW9uKSA6IG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAoaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpO1xuICAgICAgICBzdHJMZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChsZW5ndGggPj0gc3RyTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgZW5kID0gbGVuZ3RoIC0gc3RyaW5nU2l6ZShvbWlzc2lvbik7XG4gICAgICBpZiAoZW5kIDwgMSkge1xuICAgICAgICByZXR1cm4gb21pc3Npb247XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gc3RyU3ltYm9sc1xuICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpXG4gICAgICAgIDogc3RyaW5nLnNsaWNlKDAsIGVuZCk7XG5cbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgICB9XG4gICAgICBpZiAoc3RyU3ltYm9scykge1xuICAgICAgICBlbmQgKz0gKHJlc3VsdC5sZW5ndGggLSBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgaWYgKHN0cmluZy5zbGljZShlbmQpLnNlYXJjaChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgdmFyIG1hdGNoLFxuICAgICAgICAgICAgICBzdWJzdHJpbmcgPSByZXN1bHQ7XG5cbiAgICAgICAgICBpZiAoIXNlcGFyYXRvci5nbG9iYWwpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCB0b1N0cmluZyhyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSkgKyAnZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbmQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIG5ld0VuZCA9PT0gdW5kZWZpbmVkID8gZW5kIDogbmV3RW5kKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdHJpbmcuaW5kZXhPZihiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKSwgZW5kKSAhPSBlbmQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLmVzY2FwZWA7IHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzXG4gICAgICogYCZhbXA7YCwgYCZsdDtgLCBgJmd0O2AsIGAmcXVvdDtgLCBhbmQgYCYjMzk7YCBpbiBgc3RyaW5nYCB0b1xuICAgICAqIHRoZWlyIGNvcnJlc3BvbmRpbmcgY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBIVE1MIGVudGl0aWVzIGFyZSB1bmVzY2FwZWQuIFRvIHVuZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBIVE1MIGVudGl0aWVzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjYuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuZXNjYXBlKCdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNFc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJy0tZm9vLWJhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHVwcGVyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZSRUQnXG4gICAgICovXG4gICAgdmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBhdHRlcm4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IHBhdHRlcm47XG5cbiAgICAgIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gaW52b2tlIGBmdW5jYCwgcmV0dXJuaW5nIGVpdGhlciB0aGUgcmVzdWx0IG9yIHRoZSBjYXVnaHQgZXJyb3JcbiAgICAgKiBvYmplY3QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhdHRlbXB0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBgZnVuY2AgcmVzdWx0IG9yIGVycm9yIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgdGhyb3dpbmcgZXJyb3JzIGZvciBpbnZhbGlkIHNlbGVjdG9ycy5cbiAgICAgKiB2YXIgZWxlbWVudHMgPSBfLmF0dGVtcHQoZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgKiB9LCAnPl8+Jyk7XG4gICAgICpcbiAgICAgKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICAgICAqICAgZWxlbWVudHMgPSBbXTtcbiAgICAgKiB9XG4gICAgICovXG4gICAgdmFyIGF0dGVtcHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGlzRXJyb3IoZSkgPyBlIDogbmV3IEVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQmluZHMgbWV0aG9kcyBvZiBhbiBvYmplY3QgdG8gdGhlIG9iamVjdCBpdHNlbGYsIG92ZXJ3cml0aW5nIHRoZSBleGlzdGluZ1xuICAgICAqIG1ldGhvZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBiaW5kIGFuZCBhc3NpZ24gdGhlIGJvdW5kIG1ldGhvZHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gbWV0aG9kTmFtZXMgVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG8gYmluZC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdmlldyA9IHtcbiAgICAgKiAgICdsYWJlbCc6ICdkb2NzJyxcbiAgICAgKiAgICdjbGljayc6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uYmluZEFsbCh2aWV3LCBbJ2NsaWNrJ10pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB2aWV3LmNsaWNrKTtcbiAgICAgKiAvLyA9PiBMb2dzICdjbGlja2VkIGRvY3MnIHdoZW4gY2xpY2tlZC5cbiAgICAgKi9cbiAgICB2YXIgYmluZEFsbCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgbWV0aG9kTmFtZXMpIHtcbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGtleSA9IHRvS2V5KGtleSk7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgYmluZChvYmplY3Rba2V5XSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpdGVyYXRlcyBvdmVyIGBwYWlyc2AgYW5kIGludm9rZXMgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiBmdW5jdGlvbiBvZiB0aGUgZmlyc3QgcHJlZGljYXRlIHRvIHJldHVybiB0cnV0aHkuIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb25cbiAgICAgKiBwYWlycyBhcmUgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb24gcGFpcnMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8uY29uZChbXG4gICAgICogICBbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCAgICAgICAgICAgXy5jb25zdGFudCgnbWF0Y2hlcyBBJyldLFxuICAgICAqICAgW18uY29uZm9ybXMoeyAnYic6IF8uaXNOdW1iZXIgfSksIF8uY29uc3RhbnQoJ21hdGNoZXMgQicpXSxcbiAgICAgKiAgIFtfLnN0dWJUcnVlLCAgICAgICAgICAgICAgICAgICAgICBfLmNvbnN0YW50KCdubyBtYXRjaCcpXVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEEnXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAwLCAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQidcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6ICcxJywgJ2InOiAnMicgfSk7XG4gICAgICogLy8gPT4gJ25vIG1hdGNoJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmQocGFpcnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICB0b0l0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoKTtcblxuICAgICAgcGFpcnMgPSAhbGVuZ3RoID8gW10gOiBhcnJheU1hcChwYWlycywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICBpZiAodHlwZW9mIHBhaXJbMV0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RvSXRlcmF0ZWUocGFpclswXSksIHBhaXJbMV1dO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICAgIGlmIChhcHBseShwYWlyWzBdLCB0aGlzLCBhcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHBhaXJbMV0sIHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgcHJlZGljYXRlIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aFxuICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBhIGdpdmVuIG9iamVjdCwgcmV0dXJuaW5nIGB0cnVlYCBpZlxuICAgICAqIGFsbCBwcmVkaWNhdGVzIHJldHVybiB0cnV0aHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zVG9gIHdpdGhcbiAgICAgKiBgc291cmNlYCBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAyLCAnYic6IDEgfSxcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLmNvbmZvcm1zKHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlQ29uZm9ybXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBgdmFsdWVgIHRvIGRldGVybWluZSB3aGV0aGVyIGEgZGVmYXVsdCB2YWx1ZSBzaG91bGQgYmUgcmV0dXJuZWQgaW5cbiAgICAgKiBpdHMgcGxhY2UuIFRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBgbnVsbGAsXG4gICAgICogb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKDEsIDEwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbyh1bmRlZmluZWQsIDEwKTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlZmF1bHRUbyh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gKHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgZ2l2ZW4gZnVuY3Rpb25zXG4gICAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1JpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvdyhbXy5hZGQsIHNxdWFyZV0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3cgPSBjcmVhdGVGbG93KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsb3dgIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0XG4gICAgICogaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvd1JpZ2h0KFtzcXVhcmUsIF8uYWRkXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvd1JpZ2h0ID0gY3JlYXRlRmxvdyh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi4gSWYgYGZ1bmNgIGlzIGEgcHJvcGVydHkgbmFtZSwgdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyB0aGVcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBnaXZlbiBlbGVtZW50LiBJZiBgZnVuY2AgaXMgYW4gYXJyYXkgb3Igb2JqZWN0LCB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnRcbiAgICAgKiBzb3VyY2UgcHJvcGVydGllcywgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSBbZnVuYz1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FsbGJhY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKFsndXNlcicsICdmcmVkJ10pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgXy5pdGVyYXRlZSgndXNlcicpKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIENyZWF0ZSBjdXN0b20gaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKiBfLml0ZXJhdGVlID0gXy53cmFwKF8uaXRlcmF0ZWUsIGZ1bmN0aW9uKGl0ZXJhdGVlLCBmdW5jKSB7XG4gICAgICogICByZXR1cm4gIV8uaXNSZWdFeHAoZnVuYykgPyBpdGVyYXRlZShmdW5jKSA6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAqICAgICByZXR1cm4gZnVuYy50ZXN0KHN0cmluZyk7XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIoWydhYmMnLCAnZGVmJ10sIC9lZi8pO1xuICAgICAqIC8vID0+IFsnZGVmJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpdGVyYXRlZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmFzZUl0ZXJhdGVlKHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicgPyBmdW5jIDogYmFzZUNsb25lKGZ1bmMsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBhIGdpdmVuXG4gICAgICogb2JqZWN0IGFuZCBgc291cmNlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGhhcyBlcXVpdmFsZW50XG4gICAgICogcHJvcGVydHkgdmFsdWVzLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5pc01hdGNoYCB3aXRoIGBzb3VyY2VgXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ubWF0Y2hlcyh7ICdhJzogNCwgJ2MnOiA2IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgyKSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMSkgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZChbJ2EnLCAnYiddKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbGwgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBtZXRob2RzXG4gICAgICogYXJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIG1peGlucyBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmXG4gICAgICAgICAgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9ICEoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpO1xuXG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgIGlmIChjaGFpbiB8fCBjaGFpbkFsbCkge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goeyAnZnVuYyc6IGZ1bmMsICdhcmdzJzogYXJndW1lbnRzLCAndGhpc0FyZyc6IG9iamVjdCB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBsb2Rhc2ggPSBfLm5vQ29uZmxpY3QoKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgaWYgKHJvb3QuXyA9PT0gdGhpcykge1xuICAgICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYXJndW1lbnQgYXQgaW5kZXggYG5gLiBJZiBgbmAgaXMgbmVnYXRpdmUsXG4gICAgICogdGhlIG50aCBhcmd1bWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXNzLXRocnUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoMSk7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygtMik7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aEFyZyhuKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VOdGgoYXJncywgbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBpdGVyYXRlZXNgIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlc1xuICAgICAqIGFuZCByZXR1cm5zIHRoZWlyIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyKFtNYXRoLm1heCwgTWF0aC5taW5dKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoMSwgMiwgMywgNCk7XG4gICAgICogLy8gPT4gWzQsIDFdXG4gICAgICovXG4gICAgdmFyIG92ZXIgPSBjcmVhdGVPdmVyKGFycmF5TWFwKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFsbCoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyU29tZShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyU29tZSA9IGNyZWF0ZU92ZXIoYXJyYXlTb21lKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICAgIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5wcm9wZXJ0eWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdmFsdWUgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFswLCAxLCAyXSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICAgICAqIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gQSBzdGVwIG9mIGAtMWAgaXMgdXNlZCBpZiBhIG5lZ2F0aXZlXG4gICAgICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gICAgICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgtNCk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmFuZ2VgIGV4Y2VwdCB0aGF0IGl0IHBvcHVsYXRlcyB2YWx1ZXMgaW5cbiAgICAgKiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCg0KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgtNCk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNSk7XG4gICAgICogLy8gPT4gWzQsIDMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFsxNSwgMTAsIDUsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZVJpZ2h0ID0gY3JlYXRlUmFuZ2UodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gICAgICogLy8gPT4gW1tdLCBbXV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAgICAgKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLnN0dWJPYmplY3QpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3t9LCB7fV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1Yk9iamVjdCgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnJywgJyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlN0cmluZygpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJUcnVlKTtcbiAgICAgKiAvLyA9PiBbdHJ1ZSwgdHJ1ZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViVHJ1ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIGl0ZXJhdGVlIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mXG4gICAgICogZWFjaCBpbnZvY2F0aW9uLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMScsICcyJ11cbiAgICAgKlxuICAgICAqICBfLnRpbWVzKDQsIF8uY29uc3RhbnQoMCkpO1xuICAgICAqIC8vID0+IFswLCAwLCAwLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgaWYgKG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IE1BWF9BUlJBWV9MRU5HVEgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlKTtcbiAgICAgIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VUaW1lcyhsZW5ndGgsIGl0ZXJhdGVlKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICBpdGVyYXRlZShpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXVnZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0b3RhbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hZGQoNiwgNCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICB2YXIgYWRkID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihhdWdlbmQsIGFkZGVuZCkge1xuICAgICAgcmV0dXJuIGF1Z2VuZCArIGFkZGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdXAgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIHVwIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jZWlsKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiBfLmNlaWwoNi4wMDQsIDIpO1xuICAgICAqIC8vID0+IDYuMDFcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2MDQwLCAtMik7XG4gICAgICogLy8gPT4gNjEwMFxuICAgICAqL1xuICAgIHZhciBjZWlsID0gY3JlYXRlUm91bmQoJ2NlaWwnKTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlkZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aXNvciBUaGUgc2Vjb25kIG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHF1b3RpZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpdmlkZSg2LCA0KTtcbiAgICAgKiAvLyA9PiAxLjVcbiAgICAgKi9cbiAgICB2YXIgZGl2aWRlID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgcmV0dXJuIGRpdmlkZW5kIC8gZGl2aXNvcjtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgZG93biB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCBkb3duLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgZG93biB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIGRvd24gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDAuMDQ2LCAyKTtcbiAgICAgKiAvLyA9PiAwLjA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MDAwXG4gICAgICovXG4gICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoJ2Zsb29yJyk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1heChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWF4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heEJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1lYW4gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWVhbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuKGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGlkZW50aXR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lYW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBhdmVyYWdlZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLm1pbihbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGljYW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcHJvZHVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tdWx0aXBseSg2LCA0KTtcbiAgICAgKiAvLyA9PiAyNFxuICAgICAqL1xuICAgIHZhciBtdWx0aXBseSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obXVsdGlwbGllciwgbXVsdGlwbGljYW5kKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbGllciAqIG11bHRpcGxpY2FuZDtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNiwgMik7XG4gICAgICogLy8gPT4gNC4wMVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDEwMFxuICAgICAqL1xuICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3QgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW51ZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3VidHJhaGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VidHJhY3QoNiwgNCk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obWludWVuZCwgc3VidHJhaGVuZCkge1xuICAgICAgcmV0dXJuIG1pbnVlbmQgLSBzdWJ0cmFoZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIHN1bSBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1bShbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBpZGVudGl0eSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc3VtYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgc3VtbWVkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5zdW1CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW1CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtcbiAgICBsb2Rhc2guYXJ5ID0gYXJ5O1xuICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247XG4gICAgbG9kYXNoLmFzc2lnbkluID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtcbiAgICBsb2Rhc2guYXNzaWduV2l0aCA9IGFzc2lnbldpdGg7XG4gICAgbG9kYXNoLmF0ID0gYXQ7XG4gICAgbG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtcbiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7XG4gICAgbG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO1xuICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICBsb2Rhc2guY2FzdEFycmF5ID0gY2FzdEFycmF5O1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29uY2F0ID0gY29uY2F0O1xuICAgIGxvZGFzaC5jb25kID0gY29uZDtcbiAgICBsb2Rhc2guY29uZm9ybXMgPSBjb25mb3JtcztcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VCeSA9IGRpZmZlcmVuY2VCeTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZVdpdGggPSBkaWZmZXJlbmNlV2l0aDtcbiAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgbG9kYXNoLmRyb3BSaWdodCA9IGRyb3BSaWdodDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0V2hpbGUgPSBkcm9wUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgIGxvZGFzaC5maWxsID0gZmlsbDtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0TWFwID0gZmxhdE1hcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlZXAgPSBmbGF0TWFwRGVlcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlcHRoID0gZmxhdE1hcERlcHRoO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZmxhdHRlbkRlZXAgPSBmbGF0dGVuRGVlcDtcbiAgICBsb2Rhc2guZmxhdHRlbkRlcHRoID0gZmxhdHRlbkRlcHRoO1xuICAgIGxvZGFzaC5mbGlwID0gZmxpcDtcbiAgICBsb2Rhc2guZmxvdyA9IGZsb3c7XG4gICAgbG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtcbiAgICBsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO1xuICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9uc0luID0gZnVuY3Rpb25zSW47XG4gICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25XaXRoID0gaW50ZXJzZWN0aW9uV2l0aDtcbiAgICBsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O1xuICAgIGxvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O1xuICAgIGxvZGFzaC5pbnZva2VNYXAgPSBpbnZva2VNYXA7XG4gICAgbG9kYXNoLml0ZXJhdGVlID0gaXRlcmF0ZWU7XG4gICAgbG9kYXNoLmtleUJ5ID0ga2V5Qnk7XG4gICAgbG9kYXNoLmtleXMgPSBrZXlzO1xuICAgIGxvZGFzaC5rZXlzSW4gPSBrZXlzSW47XG4gICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICBsb2Rhc2gubWFwS2V5cyA9IG1hcEtleXM7XG4gICAgbG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbiAgICBsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgbG9kYXNoLm1hdGNoZXNQcm9wZXJ0eSA9IG1hdGNoZXNQcm9wZXJ0eTtcbiAgICBsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7XG4gICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgbG9kYXNoLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbiAgICBsb2Rhc2gubWV0aG9kID0gbWV0aG9kO1xuICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5uZWdhdGUgPSBuZWdhdGU7XG4gICAgbG9kYXNoLm50aEFyZyA9IG50aEFyZztcbiAgICBsb2Rhc2gub21pdCA9IG9taXQ7XG4gICAgbG9kYXNoLm9taXRCeSA9IG9taXRCeTtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLm9yZGVyQnkgPSBvcmRlckJ5O1xuICAgIGxvZGFzaC5vdmVyID0gb3ZlcjtcbiAgICBsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztcbiAgICBsb2Rhc2gub3ZlckV2ZXJ5ID0gb3ZlckV2ZXJ5O1xuICAgIGxvZGFzaC5vdmVyU29tZSA9IG92ZXJTb21lO1xuICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICBsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O1xuICAgIGxvZGFzaC5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgIGxvZGFzaC5waWNrQnkgPSBwaWNrQnk7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucHVsbEFsbCA9IHB1bGxBbGw7XG4gICAgbG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtcbiAgICBsb2Rhc2gucHVsbEFsbFdpdGggPSBwdWxsQWxsV2l0aDtcbiAgICBsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yYW5nZVJpZ2h0ID0gcmFuZ2VSaWdodDtcbiAgICBsb2Rhc2gucmVhcmcgPSByZWFyZztcbiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgIGxvZGFzaC5yZW1vdmUgPSByZW1vdmU7XG4gICAgbG9kYXNoLnJlc3QgPSByZXN0O1xuICAgIGxvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBsb2Rhc2guc2FtcGxlU2l6ZSA9IHNhbXBsZVNpemU7XG4gICAgbG9kYXNoLnNldCA9IHNldDtcbiAgICBsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zbGljZSA9IHNsaWNlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXEgPSBzb3J0ZWRVbmlxO1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxQnkgPSBzb3J0ZWRVbmlxQnk7XG4gICAgbG9kYXNoLnNwbGl0ID0gc3BsaXQ7XG4gICAgbG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtcbiAgICBsb2Rhc2gudGFpbCA9IHRhaWw7XG4gICAgbG9kYXNoLnRha2UgPSB0YWtlO1xuICAgIGxvZGFzaC50YWtlUmlnaHQgPSB0YWtlUmlnaHQ7XG4gICAgbG9kYXNoLnRha2VSaWdodFdoaWxlID0gdGFrZVJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbiAgICBsb2Rhc2gudGFwID0gdGFwO1xuICAgIGxvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO1xuICAgIGxvZGFzaC50aHJ1ID0gdGhydTtcbiAgICBsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgbG9kYXNoLnRvUGFpcnMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLnRvUGF0aCA9IHRvUGF0aDtcbiAgICBsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5hcnkgPSB1bmFyeTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7XG4gICAgbG9kYXNoLnVuaW9uV2l0aCA9IHVuaW9uV2l0aDtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtcbiAgICBsb2Rhc2gudW5pcVdpdGggPSB1bmlxV2l0aDtcbiAgICBsb2Rhc2gudW5zZXQgPSB1bnNldDtcbiAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICBsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO1xuICAgIGxvZGFzaC51cGRhdGUgPSB1cGRhdGU7XG4gICAgbG9kYXNoLnVwZGF0ZVdpdGggPSB1cGRhdGVXaXRoO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53b3JkcyA9IHdvcmRzO1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC54b3JCeSA9IHhvckJ5O1xuICAgIGxvZGFzaC54b3JXaXRoID0geG9yV2l0aDtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnppcE9iamVjdERlZXAgPSB6aXBPYmplY3REZWVwO1xuICAgIGxvZGFzaC56aXBXaXRoID0gemlwV2l0aDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lbnRyaWVzID0gdG9QYWlycztcbiAgICBsb2Rhc2guZW50cmllc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guZXh0ZW5kV2l0aCA9IGFzc2lnbkluV2l0aDtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBtaXhpbihsb2Rhc2gsIGxvZGFzaCk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWRkID0gYWRkO1xuICAgIGxvZGFzaC5hdHRlbXB0ID0gYXR0ZW1wdDtcbiAgICBsb2Rhc2guY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xuICAgIGxvZGFzaC5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbiAgICBsb2Rhc2guY2VpbCA9IGNlaWw7XG4gICAgbG9kYXNoLmNsYW1wID0gY2xhbXA7XG4gICAgbG9kYXNoLmNsb25lID0gY2xvbmU7XG4gICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICBsb2Rhc2guY2xvbmVEZWVwV2l0aCA9IGNsb25lRGVlcFdpdGg7XG4gICAgbG9kYXNoLmNsb25lV2l0aCA9IGNsb25lV2l0aDtcbiAgICBsb2Rhc2guY29uZm9ybXNUbyA9IGNvbmZvcm1zVG87XG4gICAgbG9kYXNoLmRlYnVyciA9IGRlYnVycjtcbiAgICBsb2Rhc2guZGVmYXVsdFRvID0gZGVmYXVsdFRvO1xuICAgIGxvZGFzaC5kaXZpZGUgPSBkaXZpZGU7XG4gICAgbG9kYXNoLmVuZHNXaXRoID0gZW5kc1dpdGg7XG4gICAgbG9kYXNoLmVxID0gZXE7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmZsb29yID0gZmxvb3I7XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmdldCA9IGdldDtcbiAgICBsb2Rhc2guZ3QgPSBndDtcbiAgICBsb2Rhc2guZ3RlID0gZ3RlO1xuICAgIGxvZGFzaC5oYXMgPSBoYXM7XG4gICAgbG9kYXNoLmhhc0luID0gaGFzSW47XG4gICAgbG9kYXNoLmhlYWQgPSBoZWFkO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmNsdWRlcyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaW5SYW5nZSA9IGluUmFuZ2U7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7XG4gICAgbG9kYXNoLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZU9iamVjdCA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzQnVmZmVyID0gaXNCdWZmZXI7XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRXF1YWxXaXRoID0gaXNFcXVhbFdpdGg7XG4gICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc0xlbmd0aCA9IGlzTGVuZ3RoO1xuICAgIGxvZGFzaC5pc01hcCA9IGlzTWFwO1xuICAgIGxvZGFzaC5pc01hdGNoID0gaXNNYXRjaDtcbiAgICBsb2Rhc2guaXNNYXRjaFdpdGggPSBpc01hdGNoV2l0aDtcbiAgICBsb2Rhc2guaXNOYU4gPSBpc05hTjtcbiAgICBsb2Rhc2guaXNOYXRpdmUgPSBpc05hdGl2ZTtcbiAgICBsb2Rhc2guaXNOaWwgPSBpc05pbDtcbiAgICBsb2Rhc2guaXNOdWxsID0gaXNOdWxsO1xuICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgIGxvZGFzaC5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGxvZGFzaC5pc09iamVjdExpa2UgPSBpc09iamVjdExpa2U7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1NhZmVJbnRlZ2VyID0gaXNTYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNTZXQgPSBpc1NldDtcbiAgICBsb2Rhc2guaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBsb2Rhc2guaXNTeW1ib2wgPSBpc1N5bWJvbDtcbiAgICBsb2Rhc2guaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuICAgIGxvZGFzaC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGxvZGFzaC5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG4gICAgbG9kYXNoLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcbiAgICBsb2Rhc2guam9pbiA9IGpvaW47XG4gICAgbG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtcbiAgICBsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7XG4gICAgbG9kYXNoLmx0ID0gbHQ7XG4gICAgbG9kYXNoLmx0ZSA9IGx0ZTtcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5tYXhCeSA9IG1heEJ5O1xuICAgIGxvZGFzaC5tZWFuID0gbWVhbjtcbiAgICBsb2Rhc2gubWVhbkJ5ID0gbWVhbkJ5O1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm1pbkJ5ID0gbWluQnk7XG4gICAgbG9kYXNoLnN0dWJBcnJheSA9IHN0dWJBcnJheTtcbiAgICBsb2Rhc2guc3R1YkZhbHNlID0gc3R1YkZhbHNlO1xuICAgIGxvZGFzaC5zdHViT2JqZWN0ID0gc3R1Yk9iamVjdDtcbiAgICBsb2Rhc2guc3R1YlN0cmluZyA9IHN0dWJTdHJpbmc7XG4gICAgbG9kYXNoLnN0dWJUcnVlID0gc3R1YlRydWU7XG4gICAgbG9kYXNoLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgbG9kYXNoLm50aCA9IG50aDtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhZCA9IHBhZDtcbiAgICBsb2Rhc2gucGFkRW5kID0gcGFkRW5kO1xuICAgIGxvZGFzaC5wYWRTdGFydCA9IHBhZFN0YXJ0O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgIGxvZGFzaC5yZXBsYWNlID0gcmVwbGFjZTtcbiAgICBsb2Rhc2gucmVzdWx0ID0gcmVzdWx0O1xuICAgIGxvZGFzaC5yb3VuZCA9IHJvdW5kO1xuICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNuYWtlQ2FzZSA9IHNuYWtlQ2FzZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4QnkgPSBzb3J0ZWRJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleE9mID0gc29ydGVkSW5kZXhPZjtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4ID0gc29ydGVkTGFzdEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhCeSA9IHNvcnRlZExhc3RJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhPZiA9IHNvcnRlZExhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5zdGFydENhc2UgPSBzdGFydENhc2U7XG4gICAgbG9kYXNoLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuICAgIGxvZGFzaC5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIGxvZGFzaC5zdW0gPSBzdW07XG4gICAgbG9kYXNoLnN1bUJ5ID0gc3VtQnk7XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvRmluaXRlID0gdG9GaW5pdGU7XG4gICAgbG9kYXNoLnRvSW50ZWdlciA9IHRvSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9MZW5ndGggPSB0b0xlbmd0aDtcbiAgICBsb2Rhc2gudG9Mb3dlciA9IHRvTG93ZXI7XG4gICAgbG9kYXNoLnRvTnVtYmVyID0gdG9OdW1iZXI7XG4gICAgbG9kYXNoLnRvU2FmZUludGVnZXIgPSB0b1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGxvZGFzaC50b1VwcGVyID0gdG9VcHBlcjtcbiAgICBsb2Rhc2gudHJpbSA9IHRyaW07XG4gICAgbG9kYXNoLnRyaW1FbmQgPSB0cmltRW5kO1xuICAgIGxvZGFzaC50cmltU3RhcnQgPSB0cmltU3RhcnQ7XG4gICAgbG9kYXNoLnRydW5jYXRlID0gdHJ1bmNhdGU7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgbG9kYXNoLnVwcGVyQ2FzZSA9IHVwcGVyQ2FzZTtcbiAgICBsb2Rhc2gudXBwZXJGaXJzdCA9IHVwcGVyRmlyc3Q7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZmlyc3QgPSBoZWFkO1xuXG4gICAgbWl4aW4obG9kYXNoLCAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge307XG4gICAgICBiYXNlRm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLnByb3RvdHlwZSwgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpKSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbG9kYXNoLlZFUlNJT04gPSBWRVJTSU9OO1xuXG4gICAgLy8gQXNzaWduIGRlZmF1bHQgcGxhY2Vob2xkZXJzLlxuICAgIGFycmF5RWFjaChbJ2JpbmQnLCAnYmluZEtleScsICdjdXJyeScsICdjdXJyeVJpZ2h0JywgJ3BhcnRpYWwnLCAncGFydGlhbFJpZ2h0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIGxvZGFzaFttZXRob2ROYW1lXS5wbGFjZWhvbGRlciA9IGxvZGFzaDtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmRyb3BgIGFuZCBgXy50YWtlYCB2YXJpYW50cy5cbiAgICBhcnJheUVhY2goWydkcm9wJywgJ3Rha2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgbiA9IG4gPT09IHVuZGVmaW5lZCA/IDEgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKG4pLCAwKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuX19maWx0ZXJlZF9fICYmICFpbmRleClcbiAgICAgICAgICA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKVxuICAgICAgICAgIDogdGhpcy5jbG9uZSgpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSBuYXRpdmVNaW4obiwgcmVzdWx0Ll9fdGFrZUNvdW50X18pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5fX3ZpZXdzX18ucHVzaCh7XG4gICAgICAgICAgICAnc2l6ZSc6IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKSxcbiAgICAgICAgICAgICd0eXBlJzogbWV0aG9kTmFtZSArIChyZXN1bHQuX19kaXJfXyA8IDAgPyAnUmlnaHQnIDogJycpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgJ1JpZ2h0J10gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0aGF0IGFjY2VwdCBhbiBgaXRlcmF0ZWVgIHZhbHVlLlxuICAgIGFycmF5RWFjaChbJ2ZpbHRlcicsICdtYXAnLCAndGFrZVdoaWxlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSxcbiAgICAgICAgICBpc0ZpbHRlciA9IHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRyB8fCB0eXBlID09IExBWllfV0hJTEVfRkxBRztcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18ucHVzaCh7XG4gICAgICAgICAgJ2l0ZXJhdGVlJzogZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLFxuICAgICAgICAgICd0eXBlJzogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHJlc3VsdC5fX2ZpbHRlcmVkX18gfHwgaXNGaWx0ZXI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaGVhZGAgYW5kIGBfLmxhc3RgLlxuICAgIGFycmF5RWFjaChbJ2hlYWQnLCAnbGFzdCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHRha2VOYW1lID0gJ3Rha2UnICsgKGluZGV4ID8gJ1JpZ2h0JyA6ICcnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmluaXRpYWxgIGFuZCBgXy50YWlsYC5cbiAgICBhcnJheUVhY2goWydpbml0aWFsJywgJ3RhaWwnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkcm9wTmFtZSA9ICdkcm9wJyArIChpbmRleCA/ICcnIDogJ1JpZ2h0Jyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzW2Ryb3BOYW1lXSgxKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihwcmVkaWNhdGUpLmhlYWQoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmRMYXN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzO1xuICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18gJiYgKHN0YXJ0ID4gMCB8fCBlbmQgPCAwKSkge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC50YWtlUmlnaHQoLXN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRyb3Aoc3RhcnQpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHRvSW50ZWdlcihlbmQpO1xuICAgICAgICByZXN1bHQgPSBlbmQgPCAwID8gcmVzdWx0LmRyb3BSaWdodCgtZW5kKSA6IHJlc3VsdC50YWtlKGVuZCAtIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLnRha2VXaGlsZShwcmVkaWNhdGUpLnJldmVyc2UoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2UoTUFYX0FSUkFZX0xFTkdUSCk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGlzVGFrZXIgPSAvXig/OmhlYWR8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbaXNUYWtlciA/ICgndGFrZScgKyAobWV0aG9kTmFtZSA9PSAnbGFzdCcgPyAnUmlnaHQnIDogJycpKSA6IG1ldGhvZE5hbWVdLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IGlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBpZiAoIWxvZGFzaEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgYXJncyA9IGlzVGFrZXIgPyBbMV0gOiBhcmd1bWVudHMsXG4gICAgICAgICAgICBpc0xhenkgPSB2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLFxuICAgICAgICAgICAgaXRlcmF0ZWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcblxuICAgICAgICB2YXIgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2hGdW5jLmFwcGx5KGxvZGFzaCwgYXJyYXlQdXNoKFt2YWx1ZV0sIGFyZ3MpKTtcbiAgICAgICAgICByZXR1cm4gKGlzVGFrZXIgJiYgY2hhaW5BbGwpID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh1c2VMYXp5ICYmIGNoZWNrSXRlcmF0ZWUgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAvLyBBdm9pZCBsYXp5IHVzZSBpZiB0aGUgaXRlcmF0ZWUgaGFzIGEgXCJsZW5ndGhcIiB2YWx1ZSBvdGhlciB0aGFuIGAxYC5cbiAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICBpc0h5YnJpZCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICBpc1Vud3JhcHBlZCA9IHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwsXG4gICAgICAgICAgICBvbmx5TGF6eSA9IGlzTGF6eSAmJiAhaXNIeWJyaWQ7XG5cbiAgICAgICAgaWYgKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSkge1xuICAgICAgICAgIHZhbHVlID0gb25seUxhenkgPyB2YWx1ZSA6IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fLnB1c2goeyAnZnVuYyc6IHRocnUsICdhcmdzJzogW2ludGVyY2VwdG9yXSwgJ3RoaXNBcmcnOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vud3JhcHBlZCAmJiBvbmx5TGF6eSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgIHJldHVybiBpc1Vud3JhcHBlZCA/IChpc1Rha2VyID8gcmVzdWx0LnZhbHVlKClbMF0gOiByZXN1bHQudmFsdWUoKSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBBcnJheWAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYXJyYXlFYWNoKFsncG9wJywgJ3B1c2gnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UHJvdG9bbWV0aG9kTmFtZV0sXG4gICAgICAgICAgY2hhaW5OYW1lID0gL14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpID8gJ3RhcCcgOiAndGhydScsXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gL14oPzpwb3B8c2hpZnQpJC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tjaGFpbk5hbWVdKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gTWFwIG1pbmlmaWVkIG1ldGhvZCBuYW1lcyB0byB0aGVpciByZWFsIG5hbWVzLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgIGlmIChsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHZhciBrZXkgPSBsb2Rhc2hGdW5jLm5hbWUgKyAnJztcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywga2V5KSkge1xuICAgICAgICAgIHJlYWxOYW1lc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmVhbE5hbWVzW2tleV0ucHVzaCh7ICduYW1lJzogbWV0aG9kTmFtZSwgJ2Z1bmMnOiBsb2Rhc2hGdW5jIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhbE5hbWVzW2NyZWF0ZUh5YnJpZCh1bmRlZmluZWQsIFdSQVBfQklORF9LRVlfRkxBRykubmFtZV0gPSBbe1xuICAgICAgJ25hbWUnOiAnd3JhcHBlcicsXG4gICAgICAnZnVuYyc6IHVuZGVmaW5lZFxuICAgIH1dO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExhenlXcmFwcGVyYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY2xvbmUgPSBsYXp5Q2xvbmU7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJldmVyc2UgPSBsYXp5UmV2ZXJzZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBsYXp5VmFsdWU7XG5cbiAgICAvLyBBZGQgY2hhaW4gc2VxdWVuY2UgbWV0aG9kcyB0byB0aGUgYGxvZGFzaGAgd3JhcHBlci5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmF0ID0gd3JhcHBlckF0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY2hhaW4gPSB3cmFwcGVyQ2hhaW47XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb21taXQgPSB3cmFwcGVyQ29tbWl0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUubmV4dCA9IHdyYXBwZXJOZXh0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucGxhbnQgPSB3cmFwcGVyUGxhbnQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b0pTT04gPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlO1xuXG4gICAgLy8gQWRkIGxhenkgYWxpYXNlcy5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmZpcnN0ID0gbG9kYXNoLnByb3RvdHlwZS5oZWFkO1xuXG4gICAgaWYgKHN5bUl0ZXJhdG9yKSB7XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW3N5bUl0ZXJhdG9yXSA9IHdyYXBwZXJUb0l0ZXJhdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9KTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgbG9kYXNoLlxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgTG9kYXNoIG9uIHRoZSBnbG9iYWwgb2JqZWN0IHRvIHByZXZlbnQgZXJyb3JzIHdoZW4gTG9kYXNoIGlzXG4gICAgLy8gbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EIGxvYWRlci5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIC8vIFVzZSBgXy5ub0NvbmZsaWN0YCB0byByZW1vdmUgTG9kYXNoIGZyb20gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIENoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGl0LlxuICBlbHNlIGlmIChmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBOb2RlLmpzLlxuICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIHN1cHBvcnQuXG4gICAgZnJlZUV4cG9ydHMuXyA9IF87XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdXRpbHMuZm9yRWFjaChbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXSwgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXSwgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdtYXhDb250ZW50TGVuZ3RoJyxcbiAgICAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJyxcbiAgICAnc29ja2V0UGF0aCdcbiAgXSwgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93cmFwcGVkLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIG5hdGl2ZUpTT05TdHJpbmdpZnkgPSBKU09OICYmIEpTT04uc3RyaW5naWZ5O1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBpc1N5bWJvbCA9IE5BVElWRV9TWU1CT0wgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChpdCkgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8ICRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgUCA9IHRvUHJpbWl0aXZlKFYsIHRydWUpO1xuICB2YXIgZW51bWVyYWJsZSA9IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIFApICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhcyh0aGlzLCBQKSB8fCAhaGFzKEFsbFN5bWJvbHMsIFApIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXSA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoaGlkZGVuS2V5cywga2V5KSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7XG4gIH07XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhrZXkpO1xuICAgIGlmIChoYXMoU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhcyhTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eXN5bWJvbHNcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSkgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2QgYmVoYXZpb3Igd2l0aCBzeW1ib2xzXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuSlNPTiAmJiAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICByZXR1cm4gbmF0aXZlSlNPTlN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICB8fCBuYXRpdmVKU09OU3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgIHx8IG5hdGl2ZUpTT05TdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG59KSB9LCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpbmRleCA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpbmRleCkgYXJncy5wdXNoKGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gbmF0aXZlSlNPTlN0cmluZ2lmeS5hcHBseShKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkgaGlkZSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dyYXBwZWQtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgbmF0aXZlVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlVG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxudmFyIElOQ09SUkVDVF9OQU1FID0gbmF0aXZlVG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSBTdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSBTdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpID8gZmxhZ3MuY2FsbChSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLypcbiAqIFRoaXMgZmlsZSBpcyB1c2VkIGJ5IG1vZHVsZSBidW5kbGVycyAoYnJvd3NlcmlmeS93ZWJwYWNrL2V0Yykgd2hlblxuICogaW5jbHVkaW5nIGEgc3RyZWFtIGltcGxlbWVudGF0aW9uLiBXZSB1c2UgXCJyZWFkYWJsZS1zdHJlYW1cIiB0byBnZXQgYVxuICogY29uc2lzdGVudCBiZWhhdmlvciBiZXR3ZWVuIG5vZGVqcyB2ZXJzaW9ucyBidXQgYnVuZGxlcnMgb2Z0ZW4gaGF2ZSBhIHNoaW1cbiAqIGZvciBcInN0cmVhbVwiLiBVc2luZyB0aGlzIHNoaW0gZ3JlYXRseSBpbXByb3ZlIHRoZSBjb21wYXRpYmlsaXR5IGFuZCBncmVhdGx5XG4gKiByZWR1Y2UgdGhlIGZpbmFsIHNpemUgb2YgdGhlIGJ1bmRsZSAob25seSBvbmUgc3RyZWFtIGltcGxlbWVudGF0aW9uLCBub3RcbiAqIHR3bykuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwbmEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHBuYS5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59OyIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuXG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKCFjYikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCd3cml0ZSBjYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKSk7XG4gIH1cblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuXG4gIGNiKGVyKTtcblxuICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuXG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xuICAgIGFmdGVyVHJhbnNmb3JtOiBhZnRlclRyYW5zZm9ybS5iaW5kKHRoaXMpLFxuICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLFxuICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXG4gICAgd3JpdGVjYjogbnVsbCxcbiAgICB3cml0ZWNodW5rOiBudWxsLFxuICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcbiAgfTtcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xufVxuXG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3RyYW5zZm9ybSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMud3JpdGVjYiA9IGNiO1xuICB0cy53cml0ZWNodW5rID0gY2h1bms7XG4gIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59O1xuXG4vLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxuLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay5cbi8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG5cbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2IoZXJyMik7XG4gICAgX3RoaXMyLmVtaXQoJ2Nsb3NlJyk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBzdHJlYW0ucHVzaChkYXRhKTtcblxuICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1ZmZlciwgdGhlbiB0aGF0IG1lYW5zXG4gIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZFxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAoc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgc3VwcG9ydCA9IHJlcXVpcmUoJy4vc3VwcG9ydCcpO1xuLy8gcHJpdmF0ZSBwcm9wZXJ0eVxudmFyIF9rZXlTdHIgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCI7XG5cblxuLy8gcHVibGljIG1ldGhvZCBmb3IgZW5jb2RpbmdcbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgdmFyIGNocjEsIGNocjIsIGNocjMsIGVuYzEsIGVuYzIsIGVuYzMsIGVuYzQ7XG4gICAgdmFyIGkgPSAwLCBsZW4gPSBpbnB1dC5sZW5ndGgsIHJlbWFpbmluZ0J5dGVzID0gbGVuO1xuXG4gICAgdmFyIGlzQXJyYXkgPSB1dGlscy5nZXRUeXBlT2YoaW5wdXQpICE9PSBcInN0cmluZ1wiO1xuICAgIHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgIHJlbWFpbmluZ0J5dGVzID0gbGVuIC0gaTtcblxuICAgICAgICBpZiAoIWlzQXJyYXkpIHtcbiAgICAgICAgICAgIGNocjEgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICAgICAgICBjaHIyID0gaSA8IGxlbiA/IGlucHV0LmNoYXJDb2RlQXQoaSsrKSA6IDA7XG4gICAgICAgICAgICBjaHIzID0gaSA8IGxlbiA/IGlucHV0LmNoYXJDb2RlQXQoaSsrKSA6IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaHIxID0gaW5wdXRbaSsrXTtcbiAgICAgICAgICAgIGNocjIgPSBpIDwgbGVuID8gaW5wdXRbaSsrXSA6IDA7XG4gICAgICAgICAgICBjaHIzID0gaSA8IGxlbiA/IGlucHV0W2krK10gOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5jMSA9IGNocjEgPj4gMjtcbiAgICAgICAgZW5jMiA9ICgoY2hyMSAmIDMpIDw8IDQpIHwgKGNocjIgPj4gNCk7XG4gICAgICAgIGVuYzMgPSByZW1haW5pbmdCeXRlcyA+IDEgPyAoKChjaHIyICYgMTUpIDw8IDIpIHwgKGNocjMgPj4gNikpIDogNjQ7XG4gICAgICAgIGVuYzQgPSByZW1haW5pbmdCeXRlcyA+IDIgPyAoY2hyMyAmIDYzKSA6IDY0O1xuXG4gICAgICAgIG91dHB1dC5wdXNoKF9rZXlTdHIuY2hhckF0KGVuYzEpICsgX2tleVN0ci5jaGFyQXQoZW5jMikgKyBfa2V5U3RyLmNoYXJBdChlbmMzKSArIF9rZXlTdHIuY2hhckF0KGVuYzQpKTtcblxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQuam9pbihcIlwiKTtcbn07XG5cbi8vIHB1YmxpYyBtZXRob2QgZm9yIGRlY29kaW5nXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgdmFyIGNocjEsIGNocjIsIGNocjM7XG4gICAgdmFyIGVuYzEsIGVuYzIsIGVuYzMsIGVuYzQ7XG4gICAgdmFyIGkgPSAwLCByZXN1bHRJbmRleCA9IDA7XG5cbiAgICB2YXIgZGF0YVVybFByZWZpeCA9IFwiZGF0YTpcIjtcblxuICAgIGlmIChpbnB1dC5zdWJzdHIoMCwgZGF0YVVybFByZWZpeC5sZW5ndGgpID09PSBkYXRhVXJsUHJlZml4KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBjb21tb24gZXJyb3I6IHBlb3BsZSBnaXZlIGEgZGF0YSB1cmxcbiAgICAgICAgLy8gKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUi4uLikgd2l0aCBhIHtiYXNlNjQ6IHRydWV9IGFuZFxuICAgICAgICAvLyB3b25kZXJzIHdoeSB0aGluZ3MgZG9uJ3Qgd29yay5cbiAgICAgICAgLy8gV2UgY2FuIGRldGVjdCB0aGF0IHRoZSBzdHJpbmcgaW5wdXQgbG9va3MgbGlrZSBhIGRhdGEgdXJsIGJ1dCB3ZVxuICAgICAgICAvLyAqY2FuJ3QqIGJlIHN1cmUgaXQgaXMgb25lOiByZW1vdmluZyBldmVyeXRoaW5nIHVwIHRvIHRoZSBjb21tYSB3b3VsZFxuICAgICAgICAvLyBiZSB0b28gZGFuZ2Vyb3VzLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBpbnB1dCwgaXQgbG9va3MgbGlrZSBhIGRhdGEgdXJsLlwiKTtcbiAgICB9XG5cbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXFw9XS9nLCBcIlwiKTtcblxuICAgIHZhciB0b3RhbExlbmd0aCA9IGlucHV0Lmxlbmd0aCAqIDMgLyA0O1xuICAgIGlmKGlucHV0LmNoYXJBdChpbnB1dC5sZW5ndGggLSAxKSA9PT0gX2tleVN0ci5jaGFyQXQoNjQpKSB7XG4gICAgICAgIHRvdGFsTGVuZ3RoLS07XG4gICAgfVxuICAgIGlmKGlucHV0LmNoYXJBdChpbnB1dC5sZW5ndGggLSAyKSA9PT0gX2tleVN0ci5jaGFyQXQoNjQpKSB7XG4gICAgICAgIHRvdGFsTGVuZ3RoLS07XG4gICAgfVxuICAgIGlmICh0b3RhbExlbmd0aCAlIDEgIT09IDApIHtcbiAgICAgICAgLy8gdG90YWxMZW5ndGggaXMgbm90IGFuIGludGVnZXIsIHRoZSBsZW5ndGggZG9lcyBub3QgbWF0Y2ggYSB2YWxpZFxuICAgICAgICAvLyBiYXNlNjQgY29udGVudC4gVGhhdCBjYW4gaGFwcGVuIGlmOlxuICAgICAgICAvLyAtIHRoZSBpbnB1dCBpcyBub3QgYSBiYXNlNjQgY29udGVudFxuICAgICAgICAvLyAtIHRoZSBpbnB1dCBpcyAqYWxtb3N0KiBhIGJhc2U2NCBjb250ZW50LCB3aXRoIGEgZXh0cmEgY2hhcnMgYXQgdGhlXG4gICAgICAgIC8vICAgYmVnaW5uaW5nIG9yIGF0IHRoZSBlbmRcbiAgICAgICAgLy8gLSB0aGUgaW5wdXQgdXNlcyBhIGJhc2U2NCB2YXJpYW50IChiYXNlNjR1cmwgZm9yIGV4YW1wbGUpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGlucHV0LCBiYWQgY29udGVudCBsZW5ndGguXCIpO1xuICAgIH1cbiAgICB2YXIgb3V0cHV0O1xuICAgIGlmIChzdXBwb3J0LnVpbnQ4YXJyYXkpIHtcbiAgICAgICAgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGh8MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0ID0gbmV3IEFycmF5KHRvdGFsTGVuZ3RofDApO1xuICAgIH1cblxuICAgIHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKSB7XG5cbiAgICAgICAgZW5jMSA9IF9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG4gICAgICAgIGVuYzIgPSBfa2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgICAgICBlbmMzID0gX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgZW5jNCA9IF9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG5cbiAgICAgICAgY2hyMSA9IChlbmMxIDw8IDIpIHwgKGVuYzIgPj4gNCk7XG4gICAgICAgIGNocjIgPSAoKGVuYzIgJiAxNSkgPDwgNCkgfCAoZW5jMyA+PiAyKTtcbiAgICAgICAgY2hyMyA9ICgoZW5jMyAmIDMpIDw8IDYpIHwgZW5jNDtcblxuICAgICAgICBvdXRwdXRbcmVzdWx0SW5kZXgrK10gPSBjaHIxO1xuXG4gICAgICAgIGlmIChlbmMzICE9PSA2NCkge1xuICAgICAgICAgICAgb3V0cHV0W3Jlc3VsdEluZGV4KytdID0gY2hyMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5jNCAhPT0gNjQpIHtcbiAgICAgICAgICAgIG91dHB1dFtyZXN1bHRJbmRleCsrXSA9IGNocjM7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIENvbnZlcnRXb3JrZXIgPSByZXF1aXJlKCcuL0NvbnZlcnRXb3JrZXInKTtcbnZhciBHZW5lcmljV29ya2VyID0gcmVxdWlyZSgnLi9HZW5lcmljV29ya2VyJyk7XG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnLi4vYmFzZTY0Jyk7XG52YXIgc3VwcG9ydCA9IHJlcXVpcmUoXCIuLi9zdXBwb3J0XCIpO1xudmFyIGV4dGVybmFsID0gcmVxdWlyZShcIi4uL2V4dGVybmFsXCIpO1xuXG52YXIgTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlciA9IG51bGw7XG5pZiAoc3VwcG9ydC5ub2Rlc3RyZWFtKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlciA9IHJlcXVpcmUoJy4uL25vZGVqcy9Ob2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyJyk7XG4gICAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIEFwcGx5IHRoZSBmaW5hbCB0cmFuc2Zvcm1hdGlvbiBvZiB0aGUgZGF0YS4gSWYgdGhlIHVzZXIgd2FudHMgYSBCbG9iIGZvclxuICogZXhhbXBsZSwgaXQncyBlYXNpZXIgdG8gd29yayB3aXRoIGFuIFU4aW50QXJyYXkgYW5kIGZpbmFsbHkgZG8gdGhlXG4gKiBBcnJheUJ1ZmZlci9CbG9iIGNvbnZlcnNpb24uXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgbmFtZSBvZiB0aGUgZmluYWwgdHlwZVxuICogQHBhcmFtIHtTdHJpbmd8VWludDhBcnJheXxCdWZmZXJ9IGNvbnRlbnQgdGhlIGNvbnRlbnQgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1N0cmluZ30gbWltZVR5cGUgdGhlIG1pbWUgdHlwZSBvZiB0aGUgY29udGVudCwgaWYgYXBwbGljYWJsZS5cbiAqIEByZXR1cm4ge1N0cmluZ3xVaW50OEFycmF5fEFycmF5QnVmZmVyfEJ1ZmZlcnxCbG9ifSB0aGUgY29udGVudCBpbiB0aGUgcmlnaHQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1aaXBPdXRwdXQodHlwZSwgY29udGVudCwgbWltZVR5cGUpIHtcbiAgICBzd2l0Y2godHlwZSkge1xuICAgICAgICBjYXNlIFwiYmxvYlwiIDpcbiAgICAgICAgICAgIHJldHVybiB1dGlscy5uZXdCbG9iKHV0aWxzLnRyYW5zZm9ybVRvKFwiYXJyYXlidWZmZXJcIiwgY29udGVudCksIG1pbWVUeXBlKTtcbiAgICAgICAgY2FzZSBcImJhc2U2NFwiIDpcbiAgICAgICAgICAgIHJldHVybiBiYXNlNjQuZW5jb2RlKGNvbnRlbnQpO1xuICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgIHJldHVybiB1dGlscy50cmFuc2Zvcm1Ubyh0eXBlLCBjb250ZW50KTtcbiAgICB9XG59XG5cbi8qKlxuICogQ29uY2F0ZW5hdGUgYW4gYXJyYXkgb2YgZGF0YSBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSB0eXBlIG9mIHRoZSBkYXRhIGluIHRoZSBnaXZlbiBhcnJheS5cbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGFBcnJheSB0aGUgYXJyYXkgY29udGFpbmluZyB0aGUgZGF0YSBjaHVua3MgdG8gY29uY2F0ZW5hdGVcbiAqIEByZXR1cm4ge1N0cmluZ3xVaW50OEFycmF5fEJ1ZmZlcn0gdGhlIGNvbmNhdGVuYXRlZCBkYXRhXG4gKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBhc2tlZCB0eXBlIGlzIHVuc3VwcG9ydGVkXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdCAodHlwZSwgZGF0YUFycmF5KSB7XG4gICAgdmFyIGksIGluZGV4ID0gMCwgcmVzID0gbnVsbCwgdG90YWxMZW5ndGggPSAwO1xuICAgIGZvcihpID0gMDsgaSA8IGRhdGFBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0b3RhbExlbmd0aCArPSBkYXRhQXJyYXlbaV0ubGVuZ3RoO1xuICAgIH1cbiAgICBzd2l0Y2godHlwZSkge1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gZGF0YUFycmF5LmpvaW4oXCJcIik7XG4gICAgICAgICAgY2FzZSBcImFycmF5XCI6XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgZGF0YUFycmF5KTtcbiAgICAgICAgY2FzZSBcInVpbnQ4YXJyYXlcIjpcbiAgICAgICAgICAgIHJlcyA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGRhdGFBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlcy5zZXQoZGF0YUFycmF5W2ldLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgaW5kZXggKz0gZGF0YUFycmF5W2ldLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIGNhc2UgXCJub2RlYnVmZmVyXCI6XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChkYXRhQXJyYXkpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29uY2F0IDogdW5zdXBwb3J0ZWQgdHlwZSAnXCIgICsgdHlwZSArIFwiJ1wiKTtcbiAgICB9XG59XG5cbi8qKlxuICogTGlzdGVuIGEgU3RyZWFtSGVscGVyLCBhY2N1bXVsYXRlIGl0cyBjb250ZW50IGFuZCBjb25jYXRlbmF0ZSBpdCBpbnRvIGFcbiAqIGNvbXBsZXRlIGJsb2NrLlxuICogQHBhcmFtIHtTdHJlYW1IZWxwZXJ9IGhlbHBlciB0aGUgaGVscGVyIHRvIHVzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZUNhbGxiYWNrIGEgY2FsbGJhY2sgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLiBDYWxsZWRcbiAqIHdpdGggb25lIGFyZyA6XG4gKiAtIHRoZSBtZXRhZGF0YSBsaW5rZWQgdG8gdGhlIHVwZGF0ZSByZWNlaXZlZC5cbiAqIEByZXR1cm4gUHJvbWlzZSB0aGUgcHJvbWlzZSBmb3IgdGhlIGFjY3VtdWxhdGlvbi5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZShoZWxwZXIsIHVwZGF0ZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIG5ldyBleHRlcm5hbC5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgICB2YXIgZGF0YUFycmF5ID0gW107XG4gICAgICAgIHZhciBjaHVua1R5cGUgPSBoZWxwZXIuX2ludGVybmFsVHlwZSxcbiAgICAgICAgICAgIHJlc3VsdFR5cGUgPSBoZWxwZXIuX291dHB1dFR5cGUsXG4gICAgICAgICAgICBtaW1lVHlwZSA9IGhlbHBlci5fbWltZVR5cGU7XG4gICAgICAgIGhlbHBlclxuICAgICAgICAub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSwgbWV0YSkge1xuICAgICAgICAgICAgZGF0YUFycmF5LnB1c2goZGF0YSk7XG4gICAgICAgICAgICBpZih1cGRhdGVDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNhbGxiYWNrKG1ldGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBkYXRhQXJyYXkgPSBbXTtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ2VuZCcsIGZ1bmN0aW9uICgpe1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdHJhbnNmb3JtWmlwT3V0cHV0KHJlc3VsdFR5cGUsIGNvbmNhdChjaHVua1R5cGUsIGRhdGFBcnJheSksIG1pbWVUeXBlKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YUFycmF5ID0gW107XG4gICAgICAgIH0pXG4gICAgICAgIC5yZXN1bWUoKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBBbiBoZWxwZXIgdG8gZWFzaWx5IHVzZSB3b3JrZXJzIG91dHNpZGUgb2YgSlNaaXAuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7V29ya2VyfSB3b3JrZXIgdGhlIHdvcmtlciB0byB3cmFwXG4gKiBAcGFyYW0ge1N0cmluZ30gb3V0cHV0VHlwZSB0aGUgdHlwZSBvZiBkYXRhIGV4cGVjdGVkIGJ5IHRoZSB1c2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBtaW1lVHlwZSB0aGUgbWltZSB0eXBlIG9mIHRoZSBjb250ZW50LCBpZiBhcHBsaWNhYmxlLlxuICovXG5mdW5jdGlvbiBTdHJlYW1IZWxwZXIod29ya2VyLCBvdXRwdXRUeXBlLCBtaW1lVHlwZSkge1xuICAgIHZhciBpbnRlcm5hbFR5cGUgPSBvdXRwdXRUeXBlO1xuICAgIHN3aXRjaChvdXRwdXRUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJibG9iXCI6XG4gICAgICAgIGNhc2UgXCJhcnJheWJ1ZmZlclwiOlxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlID0gXCJ1aW50OGFycmF5XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYmFzZTY0XCI6XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGUgPSBcInN0cmluZ1wiO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICAvLyB0aGUgdHlwZSB1c2VkIGludGVybmFsbHlcbiAgICAgICAgdGhpcy5faW50ZXJuYWxUeXBlID0gaW50ZXJuYWxUeXBlO1xuICAgICAgICAvLyB0aGUgdHlwZSB1c2VkIHRvIG91dHB1dCByZXN1bHRzXG4gICAgICAgIHRoaXMuX291dHB1dFR5cGUgPSBvdXRwdXRUeXBlO1xuICAgICAgICAvLyB0aGUgbWltZSB0eXBlXG4gICAgICAgIHRoaXMuX21pbWVUeXBlID0gbWltZVR5cGU7XG4gICAgICAgIHV0aWxzLmNoZWNrU3VwcG9ydChpbnRlcm5hbFR5cGUpO1xuICAgICAgICB0aGlzLl93b3JrZXIgPSB3b3JrZXIucGlwZShuZXcgQ29udmVydFdvcmtlcihpbnRlcm5hbFR5cGUpKTtcbiAgICAgICAgLy8gdGhlIGxhc3Qgd29ya2VycyBjYW4gYmUgcmV3aXJlZCB3aXRob3V0IGlzc3VlcyBidXQgd2UgbmVlZCB0b1xuICAgICAgICAvLyBwcmV2ZW50IGFueSB1cGRhdGVzIG9uIHByZXZpb3VzIHdvcmtlcnMuXG4gICAgICAgIHdvcmtlci5sb2NrKCk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IG5ldyBHZW5lcmljV29ya2VyKFwiZXJyb3JcIik7XG4gICAgICAgIHRoaXMuX3dvcmtlci5lcnJvcihlKTtcbiAgICB9XG59XG5cblN0cmVhbUhlbHBlci5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogTGlzdGVuIGEgU3RyZWFtSGVscGVyLCBhY2N1bXVsYXRlIGl0cyBjb250ZW50IGFuZCBjb25jYXRlbmF0ZSBpdCBpbnRvIGFcbiAgICAgKiBjb21wbGV0ZSBibG9jay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVDYiB0aGUgdXBkYXRlIGNhbGxiYWNrLlxuICAgICAqIEByZXR1cm4gUHJvbWlzZSB0aGUgcHJvbWlzZSBmb3IgdGhlIGFjY3VtdWxhdGlvbi5cbiAgICAgKi9cbiAgICBhY2N1bXVsYXRlIDogZnVuY3Rpb24gKHVwZGF0ZUNiKSB7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRlKHRoaXMsIHVwZGF0ZUNiKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEFkZCBhIGxpc3RlbmVyIG9uIGFuIGV2ZW50IHRyaWdnZXJlZCBvbiBhIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZ0IHRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIHRoZSBsaXN0ZW5lclxuICAgICAqIEByZXR1cm4ge1N0cmVhbUhlbHBlcn0gdGhlIGN1cnJlbnQgaGVscGVyLlxuICAgICAqL1xuICAgIG9uIDogZnVuY3Rpb24gKGV2dCwgZm4pIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGlmKGV2dCA9PT0gXCJkYXRhXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtlci5vbihldnQsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoc2VsZiwgY2h1bmsuZGF0YSwgY2h1bmsubWV0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtlci5vbihldnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB1dGlscy5kZWxheShmbiwgYXJndW1lbnRzLCBzZWxmKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmVzdW1lIHRoZSBmbG93IG9mIGNodW5rcy5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW1IZWxwZXJ9IHRoZSBjdXJyZW50IGhlbHBlci5cbiAgICAgKi9cbiAgICByZXN1bWUgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHV0aWxzLmRlbGF5KHRoaXMuX3dvcmtlci5yZXN1bWUsIFtdLCB0aGlzLl93b3JrZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFBhdXNlIHRoZSBmbG93IG9mIGNodW5rcy5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW1IZWxwZXJ9IHRoZSBjdXJyZW50IGhlbHBlci5cbiAgICAgKi9cbiAgICBwYXVzZSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyLnBhdXNlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgbm9kZWpzIHN0cmVhbSBmb3IgdGhpcyBoZWxwZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlQ2IgdGhlIHVwZGF0ZSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJuIHtOb2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyfSB0aGUgbm9kZWpzIHN0cmVhbS5cbiAgICAgKi9cbiAgICB0b05vZGVqc1N0cmVhbSA6IGZ1bmN0aW9uICh1cGRhdGVDYikge1xuICAgICAgICB1dGlscy5jaGVja1N1cHBvcnQoXCJub2Rlc3RyZWFtXCIpO1xuICAgICAgICBpZiAodGhpcy5fb3V0cHV0VHlwZSAhPT0gXCJub2RlYnVmZmVyXCIpIHtcbiAgICAgICAgICAgIC8vIGFuIG9iamVjdCBzdHJlYW0gY29udGFpbmluZyBibG9iL2FycmF5YnVmZmVyL3VpbnQ4YXJyYXkvc3RyaW5nXG4gICAgICAgICAgICAvLyBpcyBzdHJhbmdlIGFuZCBJIGRvbid0IGtub3cgaWYgaXQgd291bGQgYmUgdXNlZnVsLlxuICAgICAgICAgICAgLy8gSSB5b3UgZmluZCB0aGlzIGNvbW1lbnQgYW5kIGhhdmUgYSBnb29kIHVzZWNhc2UsIHBsZWFzZSBvcGVuIGFcbiAgICAgICAgICAgIC8vIGJ1ZyByZXBvcnQgIVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuX291dHB1dFR5cGUgKyBcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgbWV0aG9kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyKHRoaXMsIHtcbiAgICAgICAgICAgIG9iamVjdE1vZGUgOiB0aGlzLl9vdXRwdXRUeXBlICE9PSBcIm5vZGVidWZmZXJcIlxuICAgICAgICB9LCB1cGRhdGVDYik7XG4gICAgfVxufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUhlbHBlcjtcbiIsIid1c2Ugc3RyaWN0JztcbmV4cG9ydHMuYmFzZTY0ID0gZmFsc2U7XG5leHBvcnRzLmJpbmFyeSA9IGZhbHNlO1xuZXhwb3J0cy5kaXIgPSBmYWxzZTtcbmV4cG9ydHMuY3JlYXRlRm9sZGVycyA9IHRydWU7XG5leHBvcnRzLmRhdGUgPSBudWxsO1xuZXhwb3J0cy5jb21wcmVzc2lvbiA9IG51bGw7XG5leHBvcnRzLmNvbXByZXNzaW9uT3B0aW9ucyA9IG51bGw7XG5leHBvcnRzLmNvbW1lbnQgPSBudWxsO1xuZXhwb3J0cy51bml4UGVybWlzc2lvbnMgPSBudWxsO1xuZXhwb3J0cy5kb3NQZXJtaXNzaW9ucyA9IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgR2VuZXJpY1dvcmtlciA9IHJlcXVpcmUoJy4vR2VuZXJpY1dvcmtlcicpO1xuXG4vLyB0aGUgc2l6ZSBvZiB0aGUgZ2VuZXJhdGVkIGNodW5rc1xuLy8gVE9ETyBleHBvc2UgdGhpcyBhcyBhIHB1YmxpYyB2YXJpYWJsZVxudmFyIERFRkFVTFRfQkxPQ0tfU0laRSA9IDE2ICogMTAyNDtcblxuLyoqXG4gKiBBIHdvcmtlciB0aGF0IHJlYWRzIGEgY29udGVudCBhbmQgZW1pdHMgY2h1bmtzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1Byb21pc2V9IGRhdGFQIHRoZSBwcm9taXNlIG9mIHRoZSBkYXRhIHRvIHNwbGl0XG4gKi9cbmZ1bmN0aW9uIERhdGFXb3JrZXIoZGF0YVApIHtcbiAgICBHZW5lcmljV29ya2VyLmNhbGwodGhpcywgXCJEYXRhV29ya2VyXCIpO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLmRhdGFJc1JlYWR5ID0gZmFsc2U7XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgdGhpcy5tYXggPSAwO1xuICAgIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgdGhpcy50eXBlID0gXCJcIjtcblxuICAgIHRoaXMuX3RpY2tTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAgIGRhdGFQLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgc2VsZi5kYXRhSXNSZWFkeSA9IHRydWU7XG4gICAgICAgIHNlbGYuZGF0YSA9IGRhdGE7XG4gICAgICAgIHNlbGYubWF4ID0gZGF0YSAmJiBkYXRhLmxlbmd0aCB8fCAwO1xuICAgICAgICBzZWxmLnR5cGUgPSB1dGlscy5nZXRUeXBlT2YoZGF0YSk7XG4gICAgICAgIGlmKCFzZWxmLmlzUGF1c2VkKSB7XG4gICAgICAgICAgICBzZWxmLl90aWNrQW5kUmVwZWF0KCk7XG4gICAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBzZWxmLmVycm9yKGUpO1xuICAgIH0pO1xufVxuXG51dGlscy5pbmhlcml0cyhEYXRhV29ya2VyLCBHZW5lcmljV29ya2VyKTtcblxuLyoqXG4gKiBAc2VlIEdlbmVyaWNXb3JrZXIuY2xlYW5VcFxuICovXG5EYXRhV29ya2VyLnByb3RvdHlwZS5jbGVhblVwID0gZnVuY3Rpb24gKCkge1xuICAgIEdlbmVyaWNXb3JrZXIucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmRhdGEgPSBudWxsO1xufTtcblxuLyoqXG4gKiBAc2VlIEdlbmVyaWNXb3JrZXIucmVzdW1lXG4gKi9cbkRhdGFXb3JrZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZighR2VuZXJpY1dvcmtlci5wcm90b3R5cGUucmVzdW1lLmNhbGwodGhpcykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fdGlja1NjaGVkdWxlZCAmJiB0aGlzLmRhdGFJc1JlYWR5KSB7XG4gICAgICAgIHRoaXMuX3RpY2tTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICB1dGlscy5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LCBbXSwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBUcmlnZ2VyIGEgdGljayBhIHNjaGVkdWxlIGFuIG90aGVyIGNhbGwgdG8gdGhpcyBmdW5jdGlvbi5cbiAqL1xuRGF0YVdvcmtlci5wcm90b3R5cGUuX3RpY2tBbmRSZXBlYXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl90aWNrU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgaWYodGhpcy5pc1BhdXNlZCB8fCB0aGlzLmlzRmluaXNoZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl90aWNrKCk7XG4gICAgaWYoIXRoaXMuaXNGaW5pc2hlZCkge1xuICAgICAgICB1dGlscy5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LCBbXSwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3RpY2tTY2hlZHVsZWQgPSB0cnVlO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmVhZCBhbmQgcHVzaCBhIGNodW5rLlxuICovXG5EYXRhV29ya2VyLnByb3RvdHlwZS5fdGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYodGhpcy5pc1BhdXNlZCB8fCB0aGlzLmlzRmluaXNoZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBzaXplID0gREVGQVVMVF9CTE9DS19TSVpFO1xuICAgIHZhciBkYXRhID0gbnVsbCwgbmV4dEluZGV4ID0gTWF0aC5taW4odGhpcy5tYXgsIHRoaXMuaW5kZXggKyBzaXplKTtcbiAgICBpZiAodGhpcy5pbmRleCA+PSB0aGlzLm1heCkge1xuICAgICAgICAvLyBFT0ZcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLmRhdGEuc3Vic3RyaW5nKHRoaXMuaW5kZXgsIG5leHRJbmRleCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ1aW50OGFycmF5XCI6XG4gICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuZGF0YS5zdWJhcnJheSh0aGlzLmluZGV4LCBuZXh0SW5kZXgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgIGNhc2UgXCJub2RlYnVmZmVyXCI6XG4gICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLmluZGV4LCBuZXh0SW5kZXgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVzaCh7XG4gICAgICAgICAgICBkYXRhIDogZGF0YSxcbiAgICAgICAgICAgIG1ldGEgOiB7XG4gICAgICAgICAgICAgICAgcGVyY2VudCA6IHRoaXMubWF4ID8gdGhpcy5pbmRleCAvIHRoaXMubWF4ICogMTAwIDogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFXb3JrZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgR2VuZXJpY1dvcmtlciA9IHJlcXVpcmUoJy4vR2VuZXJpY1dvcmtlcicpO1xuXG4vKipcbiAqIEEgd29ya2VyIHdoaWNoIGNhbGN1bGF0ZSB0aGUgdG90YWwgbGVuZ3RoIG9mIHRoZSBkYXRhIGZsb3dpbmcgdGhyb3VnaC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BOYW1lIHRoZSBuYW1lIHVzZWQgdG8gZXhwb3NlIHRoZSBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gRGF0YUxlbmd0aFByb2JlKHByb3BOYW1lKSB7XG4gICAgR2VuZXJpY1dvcmtlci5jYWxsKHRoaXMsIFwiRGF0YUxlbmd0aFByb2JlIGZvciBcIiArIHByb3BOYW1lKTtcbiAgICB0aGlzLnByb3BOYW1lID0gcHJvcE5hbWU7XG4gICAgdGhpcy53aXRoU3RyZWFtSW5mbyhwcm9wTmFtZSwgMCk7XG59XG51dGlscy5pbmhlcml0cyhEYXRhTGVuZ3RoUHJvYmUsIEdlbmVyaWNXb3JrZXIpO1xuXG4vKipcbiAqIEBzZWUgR2VuZXJpY1dvcmtlci5wcm9jZXNzQ2h1bmtcbiAqL1xuRGF0YUxlbmd0aFByb2JlLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBpZihjaHVuaykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5zdHJlYW1JbmZvW3RoaXMucHJvcE5hbWVdIHx8IDA7XG4gICAgICAgIHRoaXMuc3RyZWFtSW5mb1t0aGlzLnByb3BOYW1lXSA9IGxlbmd0aCArIGNodW5rLmRhdGEubGVuZ3RoO1xuICAgIH1cbiAgICBHZW5lcmljV29ya2VyLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsuY2FsbCh0aGlzLCBjaHVuayk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBEYXRhTGVuZ3RoUHJvYmU7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdlbmVyaWNXb3JrZXIgPSByZXF1aXJlKCcuL0dlbmVyaWNXb3JrZXInKTtcbnZhciBjcmMzMiA9IHJlcXVpcmUoJy4uL2NyYzMyJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIEEgd29ya2VyIHdoaWNoIGNhbGN1bGF0ZSB0aGUgY3JjMzIgb2YgdGhlIGRhdGEgZmxvd2luZyB0aHJvdWdoLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIENyYzMyUHJvYmUoKSB7XG4gICAgR2VuZXJpY1dvcmtlci5jYWxsKHRoaXMsIFwiQ3JjMzJQcm9iZVwiKTtcbiAgICB0aGlzLndpdGhTdHJlYW1JbmZvKFwiY3JjMzJcIiwgMCk7XG59XG51dGlscy5pbmhlcml0cyhDcmMzMlByb2JlLCBHZW5lcmljV29ya2VyKTtcblxuLyoqXG4gKiBAc2VlIEdlbmVyaWNXb3JrZXIucHJvY2Vzc0NodW5rXG4gKi9cbkNyYzMyUHJvYmUucHJvdG90eXBlLnByb2Nlc3NDaHVuayA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgIHRoaXMuc3RyZWFtSW5mby5jcmMzMiA9IGNyYzMyKGNodW5rLmRhdGEsIHRoaXMuc3RyZWFtSW5mby5jcmMzMiB8fCAwKTtcbiAgICB0aGlzLnB1c2goY2h1bmspO1xufTtcbm1vZHVsZS5leHBvcnRzID0gQ3JjMzJQcm9iZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdlbmVyaWNXb3JrZXIgPSByZXF1aXJlKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtcblxuZXhwb3J0cy5TVE9SRSA9IHtcbiAgICBtYWdpYzogXCJcXHgwMFxceDAwXCIsXG4gICAgY29tcHJlc3NXb3JrZXIgOiBmdW5jdGlvbiAoY29tcHJlc3Npb25PcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgR2VuZXJpY1dvcmtlcihcIlNUT1JFIGNvbXByZXNzaW9uXCIpO1xuICAgIH0sXG4gICAgdW5jb21wcmVzc1dvcmtlciA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHZW5lcmljV29ya2VyKFwiU1RPUkUgZGVjb21wcmVzc2lvblwiKTtcbiAgICB9XG59O1xuZXhwb3J0cy5ERUZMQVRFID0gcmVxdWlyZSgnLi9mbGF0ZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOb3RlOiBhZGxlcjMyIHRha2VzIDEyJSBmb3IgbGV2ZWwgMCBhbmQgMiUgZm9yIGxldmVsIDYuXG4vLyBJdCBpc24ndCB3b3J0aCBpdCB0byBtYWtlIGFkZGl0aW9uYWwgb3B0aW1pemF0aW9ucyBhcyBpbiBvcmlnaW5hbC5cbi8vIFNtYWxsIHNpemUgaXMgcHJlZmVyYWJsZS5cblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBhZGxlcjMyKGFkbGVyLCBidWYsIGxlbiwgcG9zKSB7XG4gIHZhciBzMSA9IChhZGxlciAmIDB4ZmZmZikgfDAsXG4gICAgICBzMiA9ICgoYWRsZXIgPj4+IDE2KSAmIDB4ZmZmZikgfDAsXG4gICAgICBuID0gMDtcblxuICB3aGlsZSAobGVuICE9PSAwKSB7XG4gICAgLy8gU2V0IGxpbWl0IH4gdHdpY2UgbGVzcyB0aGFuIDU1NTIsIHRvIGtlZXBcbiAgICAvLyBzMiBpbiAzMS1iaXRzLCBiZWNhdXNlIHdlIGZvcmNlIHNpZ25lZCBpbnRzLlxuICAgIC8vIGluIG90aGVyIGNhc2UgJT0gd2lsbCBmYWlsLlxuICAgIG4gPSBsZW4gPiAyMDAwID8gMjAwMCA6IGxlbjtcbiAgICBsZW4gLT0gbjtcblxuICAgIGRvIHtcbiAgICAgIHMxID0gKHMxICsgYnVmW3BvcysrXSkgfDA7XG4gICAgICBzMiA9IChzMiArIHMxKSB8MDtcbiAgICB9IHdoaWxlICgtLW4pO1xuXG4gICAgczEgJT0gNjU1MjE7XG4gICAgczIgJT0gNjU1MjE7XG4gIH1cblxuICByZXR1cm4gKHMxIHwgKHMyIDw8IDE2KSkgfDA7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOb3RlOiB3ZSBjYW4ndCBnZXQgc2lnbmlmaWNhbnQgc3BlZWQgYm9vc3QgaGVyZS5cbi8vIFNvIHdyaXRlIGNvZGUgdG8gbWluaW1pemUgc2l6ZSAtIG5vIHByZWdlbmVyYXRlZCB0YWJsZXNcbi8vIGFuZCBhcnJheSB0b29scyBkZXBlbmRlbmNpZXMuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLy8gVXNlIG9yZGluYXJ5IGFycmF5LCBzaW5jZSB1bnR5cGVkIG1ha2VzIG5vIGJvb3N0IGhlcmVcbmZ1bmN0aW9uIG1ha2VUYWJsZSgpIHtcbiAgdmFyIGMsIHRhYmxlID0gW107XG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgIGMgPSBuO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgODsgaysrKSB7XG4gICAgICBjID0gKChjICYgMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuICAgIH1cbiAgICB0YWJsZVtuXSA9IGM7XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59XG5cbi8vIENyZWF0ZSB0YWJsZSBvbiBsb2FkLiBKdXN0IDI1NSBzaWduZWQgbG9uZ3MuIE5vdCBhIHByb2JsZW0uXG52YXIgY3JjVGFibGUgPSBtYWtlVGFibGUoKTtcblxuXG5mdW5jdGlvbiBjcmMzMihjcmMsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHQgPSBjcmNUYWJsZSxcbiAgICAgIGVuZCA9IHBvcyArIGxlbjtcblxuICBjcmMgXj0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7XG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0WyhjcmMgXiBidWZbaV0pICYgMHhGRl07XG4gIH1cblxuICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyYzMyO1xuIiwiLy8gU3RyaW5nIGVuY29kZS9kZWNvZGUgaGVscGVyc1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cblxuLy8gUXVpY2sgY2hlY2sgaWYgd2UgY2FuIHVzZSBmYXN0IGFycmF5IHRvIGJpbiBzdHJpbmcgY29udmVyc2lvblxuLy9cbi8vIC0gYXBwbHkoQXJyYXkpIGNhbiBmYWlsIG9uIEFuZHJvaWQgMi4yXG4vLyAtIGFwcGx5KFVpbnQ4QXJyYXkpIGNhbiBmYWlsIG9uIGlPUyA1LjEgU2FmYXJpXG4vL1xudmFyIFNUUl9BUFBMWV9PSyA9IHRydWU7XG52YXIgU1RSX0FQUExZX1VJQV9PSyA9IHRydWU7XG5cbnRyeSB7IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgWyAwIF0pOyB9IGNhdGNoIChfXykgeyBTVFJfQVBQTFlfT0sgPSBmYWxzZTsgfVxudHJ5IHsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSk7IH0gY2F0Y2ggKF9fKSB7IFNUUl9BUFBMWV9VSUFfT0sgPSBmYWxzZTsgfVxuXG5cbi8vIFRhYmxlIHdpdGggdXRmOCBsZW5ndGhzIChjYWxjdWxhdGVkIGJ5IGZpcnN0IGJ5dGUgb2Ygc2VxdWVuY2UpXG4vLyBOb3RlLCB0aGF0IDUgJiA2LWJ5dGUgdmFsdWVzIGFuZCBzb21lIDQtYnl0ZSB2YWx1ZXMgY2FuIG5vdCBiZSByZXByZXNlbnRlZCBpbiBKUyxcbi8vIGJlY2F1c2UgbWF4IHBvc3NpYmxlIGNvZGVwb2ludCBpcyAweDEwZmZmZlxudmFyIF91dGY4bGVuID0gbmV3IHV0aWxzLkJ1ZjgoMjU2KTtcbmZvciAodmFyIHEgPSAwOyBxIDwgMjU2OyBxKyspIHtcbiAgX3V0ZjhsZW5bcV0gPSAocSA+PSAyNTIgPyA2IDogcSA+PSAyNDggPyA1IDogcSA+PSAyNDAgPyA0IDogcSA+PSAyMjQgPyAzIDogcSA+PSAxOTIgPyAyIDogMSk7XG59XG5fdXRmOGxlblsyNTRdID0gX3V0ZjhsZW5bMjU0XSA9IDE7IC8vIEludmFsaWQgc2VxdWVuY2Ugc3RhcnRcblxuXG4vLyBjb252ZXJ0IHN0cmluZyB0byBhcnJheSAodHlwZWQsIHdoZW4gcG9zc2libGUpXG5leHBvcnRzLnN0cmluZzJidWYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHZhciBidWYsIGMsIGMyLCBtX3BvcywgaSwgc3RyX2xlbiA9IHN0ci5sZW5ndGgsIGJ1Zl9sZW4gPSAwO1xuXG4gIC8vIGNvdW50IGJpbmFyeSBzaXplXG4gIGZvciAobV9wb3MgPSAwOyBtX3BvcyA8IHN0cl9sZW47IG1fcG9zKyspIHtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpO1xuICAgIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJiAobV9wb3MgKyAxIDwgc3RyX2xlbikpIHtcbiAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MgKyAxKTtcbiAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgLSAweGQ4MDApIDw8IDEwKSArIChjMiAtIDB4ZGMwMCk7XG4gICAgICAgIG1fcG9zKys7XG4gICAgICB9XG4gICAgfVxuICAgIGJ1Zl9sZW4gKz0gYyA8IDB4ODAgPyAxIDogYyA8IDB4ODAwID8gMiA6IGMgPCAweDEwMDAwID8gMyA6IDQ7XG4gIH1cblxuICAvLyBhbGxvY2F0ZSBidWZmZXJcbiAgYnVmID0gbmV3IHV0aWxzLkJ1ZjgoYnVmX2xlbik7XG5cbiAgLy8gY29udmVydFxuICBmb3IgKGkgPSAwLCBtX3BvcyA9IDA7IGkgPCBidWZfbGVuOyBtX3BvcysrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcbiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKG1fcG9zICsgMSA8IHN0cl9sZW4pKSB7XG4gICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7XG4gICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKChjIC0gMHhkODAwKSA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuICAgICAgICBtX3BvcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgIC8qIG9uZSBieXRlICovXG4gICAgICBidWZbaSsrXSA9IGM7XG4gICAgfSBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgIC8qIHR3byBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweEMwIHwgKGMgPj4+IDYpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9IGVsc2UgaWYgKGMgPCAweDEwMDAwKSB7XG4gICAgICAvKiB0aHJlZSBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweEUwIHwgKGMgPj4+IDEyKTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiA2ICYgMHgzZik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBmb3VyIGJ5dGVzICovXG4gICAgICBidWZbaSsrXSA9IDB4ZjAgfCAoYyA+Pj4gMTgpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDEyICYgMHgzZik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmO1xufTtcblxuLy8gSGVscGVyICh1c2VkIGluIDIgcGxhY2VzKVxuZnVuY3Rpb24gYnVmMmJpbnN0cmluZyhidWYsIGxlbikge1xuICAvLyBPbiBDaHJvbWUsIHRoZSBhcmd1bWVudHMgaW4gYSBmdW5jdGlvbiBjYWxsIHRoYXQgYXJlIGFsbG93ZWQgaXMgYDY1NTM0YC5cbiAgLy8gSWYgdGhlIGxlbmd0aCBvZiB0aGUgYnVmZmVyIGlzIHNtYWxsZXIgdGhhbiB0aGF0LCB3ZSBjYW4gdXNlIHRoaXMgb3B0aW1pemF0aW9uLFxuICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCB0YWtlIGEgc2xvd2VyIHBhdGguXG4gIGlmIChsZW4gPCA2NTUzNCkge1xuICAgIGlmICgoYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9VSUFfT0spIHx8ICghYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9PSykpIHtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHV0aWxzLnNocmlua0J1ZihidWYsIGxlbikpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG4vLyBDb252ZXJ0IGJ5dGUgYXJyYXkgdG8gYmluYXJ5IHN0cmluZ1xuZXhwb3J0cy5idWYyYmluc3RyaW5nID0gZnVuY3Rpb24gKGJ1Zikge1xuICByZXR1cm4gYnVmMmJpbnN0cmluZyhidWYsIGJ1Zi5sZW5ndGgpO1xufTtcblxuXG4vLyBDb252ZXJ0IGJpbmFyeSBzdHJpbmcgKHR5cGVkLCB3aGVuIHBvc3NpYmxlKVxuZXhwb3J0cy5iaW5zdHJpbmcyYnVmID0gZnVuY3Rpb24gKHN0cikge1xuICB2YXIgYnVmID0gbmV3IHV0aWxzLkJ1Zjgoc3RyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBidWZbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gYnVmO1xufTtcblxuXG4vLyBjb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xuZXhwb3J0cy5idWYyc3RyaW5nID0gZnVuY3Rpb24gKGJ1ZiwgbWF4KSB7XG4gIHZhciBpLCBvdXQsIGMsIGNfbGVuO1xuICB2YXIgbGVuID0gbWF4IHx8IGJ1Zi5sZW5ndGg7XG5cbiAgLy8gUmVzZXJ2ZSBtYXggcG9zc2libGUgbGVuZ3RoICgyIHdvcmRzIHBlciBjaGFyKVxuICAvLyBOQjogYnkgdW5rbm93biByZWFzb25zLCBBcnJheSBpcyBzaWduaWZpY2FudGx5IGZhc3RlciBmb3JcbiAgLy8gICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkgdGhhbiBVaW50MTZBcnJheS5cbiAgdmFyIHV0ZjE2YnVmID0gbmV3IEFycmF5KGxlbiAqIDIpO1xuXG4gIGZvciAob3V0ID0gMCwgaSA9IDA7IGkgPCBsZW47KSB7XG4gICAgYyA9IGJ1ZltpKytdO1xuICAgIC8vIHF1aWNrIHByb2Nlc3MgYXNjaWlcbiAgICBpZiAoYyA8IDB4ODApIHsgdXRmMTZidWZbb3V0KytdID0gYzsgY29udGludWU7IH1cblxuICAgIGNfbGVuID0gX3V0ZjhsZW5bY107XG4gICAgLy8gc2tpcCA1ICYgNiBieXRlIGNvZGVzXG4gICAgaWYgKGNfbGVuID4gNCkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGkgKz0gY19sZW4gLSAxOyBjb250aW51ZTsgfVxuXG4gICAgLy8gYXBwbHkgbWFzayBvbiBmaXJzdCBieXRlXG4gICAgYyAmPSBjX2xlbiA9PT0gMiA/IDB4MWYgOiBjX2xlbiA9PT0gMyA/IDB4MGYgOiAweDA3O1xuICAgIC8vIGpvaW4gdGhlIHJlc3RcbiAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHtcbiAgICAgIGMgPSAoYyA8PCA2KSB8IChidWZbaSsrXSAmIDB4M2YpO1xuICAgICAgY19sZW4tLTtcbiAgICB9XG5cbiAgICAvLyB0ZXJtaW5hdGVkIGJ5IGVuZCBvZiBzdHJpbmc/XG4gICAgaWYgKGNfbGVuID4gMSkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZDgwMCB8ICgoYyA+PiAxMCkgJiAweDNmZik7XG4gICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGRjMDAgfCAoYyAmIDB4M2ZmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmMmJpbnN0cmluZyh1dGYxNmJ1Ziwgb3V0KTtcbn07XG5cblxuLy8gQ2FsY3VsYXRlIG1heCBwb3NzaWJsZSBwb3NpdGlvbiBpbiB1dGY4IGJ1ZmZlcixcbi8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGVcbi8vIC0gKHZlcnkgc21hbGwgbGltaXRzKSByZXR1cm4gbWF4IHNpemUgYXMgaXMuXG4vL1xuLy8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5XG4vLyBtYXggICAtIGxlbmd0aCBsaW1pdCAobWFuZGF0b3J5KTtcbmV4cG9ydHMudXRmOGJvcmRlciA9IGZ1bmN0aW9uIChidWYsIG1heCkge1xuICB2YXIgcG9zO1xuXG4gIG1heCA9IG1heCB8fCBidWYubGVuZ3RoO1xuICBpZiAobWF4ID4gYnVmLmxlbmd0aCkgeyBtYXggPSBidWYubGVuZ3RoOyB9XG5cbiAgLy8gZ28gYmFjayBmcm9tIGxhc3QgcG9zaXRpb24sIHVudGlsIHN0YXJ0IG9mIHNlcXVlbmNlIGZvdW5kXG4gIHBvcyA9IG1heCAtIDE7XG4gIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAweEMwKSA9PT0gMHg4MCkgeyBwb3MtLTsgfVxuXG4gIC8vIFZlcnkgc21hbGwgYW5kIGJyb2tlbiBzZXF1ZW5jZSxcbiAgLy8gcmV0dXJuIG1heCwgYmVjYXVzZSB3ZSBzaG91bGQgcmV0dXJuIHNvbWV0aGluZyBhbnl3YXkuXG4gIGlmIChwb3MgPCAwKSB7IHJldHVybiBtYXg7IH1cblxuICAvLyBJZiB3ZSBjYW1lIHRvIHN0YXJ0IG9mIGJ1ZmZlciAtIHRoYXQgbWVhbnMgYnVmZmVyIGlzIHRvbyBzbWFsbCxcbiAgLy8gcmV0dXJuIG1heCB0b28uXG4gIGlmIChwb3MgPT09IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gIHJldHVybiAocG9zICsgX3V0ZjhsZW5bYnVmW3Bvc11dID4gbWF4KSA/IHBvcyA6IG1heDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gWlN0cmVhbSgpIHtcbiAgLyogbmV4dCBpbnB1dCBieXRlICovXG4gIHRoaXMuaW5wdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9pbiA9IDA7XG4gIC8qIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUgYXQgaW5wdXQgKi9cbiAgdGhpcy5hdmFpbF9pbiA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBpbnB1dCBieXRlcyByZWFkIHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX2luID0gMDtcbiAgLyogbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlICovXG4gIHRoaXMub3V0cHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfb3V0ID0gMDtcbiAgLyogcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgb3V0cHV0ICovXG4gIHRoaXMuYXZhaWxfb3V0ID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGJ5dGVzIG91dHB1dCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9vdXQgPSAwO1xuICAvKiBsYXN0IGVycm9yIG1lc3NhZ2UsIE5VTEwgaWYgbm8gZXJyb3IgKi9cbiAgdGhpcy5tc2cgPSAnJy8qWl9OVUxMKi87XG4gIC8qIG5vdCB2aXNpYmxlIGJ5IGFwcGxpY2F0aW9ucyAqL1xuICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgLyogYmVzdCBndWVzcyBhYm91dCB0aGUgZGF0YSB0eXBlOiBiaW5hcnkgb3IgdGV4dCAqL1xuICB0aGlzLmRhdGFfdHlwZSA9IDIvKlpfVU5LTk9XTiovO1xuICAvKiBhZGxlcjMyIHZhbHVlIG9mIHRoZSB1bmNvbXByZXNzZWQgZGF0YSAqL1xuICB0aGlzLmFkbGVyID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBaU3RyZWFtO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbiAgWl9OT19GTFVTSDogICAgICAgICAwLFxuICBaX1BBUlRJQUxfRkxVU0g6ICAgIDEsXG4gIFpfU1lOQ19GTFVTSDogICAgICAgMixcbiAgWl9GVUxMX0ZMVVNIOiAgICAgICAzLFxuICBaX0ZJTklTSDogICAgICAgICAgIDQsXG4gIFpfQkxPQ0s6ICAgICAgICAgICAgNSxcbiAgWl9UUkVFUzogICAgICAgICAgICA2LFxuXG4gIC8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcbiAgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gICovXG4gIFpfT0s6ICAgICAgICAgICAgICAgMCxcbiAgWl9TVFJFQU1fRU5EOiAgICAgICAxLFxuICBaX05FRURfRElDVDogICAgICAgIDIsXG4gIFpfRVJSTk86ICAgICAgICAgICAtMSxcbiAgWl9TVFJFQU1fRVJST1I6ICAgIC0yLFxuICBaX0RBVEFfRVJST1I6ICAgICAgLTMsXG4gIC8vWl9NRU1fRVJST1I6ICAgICAtNCxcbiAgWl9CVUZfRVJST1I6ICAgICAgIC01LFxuICAvL1pfVkVSU0lPTl9FUlJPUjogLTYsXG5cbiAgLyogY29tcHJlc3Npb24gbGV2ZWxzICovXG4gIFpfTk9fQ09NUFJFU1NJT046ICAgICAgICAgMCxcbiAgWl9CRVNUX1NQRUVEOiAgICAgICAgICAgICAxLFxuICBaX0JFU1RfQ09NUFJFU1NJT046ICAgICAgIDksXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTjogICAtMSxcblxuXG4gIFpfRklMVEVSRUQ6ICAgICAgICAgICAgICAgMSxcbiAgWl9IVUZGTUFOX09OTFk6ICAgICAgICAgICAyLFxuICBaX1JMRTogICAgICAgICAgICAgICAgICAgIDMsXG4gIFpfRklYRUQ6ICAgICAgICAgICAgICAgICAgNCxcbiAgWl9ERUZBVUxUX1NUUkFURUdZOiAgICAgICAwLFxuXG4gIC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbiAgWl9CSU5BUlk6ICAgICAgICAgICAgICAgICAwLFxuICBaX1RFWFQ6ICAgICAgICAgICAgICAgICAgIDEsXG4gIC8vWl9BU0NJSTogICAgICAgICAgICAgICAgMSwgLy8gPSBaX1RFWFQgKGRlcHJlY2F0ZWQpXG4gIFpfVU5LTk9XTjogICAgICAgICAgICAgICAgMixcblxuICAvKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cbiAgWl9ERUZMQVRFRDogICAgICAgICAgICAgICA4XG4gIC8vWl9OVUxMOiAgICAgICAgICAgICAgICAgbnVsbCAvLyBVc2UgLTEgb3IgbnVsbCBpbmxpbmUsIGRlcGVuZGluZyBvbiB2YXIgdHlwZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbmV4cG9ydHMuTE9DQUxfRklMRV9IRUFERVIgPSBcIlBLXFx4MDNcXHgwNFwiO1xuZXhwb3J0cy5DRU5UUkFMX0ZJTEVfSEVBREVSID0gXCJQS1xceDAxXFx4MDJcIjtcbmV4cG9ydHMuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EID0gXCJQS1xceDA1XFx4MDZcIjtcbmV4cG9ydHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiA9IFwiUEtcXHgwNlxceDA3XCI7XG5leHBvcnRzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCA9IFwiUEtcXHgwNlxceDA2XCI7XG5leHBvcnRzLkRBVEFfREVTQ1JJUFRPUiA9IFwiUEtcXHgwN1xceDA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgc3VwcG9ydCA9IHJlcXVpcmUoJy4uL3N1cHBvcnQnKTtcbnZhciBBcnJheVJlYWRlciA9IHJlcXVpcmUoJy4vQXJyYXlSZWFkZXInKTtcbnZhciBTdHJpbmdSZWFkZXIgPSByZXF1aXJlKCcuL1N0cmluZ1JlYWRlcicpO1xudmFyIE5vZGVCdWZmZXJSZWFkZXIgPSByZXF1aXJlKCcuL05vZGVCdWZmZXJSZWFkZXInKTtcbnZhciBVaW50OEFycmF5UmVhZGVyID0gcmVxdWlyZSgnLi9VaW50OEFycmF5UmVhZGVyJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVhZGVyIGFkYXB0ZWQgdG8gdGhlIGRhdGEuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gZGF0YSB0aGUgZGF0YSB0byByZWFkLlxuICogQHJldHVybiB7RGF0YVJlYWRlcn0gdGhlIGRhdGEgcmVhZGVyLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIHR5cGUgPSB1dGlscy5nZXRUeXBlT2YoZGF0YSk7XG4gICAgdXRpbHMuY2hlY2tTdXBwb3J0KHR5cGUpO1xuICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmICFzdXBwb3J0LnVpbnQ4YXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmdSZWFkZXIoZGF0YSk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcIm5vZGVidWZmZXJcIikge1xuICAgICAgICByZXR1cm4gbmV3IE5vZGVCdWZmZXJSZWFkZXIoZGF0YSk7XG4gICAgfVxuICAgIGlmIChzdXBwb3J0LnVpbnQ4YXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5UmVhZGVyKHV0aWxzLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLCBkYXRhKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXJyYXlSZWFkZXIodXRpbHMudHJhbnNmb3JtVG8oXCJhcnJheVwiLCBkYXRhKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERhdGFSZWFkZXIgPSByZXF1aXJlKCcuL0RhdGFSZWFkZXInKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEFycmF5UmVhZGVyKGRhdGEpIHtcbiAgICBEYXRhUmVhZGVyLmNhbGwodGhpcywgZGF0YSk7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcblx0XHRkYXRhW2ldID0gZGF0YVtpXSAmIDB4RkY7XG5cdH1cbn1cbnV0aWxzLmluaGVyaXRzKEFycmF5UmVhZGVyLCBEYXRhUmVhZGVyKTtcbi8qKlxuICogQHNlZSBEYXRhUmVhZGVyLmJ5dGVBdFxuICovXG5BcnJheVJlYWRlci5wcm90b3R5cGUuYnl0ZUF0ID0gZnVuY3Rpb24oaSkge1xuICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy56ZXJvICsgaV07XG59O1xuLyoqXG4gKiBAc2VlIERhdGFSZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmVcbiAqL1xuQXJyYXlSZWFkZXIucHJvdG90eXBlLmxhc3RJbmRleE9mU2lnbmF0dXJlID0gZnVuY3Rpb24oc2lnKSB7XG4gICAgdmFyIHNpZzAgPSBzaWcuY2hhckNvZGVBdCgwKSxcbiAgICAgICAgc2lnMSA9IHNpZy5jaGFyQ29kZUF0KDEpLFxuICAgICAgICBzaWcyID0gc2lnLmNoYXJDb2RlQXQoMiksXG4gICAgICAgIHNpZzMgPSBzaWcuY2hhckNvZGVBdCgzKTtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSA0OyBpID49IDA7IC0taSkge1xuICAgICAgICBpZiAodGhpcy5kYXRhW2ldID09PSBzaWcwICYmIHRoaXMuZGF0YVtpICsgMV0gPT09IHNpZzEgJiYgdGhpcy5kYXRhW2kgKyAyXSA9PT0gc2lnMiAmJiB0aGlzLmRhdGFbaSArIDNdID09PSBzaWczKSB7XG4gICAgICAgICAgICByZXR1cm4gaSAtIHRoaXMuemVybztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMTtcbn07XG4vKipcbiAqIEBzZWUgRGF0YVJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmVcbiAqL1xuQXJyYXlSZWFkZXIucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZSA9IGZ1bmN0aW9uIChzaWcpIHtcbiAgICB2YXIgc2lnMCA9IHNpZy5jaGFyQ29kZUF0KDApLFxuICAgICAgICBzaWcxID0gc2lnLmNoYXJDb2RlQXQoMSksXG4gICAgICAgIHNpZzIgPSBzaWcuY2hhckNvZGVBdCgyKSxcbiAgICAgICAgc2lnMyA9IHNpZy5jaGFyQ29kZUF0KDMpLFxuICAgICAgICBkYXRhID0gdGhpcy5yZWFkRGF0YSg0KTtcbiAgICByZXR1cm4gc2lnMCA9PT0gZGF0YVswXSAmJiBzaWcxID09PSBkYXRhWzFdICYmIHNpZzIgPT09IGRhdGFbMl0gJiYgc2lnMyA9PT0gZGF0YVszXTtcbn07XG4vKipcbiAqIEBzZWUgRGF0YVJlYWRlci5yZWFkRGF0YVxuICovXG5BcnJheVJlYWRlci5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgdGhpcy5jaGVja09mZnNldChzaXplKTtcbiAgICBpZihzaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8gKyB0aGlzLmluZGV4LCB0aGlzLnplcm8gKyB0aGlzLmluZGV4ICsgc2l6ZSk7XG4gICAgdGhpcy5pbmRleCArPSBzaXplO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheVJlYWRlcjtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIERhdGFSZWFkZXIoZGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7IC8vIHR5cGUgOiBzZWUgaW1wbGVtZW50YXRpb25cbiAgICB0aGlzLmxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHRoaXMuemVybyA9IDA7XG59XG5EYXRhUmVhZGVyLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGF0IHRoZSBvZmZzZXQgd2lsbCBub3QgZ28gdG9vIGZhci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2Zmc2V0IHRoZSBhZGRpdGlvbmFsIG9mZnNldCB0byBjaGVjay5cbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gYW4gRXJyb3IgaWYgdGhlIG9mZnNldCBpcyBvdXQgb2YgYm91bmRzLlxuICAgICAqL1xuICAgIGNoZWNrT2Zmc2V0OiBmdW5jdGlvbihvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5jaGVja0luZGV4KHRoaXMuaW5kZXggKyBvZmZzZXQpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhhdCB0aGUgc3BlY2lmaWVkIGluZGV4IHdpbGwgbm90IGJlIHRvbyBmYXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0luZGV4IHRoZSBpbmRleCB0byBjaGVjay5cbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gYW4gRXJyb3IgaWYgdGhlIGluZGV4IGlzIG91dCBvZiBib3VuZHMuXG4gICAgICovXG4gICAgY2hlY2tJbmRleDogZnVuY3Rpb24obmV3SW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoIDwgdGhpcy56ZXJvICsgbmV3SW5kZXggfHwgbmV3SW5kZXggPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbmQgb2YgZGF0YSByZWFjaGVkIChkYXRhIGxlbmd0aCA9IFwiICsgdGhpcy5sZW5ndGggKyBcIiwgYXNrZWQgaW5kZXggPSBcIiArIChuZXdJbmRleCkgKyBcIikuIENvcnJ1cHRlZCB6aXAgP1wiKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBpbmRleC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbmV3SW5kZXggVGhlIG5ldyBpbmRleC5cbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIG5ldyBpbmRleCBpcyBvdXQgb2YgdGhlIGRhdGEuXG4gICAgICovXG4gICAgc2V0SW5kZXg6IGZ1bmN0aW9uKG5ld0luZGV4KSB7XG4gICAgICAgIHRoaXMuY2hlY2tJbmRleChuZXdJbmRleCk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBuZXdJbmRleDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFNraXAgdGhlIG5leHQgbiBieXRlcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRvIHNraXAuXG4gICAgICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBuZXcgaW5kZXggaXMgb3V0IG9mIHRoZSBkYXRhLlxuICAgICAqL1xuICAgIHNraXA6IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgdGhpcy5zZXRJbmRleCh0aGlzLmluZGV4ICsgbik7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGJ5dGUgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaSB0aGUgaW5kZXggdG8gdXNlLlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gYSBieXRlLlxuICAgICAqL1xuICAgIGJ5dGVBdDogZnVuY3Rpb24oaSkge1xuICAgICAgICAvLyBzZWUgaW1wbGVtZW50YXRpb25zXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG5leHQgbnVtYmVyIHdpdGggYSBnaXZlbiBieXRlIHNpemUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgdGhlIG51bWJlciBvZiBieXRlcyB0byByZWFkLlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGNvcnJlc3BvbmRpbmcgbnVtYmVyLlxuICAgICAqL1xuICAgIHJlYWRJbnQ6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICB0aGlzLmNoZWNrT2Zmc2V0KHNpemUpO1xuICAgICAgICBmb3IgKGkgPSB0aGlzLmluZGV4ICsgc2l6ZSAtIDE7IGkgPj0gdGhpcy5pbmRleDsgaS0tKSB7XG4gICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0IDw8IDgpICsgdGhpcy5ieXRlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmRleCArPSBzaXplO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBuZXh0IHN0cmluZyB3aXRoIGEgZ2l2ZW4gYnl0ZSBzaXplLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIHRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZC5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBjb3JyZXNwb25kaW5nIHN0cmluZy5cbiAgICAgKi9cbiAgICByZWFkU3RyaW5nOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICAgIHJldHVybiB1dGlscy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCB0aGlzLnJlYWREYXRhKHNpemUpKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEdldCByYXcgZGF0YSB3aXRob3V0IGNvbnZlcnNpb24sIDxzaXplPiBieXRlcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRvIHJlYWQuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSB0aGUgcmF3IGRhdGEsIGltcGxlbWVudGF0aW9uIHNwZWNpZmljLlxuICAgICAqL1xuICAgIHJlYWREYXRhOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICAgIC8vIHNlZSBpbXBsZW1lbnRhdGlvbnNcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIGxhc3Qgb2NjdXJlbmNlIG9mIGEgemlwIHNpZ25hdHVyZSAoNCBieXRlcykuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNpZyB0aGUgc2lnbmF0dXJlIHRvIGZpbmQuXG4gICAgICogQHJldHVybiB7bnVtYmVyfSB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgb2NjdXJlbmNlLCAtMSBpZiBub3QgZm91bmQuXG4gICAgICovXG4gICAgbGFzdEluZGV4T2ZTaWduYXR1cmU6IGZ1bmN0aW9uKHNpZykge1xuICAgICAgICAvLyBzZWUgaW1wbGVtZW50YXRpb25zXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZWFkIHRoZSBzaWduYXR1cmUgKDQgYnl0ZXMpIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uIGFuZCBjb21wYXJlIGl0IHdpdGggc2lnLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaWcgdGhlIGV4cGVjdGVkIHNpZ25hdHVyZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHNpZ25hdHVyZSBtYXRjaGVzLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgcmVhZEFuZENoZWNrU2lnbmF0dXJlOiBmdW5jdGlvbihzaWcpIHtcbiAgICAgICAgLy8gc2VlIGltcGxlbWVudGF0aW9uc1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBuZXh0IGRhdGUuXG4gICAgICogQHJldHVybiB7RGF0ZX0gdGhlIGRhdGUuXG4gICAgICovXG4gICAgcmVhZERhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZG9zdGltZSA9IHRoaXMucmVhZEludCg0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKFxuICAgICAgICAoKGRvc3RpbWUgPj4gMjUpICYgMHg3ZikgKyAxOTgwLCAvLyB5ZWFyXG4gICAgICAgICgoZG9zdGltZSA+PiAyMSkgJiAweDBmKSAtIDEsIC8vIG1vbnRoXG4gICAgICAgIChkb3N0aW1lID4+IDE2KSAmIDB4MWYsIC8vIGRheVxuICAgICAgICAoZG9zdGltZSA+PiAxMSkgJiAweDFmLCAvLyBob3VyXG4gICAgICAgIChkb3N0aW1lID4+IDUpICYgMHgzZiwgLy8gbWludXRlXG4gICAgICAgIChkb3N0aW1lICYgMHgxZikgPDwgMSkpOyAvLyBzZWNvbmRcbiAgICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBEYXRhUmVhZGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5UmVhZGVyID0gcmVxdWlyZSgnLi9BcnJheVJlYWRlcicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gVWludDhBcnJheVJlYWRlcihkYXRhKSB7XG4gICAgQXJyYXlSZWFkZXIuY2FsbCh0aGlzLCBkYXRhKTtcbn1cbnV0aWxzLmluaGVyaXRzKFVpbnQ4QXJyYXlSZWFkZXIsIEFycmF5UmVhZGVyKTtcbi8qKlxuICogQHNlZSBEYXRhUmVhZGVyLnJlYWREYXRhXG4gKi9cblVpbnQ4QXJyYXlSZWFkZXIucHJvdG90eXBlLnJlYWREYXRhID0gZnVuY3Rpb24oc2l6ZSkge1xuICAgIHRoaXMuY2hlY2tPZmZzZXQoc2l6ZSk7XG4gICAgaWYoc2l6ZSA9PT0gMCkge1xuICAgICAgICAvLyBpbiBJRTEwLCB3aGVuIHVzaW5nIHN1YmFycmF5KGlkeCwgaWR4KSwgd2UgZ2V0IHRoZSBhcnJheSBbMHgwMF0gaW5zdGVhZCBvZiBbXS5cbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuemVybyArIHRoaXMuaW5kZXgsIHRoaXMuemVybyArIHRoaXMuaW5kZXggKyBzaXplKTtcbiAgICB0aGlzLmluZGV4ICs9IHNpemU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXlSZWFkZXI7XG4iLCJ2YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbnZhciBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bihldmVudC5kYXRhKTtcbn07XG5cbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIG9sZCBlbmdpbmVzIGhhdmUgbm90IGxvY2F0aW9uLm9yaWdpblxuICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJiAhZmFpbHMocG9zdCkpIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcblxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBhcnJheVB1c2ggPSBbXS5wdXNoO1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9VSU5UMzIgPSAweEZGRkZGRkZGO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIVJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKFNQTElULCBuYXRpdmVTcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnLnNwbGl0KC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnLnNwbGl0KC8oPzopLywgLTEpLmxlbmd0aCAhPSA0IHx8XG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPSAyIHx8XG4gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPSA0IHx8XG4gICAgJy4nLnNwbGl0KC8oKSgpLykubGVuZ3RoID4gMSB8fFxuICAgICcnLnNwbGl0KC8uPy8pLmxlbmd0aFxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFtzdHJpbmddO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltKTtcbiAgICAgIH1cbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weS5sYXN0SW5kZXg7XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmcubGVuZ3RoKSBhcnJheVB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoID49IGxpbSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dC5sZW5ndGggPiBsaW0gPyBvdXRwdXQuc2xpY2UoMCwgbGltKSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnLnNwbGl0KHVuZGVmaW5lZCwgMCkubGVuZ3RoKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IG5hdGl2ZVNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIGludGVybmFsU3BsaXQgPSBuYXRpdmVTcGxpdDtcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gbmF0aXZlU3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSBtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgIVNVUFBPUlRTX1kpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBoaWRlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuYXRpdmVJdGVyYXRvci5jYWxsKHRoaXMpOyB9O1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIGhpZGUoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbmlmIChJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5pZiAoIUlTX1BVUkUgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXJzZS1pbnQnKTtcblxuLy8gYHBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUludCAhPSBwYXJzZUludEltcGxlbWVudGF0aW9uIH0sIHtcbiAgcGFyc2VJbnQ6IHBhcnNlSW50SW1wbGVtZW50YXRpb25cbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgbmF0aXZlUGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQ7XG52YXIgaGV4ID0gL15bKy1dPzBbWHhdLztcbnZhciBGT1JDRUQgPSBuYXRpdmVQYXJzZUludCh3aGl0ZXNwYWNlcyArICcwOCcpICE9PSA4IHx8IG5hdGl2ZVBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzB4MTYnKSAhPT0gMjI7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkge1xuICB2YXIgUyA9IHRyaW0oU3RyaW5nKHN0cmluZykpO1xuICByZXR1cm4gbmF0aXZlUGFyc2VJbnQoUywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3QoUykgPyAxNiA6IDEwKSk7XG59IDogbmF0aXZlUGFyc2VJbnQ7XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICB0cmltOiBjcmVhdGVNZXRob2QoMylcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gYSBvZiB6aXAgZmlsZSBpbiBqc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEpTWmlwKCkge1xuICAgIC8vIGlmIHRoaXMgY29uc3RydWN0b3IgaXPCoHVzZWQgd2l0aG91dMKgYG5ld2AsIGl0wqBhZGRzIGBuZXdgIGJlZm9yZcKgaXRzZWxmOlxuICAgIGlmKCEodGhpcyBpbnN0YW5jZW9mIEpTWmlwKSkge1xuICAgICAgICByZXR1cm4gbmV3IEpTWmlwKCk7XG4gICAgfVxuXG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpO1xuICAgIH1cblxuICAgIC8vIG9iamVjdCBjb250YWluaW5nIHRoZSBmaWxlcyA6XG4gICAgLy8ge1xuICAgIC8vICAgXCJmb2xkZXIvXCIgOiB7Li4ufSxcbiAgICAvLyAgIFwiZm9sZGVyL2RhdGEudHh0XCIgOiB7Li4ufVxuICAgIC8vIH1cbiAgICB0aGlzLmZpbGVzID0ge307XG5cbiAgICB0aGlzLmNvbW1lbnQgPSBudWxsO1xuXG4gICAgLy8gV2hlcmUgd2UgYXJlIGluIHRoZSBoaWVyYXJjaHlcbiAgICB0aGlzLnJvb3QgPSBcIlwiO1xuICAgIHRoaXMuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5ld09iaiA9IG5ldyBKU1ppcCgpO1xuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpc1tpXSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqW2ldID0gdGhpc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3T2JqO1xuICAgIH07XG59XG5KU1ppcC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL29iamVjdCcpO1xuSlNaaXAucHJvdG90eXBlLmxvYWRBc3luYyA9IHJlcXVpcmUoJy4vbG9hZCcpO1xuSlNaaXAuc3VwcG9ydCA9IHJlcXVpcmUoJy4vc3VwcG9ydCcpO1xuSlNaaXAuZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8vIFRPRE8gZmluZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMgdmVyc2lvbixcbi8vIGEgcmVxdWlyZSgncGFja2FnZS5qc29uJykudmVyc2lvbiBkb2Vzbid0IHdvcmsgd2l0aCB3ZWJwYWNrLCBzZWUgIzMyN1xuSlNaaXAudmVyc2lvbiA9IFwiMy4yLjBcIjtcblxuSlNaaXAubG9hZEFzeW5jID0gZnVuY3Rpb24gKGNvbnRlbnQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IEpTWmlwKCkubG9hZEFzeW5jKGNvbnRlbnQsIG9wdGlvbnMpO1xufTtcblxuSlNaaXAuZXh0ZXJuYWwgPSByZXF1aXJlKFwiLi9leHRlcm5hbFwiKTtcbm1vZHVsZS5leHBvcnRzID0gSlNaaXA7XG4iLCIoZnVuY3Rpb24oYSxiKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGIpO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHMpYigpO2Vsc2V7YigpLGEuRmlsZVNhdmVyPXtleHBvcnRzOnt9fS5leHBvcnRzfX0pKHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGEsYil7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGI/Yj17YXV0b0JvbTohMX06XCJvYmplY3RcIiE9dHlwZW9mIGImJihjb25zb2xlLndhcm4oXCJEZXByZWNhdGVkOiBFeHBlY3RlZCB0aGlyZCBhcmd1bWVudCB0byBiZSBhIG9iamVjdFwiKSxiPXthdXRvQm9tOiFifSksYi5hdXRvQm9tJiYvXlxccyooPzp0ZXh0XFwvXFxTKnxhcHBsaWNhdGlvblxcL3htbHxcXFMqXFwvXFxTKlxcK3htbClcXHMqOy4qY2hhcnNldFxccyo9XFxzKnV0Zi04L2kudGVzdChhLnR5cGUpP25ldyBCbG9iKFtcIlxcdUZFRkZcIixhXSx7dHlwZTphLnR5cGV9KTphfWZ1bmN0aW9uIGMoYixjLGQpe3ZhciBlPW5ldyBYTUxIdHRwUmVxdWVzdDtlLm9wZW4oXCJHRVRcIixiKSxlLnJlc3BvbnNlVHlwZT1cImJsb2JcIixlLm9ubG9hZD1mdW5jdGlvbigpe2EoZS5yZXNwb25zZSxjLGQpfSxlLm9uZXJyb3I9ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiY291bGQgbm90IGRvd25sb2FkIGZpbGVcIil9LGUuc2VuZCgpfWZ1bmN0aW9uIGQoYSl7dmFyIGI9bmV3IFhNTEh0dHBSZXF1ZXN0O2Iub3BlbihcIkhFQURcIixhLCExKTt0cnl7Yi5zZW5kKCl9Y2F0Y2goYSl7fXJldHVybiAyMDA8PWIuc3RhdHVzJiYyOTk+PWIuc3RhdHVzfWZ1bmN0aW9uIGUoYSl7dHJ5e2EuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudChcImNsaWNrXCIpKX1jYXRjaChjKXt2YXIgYj1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO2IuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCEwLCEwLHdpbmRvdywwLDAsMCw4MCwyMCwhMSwhMSwhMSwhMSwwLG51bGwpLGEuZGlzcGF0Y2hFdmVudChiKX19dmFyIGY9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93LndpbmRvdz09PXdpbmRvdz93aW5kb3c6XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYuc2VsZj09PXNlbGY/c2VsZjpcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwuZ2xvYmFsPT09Z2xvYmFsP2dsb2JhbDp2b2lkIDAsYT1mLnNhdmVBc3x8KFwib2JqZWN0XCIhPXR5cGVvZiB3aW5kb3d8fHdpbmRvdyE9PWY/ZnVuY3Rpb24oKXt9OlwiZG93bmxvYWRcImluIEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZT9mdW5jdGlvbihiLGcsaCl7dmFyIGk9Zi5VUkx8fGYud2Via2l0VVJMLGo9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7Zz1nfHxiLm5hbWV8fFwiZG93bmxvYWRcIixqLmRvd25sb2FkPWcsai5yZWw9XCJub29wZW5lclwiLFwic3RyaW5nXCI9PXR5cGVvZiBiPyhqLmhyZWY9YixqLm9yaWdpbj09PWxvY2F0aW9uLm9yaWdpbj9lKGopOmQoai5ocmVmKT9jKGIsZyxoKTplKGosai50YXJnZXQ9XCJfYmxhbmtcIikpOihqLmhyZWY9aS5jcmVhdGVPYmplY3RVUkwoYiksc2V0VGltZW91dChmdW5jdGlvbigpe2kucmV2b2tlT2JqZWN0VVJMKGouaHJlZil9LDRFNCksc2V0VGltZW91dChmdW5jdGlvbigpe2Uoail9LDApKX06XCJtc1NhdmVPck9wZW5CbG9iXCJpbiBuYXZpZ2F0b3I/ZnVuY3Rpb24oZixnLGgpe2lmKGc9Z3x8Zi5uYW1lfHxcImRvd25sb2FkXCIsXCJzdHJpbmdcIiE9dHlwZW9mIGYpbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYihmLGgpLGcpO2Vsc2UgaWYoZChmKSljKGYsZyxoKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2kuaHJlZj1mLGkudGFyZ2V0PVwiX2JsYW5rXCIsc2V0VGltZW91dChmdW5jdGlvbigpe2UoaSl9KX19OmZ1bmN0aW9uKGEsYixkLGUpe2lmKGU9ZXx8b3BlbihcIlwiLFwiX2JsYW5rXCIpLGUmJihlLmRvY3VtZW50LnRpdGxlPWUuZG9jdW1lbnQuYm9keS5pbm5lclRleHQ9XCJkb3dubG9hZGluZy4uLlwiKSxcInN0cmluZ1wiPT10eXBlb2YgYSlyZXR1cm4gYyhhLGIsZCk7dmFyIGc9XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIj09PWEudHlwZSxoPS9jb25zdHJ1Y3Rvci9pLnRlc3QoZi5IVE1MRWxlbWVudCl8fGYuc2FmYXJpLGk9L0NyaU9TXFwvW1xcZF0rLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO2lmKChpfHxnJiZoKSYmXCJvYmplY3RcIj09dHlwZW9mIEZpbGVSZWFkZXIpe3ZhciBqPW5ldyBGaWxlUmVhZGVyO2oub25sb2FkZW5kPWZ1bmN0aW9uKCl7dmFyIGE9ai5yZXN1bHQ7YT1pP2E6YS5yZXBsYWNlKC9eZGF0YTpbXjtdKjsvLFwiZGF0YTphdHRhY2htZW50L2ZpbGU7XCIpLGU/ZS5sb2NhdGlvbi5ocmVmPWE6bG9jYXRpb249YSxlPW51bGx9LGoucmVhZEFzRGF0YVVSTChhKX1lbHNle3ZhciBrPWYuVVJMfHxmLndlYmtpdFVSTCxsPWsuY3JlYXRlT2JqZWN0VVJMKGEpO2U/ZS5sb2NhdGlvbj1sOmxvY2F0aW9uLmhyZWY9bCxlPW51bGwsc2V0VGltZW91dChmdW5jdGlvbigpe2sucmV2b2tlT2JqZWN0VVJMKGwpfSw0RTQpfX0pO2Yuc2F2ZUFzPWEuc2F2ZUFzPWEsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmKG1vZHVsZS5leHBvcnRzPWEpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZpbGVTYXZlci5taW4uanMubWFwIiwiLypcbiAqIEBkZXNjcmlwdGlvbjogZWRpdG9yXG4gKiBAdmVyc2lvbjogMC4wLjFcbiAqIEBBdXRob3I6IGRhaV96aGVuZ1xuICogQERhdGU6IDIwMTktMTAtMjUgMTc6MTc6MDZcbiAqIEBMYXN0RWRpdG9yczogUGxlYXNlIHNldCBMYXN0RWRpdG9yc1xuICogQExhc3RFZGl0VGltZTogMjAyMC0wNC0xNCAxNzoyMToxNFxuICovXG5jb25zdCBoYW5kbGVQb3dlciA9IGUgPT4ge1xuICBsZXQgcG93ZXJTdGF0ZUluZGV4ID0gIWUuaW5pdCAmJiBlLnByb3BlcnR5LmluZGV4T2YoJ2E6cG93ZXJTdGF0ZScpXG4gIGlmIChwb3dlclN0YXRlSW5kZXggIT09IC0xKSB7XG4gICAgbGV0IGVkZ2VzID0gZS5kYXRhLmdldFNvdXJjZUVkZ2VzKClcbiAgICBlZGdlcyAmJlxuICAgICAgZWRnZXMuZm9yRWFjaChlZGdlID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID1cbiAgICAgICAgICB0eXBlb2YgZS5uZXdWYWx1ZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgID8gZS5uZXdWYWx1ZVxuICAgICAgICAgICAgOiBlLmRhdGEuZ2V0QXR0cigncG93ZXJTdGF0ZScpXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGVkZ2Uucygnc3RhdGUnLCAnMScpXG4gICAgICAgICAgZWRnZS5zKCdlZGdlLmNvbG9yJywgJyMwMGZmMDAnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVkZ2Uucygnc3RhdGUnLCAnMCcpXG4gICAgICAgICAgZWRnZS5zKCdlZGdlLmNvbG9yJywgJyNmZjAwMDAnKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG59XG4vKipcbiAqIEBkZXNjcmlwdGlvbjog5byA5YWz5pWw5o2u5Y+Y5YyW5Y2z54q25oCB5Y+Y5YyWXG4gKi9cbmNvbnN0IGhhbmRsZVN3aXRjaCA9IGUgPT4ge1xuICBsZXQgc3dpdGNoU3RhdGVJbmRleCA9ICFlLmluaXQgJiYgZS5wcm9wZXJ0eS5pbmRleE9mKCdhOnN3aXRjaFN0YXRlJylcbiAgaWYgKHN3aXRjaFN0YXRlSW5kZXggIT09IC0xKSB7XG4gICAgbGV0IHN0YXRlID0gJzAnXG4gICAgbGV0IHZhbHVlID1cbiAgICAgIHR5cGVvZiBlLm5ld1ZhbHVlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGUubmV3VmFsdWVcbiAgICAgICAgOiBlLmRhdGEuZ2V0QXR0cignc3dpdGNoU3RhdGUnKVxuICAgIGlmICh2YWx1ZSA9PT0gMSkge1xuICAgICAgLy8gbGV0IGVkZ2VzID0gZS5kYXRhLmdldFRhcmdldEVkZ2VzKClcbiAgICAgIGxldCBlZGdlcyA9IGUuZGF0YS5nZXRBdHRhY2hlcygpXG4gICAgICBlZGdlcyAmJlxuICAgICAgICBlZGdlcy5mb3JFYWNoKGVkZ2UgPT4ge1xuICAgICAgICAgIGVkZ2UuZ2V0U3R5bGUoJ3N0YXRlJykgJiYgKHN0YXRlID0gJzEnKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBlLmRhdGEuc2V0U3R5bGUoJ3N0YXRlJywgc3RhdGUpXG4gIH1cbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiDnirbmgIHmlLnlj5jljbPov57nur/mlLnlj5jpopzoibLvvIznm67moIfngrnmlLnlj5jnirbmgIFcbiAqL1xuY29uc3QgaGFuZGxlU3RhdGUgPSBlID0+IHtcbiAgbGV0IHN0YXRlSW5kZXggPSAhZS5pbml0ICYmIGUucHJvcGVydHkuaW5kZXhPZignczpzdGF0ZScpXG4gIGlmIChzdGF0ZUluZGV4ICE9PSAtMSkge1xuICAgIC8vIGxldCBlZGdlcyA9IGUuZGF0YS5nZXRTb3VyY2VFZGdlcygpXG4gICAgbGV0IGVkZ2VzID0gZS5kYXRhLmdldEF0dGFjaGVzKClcbiAgICBlZGdlcyAmJlxuICAgICAgZWRnZXMuZm9yRWFjaChlZGdlID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID1cbiAgICAgICAgICB0eXBlb2YgZS5uZXdWYWx1ZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgID8gZS5uZXdWYWx1ZVxuICAgICAgICAgICAgOiBlLmRhdGEuZ2V0U3R5bGUoJ3N0YXRlJylcbiAgICAgICAgZWRnZS5zKCdzdGF0ZScsIHZhbHVlKVxuICAgICAgICBpZiAodmFsdWUgPT09ICcwJykge1xuICAgICAgICAgIGVkZ2Uucygnc2hhcGUuYm9yZGVyLmNvbG9yJywgJyNmZjAwMDAnKVxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnMScpIHtcbiAgICAgICAgICBlZGdlLnMoJ3NoYXBlLmJvcmRlci5jb2xvcicsICcjMDBmZjAwJylcbiAgICAgICAgfVxuICAgICAgICAvLyBlZGdlLmdldFRhcmdldCgpLnMoJ3N0YXRlJywgdmFsdWUpXG4gICAgICAgIGVkZ2Uucygnc3RhdGUnLCB2YWx1ZSlcbiAgICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZGF0YSA9PiB7XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgaHQuTm9kZSkge1xuICAgIGlmICh0eXBlb2YgZGF0YS5nZXRBdHRyKCdwb3dlclN0YXRlJykgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBoYW5kbGVQb3dlcih7IGRhdGEsIGluaXQ6IHRydWUgfSlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhLmdldEF0dHIoJ3N3aXRjaFN0YXRlJykgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBoYW5kbGVTd2l0Y2goeyBkYXRhLCBpbml0OiB0cnVlIH0pXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS5nZXRTdHlsZSgnc3RhdGUnKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGhhbmRsZVN0YXRlKHsgZGF0YSwgaW5pdDogdHJ1ZSB9KVxuICAgIH1cblxuICAgIGRhdGEub25Qcm9wZXJ0eUNoYW5nZWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaGFuZGxlUG93ZXIoZSlcbiAgICAgIGhhbmRsZVN3aXRjaChlKVxuICAgICAgaGFuZGxlU3RhdGUoZSlcbiAgICB9XG4gIH1cbn1cbiIsInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdFwiKTtcblxudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdFwiKTtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXk7IiwiLypcclxuICogQGRlc2NyaXB0aW9uOiDmqKHlnZfkv6Hmga9cclxuICogQHZlcnNpb246IDAuMC4xXHJcbiAqIEBBdXRob3I6IHpoYW5nX3hpYW5nXHJcbiAqIEBEYXRlOiAyMDE5LTExLTA2IDA5OjE2OjUwXHJcbiAqIEBMYXN0RWRpdG9yczogUGxlYXNlIHNldCBMYXN0RWRpdG9yc1xyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIwLTEwLTE0IDE0OjQ1OjQxXHJcbiAqL1xyXG4vLyAgIOeCueWPt+ivt+axgiBcclxuaW1wb3J0IHtcclxuICBnZXREZXZpY2VEYXRhLFxyXG4gIHNob3dcclxufSBmcm9tICcuL2RhdGFCaW5kaW5ncy9maWxlLmpzJ1xyXG5cclxuLy8g5a6a5LmJ5pys5paH5Lu25Lit5YWo5bGA5Y+Y6YePLOeUqOS6juWIpOaWreW9k+WJjeeahOaVsOaNruaYr+WQpumDveWtmOWcqFxyXG52YXIgUHJpbWl0aXZlLCAvLyDnu5HlrprnmoTmlbDmja5cclxuICBhY2Nlc3NUeXBlLCAvLyDnsbvlnotcclxuICBQcmltaXRpdmVEYXRhIC8vIOaJgOaciWRhdGFcclxuXHJcbi8vIOa4healmue7keWumuaVsOaNrlxyXG53aW5kb3cucmVtb3ZlQmFuZ2RpbmcgPSAocGFyYW1zKSA9PiB7XHJcbiAgUHJpbWl0aXZlRGF0YS5zZXREYXRhQmluZGluZ3MoKTtcclxuICBQcmltaXRpdmVEYXRhLmZwKCdkYXRhQmluZGluZ3MnLCB0cnVlLCBmYWxzZSk7XHJcbiAgZ2V0RGV2aWNlRGF0YSgwLCAkKCcjc2l0ZVRyZWUnKSlcclxuICAkKCcjYXR0cmlidXRlJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKVxyXG4gICQoJyN5YW9jZScpLmh0bWwoJycpXHJcbiAgJCgnLnNoYWRvdy1ib3gnKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpXHJcbn1cclxuXHJcbndpbmRvdy5jYW5jZWwgPSAocGFyYW1zKSA9PiB7XHJcbiAgJCgnLnNoYWRvdy1ib3gnKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpXHJcbn1cclxuXHJcbi8vIOeCueWHu+aooeaAgeahhueahOehruWumuaMiemSrlxyXG53aW5kb3cuc3VyZSA9IChwYXJhbXMpID0+IHtcclxuICB2YXIgaWQgPSAkKCcjbnVtYmVyJykudmFsKCk7XHJcbiAgdmFyIFR5cGVOYW1lID0gJCgnI05hbWUnKS52YWwoKTtcclxuICBpZiAoaWQgJiYgVHlwZU5hbWUpIHtcclxuICAgIGlmICghUHJpbWl0aXZlKSB7XHJcbiAgICAgIFByaW1pdGl2ZSA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFQcmltaXRpdmVbYWNjZXNzVHlwZV0pIHtcclxuICAgICAgUHJpbWl0aXZlW2FjY2Vzc1R5cGVdID0ge307XHJcbiAgICB9XHJcbiAgICBpZiAoIVByaW1pdGl2ZVthY2Nlc3NUeXBlXVt3aW5kb3cuZGF0YVR5cGVOYW1lXSkge1xyXG4gICAgICBQcmltaXRpdmVbYWNjZXNzVHlwZV1bd2luZG93LmRhdGFUeXBlTmFtZV0gPSB7fTtcclxuICAgIH1cclxuICAgIGlmICghaWQpIHtcclxuICAgICAgZGVsZXRlIFByaW1pdGl2ZVthY2Nlc3NUeXBlXVt3aW5kb3cuZGF0YVR5cGVOYW1lXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIFByaW1pdGl2ZVthY2Nlc3NUeXBlXVt3aW5kb3cuZGF0YVR5cGVOYW1lXS5pZCA9IGlkOyAvL+eCueWPt2lkXHJcbiAgICAgIFByaW1pdGl2ZVthY2Nlc3NUeXBlXVt3aW5kb3cuZGF0YVR5cGVOYW1lXS5UeXBlTmFtZSA9IFR5cGVOYW1lOyAvL+eCueWPt+WQjeensFxyXG4gICAgICBQcmltaXRpdmVbYWNjZXNzVHlwZV1bd2luZG93LmRhdGFUeXBlTmFtZV0udHJlZUlkID0gd2luZG93LnRyZWVJZCAvL+e7keWumueCueWPt+eahOermeeCueS/oeaBr1xyXG4gICAgICBQcmltaXRpdmVbYWNjZXNzVHlwZV1bd2luZG93LmRhdGFUeXBlTmFtZV0udHJlZXZpZXdBcnIgPSB3aW5kb3cudHJlZXZpZXdBcnIgLy/lm57mmL7pnIDopoHnmoTmoJHoioLngrnkv6Hmga9cclxuICAgICAgUHJpbWl0aXZlW2FjY2Vzc1R5cGVdW3dpbmRvdy5kYXRhVHlwZU5hbWVdLnBpY3R1cmVJZCA9IHdpbmRvdy5waWN0dXJlSWQvL+e6v+i3r+Wbvui3s+i9rOeahOiKgueCuWlkXHJcbiAgICAgIFByaW1pdGl2ZVthY2Nlc3NUeXBlXVt3aW5kb3cuZGF0YVR5cGVOYW1lXS50eXBlSWQgPSB3aW5kb3cudHlwZUlkOyAvL2Lnu5HlrprnmoTngrnlj7fmnInlhbPkv6Hmga9cclxuICAgICAgUHJpbWl0aXZlW2FjY2Vzc1R5cGVdW3dpbmRvdy5kYXRhVHlwZU5hbWVdLnR5cGUgPSB3aW5kb3cudHlwZUtpbmQ7IC8v55So5Lul5Yy65YiG57uR5a6a55qE57G75YirXHJcbiAgICAgIFByaW1pdGl2ZVthY2Nlc3NUeXBlXVt3aW5kb3cuZGF0YVR5cGVOYW1lXS5lcXVpcG1lbnRJZCA9IHdpbmRvdy5lcXVpcG1lbnRJZCAvL+e7keWumuWPmOWOi+WZqOW8gOWFs+afnOaJgOWvueW6lOeahOWIhue7hGlkXHJcbiAgICAgIFByaW1pdGl2ZVthY2Nlc3NUeXBlXVt3aW5kb3cuZGF0YVR5cGVOYW1lXS5yb2JvdCA9IHdpbmRvdy5yb2JvdCAvL+e7keWumuacuuWZqOS6uuagkeiKgueCuXV1aWRcclxuICAgICAgUHJpbWl0aXZlW2FjY2Vzc1R5cGVdW3dpbmRvdy5kYXRhVHlwZU5hbWVdLmdyb3VwSWQgPSB3aW5kb3cuZ3JvdXBJZCAvLyDngrnlj7fnu4RpZFxyXG4gICAgICBQcmltaXRpdmVbYWNjZXNzVHlwZV1bd2luZG93LmRhdGFUeXBlTmFtZV0uZ3JvdXBUeXBlID0gd2luZG93Lmdyb3VwVHlwZSAvLyDngrnlj7fnu4TnsbvlnotcclxuXHJcbiAgICB9XHJcbiAgICBQcmltaXRpdmVEYXRhLnNldERhdGFCaW5kaW5ncyhQcmltaXRpdmUpO1xyXG4gICAgUHJpbWl0aXZlRGF0YS5zZXRUYWcoaWQpXHJcbiAgICBQcmltaXRpdmVEYXRhLmZwKCdkYXRhQmluZGluZ3MnLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAkKCcuc2hhZG93LWJveCcpLmNzcygnZGlzcGxheScsICdub25lJylcclxuICB9IGVsc2Uge1xyXG4gICAgYWxlcnQoJ+ivt+mAieaLqeeCueWPtycpXHJcbiAgfVxyXG59XHJcblxyXG53aW5kb3cubW92ZUluID0gKHBhcmFtcykgPT4ge1xyXG4gICQocGFyYW1zKS5hZGRDbGFzcygnbW92ZUluJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnbW92ZUluJylcclxufVxyXG53aW5kb3cubW92ZW91dCA9IChwYXJhbXMpID0+IHtcclxuICAkKCcubW92ZUluJykucmVtb3ZlQ2xhc3MoJ21vdmVJbicpXHJcbn1cclxud2luZG93Lm9ubG9hZCA9ICgpID0+IHtcclxuICAkKCcjZXF1aXBtZW50RGF0YT5jaGlsZCcpLm1vdXNlbW92ZSgoZSkgPT4ge1xyXG4gICAgJCh0aGlzKS5hZGRDbGFzcygnbW92ZUluJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnbW92ZUluJylcclxuICB9KVxyXG59XHJcbmxldCBhYmMgPSAxXHJcbi8vIOWxnuaAp+e7g+e6p1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgb25CdXR0b25DbGlja2VkOiBmdW5jdGlvbiAoZGF0YSwgUHJpbWl0aXZlVHlwZSwgbmFtZSkge1xyXG5cclxuICAgIC8vIHZhciBkYXRhTW9kZWwgPSBuZXcgRGF0YU1vZGVsKClcclxuICAgIHZhciBkbSA9IGRhdGEuZG0oKVxyXG4gICAgdmFyIHNwYWNlVXVpZCA9IGRtLmdldEF0dHJPYmplY3QoJ2EnKS5zcGFjZVV1aWRcclxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGFCaW5kaW5ncy5hKCdhJyksJ2RhdGEnKVxyXG4gICAgXHJcbiAgICAkKCcuc2hhZG93LWJveCcpLmNzcygnZGlzcGxheScsICdibG9jaycpXHJcbiAgICBhY2Nlc3NUeXBlID0gUHJpbWl0aXZlVHlwZTtcclxuICAgIFByaW1pdGl2ZURhdGEgPSBkYXRhO1xyXG4gICAgUHJpbWl0aXZlID0gZGF0YS5nZXREYXRhQmluZGluZ3MoKTtcclxuICAgICQoJyNhdHRyaWJ1dGVzJykudmFsKG5hbWUpO1xyXG4gICAgaWYgKFByaW1pdGl2ZSAmJiBQcmltaXRpdmVbYWNjZXNzVHlwZV0gJiYgUHJpbWl0aXZlW2FjY2Vzc1R5cGVdW25hbWVdKSB7IC8v5b2T5Zu+5YWD5pyJ57uR5a6a5pWw5o2u5pe25YCZ5omA5a+55bqU55qE5pWw5o2uKVxyXG4gICAgICAkKCcjbnVtYmVyJykudmFsKFByaW1pdGl2ZVthY2Nlc3NUeXBlXVtuYW1lXS5pZCk7XHJcbiAgICAgICQoJyNOYW1lJykudmFsKFByaW1pdGl2ZVthY2Nlc3NUeXBlXVtuYW1lXS5UeXBlTmFtZSk7XHJcbiAgICAgIHdpbmRvdy50cmVlSWQgPSBQcmltaXRpdmVbYWNjZXNzVHlwZV1bbmFtZV0udHJlZUlkO1xyXG4gICAgICB3aW5kb3cudHJlZXZpZXdBcnIgPSBQcmltaXRpdmVbYWNjZXNzVHlwZV1bbmFtZV0udHJlZXZpZXdBcnI7XHJcbiAgICAgIHdpbmRvdy5mbGFnSWQgPSBQcmltaXRpdmVbYWNjZXNzVHlwZV1bbmFtZV0uaWQ7XHJcbiAgICAgIHdpbmRvdy50eXBlSWQgPSBQcmltaXRpdmVbYWNjZXNzVHlwZV1bbmFtZV0udHlwZUlkO1xyXG4gICAgICB3aW5kb3cucGljdHVyZUlkID0gUHJpbWl0aXZlW2FjY2Vzc1R5cGVdW25hbWVdLnBpY3R1cmVJZDtcclxuICAgICAgd2luZG93LnR5cGVLaW5kID0gUHJpbWl0aXZlW2FjY2Vzc1R5cGVdW25hbWVdLnR5cGU7XHJcbiAgICAgIHdpbmRvdy5lcXVpcG1lbnROYW1lID0gUHJpbWl0aXZlW2FjY2Vzc1R5cGVdW25hbWVdLmVxdWlwbWVudE5hbWU7XHJcbiAgICAgIHdpbmRvdy5yb2JvdCA9IFByaW1pdGl2ZVthY2Nlc3NUeXBlXVtuYW1lXS5yb2JvdCAvL+e7keWumuacuuWZqOS6uuagkeiKgueCuXV1aWRcclxuICAgIH0gZWxzZSBpZiAoUHJpbWl0aXZlKSB7XHJcbiAgICAgIHJldHVybiBhbGVydCgn5Y+q6IO957uR5a6a5Y2V5Liq5bGe5oCnJylcclxuICAgIH1cclxuICAgIHdpbmRvdy5kYXRhVHlwZU5hbWUgPSBuYW1lXHJcblxyXG4gICAgaWYgKFByaW1pdGl2ZSAmJiBQcmltaXRpdmVbYWNjZXNzVHlwZV1bbmFtZV0udHJlZXZpZXdBcnIpIHsgLy/lm57mmL5cclxuICAgICAgd2luZG93LnN0b3JlTmV3QXJyID0gUHJpbWl0aXZlW2FjY2Vzc1R5cGVdW25hbWVdXHJcbiAgICAgIHNob3coJCgnI3NpdGVUcmVlJyksc3BhY2VVdWlkKSAvLyDlm57mmL7ml7bnm7TmjqXkvb/nlKjvvIzkuI3pnIDopoHlnKjkvKDlgLxcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoYWJjID09PSAxKSB7IC8v56ys5LiA5qyh5Yqg6L29XHJcbiAgICAgICAgZ2V0RGV2aWNlRGF0YSgwLCAkKCcjc2l0ZVRyZWUnKSxzcGFjZVV1aWQpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCgnI2F0dHJpYnV0ZScpLmNzcygnZGlzcGxheScsICdub25lJylcclxuICAgICAgICAkKCcjZXF1aXBtZW50RGF0YScpLmh0bWwoJycpXHJcbiAgICAgICAgJCgnI251bWJlcicpLnZhbCgnJyk7XHJcbiAgICAgICAgJCgnI05hbWUnKS52YWwoJycpO1xyXG4gICAgICAgIGxldCBhYWFhID0gJCgnI3NpdGVUcmVlJykudHJlZXZpZXcoJ2dldFNlbGVjdGVkJyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYWFhYSlcclxuICAgICAgICBpZiAoYWFhYS5sZW5ndGggJiYgbmFtZSAhPT0gJ3RyYW5zZm9ybWVyJyAmJiBuYW1lICE9PSAnc3dpdGNoQ2FiaW5ldCcpIHsgLy/kuI3kuLrlvIDlhbPmn5zml7blgJnlvLnmoYblh7rnjrDnmoTlhoXlrrlcclxuICAgICAgICAgIHdpbmRvdy5ub2RlU2VsZWN0ZWQoYWFhYVswXSwgJCgnI3NpdGVUcmVlJykpXHJcbiAgICAgICAgfSBlbHNlIGlmIChhYWFhLmxlbmd0aCAmJiBuYW1lID09PSAndHJhbnNmb3JtZXInIHx8IG5hbWUgPT09ICdzd2l0Y2hDYWJpbmV0JykgeyAvL+S4uuW8gOWFs+afnOaXtuWAmeW8ueahhuWHuueOsOeahOWGheWuuVxyXG4gICAgICAgICAgJCgnI3NpdGVUcmVlJykudHJlZXZpZXcoJ3Vuc2VsZWN0Tm9kZScsIFthYWFhWzBdLCB7XHJcbiAgICAgICAgICAgIHNpbGVudDogdHJ1ZVxyXG4gICAgICAgICAgfV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWJjKytcclxuICAgIGlmICh3aW5kb3cuc2Nyb0gpIHtcclxuICAgICAgJChcIiNzaXRlVHJlZVwiKS5zY3JvbGxUb3Aod2luZG93LnNjcm9IKVxyXG4gICAgICAkKFwiI3NpdGVUcmVlXCIpLnNjcm9sbExlZnQod2luZG93LnNjcm9MKVxyXG4gICAgfVxyXG4gICAgJCgnI3NpdGVUcmVlJykuc2Nyb2xsKChlKSA9PiB7XHJcbiAgICAgIHZhciBzY3JvSCA9ICQoJyNzaXRlVHJlZScpLnNjcm9sbFRvcCgpOyAvL+a7muWKqOmrmOW6plxyXG4gICAgICB2YXIgc2Nyb0wgPSAkKCcjc2l0ZVRyZWUnKS5zY3JvbGxMZWZ0KCk7XHJcbiAgICAgIHdpbmRvdy5zY3JvSCA9IHNjcm9IXHJcbiAgICAgIHdpbmRvdy5zY3JvTCA9IHNjcm9MXHJcbiAgICB9KVxyXG5cclxuICAgIGZ1bmN0aW9uIE1vdmVyIChpZCkge1xyXG4gICAgICB0aGlzLm9iaiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaWQpO1xyXG4gICAgICB0aGlzLnN0YXJ0eCA9IDA7XHJcbiAgICAgIHRoaXMuc3RhcnR5O1xyXG4gICAgICB0aGlzLnN0YXJ0TGVmdDtcclxuICAgICAgdGhpcy5zdGFydFRvcDtcclxuICAgICAgdGhpcy5tYWluRGl2ID0gdGhpcy5vYmoucGFyZW50Tm9kZTtcclxuICAgICAgdGhpcy5pc0Rvd24gPSBmYWxzZTtcclxuICAgICAgdGhpcy5vcmlnaW5JbmRleCA9IHRoaXMubWFpbkRpdi5zdHlsZS56SW5kZXg7XHJcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgIHRoaXMubW92ZWRvd24gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUgPSBlID8gZSA6IHdpbmRvdy5ldmVudDtcclxuICAgICAgICBpZiAoIXdpbmRvdy5jYXB0dXJlRXZlbnRzKSB7XHJcbiAgICAgICAgICB0aGlzLnNldENhcHR1cmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoYXQuaXNEb3duID0gdHJ1ZTtcclxuICAgICAgICB0aGF0Lm9iai5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XHJcbiAgICAgICAgdGhhdC5tYWluRGl2LnN0eWxlLnpJbmRleCA9IDEwMDA7XHJcblxyXG4gICAgICAgIHRoYXQuc3RhcnR4ID0gZS5jbGllbnRYO1xyXG4gICAgICAgIHRoYXQuc3RhcnR5ID0gZS5jbGllbnRZO1xyXG4gICAgICAgIHRoYXQuc3RhcnRMZWZ0ID0gcGFyc2VJbnQodGhhdC5tYWluRGl2Lm9mZnNldExlZnQpO1xyXG4gICAgICAgIHRoYXQuc3RhcnRUb3AgPSBwYXJzZUludCh0aGF0Lm1haW5EaXYub2Zmc2V0VG9wKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUgPSBlID8gZSA6IHdpbmRvdy5ldmVudDtcclxuICAgICAgICBpZiAodGhhdC5pc0Rvd24pIHtcclxuICAgICAgICAgIHRoYXQubWFpbkRpdi5zdHlsZS5sZWZ0ID0gZS5jbGllbnRYIC0gKHRoYXQuc3RhcnR4IC0gdGhhdC5zdGFydExlZnQpICsgXCJweFwiO1xyXG4gICAgICAgICAgdGhhdC5tYWluRGl2LnN0eWxlLnRvcCA9IGUuY2xpZW50WSAtICh0aGF0LnN0YXJ0eSAtIHRoYXQuc3RhcnRUb3ApICsgXCJweFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLm1vdmV1cCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGF0LmlzRG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoYXQub2JqLnN0eWxlLmN1cnNvciA9ICdkZWZhdWx0JztcclxuICAgICAgICB0aGF0Lm1haW5EaXYuc3R5bGUuekluZGV4ID0gdGhhdC5vcmlnaW5JbmRleDtcclxuICAgICAgICBpZiAoIXdpbmRvdy5jYXB0dXJlRXZlbnRzKSB7XHJcbiAgICAgICAgICB0aGlzLnJlbGVhc2VDYXB0dXJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMub2JqLm9ubW91c2Vkb3duID0gdGhpcy5tb3ZlZG93bjtcclxuICAgICAgdGhpcy5vYmoub25tb3VzZW1vdmUgPSB0aGlzLm1vdmU7XHJcbiAgICAgIHRoaXMub2JqLm9ubW91c2V1cCA9IHRoaXMubW92ZXVwO1xyXG5cclxuICAgICAgLy/pnZ5pZea1j+iniOWZqFxyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW92ZSwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICB2YXIgbW92ZXIyID0gbmV3IE1vdmVyKFwiLnRpdGxlXCIpO1xyXG5cclxuICB9XHJcbn07IiwiLypcclxuICogQEF1dGhvcjogeW91ciBuYW1lXHJcbiAqIEBEYXRlOiAyMDIwLTAzLTE5IDExOjE3OjI1XHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjAtMDMtMTkgMTU6MDY6MzFcclxuICogQExhc3RFZGl0b3JzOiBQbGVhc2Ugc2V0IExhc3RFZGl0b3JzXHJcbiAqIEBEZXNjcmlwdGlvbjogSW4gVXNlciBTZXR0aW5ncyBFZGl0XHJcbiAqIEBGaWxlUGF0aDogXFxhX25ld19odOe8lui+keWZqFxcY2xpZW50XFxzcmNcXGFwaVxcYXBpLWxpc3RcXGRhdGEtYmluZGluZy5qc1xyXG4gKi9cclxuaW1wb3J0IHJlcXVlc3QgZnJvbSAnLi4vcmVxdWVzdC5qcydcclxuXHJcbi8vIOaVsOaNrue7keWumuaooeaAgeahhuermeeCueagkVxyXG5leHBvcnQgY29uc3QgZ2V0VHJlZURhdGEgPSAoeyBwYXJlbnRJZCB9KSA9PiB7XHJcbiAgcmV0dXJuIHJlcXVlc3Qoe1xyXG4gICAgbWV0aG9kOiAnZ2V0JyxcclxuICAgIHVybDogYC9nZXRBbGxEZXZpY2VgXHJcbiAgfSlcclxufVxyXG5cclxuLy8g5qC55o2u56uZ54K55L+h5oGv6I635Y+W57uE5pawXHJcbmV4cG9ydCBjb25zdCBncm91cEluZm8gPSAoeyBzcGFjZUlkOiBzcGFjZUlkIH0pID0+IHtcclxuICByZXR1cm4gcmVxdWVzdCh7XHJcbiAgICBtZXRob2Q6ICdnZXQnLFxyXG4gICAgdXJsOiBgL2dldE1vZGVsQnlEZXZpY2VJZC8ke3NwYWNlSWR9YFxyXG4gIH0pXHJcbn1cclxuXHJcbi8vIOagueaNrue7hOS/oeaBr+iOt+WPlueCueWPt1xyXG5leHBvcnQgY29uc3QgZ2V0QWxsU3BhY2VQb2ludCA9ICh7IHNwYWNlSWQsIGdyb3VwVHlwZSB9KSA9PiB7XHJcbiAgcmV0dXJuIHJlcXVlc3Qoe1xyXG4gICAgbWV0aG9kOiAnZ2V0JyxcclxuICAgIHVybDogYC9kZXZpY2Uvc3BhY2UvZ2V0QWxsU3BhY2VQb2ludC8ke3NwYWNlSWR9LyR7Z3JvdXBUeXBlfWBcclxuICB9KVxyXG59IiwiLypcclxuICogQGRlc2NyaXB0aW9uOiDmqKHlnZfkv6Hmga9cclxuICogQHZlcnNpb246IDAuMC4xXHJcbiAqIEBBdXRob3I6IHpoYW5nX3hpYW5nXHJcbiAqIEBEYXRlOiAyMDE5LTExLTA2IDA5OjE2OjUwXHJcbiAqIEBMYXN0RWRpdG9yczogUGxlYXNlIHNldCBMYXN0RWRpdG9yc1xyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIwLTEwLTE0IDE3OjI5OjI2XHJcbiAqL1xyXG5pbXBvcnQgcmVxdWVzdCBmcm9tICdAL2FwaS9yZXF1ZXN0J1xyXG5pbXBvcnQgeyBnZXRUeXBlTGlzdCB9IGZyb20gJ0AvYXBpL2FwaS1saXN0L3R5cGUnXHJcbmltcG9ydCB7IGdldFRyZWVEZXRhaWwgfSBmcm9tICdAL2FwaS9hcGktbGlzdC90cmVlJ1xyXG5pbXBvcnQgeyBnZXRUcmVlRGF0YSwgZ3JvdXBJbmZvLCBnZXRBbGxTcGFjZVBvaW50IH0gZnJvbSAnQC9hcGkvYXBpLWxpc3QvZGF0YS1iaW5kaW5nLmpzJ1xyXG5cclxubGV0IHR5cGVMaXN0ID0ge31cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvbjog6K+35rGC56uZ54K557G75Z6L5a2X5YW4ICDmraTlpITmlbDmja7mmoLml7bmsqHmnInkvb/nlKhcclxuICovXHJcbmdldFR5cGVMaXN0KCkudGhlbihyZXMgPT4ge1xyXG4gIHJlcy5kYXRhLmZvckVhY2gocm93ID0+IHtcclxuICAgIHR5cGVMaXN0W3Jvdy5pZF0gPSByb3cudXJsXHJcbiAgfSlcclxufSlcclxuXHJcbi8vIOiOt+WPluWbvue6uFxyXG5mdW5jdGlvbiBnZXREcmF3aW5nICh7IHNwYWNlSWQgfSkge1xyXG4gIHJldHVybiByZXF1ZXN0LmdldChgL2RpYWdyYW0vZ2V0QnlJZC8ke3NwYWNlSWR9YClcclxufVxyXG5cclxuLy8g56ys5LiA5qyh5Yqg6L296K+35rGC6aG16Z2iXHJcbmV4cG9ydCBjb25zdCBnZXREZXZpY2VEYXRhID0gKGlkLCBlbGUsIHNwYWNlVXVpZCkgPT4ge1xyXG4gIGlmICghaWQpIHsgaWQgPSAwIH1cclxuICBnZXRUcmVlRGF0YSh7IHBhcmVudElkOiBpZCB9KVxyXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICBpZiAocmVzLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIG5ld1RyZWVBcnIgPSBbXVxyXG4gICAgICAgIHJlcy5kYXRhLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICB0ZXh0OiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgIHNwYWNlSWQ6IGl0ZW0uZGV2aWNlSWQsXHJcbiAgICAgICAgICAgIGxhenlMb2FkOiBmYWxzZSxcclxuICAgICAgICAgICAgaWNvbjogJydcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG5ld1RyZWVBcnIucHVzaChvYmopXHJcbiAgICAgICAgfSlcclxuICAgICAgICBlbGUudHJlZXZpZXcoe1xyXG4gICAgICAgICAgZGF0YTogbmV3VHJlZUFyciwgLy/oioLngrnmlbDmja5cclxuICAgICAgICAgIG9uTm9kZVNlbGVjdGVkOiBmdW5jdGlvbiAoZSwgbm9kZSkge1xyXG4gICAgICAgICAgICAvL+mAieS4reiKgueCueaXtuiwg+eUqOeahOaWueazlVxyXG4gICAgICAgICAgICB3aW5kb3cubm9kZVNlbGVjdGVkKG5vZGUsIGVsZSlcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBlbXB0eUljb246ICcnXHJcbiAgICAgICAgfSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhbGVydCgn5pqC5peg6K6+5aSHJylcclxuICAgICAgfVxyXG4gICAgfSlcclxufVxyXG5cclxuLy8g5re75Yqg5a2Q6IqC54K5IOeCueWHu+ermeeCueiOt+WPluWtkOiKgueCuVxyXG5mdW5jdGlvbiBnZXRDaGlsZE5vZGVJZEFyciAoeyBzcGFjZUlkLCBub2RlSWQsIGVsZSB9KSB7XHJcbiAgZ2V0VHJlZURhdGEoeyBwYXJlbnRJZDogc3BhY2VJZCB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmIChyZXMuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgYWRkTm9kZSA9IFtdXHJcbiAgICAgICAgcmVzLmRhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgIGFkZE5vZGUucHVzaCh7XHJcbiAgICAgICAgICAgIHRleHQ6IGl0ZW0ubmFtZSxcclxuICAgICAgICAgICAgc3BhY2VJZDogaXRlbS5pZCxcclxuICAgICAgICAgICAgbGF6eUxvYWQ6IHRydWUsXHJcbiAgICAgICAgICAgIGljb246IGl0ZW0uaGFzQ2hpbGQgPT09IHRydWUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzJyA6ICcnXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgbGV0IGFkZE5vZGVzID0gW25vZGVJZCwgeyBub2RlOiBhZGROb2RlIH1dXHJcbiAgICAgICAgZWxlLnRyZWV2aWV3KCdhZGROb2RlJywgYWRkTm9kZXMpIC8vIOa3u+WKoOiKgueCuSzlnKjlrpjmlrlhcGnkuK3msqHmnInov5nkuKrmlrnms5VcclxuICAgICAgICBlbGUudHJlZXZpZXcoJ3RvZ2dsZU5vZGVFeHBhbmRlZCcsIFsgICAgICAgLy8g5YiH5o2i6IqC54K55bGV5byA54q25oCBXHJcbiAgICAgICAgICBub2RlSWQsXHJcbiAgICAgICAgICB7IHNpbGVudDogdHJ1ZSB9XHJcbiAgICAgICAgXSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgYWRkTm9kZXMgPSBbbm9kZUlkXVxyXG4gICAgICAgIGVsZS50cmVldmlldygnYWRkTm9kZScsIGFkZE5vZGVzKVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuLy8g55So5LqO5Zue5pi+5o6l5Y+j6LCD55SoXHJcbmZ1bmN0aW9uIGdldENoaWxkTm9kZUlkQXJyMiAoc3BhY2VJZCkge1xyXG4gIHJldHVybiBnZXRUcmVlRGF0YSh7IHBhcmVudElkOiBzcGFjZUlkIH0pLnRoZW4ocmVzID0+IHtcclxuICAgIHJldHVybiByZXMuZGF0YVxyXG4gIH0pXHJcbn1cclxuXHJcbi8vIOe7hOS/oeaBr+a4suafk1xyXG5mdW5jdGlvbiBnZXRHcm91cEluZm8gKHsgc3BhY2VJZCB9KSB7XHJcbiAgJCgnI2VxdWlwbWVudERhdGEnKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKVxyXG4gICQoJyNlcXVpcG1lbnREYXRhJykuaHRtbCgnJykgLy8g5q+P5qyh6L+b5p2l6YO96ZyA6KaB5oOF5Ya16YeM6Z2i55qE5omA5pyJ5YaF5a65XHJcbiAgZ3JvdXBJbmZvKHsgc3BhY2VJZDogc3BhY2VJZCB9KS50aGVuKHJlcyA9PiB7XHJcbiAgICB2YXIgcmVzRGF0YSA9IHJlcy5kYXRhXHJcbiAgICBsZXQgZ3JvdXBJbmZvID0gJCgnI2dyb3VwSW5mbycpXHJcbiAgICBncm91cEluZm8uZW1wdHkoKVxyXG4gICAgaWYgKHJlc0RhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXNEYXRhLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgdmFyIGxpID0gbnVsbFxyXG4gICAgICAgIGxpID0gJChgPGxpIGNsYXNzPVwidGFiLWl0ZW1cIj48L2xpPmApO1xyXG4gICAgICAgIGxpLnRleHQoaXRlbS52YXJOYW1lKVxyXG4gICAgICAgIGxpLmF0dHIoeyAnaWQnOiBpdGVtLmlkIH0pXHJcbiAgICAgICAgZ3JvdXBJbmZvLmFwcGVuZChsaSlcclxuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgISQoJyNudW1iZXInKS52YWwoKSkge1xyXG4gICAgICAgICAgbGkuYWRkQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgICAgICB3aW5kb3cuZ3JvdXBJZCA9IGl0ZW0uaWRcclxuICAgICAgICAgIHdpbmRvdy5ncm91cFR5cGUgPSBpdGVtLnVybFxyXG4gICAgICAgICAgd2luZG93LnR5cGVJZCA9IHtcclxuICAgICAgICAgICAgZ3JvdXBJZDogaXRlbS5pZCxcclxuICAgICAgICAgICAgbmFtZTogaXRlbS52YXJOYW1lLFxyXG4gICAgICAgICAgICBudW06IGl0ZW0udXJsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBnZXREYXRhUG9pbnQoeyBzcGFjZUlkOiBpdGVtLmlkLCBncm91cFR5cGU6IGl0ZW0udXJsIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDnu4Tmt7vliqDngrnlh7vkuovku7ZcclxuICAgICAgICBsaS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBsaS5hZGRDbGFzcygnYWN0aXZlJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcclxuICAgICAgICAgIHdpbmRvdy5ncm91cElkID0gaXRlbS5pZFxyXG4gICAgICAgICAgd2luZG93Lmdyb3VwVHlwZSA9IGl0ZW0udXJsXHJcbiAgICAgICAgICB3aW5kb3cudHlwZUlkID0ge1xyXG4gICAgICAgICAgICBncm91cElkOiBpdGVtLmlkLFxyXG4gICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgIG51bTogaXRlbS51cmxcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGdldERhdGFQb2ludCh7IHNwYWNlSWQ6IGl0ZW0uaWQsIGdyb3VwVHlwZTogaXRlbS51cmwgfSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBsZXQgc2VsZWN0ZWRHcm91cElkID0gZ2V0U3RvcmVJZCgnZ3JvdXBJZCcpXHJcbiAgICAgICAgaWYgKHNlbGVjdGVkR3JvdXBJZCAmJiAkKCcjbnVtYmVyJykudmFsKCkgJiYgc2VsZWN0ZWRHcm91cElkID09PSBpdGVtLmlkKSB7XHJcbiAgICAgICAgICAkKGAjJHtzZWxlY3RlZEdyb3VwSWR9YCkuYWRkQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgICAgICBnZXREYXRhUG9pbnQoeyBzcGFjZUlkOiBpdGVtLmlkLCBncm91cFR5cGU6IGl0ZW0udXJsIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g5b2T57uE5LiL5rKh5pyJ5pWw5o2u5pe2XHJcbiAgICAgIHZhciBzcGFuID0gJChgPHNwYW4+5pqC5peg5pWw5o2uPC9zcGFuPmApXHJcbiAgICAgIHNwYW4uYWRkQ2xhc3MoJ25vRGF0YScpXHJcbiAgICAgICQoJyNlcXVpcG1lbnREYXRhJykuYXBwZW5kKHNwYW4pXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuLy8g5pWw5o2u54K55riy5p+TXHJcbmZ1bmN0aW9uIGdldERhdGFQb2ludCAoeyBzcGFjZUlkLCBncm91cFR5cGUgfSkge1xyXG4gIGdyb3VwSW5mbyh7IHNwYWNlSWQgfSkudGhlbihyZXMgPT4ge1xyXG4gICAgbGV0IHJlc0RhdGEgPSByZXMuZGF0YVxyXG4gICAgaGFuZGxlRGF0YVBpYyhyZXNEYXRhLCAn54K55Y+3JylcclxuICB9KVxyXG59XHJcblxyXG4vL+agkeiKgueCuemAieS4remcgOiwg+eUqOeahOWHveaVsFxyXG53aW5kb3cubm9kZVNlbGVjdGVkID0gZnVuY3Rpb24gKG5vZGUsIGVsZSkge1xyXG4gIGxldCBpc1F1ZXJ5ID0gdHJ1ZVxyXG4gIGxldCBwYXJlbnRzID0gW11cclxuICBsZXQgY3VyTm9kZSA9IG5vZGVcclxuICB3aGlsZSAoaXNRdWVyeSkge1xyXG4gICAgLy/orrDlvZXku47pobblsYLliLDpgInkuK3oioLngrnmiYDnu4/ljobnmoToioLngrlcclxuICAgIGxldCBwYXJlbnRJZCA9IGN1ck5vZGUucGFyZW50SWRcclxuICAgIGlmIChwYXJlbnRJZCA9PT0gMCB8fCBwYXJlbnRJZCkge1xyXG4gICAgICBsZXQgcGFyZW50ID0gZWxlLnRyZWV2aWV3KCdnZXROb2RlJywgcGFyZW50SWQpXHJcbiAgICAgIHBhcmVudHMudW5zaGlmdCh7XHJcbiAgICAgICAgaWQ6IHBhcmVudC5zcGFjZUlkLFxyXG4gICAgICAgIG5vZGVJZDogcGFyZW50Lm5vZGVJZFxyXG4gICAgICB9KVxyXG4gICAgICBjdXJOb2RlID0gcGFyZW50XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpc1F1ZXJ5ID0gZmFsc2VcclxuICAgIH1cclxuICB9XHJcbiAgJCgnI251bWJlcicpLnZhbCgnJylcclxuICAkKCcjTmFtZScpLnZhbCgnJylcclxuICB3aW5kb3cudHJlZUlkID0ge1xyXG4gICAgLy/moJHnmoTmnInlhbPkv6Hmga9cclxuICAgIHRyZWVJZDogbm9kZS5zcGFjZUlkLFxyXG4gICAgbmFtZTogbm9kZS50ZXh0XHJcbiAgfVxyXG4gIHBhcmVudHMucHVzaCh7XHJcbiAgICBpZDogbm9kZS5zcGFjZUlkLFxyXG4gICAgbm9kZUlkOiBub2RlLm5vZGVJZFxyXG4gIH0pXHJcbiAgd2luZG93LnRyZWV2aWV3QXJyID0gcGFyZW50c1xyXG4gIGhhbmRsZVNwZWNpYWxQZWwoeyBzcGFjZUlkOiBub2RlLnNwYWNlSWQsIG5vZGU6IG5vZGUsIHRleHQ6IG5vZGUudGV4dCB9KVxyXG5cclxuICAvLyDliKTmlq3lvZPliY3ngrnlh7vnmoToioLngrnmmK/lkKbmnInlrZDoioLngrks5pyJ55u05o6l5Yqg6L295bm25bGV5byALCDml6DosIPlj5blkI7lj7DmjqXlj6NcclxuICAvLyB2YXIgVHJlZWZsYWcgPSBlbGUudHJlZXZpZXcoJ2dldFNlbGVjdGVkJylbMF0ubm9kZXNcclxuICAvLyBpZiAoVHJlZWZsYWcgJiYgVHJlZWZsYWcubGVuZ3RoID4gMCkge1xyXG4gIC8vICAgZWxlLnRyZWV2aWV3KCd0b2dnbGVOb2RlRXhwYW5kZWQnLCBbXHJcbiAgLy8gICAgIG5vZGUubm9kZUlkLFxyXG4gIC8vICAgICB7IHNpbGVudDogdHJ1ZSB9XHJcbiAgLy8gICBdKVxyXG4gIC8vICAgcmV0dXJuXHJcbiAgLy8gfSBlbHNlIHtcclxuICAvLyAgIGdldENoaWxkTm9kZUlkQXJyKHsgc3BhY2VJZDogbm9kZS5zcGFjZUlkLCBub2RlSWQ6IG5vZGUubm9kZUlkLCBlbGU6IGVsZSB9KSAvLyDmn6Xor6LlrZDoioLngrlcclxuICAvLyB9XHJcbn1cclxuXHJcbi8v5Zu+5YWD5pyJ57uR5a6a5YC85pe25YCZ54K55Ye75Zue5pi+XHJcbmV4cG9ydCBjb25zdCBzaG93ID0gKGVsZSxpZCkgPT4ge1xyXG4gIGxldCBhcnIgPSBnZXRTdG9yZUlkKCdhcnInKVxyXG4gIGdldFRyZWVEYXRhKHsgcGFyZW50SWQ6IDAgfSkudGhlbihhc3luYyBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICBsZXQgaWRUb0luZGV4ID0ge31cclxuICAgIHZhciBuZXdUcmVlQXJyID0gW11cclxuICAgIGxldCByZXNEYXRhID0gcmVzLmRhdGFcclxuICAgIGlmIChyZXNEYXRhLmxlbmd0aCkge1xyXG4gICAgICByZXNEYXRhLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgaWYgKGl0ZW0uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICBpZFRvSW5kZXhbaXRlbS5pZF0gPSAwXHJcbiAgICAgICAgICBsZXQgb2JqID0ge1xyXG4gICAgICAgICAgICB0ZXh0OiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgIHNwYWNlSWQ6IGl0ZW0uaWQsXHJcbiAgICAgICAgICAgIGxhenlMb2FkOiB0cnVlLFxyXG4gICAgICAgICAgICBzdGF0ZToge30sXHJcbiAgICAgICAgICAgIGljb246IGl0ZW0uaGFzQ2hpbGQgPT09IHRydWUgPyAnZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzJyA6ICcnXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBuZXdUcmVlQXJyLnB1c2gob2JqKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgbGV0IHF1ZXJ5QXJyID0gbmV3VHJlZUFyclxyXG4gICAgICBhc3luYyBmdW5jdGlvbiBhcHBlbmROb2RlcyAoKSB7XHJcbiAgICAgICAgLy/lm57mmL7lr7nmoJHmiYDlgZrnmoTmk43kvZxcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZm9yIChjb25zdCBbaWR4LCB0cmVlTm9kZV0gb2YgYXJyLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50SWQgPSB0cmVlTm9kZS5pZFxyXG4gICAgICAgICAgICBpZiAoaWR4ICE9PSBhcnIubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgIGF3YWl0IGdldENoaWxkTm9kZUlkQXJyMihwYXJlbnRJZCkudGhlbihub2RlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZG9uZU5vZGVzID0gbm9kZXMubWFwKChub2RlLCBub2RlSW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgaWRUb0luZGV4W25vZGUuaWRdID0gbm9kZUluZGV4XHJcbiAgICAgICAgICAgICAgICAgIGxldCByZXNOb2RlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IG5vZGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBzcGFjZUlkOiBub2RlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhenlMb2FkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICBpY29uOiBub2RlLmhhc0NoaWxkID09PSB0cnVlID8gJ2dseXBoaWNvbiBnbHlwaGljb24tcGx1cycgOiAnJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXNOb2RlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudEluZGV4ID0gaWRUb0luZGV4W3BhcmVudElkXVxyXG5cclxuICAgICAgICAgICAgICAgIHF1ZXJ5QXJyW3BhcmVudEluZGV4XS5zdGF0ZS5leHBhbmRlZCA9IHRydWVcclxuICAgICAgICAgICAgICAgIHF1ZXJ5QXJyW3BhcmVudEluZGV4XS5ub2RlcyA9IGRvbmVOb2Rlc1xyXG4gICAgICAgICAgICAgICAgcXVlcnlBcnJbcGFyZW50SW5kZXhdLmljb24gPSAnJ1xyXG4gICAgICAgICAgICAgICAgcXVlcnlBcnIgPSBxdWVyeUFycltwYXJlbnRJbmRleF0ubm9kZXNcclxuXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBsZXQgcGFyZW50SW5kZXggPSBpZFRvSW5kZXhbcGFyZW50SWRdXHJcbiAgICAgICAgICAgICAgcXVlcnlBcnJbcGFyZW50SW5kZXhdLnN0YXRlLnNlbGVjdGVkID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICQoJyNlcXVpcG1lbnREYXRhJykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJylcclxuICAgICAgICAgICAgICBoYW5kbGVTcGVjaWFsUGVsKHsgc3BhY2VJZDogcXVlcnlBcnJbcGFyZW50SW5kZXhdLnNwYWNlSWQsIG5vZGU6IHF1ZXJ5QXJyW3BhcmVudEluZGV4XSwgdGV4dDogcXVlcnlBcnJbcGFyZW50SW5kZXhdLnRleHQgfSkgLy8g5p+l6K+i5pWw5o2u54K5XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgJCgnI2F0dHJpYnV0ZScpLmNzcygnZGlzcGxheScsICdub25lJylcclxuICAgICAgICAgICQoJyNlcXVpcG1lbnREYXRhJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKVxyXG4gICAgICAgICAgY29uc29sZS5sb2coZSwgOTk5KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBhd2FpdCBhcHBlbmROb2RlcygpXHJcbiAgICAgIGVsZS50cmVldmlldyh7XHJcbiAgICAgICAgZGF0YTogbmV3VHJlZUFyciwgLy/oioLngrnmlbDmja5cclxuICAgICAgICBvbk5vZGVTZWxlY3RlZDogZnVuY3Rpb24gKGV2ZW50LCBub2RlKSB7XHJcbiAgICAgICAgICAvL+mAieS4reiKgueCueaXtuiwg+eUqOeahOaWueazlVxyXG4gICAgICAgICAgd2luZG93Lm5vZGVTZWxlY3RlZChub2RlLCBlbGUpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbXB0eUljb246ICcnXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuLy8g5qC55o2u5a2Y5YKo5a2X5q616I635Y+W5a+55bqU5pWw5o2uXHJcbmZ1bmN0aW9uIGdldFN0b3JlSWQgKHR5cGUpIHtcclxuICBpZiAoIXdpbmRvdy5zdG9yZU5ld0FycikgcmV0dXJuIGZhbHNlXHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICdhcnInOlxyXG4gICAgICByZXR1cm4gc3RvcmVOZXdBcnIudHJlZXZpZXdBcnJcclxuICAgIGNhc2UgJ2dyb3VwSWQnOiAvLyDpgInkuK3nmoTnu4RpZFxyXG4gICAgICByZXR1cm4gc3RvcmVOZXdBcnIuZ3JvdXBJZFxyXG4gICAgY2FzZSAnc2VsZWN0ZWRJZCc6IC8vIOmAieS4reeahOaVsOaNrueCuWlk5oiW57q/6Lev5Zu+aWRcclxuICAgICAgcmV0dXJuIHN0b3JlTmV3QXJyLmlkXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBicmVhaztcclxuICB9XHJcbn1cclxuXHJcbi8vIOWkhOeQhueJueauiuWbvuWFg1xyXG5mdW5jdGlvbiBoYW5kbGVTcGVjaWFsUGVsICh7IHNwYWNlSWQsIG5vZGUsIHRleHQgfSkge1xyXG4gIHN3aXRjaCAod2luZG93LmRhdGFUeXBlTmFtZSkge1xyXG4gICAgY2FzZSAnanVtcCc6XHJcbiAgICAgIGdldFZpZWRvKHsgc3BhY2VJZCB9KVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSAnYWRkR3JhcGgnOlxyXG4gICAgICBnZXRQaWN0dXJlKHsgc3BhY2VJZCB9KVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSAndHJhbnNmb3JtZXInOlxyXG4gICAgICBUcmFuc2Zvcm1lcnMobm9kZSwgdGV4dClcclxuICAgICAgYnJlYWtcclxuICAgIGNhc2UgJ3N3aXRjaENhYmluZXQnOlxyXG4gICAgICBUcmFuc2Zvcm1lcnMobm9kZSwgdGV4dClcclxuICAgICAgYnJlYWtcclxuICAgIGNhc2UgJ3JvYm90JzpcclxuICAgICAgVHJhbnNmb3JtZXJzKG5vZGUsIHRleHQpXHJcbiAgICAgIGJyZWFrXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICAvLyBnZXRHcm91cEluZm8oeyBzcGFjZUlkIH0pIC8vIOafpeivoue7hOS/oeaBr1xyXG4gICAgICAkKCcjbnVtYmVyJykudmFsKHNwYWNlSWQpXHJcbiAgICAgIGdldERhdGFQb2ludCh7IHNwYWNlSWQgfSlcclxuICAgICAgYnJlYWtcclxuICB9XHJcbn1cclxuXHJcbi8vIOivt+axguWbvue6uFxyXG5mdW5jdGlvbiBnZXRQaWN0dXJlICh7IHNwYWNlSWQgfSkge1xyXG4gIHdpbmRvdy50eXBlS2luZCA9ICflm77nurgnXHJcbiAgZ2V0RHJhd2luZyh7IHNwYWNlSWQgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7XHJcbiAgICB2YXIgcCA9ICQoJzxwPuWbvue6uDwvcD4nKVxyXG4gICAgcC5hZGRDbGFzcygncC1zdHlsZScpXHJcbiAgICAkKCcjZ3JvdXBJbmZvJykuZW1wdHkoKS5hcHBlbmQocClcclxuICAgIGhhbmRsZURhdGFQaWMocmVzLmRhdGEsICflm77nurgnKVxyXG4gIH0pXHJcbn1cclxuXHJcbi8vIOWkhOeQhuaVsOaNrueCueWSjOWbvue6uFxyXG5mdW5jdGlvbiBoYW5kbGVEYXRhUGljIChyZXNEYXRhLCB0eXBlKSB7XHJcbiAgdmFyIGVxdWlwbWVudERhdGEgPSAkKCcjZXF1aXBtZW50RGF0YScpXHJcbiAgZXF1aXBtZW50RGF0YS5odG1sKCcnKVxyXG4gIGlmIChyZXNEYXRhLmxlbmd0aCkge1xyXG4gICAgcmVzRGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICB2YXIgc3BhbiA9ICQoYDxzcGFuPjwvc3Bhbj5gKVxyXG4gICAgICBzcGFuLmF0dHIoeyAnaWQnOiBpdGVtLnZhclRhZyB9KS50ZXh0KGl0ZW0udmFyTmFtZSkuYWRkQ2xhc3MoJ3NwYW5TdHlsZU9iaiBhdHRyaWJ1dGUnKVxyXG4gICAgICBlcXVpcG1lbnREYXRhLmFwcGVuZChzcGFuKVxyXG4gICAgICBzcGFuLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzcGFuLmFkZENsYXNzKCdzZWxlY3RzJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnc2VsZWN0cycpXHJcbiAgICAgICAgJCgnI2F0dHJpYnV0ZScpLmNzcygnZGlzcGxheScsICdmbGV4JykgLy8g54K55Ye75bGe5oCn5YC85pe25pi+56S65bGe5oCn5qCPXHJcbiAgICAgICAgLy8g5bCG6YCJ5Lit5pWw5o2u5re75Yqg5Yiw6L6T5YWl5qGG5LitXHJcbiAgICAgICAgJCgnI251bWJlcicpLnZhbCgkKCcjbnVtYmVyJykudmFsKCkrJywnICsgaXRlbS52YXJUYWcpXHJcbiAgICAgICAgJCgnI05hbWUnKS52YWwoaXRlbS52YXJOYW1lKVxyXG4gICAgICB9KVxyXG4gICAgICBsZXQgc2VsZWN0ZWRJZCA9IGdldFN0b3JlSWQoJ3NlbGVjdGVkSWQnKVxyXG4gICAgICBpZiAoISQoJyNudW1iZXInKS52YWwoKSAmJiAhc2VsZWN0ZWRJZCkgcmV0dXJuXHJcbiAgICAgICQoJyMnICsgc2VsZWN0ZWRJZCkuYWRkQ2xhc3MoJ3NlbGVjdHMnKVxyXG4gICAgfSlcclxuICAgIHdpbmRvdy50eXBlS2luZCA9IHR5cGVcclxuICB9IGVsc2Uge1xyXG4gICAgLy8g5b2T57uE5LiL5rKh5pyJ5pWw5o2u54K55pe2XHJcbiAgICB2YXIgc3BhbiA9ICQoYDxzcGFuPuaaguaXoOaVsOaNrjwvc3Bhbj5gKVxyXG4gICAgc3Bhbi5hZGRDbGFzcygnbm9EYXRhJylcclxuICAgIGVxdWlwbWVudERhdGEuYXBwZW5kKHNwYW4pXHJcbiAgfVxyXG59XHJcbi8vIOinhumikeivt+axglxyXG5mdW5jdGlvbiBnZXRWaWVkbyAoeyBzcGFjZUlkIH0pIHtcclxuICAkKCcjZ3JvdXBJbmZvJykuZW1wdHkoKVxyXG4gIGdyb3VwSW5mbyh7IHNwYWNlSWQgfSkudGhlbihyZXMgPT4ge1xyXG4gICAgbGV0IGlzQ2FtZXJhID0gZmFsc2VcclxuICAgIGxldCBudnJBZGRyID0gJydcclxuICAgIGxldCBudnJDaGFubmVsID0gJydcclxuICAgIGxldCBhaUFkZHIgPSAnJ1xyXG4gICAgbGV0IGFyQ2hhbm5lbCA9ICcnXHJcbiAgICBsZXQgbGl2ZUFkZHIgPSAnJ1xyXG4gICAgbGV0IGJvcmtlckFkZHIgPSAnJ1xyXG4gICAgbGV0IG1vZGVsID0gJydcclxuICAgIGxldCBtYW51ZmFjdHVyZSA9ICcnXHJcbiAgICBsZXQgY29tbWlzc2lvbkRhdGUgPSAnJ1xyXG4gICAgbGV0IHBvc2l0aW9uID0gJydcclxuICAgIGxldCBuYW1lID0gJydcclxuICAgIGxldCBiYXNpY0FycmF5ID0gcmVzLmRhdGEuYmFzaWNBcnJheVxyXG4gICAgYmFzaWNBcnJheS5mb3JFYWNoKGJhc2ljRGF0YSA9PiB7XHJcbiAgICAgIGlmIChiYXNpY0RhdGEudXJsID09PSAnc3ViVHlwZScgJiYgYmFzaWNEYXRhLm5hbWUgPT09ICdhc3Npc3RhbmNlX2NhbWVyYScpIHtcclxuICAgICAgICBpc0NhbWVyYSA9IHRydWVcclxuICAgICAgfSBlbHNlIGlmIChiYXNpY0RhdGEudXJsID09PSAnbnZyQWRkcicpIHtcclxuICAgICAgICBudnJBZGRyID0gYmFzaWNEYXRhLm5hbWVcclxuICAgICAgfSBlbHNlIGlmIChiYXNpY0RhdGEudXJsID09PSAnbnZyQ2hhbm5lbCcpIHtcclxuICAgICAgICBudnJDaGFubmVsID0gYmFzaWNEYXRhLm5hbWVcclxuICAgICAgfSBlbHNlIGlmIChiYXNpY0RhdGEudXJsID09PSAnYWlBZGRyJykge1xyXG4gICAgICAgIGFpQWRkciA9IGJhc2ljRGF0YS5uYW1lXHJcbiAgICAgIH0gZWxzZSBpZiAoYmFzaWNEYXRhLnVybCA9PT0gJ2FyQ2hhbm5lbCcpIHtcclxuICAgICAgICBhckNoYW5uZWwgPSBiYXNpY0RhdGEubmFtZVxyXG4gICAgICB9IGVsc2UgaWYgKGJhc2ljRGF0YS51cmwgPT09ICdsaXZlQWRkcicpIHtcclxuICAgICAgICBsaXZlQWRkciA9IGJhc2ljRGF0YS5uYW1lXHJcbiAgICAgIH0gZWxzZSBpZiAoYmFzaWNEYXRhLnVybCA9PT0gJ2JvcmtlckFkZHInKSB7XHJcbiAgICAgICAgYm9ya2VyQWRkciA9IGJhc2ljRGF0YS5uYW1lXHJcbiAgICAgIH0gZWxzZSBpZiAoYmFzaWNEYXRhLnVybCA9PT0gJ21vZGVsJykge1xyXG4gICAgICAgIG1vZGVsID0gYmFzaWNEYXRhLm5hbWVcclxuICAgICAgfSBlbHNlIGlmIChiYXNpY0RhdGEudXJsID09PSAnbWFudWZhY3R1cmUnKSB7XHJcbiAgICAgICAgbWFudWZhY3R1cmUgPSBiYXNpY0RhdGEubmFtZVxyXG4gICAgICB9IGVsc2UgaWYgKGJhc2ljRGF0YS51cmwgPT09ICdjb21taXNzaW9uRGF0ZScpIHtcclxuICAgICAgICBjb21taXNzaW9uRGF0ZSA9IGJhc2ljRGF0YS5uYW1lXHJcbiAgICAgIH0gZWxzZSBpZiAoYmFzaWNEYXRhLnVybCA9PT0gJ3Bvc2l0aW9uJykge1xyXG4gICAgICAgIHBvc2l0aW9uID0gYmFzaWNEYXRhLm5hbWVcclxuICAgICAgfSBlbHNlIGlmIChiYXNpY0RhdGEudXJsID09PSAnbmFtZScpIHtcclxuICAgICAgICBuYW1lID0gYmFzaWNEYXRhLm5hbWVcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIGlmIChpc0NhbWVyYSkge1xyXG4gICAgICBsZXQganNvbiA9IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBzcGFjZUlkOiBzcGFjZUlkLFxyXG4gICAgICAgIG52ckFkZHIsXHJcbiAgICAgICAgbnZyQ2hhbm5lbCxcclxuICAgICAgICBhaUFkZHIsXHJcbiAgICAgICAgYXJDaGFubmVsLFxyXG4gICAgICAgIGxpdmVBZGRyLFxyXG4gICAgICAgIGJvcmtlckFkZHIsXHJcbiAgICAgICAgbW9kZWwsXHJcbiAgICAgICAgbWFudWZhY3R1cmUsXHJcbiAgICAgICAgY29tbWlzc2lvbkRhdGUsXHJcbiAgICAgICAgcG9zaXRpb25cclxuICAgICAgfSlcclxuICAgICAgJCgnI251bWJlcicpLnZhbChqc29uKVxyXG4gICAgICAkKCcjTmFtZScpLnZhbChuYW1lKVxyXG4gICAgICB3aW5kb3cuZmxhZ0lkID0ganNvblxyXG4gICAgfVxyXG4gIH0pXHJcbiAgd2luZG93LnR5cGVLaW5kID0gJ+aRhOWDj+WktCdcclxufVxyXG5cclxuLy8g6K+35rGC56uZ54K55Y+Y5Y6L5Zmo5byA5YWz5p+cXHJcbmZ1bmN0aW9uIFRyYW5zZm9ybWVycyAobm9kZSwgdGV4dCkge1xyXG4gICQoJyNncm91cEluZm8nKS5lbXB0eSgpXHJcbiAgJCgnI2VxdWlwbWVudERhdGEnKS5odG1sKCcnKVxyXG4gIHdpbmRvdy50eXBlS2luZCA9ICforr7lpIcnXHJcbiAgJCgnI251bWJlcicpLnZhbChub2RlLnNwYWNlSWQpXHJcbiAgJCgnI05hbWUnKS52YWwodGV4dClcclxuICB3aW5kb3cuZXF1aXBtZW50SWQgPSBub2RlLnNwYWNlSWRcclxuICB3aW5kb3cuZmxhZ0lkID0gbm9kZS5zcGFjZUlkXHJcbn0iLCIvKlxuICogQGRlc2NyaXB0aW9uOiBlZGl0b3JcbiAqIEB2ZXJzaW9uOiAwLjAuMVxuICogQEF1dGhvcjogZGFpX3poZW5nXG4gKiBARGF0ZTogMjAxOS0xMS0wNCAxNTo0Nzo1OFxuICogQExhc3RFZGl0b3JzOiBQbGVhc2Ugc2V0IExhc3RFZGl0b3JzXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIwLTAzLTE2IDE1OjU5OjM0XG4gKi9cbmltcG9ydCByZXF1ZXN0IGZyb20gJy4uL3JlcXVlc3QuanMnXG4vKipcbiAqIEBkZXNjcmlwdGlvbjog6I635Y+W57G75Z6L5a2X5YW4XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUeXBlTGlzdCA9ICgpID0+IHtcbiAgICAvLyByZXR1cm4gcmVxdWVzdC5wb3N0KCcvc3BhY2UvdHlwZS9zZWxlY3QnLHt9KVxuICAgIHJldHVybiByZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgdXJsOiAnL3BsYXRmb3JtL25vZGVUeXBlL3F1ZXJ5QWxsTm9kZSdcbiAgICB9KVxufSIsIi8qXG4gKiBAZGVzY3JpcHRpb246IOWPs+mUruiPnOWNlVxuICogQHZlcnNpb246IDAuMC4xXG4gKiBAQXV0aG9yOiBkYWlfemhlbmdcbiAqIEBEYXRlOiAyMDE5LTA5LTE5IDExOjE4OjUyXG4gKiBATGFzdEVkaXRvcnM6IFBsZWFzZSBzZXQgTGFzdEVkaXRvcnNcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjAtMDctMDIgMTQ6MDY6MTBcbiAqL1xuaW1wb3J0IHsgcmVtb3ZlRGlhZ3JhbSwgY29weURpYWdyYW1zIH0gZnJvbSAnQC9hcGkvYXBpLWxpc3QvZGlhZ3JhbSdcbmltcG9ydCB1dGlsIGZyb20gJ0AvdXRpbHMvdXRpbHMnXG5sZXQgZWRpdG9yVHlwZSA9IHV0aWwuZ2V0VXJsUGFyYW0oJ3R5cGUnKVxuZnVuY3Rpb24gc3VyZVJlbW92ZSAodXVpZHMsIHRhZ3MpIHtcbiAgbGV0IGRpYWxvZyA9IG5ldyBodC53aWRnZXQuRGlhbG9nKClcbiAgZGlhbG9nLnNldENvbmZpZyh7XG4gICAgdGl0bGU6IGDliKDpmaQoJHt1dWlkcy5sZW5ndGh9KWAsXG4gICAgd2lkdGg6IDI1MCxcbiAgICBoZWlnaHQ6IDEwMCxcbiAgICBjb250ZW50OiAn56Gu5a6a5Yig6Zmk6YCJ5Lit5YaF5a6577yfJyxcbiAgICBjb250ZW50UGFkZGluZzogMTAsXG4gICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgIGNsb3NhYmxlOiB0cnVlLFxuICAgIHJlc2l6ZU1vZGU6ICd3aCcsXG4gICAgYnV0dG9uczogW1xuICAgICAge1xuICAgICAgICBsYWJlbDogJ+WPlua2iCcsXG4gICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGJ1dHRvbiwgZSkge1xuICAgICAgICAgIGRpYWxvZy5oaWRlKClcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbGFiZWw6ICfnoa7lrponLFxuICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChidXR0b24sIGUpIHtcbiAgICAgICAgICByZW1vdmVEaWFncmFtKHV1aWRzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRhZ3MpXG4gICAgICAgICAgICB0YWdzLmZvckVhY2godGFnID0+IHtcbiAgICAgICAgICAgICAgbGV0IG5vZGUgPSBlZGl0b3IubWFpblRhYlZpZXcuZ2V0VGFiTW9kZWwoKS5nZXREYXRhQnlUYWcodGFnKVxuICAgICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbjog6Ziy5q2i5by55Ye656Gu5a6a5YWz6Zet5by556qXXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbm9kZS5hKCdkaXJ0eScsIGZhbHNlKVxuICAgICAgICAgICAgICAgIGVkaXRvci5jbG9zZVRhYihub2RlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgICAgZGlhbG9nLmhpZGUoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXSxcbiAgICBidXR0b25zQWxpZ246ICdyaWdodCdcbiAgfSlcbiAgZGlhbG9nLnNob3coKVxufVxuXG5leHBvcnQgZGVmYXVsdCAodmlldywgZWRpdG9yLCB0eXBlKSA9PiB7XG4gIHZhciBqc29uRGlyID0gW1xuICAgIHtcbiAgICAgIGxhYmVsOiAn5re75Yqg5Zu+57q4JyxcbiAgICAgIHR5cGU6ICdhZGQnLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoaXRlbSwgZSkge1xuICAgICAgICB2YXIgc2VsZWN0XG4gICAgICAgIGlmICh0eXBlID09PSAndHJlZScpIHtcbiAgICAgICAgICBzZWxlY3QgPSBlZGl0b3IuZGlyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0ID0gZWRpdG9yLmZpbGUuZmlsZVR5cGUgPT09ICdkaXInID8gZWRpdG9yLmZpbGUgOiBlZGl0b3IuZGlyXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2FkZCcpIHtcbiAgICAgICAgICBpZiAoZWRpdG9yVHlwZSA9PT0gJzNkJykge1xuICAgICAgICAgICAgZWRpdG9yLm5ld1NjZW5lKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWRpdG9yLm5ld0Rpc3BsYXlWaWV3KClcbiAgICAgICAgICB9XG4gICAgICAgICAgZWRpdG9yLmRtLmEoe1xuICAgICAgICAgICAgc3BhY2VVdWlkOiBzZWxlY3QuZ2V0QXR0cigndXVpZCcpXG4gICAgICAgICAgfSlcbiAgICAgICAgICBlZGl0b3Iuc2F2ZSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIF1cblxuICB2YXIganNvbkRpYWdyYW0gPSBqc29uRGlyLmNvbmNhdChbXG4gICAge1xuICAgICAgbGFiZWw6ICfmi7fotJ0nLFxuICAgICAgdHlwZTogJ2NvcHknLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoaXRlbSwgZSkge1xuICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnY29weScpIHtcbiAgICAgICAgICB3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25zQ29weURhdGFzID0gZWRpdG9yLmV4cGxvcmVyLmxpc3RcbiAgICAgICAgICAgIC5nZXRTZWxlY3Rpb25Nb2RlbCgpXG4gICAgICAgICAgICAuZ2V0U2VsZWN0aW9uKClcbiAgICAgICAgICAgIC5fYXMubWFwKGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgICByZXR1cm4gbW9kZWwuZ2V0QXR0ck9iamVjdCgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogJ+WvvOWHuicsXG4gICAgICB0eXBlOiAnZXhwb3J0JyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGl0ZW0sIGUpIHtcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2V4cG9ydCcpIHtcbiAgICAgICAgICBsZXQgZGF0YXMgPSBlZGl0b3IuZXhwbG9yZXIubGlzdFxuICAgICAgICAgICAgLmdldFNlbGVjdGlvbk1vZGVsKClcbiAgICAgICAgICAgIC5nZXRTZWxlY3Rpb24oKVxuICAgICAgICAgICAgLl9hcy5tYXAoZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbW9kZWwuZ2V0QXR0cignbmFtZScpLFxuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KG1vZGVsLmdldEF0dHJPYmplY3QoKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB1dGlsLnVwbG9hZChkYXRhcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6ICfph43lkb3lkI0nLFxuICAgICAgdHlwZTogJ3JlbmFtZScsXG4gICAgICBhY3Rpb246IGZ1bmN0aW9uIChpdGVtLCBlKSB7XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdyZW5hbWUnKSB7XG4gICAgICAgICAgdmFyIGxkID0gZWRpdG9yLmV4cGxvcmVyLmxpc3Quc20oKS5sZCgpXG4gICAgICAgICAgZWRpdG9yLmV4cGxvcmVyLmxpc3QuYmVnaW5FZGl0aW5nKGxkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogJ+WIoOmZpCcsXG4gICAgICB0eXBlOiAncmVtb3ZlJyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGl0ZW0sIGUpIHtcbiAgICAgICAgdmFyIHNlbGVjdFxuICAgICAgICBpZiAodHlwZSA9PT0gJ3RyZWUnKSB7XG4gICAgICAgICAgc2VsZWN0ID0gZWRpdG9yLmRpclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdCA9IGVkaXRvci5maWxlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3JlbW92ZScpIHtcbiAgICAgICAgICB2YXIgdXVpZHMgPSBbXVxuICAgICAgICAgIHZhciB0YWdzID0gW11cbiAgICAgICAgICBlZGl0b3IuZXhwbG9yZXIubGlzdFxuICAgICAgICAgICAgLmdldFNlbGVjdGlvbk1vZGVsKClcbiAgICAgICAgICAgIC5nZXRTZWxlY3Rpb24oKVxuICAgICAgICAgICAgLl9hcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgICB1dWlkcy5wdXNoKG1vZGVsLmdldEF0dHIoJ3V1aWQnKSlcbiAgICAgICAgICAgICAgdGFncy5wdXNoKGBkaXNwbGF5cy8ke21vZGVsLmdldE5hbWUoKX0uanNvbmApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIHN1cmVSZW1vdmUodXVpZHMsIHRhZ3MpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIF0pXG4gIHZhciBwYXN0ZUJ0biA9IHtcbiAgICBsYWJlbDogJ+eymOi0tCcsXG4gICAgdHlwZTogJ3Bhc3RlJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChpdGVtLCBlKSB7XG4gICAgICB2YXIgc2VsZWN0XG4gICAgICBpZiAodHlwZSA9PT0gJ3RyZWUnKSB7XG4gICAgICAgIHNlbGVjdCA9IGVkaXRvci5kaXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdCA9IGVkaXRvci5maWxlLmZpbGVUeXBlID09PSAnZGlyJyA/IGVkaXRvci5maWxlIDogZWRpdG9yLmRpclxuICAgICAgfVxuICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3Bhc3RlJykge1xuICAgICAgICBjb3B5RGlhZ3JhbXMoXG4gICAgICAgICAgd2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uc0NvcHlEYXRhcyxcbiAgICAgICAgICBzZWxlY3QuZ2V0QXR0cigndXVpZCcpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIGpzb25EaWFncmFtUGFzdGUgPSBqc29uRGlhZ3JhbS5jb25jYXQoW3Bhc3RlQnRuXSlcbiAgdmFyIGpzb25EaXJQYXN0ZSA9IGpzb25EaXIuY29uY2F0KFtwYXN0ZUJ0bl0pXG4gIC8vIHZhciBncmFwaFZpZXcgPSBuZXcgaHQuZ3JhcGguR3JhcGhWaWV3KClcbiAgdmFyIGNvbnRleHRtZW51ID0gbmV3IGh0LndpZGdldC5Db250ZXh0TWVudSgpXG4gIC8v6YeN5YaZYmVmb3JlU2hvd++8jOWKqOaAgeiuvue9ruiPnOWNlemhuVxuICBjb250ZXh0bWVudS5iZWZvcmVTaG93ID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2VsZWN0XG4gICAgaWYgKHR5cGUgPT09ICd0cmVlJykge1xuICAgICAgc2VsZWN0ID0gZWRpdG9yLmRpclxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3QgPSBlZGl0b3IuZmlsZVxuICAgIH1cbiAgICB2YXIgaXNQYXN0ZSA9IHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNDb3B5RGF0YXMubGVuZ3RoID4gMFxuICAgIGlmICghc2VsZWN0KSB7XG4gICAgICB0aGlzLnNldEl0ZW1zKG51bGwpXG4gICAgfSBlbHNlIGlmIChzZWxlY3QuZmlsZVR5cGUgPT09ICdyb290Jykge1xuICAgICAgdGhpcy5zZXRJdGVtcyhudWxsKVxuICAgIH0gZWxzZSBpZiAoc2VsZWN0LmZpbGVUeXBlID09PSAnZGlyJyAmJiBpc1Bhc3RlKSB7XG4gICAgICB0aGlzLnNldEl0ZW1zKGpzb25EaXJQYXN0ZSlcbiAgICB9IGVsc2UgaWYgKHNlbGVjdC5maWxlVHlwZSA9PT0gJ2RpcicpIHtcbiAgICAgIHRoaXMuc2V0SXRlbXMoanNvbkRpcilcbiAgICB9IGVsc2UgaWYgKGlzUGFzdGUpIHtcbiAgICAgIHRoaXMuc2V0SXRlbXMoanNvbkRpYWdyYW1QYXN0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRJdGVtcyhqc29uRGlhZ3JhbSlcbiAgICB9XG4gIH1cbiAgY29udGV4dG1lbnUuYWRkVG8odmlldy5nZXRWaWV3KCkpXG59XG4iLCIvKlxuICogQGRlc2NyaXB0aW9uOiBlZGl0b3JcbiAqIEB2ZXJzaW9uOiAwLjAuMVxuICogQEF1dGhvcjogZGFpX3poZW5nXG4gKiBARGF0ZTogMjAxOS0wOS0xOSAxMToxNDozNFxuICogQExhc3RFZGl0b3JzOiBQbGVhc2Ugc2V0IExhc3RFZGl0b3JzXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIwLTA3LTAzIDA5OjIwOjM5XG4gKi9cblxuaW1wb3J0IGFkZENvbnRleHRNZW51IGZyb20gJy4vY29udGV4dG1lbnUnXG5pbXBvcnQgeyBnZXREaWFncmFtTGlzdCwgYWRkRGlhZ3JhbSB9IGZyb20gJ0AvYXBpL2FwaS1saXN0L2RpYWdyYW0nXG5pbXBvcnQgeyBnZXRUcmVlLCBnZXRUcmVlTGFuIH0gZnJvbSAnQC9hcGkvYXBpLWxpc3QvdHJlZSdcbmltcG9ydCBhcGlDb25maWcgZnJvbSAnQC9hcGkvYXBpLWNvbmZpZydcbmltcG9ydCB1dGlsIGZyb20gJ0AvdXRpbHMvdXRpbHMuanMnXG5sZXQgZWRpdG9yVHlwZSA9IHV0aWwuZ2V0VXJsUGFyYW0oJ3R5cGUnKVxuZnVuY3Rpb24gY3JlYXRlU3RhdGlvbkV4cGxvcmVyIChlZGl0b3IsIGRyYWdnYWJsZSkge1xuICB2YXIgdGV4dEljb24gPSB7XG4gICAgd2lkdGg6IDMyLFxuICAgIGhlaWdodDogMTYsXG4gICAgY29tcHM6IFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB0ZXh0OiAnIyMuIycsXG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgcmVjdDogWzAsIDAsIDMyLCAxNl1cbiAgICAgIH1cbiAgICBdXG4gIH1cbiAgd2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uc0V4cGxvcmVyID0gbmV3IGh0ZWRpdG9yLkV4cGxvcmVyKFxuICAgIGVkaXRvcixcbiAgICBhcGlDb25maWcuYXBpTmFtZSxcbiAgICBmYWxzZVxuICApXG5cbiAgLy8g6I635Y+W56uZ54K55qCRXG4gIC8vIGdldFRyZWVMYW4oMCkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgdmFyIHJlcyA9IHtcImNvZGVcIjpcIjBcIixcIm1zZ1wiOlwicmVzdWx0LnN5c3RlbS5zdWNjZXNzXCIsXCJ0aW1lXCI6XCIyMDIxLTAxLTA3IDE0OjU2OjM4LjU0OVwiLFwiZGF0YVwiOlt7XCJpZFwiOlwiMTAwMDAwXCIsXCJuYW1lXCI6XCLorr7lpIdcIixcInR5cGVcIjpudWxsLFwidXJsXCI6bnVsbCxcImFkZHJcIjpudWxsLFwidGFnXCI6bnVsbCxcImRlc2NcIjpudWxsLFwicmVtYXJrXCI6XCJyZWdpb25cIixcInN0YXR1c1wiOm51bGwsXCJjcmVhdGVUaW1lXCI6bnVsbCxcImNyZWF0ZUJ5XCI6bnVsbCxcInVwZGF0ZVRpbWVcIjpudWxsLFwidXBkYXRlQnlcIjpudWxsLFwiY2hpbGRyZW5cIjpudWxsLFwicGFyZW50SWRcIjpudWxsLFwicGFyZW50TmFtZVwiOm51bGwsXCJvd25lcklkXCI6bnVsbCxcIm5vZGVUeXBlUGFyZW50XCI6bnVsbCxcIm5vZGVUeXBlXCI6bnVsbCxcImxhdFwiOm51bGwsXCJsbmdcIjpudWxsLFwiaXNTaWRlXCI6bnVsbCxcImljb25cIjpcImd1b1wiLFwicm9vdElkXCI6bnVsbCxcInN0YXRpb25JZFwiOm51bGwsXCJsaW5lSWRcIjpudWxsLFwicm9vbUlkXCI6bnVsbCxcInRyYW5zZm9ybWVySWRcIjpudWxsLFwidHJhbnNmb3JtZXJOYW1lXCI6bnVsbCxcImhhc0NoaWxkXCI6dHJ1ZSxcImNsYXNzaWZ5SWRcIjpudWxsLFwiY2xhc3NpZnlJZERlc2NcIjpudWxsLFwicHJpbWFyeUlkXCI6bnVsbCxcInBhdGhcIjpudWxsLFwicGF0aE5hbWVcIjpudWxsLFwiYWJpbGl0eVwiOm51bGwsXCJyZWdpb25JZFwiOm51bGwsXCJsaW5rSWRcIjpudWxsLFwiaW1hZ2VcIjpudWxsLFwic3RhdGlvbk5hbWVcIjpudWxsLFwibGluZU5hbWVcIjpudWxsLFwib3JnYW5pemVOYW1lXCI6bnVsbCxcInJlZ2lvbk5hbWVcIjpudWxsLFwicm9vbU5hbWVcIjpudWxsLFwibW9kZWxcIjpudWxsLFwic3BhY2VOYW1lXCI6bnVsbCxcInNjb3JlXCI6bnVsbCxcImRldmljZU51bVwiOm51bGwsXCJhbGFybU51bVwiOm51bGwsXCJ1bkFsYXJtTnVtXCI6bnVsbCxcImNhcGFjaXR5XCI6bnVsbCxcImNvbW1pc3Npb25EYXRlXCI6bnVsbCxcImNsYXNcIjpudWxsLFwiY29tU3RhdHVzXCI6bnVsbCxcInJ1blN0YXR1c1wiOm51bGwsXCJwb3NpdGlvblwiOm51bGwsXCJ2YWx1ZVwiOm51bGwsXCJwb2ludE5hbWVcIjpudWxsLFwidW5pdFwiOm51bGwsXCJjaGVja1N0YXR1c1wiOm51bGwsXCJ2b2x0YWdlTGV2ZWxcIjpudWxsLFwidG93ZXJOYW1lXCI6bnVsbCxcInRvd2VySWRcIjpudWxsLFwicG93ZXJDdXRDb3VudFwiOm51bGwsXCJwb3dlckN1dExlbmd0aFwiOm51bGwsXCJyYXRlXCI6bnVsbCxcIm5vZGVUeXBlTGlzdFwiOm51bGwsXCJ0aW1lc3RhbXBcIjpudWxsLFwibWFudUZhY3R1cmVcIjpudWxsLFwicmF0ZWRWb2xhdGVcIjpudWxsLFwicGVyc29uSW5DaGFyZ2VcIjpudWxsLFwicmF0ZWRDYXBhY2l0eVwiOm51bGwsXCJkZXZpY2VJZFwiOm51bGwsXCJjaGFubmVsXCI6bnVsbCxcImFjY2lkZW50Q291bnRcIjpudWxsLFwic2FmZU9wZXJhdGlvblRpbWVcIjpudWxsLFwicGlueWluXCI6bnVsbCxcImxpbmVJZExpc3RcIjpudWxsLFwib3JnYW5pemVJZExpc3RcIjpudWxsfV19XG4gICAgd2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uVHJlZURhdGEgPSByZXMuZGF0YVxuICAgIHZhciBzdGF0aW9uTGlzdCA9IHJlcy5kYXRhXG4gICAgd2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uVHJlZSA9IHBhcnNlU3RhdGlvbkRhdGEoXG4gICAgICBzdGF0aW9uTGlzdCxcbiAgICAgIGFwaUNvbmZpZy5hcGlOYW1lXG4gICAgKVxuICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci5wYXJzZSh3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25UcmVlKVxuICAgIGRlZmF1bHRFeHBhbmQoKVxuICAgIGRlZmF1bHRPcGVuKClcbiAgICBhZGRDb250ZXh0TWVudSh3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25zRXhwbG9yZXIudHJlZSwgZWRpdG9yLCAndHJlZScpXG4gICAgYWRkQ29udGV4dE1lbnUod2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uc0V4cGxvcmVyLmxpc3QsIGVkaXRvciwgJ2xpc3QnKVxuICAvLyB9KVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb246IOaMiemcgOWKoOi9vVxuICAgKi9cblxuICB3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25zRXhwbG9yZXIudHJlZS5zZXRMb2FkZXIoe1xuICAgIGxvYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoZGF0YSAmJiBkYXRhLmEoJ25lZWRUb0xvYWQnKSkge1xuICAgICAgICBkYXRhLmEoJ25lZWRUb0xvYWQnLCBmYWxzZSlcbiAgICAgICAgbGV0IHNwYWNlSWQgPSBkYXRhLmdldEF0dHIoJ3V1aWQnKVxuICAgICAgICBnZXRUcmVlTGFuKHNwYWNlSWQpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIHJlcy5kYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHt9XG4gICAgICAgICAgICB2YWx1ZSA9IHtcbiAgICAgICAgICAgICAgZmlsZVR5cGU6ICdkaXInLFxuICAgICAgICAgICAgICBhdHRyczogeyB1dWlkOiBpdGVtLmlkLCBuZWVkVG9Mb2FkOiB0cnVlIH0sXG4gICAgICAgICAgICAgIGlzRXhwYW5kZWQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci5wYXJzZUNoaWxkKGRhdGEsIGl0ZW0ubmFtZSwgdmFsdWUpO1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIGlzTG9hZGVkOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbjog54K55Ye756uZ54K5LCDojrflj5bnq5nngrnkuIvnmoTlm77nurjlubbmuLLmn5NcbiAgICovXG4gIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci50cmVlLnNtKCkubXMoZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgbmV3RGF0YSA9IGUuZGF0YXMuZ2V0KGUuZGF0YXMuc2l6ZSgpIC0gMSlcbiAgICBpZiAoZS5raW5kID09PSAnc2V0Jykge1xuICAgICAgaWYgKG5ld0RhdGEgJiYgbmV3RGF0YS5maWxlVHlwZSAhPT0gJ3Jvb3QnKSB7XG4gICAgICAgIGdldERpYWdyYW1MaXN0KClcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbjog5Y+M5Ye75omT5byA5Zu+57q4XG4gICAqL1xuICB3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25zRXhwbG9yZXIubGlzdC5taShmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLmtpbmQgPT09ICdkb3VibGVDbGlja0RhdGEnICYmIGUuZGF0YS5maWxlVHlwZSA9PT0gJ2RpYWdyYW0nKSB7XG4gICAgICB2YXIgbm9kZSA9IGUuZGF0YVxuICAgICAgZS5kYXRhLnVybCA9IGBkaXNwbGF5cy8ke25vZGUucGF0aH0vJHtub2RlLmdldE5hbWUoKX0uanNvbmBcblxuICAgICAgaWYgKGVkaXRvclR5cGUgPT09ICczZCcpIHtcbiAgICAgICAgZWRpdG9yLm5ld1NjZW5lKClcbiAgICAgICAgZWRpdG9yLnNjZW5lLmRlc2VyaWFsaXplKG5vZGUuZ2V0QXR0cignanNvbicpLmpzb24pXG4gICAgICAgIGVkaXRvci51cmwgPSBgc2NlbmVzLyR7bm9kZS5nZXROYW1lKCl9Lmpzb25gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlZGl0b3Iub3BlbkJ5SlNPTihcbiAgICAgICAgICAnZGlzcGxheScsXG4gICAgICAgICAgLy8gYGRpc3BsYXlzLyR7bm9kZS51cmx9Lmpzb25gLFxuICAgICAgICAgIGBkaXNwbGF5cy8ke25vZGUuZ2V0TmFtZSgpfS5qc29uYCxcbiAgICAgICAgICBub2RlLmdldE5hbWUoKSxcbiAgICAgICAgICBub2RlLmdldEF0dHIoJ2pzb24nKS5qc29uXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGVkaXRvci5kbS5hKHtcbiAgICAgICAgdXVpZDogbm9kZS5nZXRBdHRyKCd1dWlkJyksXG4gICAgICAgIHNwYWNlVXVpZDogbm9kZS5nZXRBdHRyKCdzcGFjZVV1aWQnKVxuICAgICAgfSlcbiAgICAgIGluaXREaWFncmFtVHlwZShub2RlLmdldEF0dHIoJ2RpYWdyYW1UeXBlJykpXG4gICAgfVxuICB9KVxuICB3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25zRXhwbG9yZXIudHJlZS5oYW5kbGVDcm9zc0RyYWcgPSAoKSA9PiB7IH1cbiAgd2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uc0V4cGxvcmVyLmxpc3QuaGFuZGxlQ3Jvc3NEcmFnID0gKFxuICAgIGUsXG4gICAgdHlwZSxcbiAgICBkcmFnSW5mb1xuICApID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgaWYgKHR5cGUgPT09ICdkcm9wJykge1xuICAgICAgdmFyIGRmID0gZS5kYXRhVHJhbnNmZXJcbiAgICAgIHZhciBkcm9wRmlsZXMgPSBbXSAvLyDlrZjmlL7mi5bmi73nmoTmlofku7blr7nosaFcbiAgICAgIGlmIChkZi5pdGVtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIENocm9tZeaciWl0ZW1z5bGe5oCn77yM5a+5Q2hyb21l55qE5Y2V54us5aSE55CGXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGYuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgaXRlbSA9IGRmLml0ZW1zW2ldXG4gICAgICAgICAgLy8g55Sod2Via2l0R2V0QXNFbnRyeeemgeatouS4iuS8oOebruW9lVxuICAgICAgICAgIGlmIChpdGVtLmtpbmQgPT09ICdmaWxlJyAmJiBpdGVtLndlYmtpdEdldEFzRW50cnkoKS5pc0ZpbGUpIHtcbiAgICAgICAgICAgIHZhciBmaWxlID0gaXRlbS5nZXRBc0ZpbGUoKVxuICAgICAgICAgICAgZHJvcEZpbGVzLnB1c2goZmlsZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghZWRpdG9yLmRpci5nZXRBdHRyKCd1dWlkJykpIHtcbiAgICAgICAgbGV0IGRpYWxvZyA9IG5ldyBodC53aWRnZXQuRGlhbG9nKClcbiAgICAgICAgZGlhbG9nLnNldENvbmZpZyh7XG4gICAgICAgICAgdGl0bGU6ICfmj5DnpLonLFxuICAgICAgICAgIHdpZHRoOiAyNTAsXG4gICAgICAgICAgaGVpZ2h0OiAxMDAsXG4gICAgICAgICAgY29udGVudDogJ+ivt+mAieaLqeermeeCuScsXG4gICAgICAgICAgY29udGVudFBhZGRpbmc6IDEwLFxuICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICByZXNpemVNb2RlOiAnd2gnLFxuICAgICAgICAgIGJ1dHRvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbGFiZWw6ICfnoa7lrponLFxuICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChidXR0b24sIGUpIHtcbiAgICAgICAgICAgICAgICBkaWFsb2cuaGlkZSgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIGJ1dHRvbnNBbGlnbjogJ3JpZ2h0J1xuICAgICAgICB9KVxuICAgICAgICBkaWFsb2cuc2hvdygpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgZHJvcEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICAgIGxldCBpbmRleCA9IGZpbGUubmFtZS5pbmRleE9mKCcuJylcbiAgICAgICAgbGV0IG5hbWUgPSBmaWxlLm5hbWUuc2xpY2UoMCwgaW5kZXgpXG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGxldCBjb250ID0gSlNPTi5wYXJzZShlLnRhcmdldC5yZXN1bHQpXG4gICAgICAgICAgY29uc29sZS5sb2coY29udClcbiAgICAgICAgICBhZGREaWFncmFtKHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICB0eXBlOiAwLFxuICAgICAgICAgICAganNvbjogSlNPTi5zdHJpbmdpZnkoY29udC5qc29uKSxcbiAgICAgICAgICAgIHNwYWNlVXVpZDogZWRpdG9yLmRpci5nZXRBdHRyKCd1dWlkJyksXG4gICAgICAgICAgICBhZGRUeXBlOiAnZHJvcCdcbiAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGdldERpYWdyYW1MaXN0KClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBpZiAoZHJhZ2dhYmxlKSB7XG4gICAgd2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uc0V4cGxvcmVyLmxpc3QuaXNEcm9wcGFibGVUb0Rpc3BsYXlWaWV3ID0gdHJ1ZVxuICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci5saXN0LmhhbmRsZURyb3BUb0VkaXRWaWV3ID0gZnVuY3Rpb24gKFxuICAgICAgdmlldyxcbiAgICAgIGZpbGVOb2RlLFxuICAgICAgcG9pbnQsXG4gICAgICBldmVudFxuICAgICkge1xuICAgICAgaWYgKGZpbGVOb2RlLmdldEljb24oKSA9PT0gdGV4dEljb24pIHtcbiAgICAgICAgdmFyIHRleHQgPSBuZXcgaHQuVGV4dCgpXG4gICAgICAgIHRleHQucyh7XG4gICAgICAgICAgdGV4dDogJyMjLiMnLFxuICAgICAgICAgICd0ZXh0LmFsaWduJzogJ2NlbnRlcidcbiAgICAgICAgfSlcbiAgICAgICAgdGV4dC5zZXREYXRhQmluZGluZ3Moe1xuICAgICAgICAgIHM6IHsgdGV4dDogeyBpZDogZmlsZU5vZGUuZ2V0TmFtZSgpIH0gfVxuICAgICAgICB9KVxuICAgICAgICB0ZXh0LnNldERpc3BsYXlOYW1lKGZpbGVOb2RlLmdldE5hbWUoKSlcbiAgICAgICAgdGV4dC5wKHBvaW50KVxuICAgICAgICB2aWV3LmFkZERhdGEodGV4dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBub2RlID0gbmV3IGh0Lk5vZGUoKVxuICAgICAgICBub2RlLnNldEltYWdlKGZpbGVOb2RlLmdldEltYWdlKCkpXG4gICAgICAgIG5vZGUucChwb2ludClcbiAgICAgICAgbm9kZS5zZXREaXNwbGF5TmFtZShmaWxlTm9kZS5nZXROYW1lKCkpXG4gICAgICAgIHZpZXcuYWRkRGF0YShub2RlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gd2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uc0V4cGxvcmVyXG59XG4vLyDmlrDlop7oioLngrlcbmZ1bmN0aW9uIGFkZERhdGEgKG5hbWUsIHV1aWQsIHBhcmVudCkge1xuICB2YXIgZGF0YSA9IG5ldyBodC5EYXRhKCk7XG4gIGRhdGEuc2V0TmFtZShuYW1lKTtcbiAgZGF0YS5zZXRQYXJlbnQocGFyZW50KTsgLy8gb3IgcGFyZW50LmFkZENoaWxkKGRhdGEpO1xuICB3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25zRXhwbG9yZXIudHJlZS5nZXREYXRhTW9kZWwoKS5hZGQoZGF0YSk7XG4gIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOaJvuS7lueItuiKgueCuVxuICovXG5mdW5jdGlvbiBwYXJzZVN0YXRpb25EYXRhUGFyZW50IChvbGREYXRhTGlzdCwgb2xkVXVpZCwgZGF0YUxpc3QpIHtcbiAgb2xkRGF0YUxpc3QubWFwKGl0ZW0gPT4ge1xuICAgIGlmIChpdGVtLmlkID09PSBvbGRVdWlkKSB7XG4gICAgICBpdGVtLmNoaWxkcmVuID0gZGF0YUxpc3RcbiAgICB9XG4gICAgaWYgKGl0ZW0uY2hpbGRyZW4gJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGggIT09IDApIHtcbiAgICAgIHBhcnNlU3RhdGlvbkRhdGFQYXJlbnQoaXRlbS5jaGlsZHJlbiwgb2xkVXVpZCwgZGF0YUxpc3QpXG4gICAgfVxuICB9KVxuICByZXR1cm4gb2xkRGF0YUxpc3Rcbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiDmoLzlvI/ljJbnq5nngrnmoJFcbiAqL1xuZnVuY3Rpb24gcGFyc2VTdGF0aW9uRGF0YSAoZGF0YUxpc3QsIHBhcmVudFBhdGgsIG9sZERhdGFMaXN0LCBvbGRVdWlkKSB7XG4gIHZhciByZXMgPSB7fVxuICB2YXIgcmVwZWF0TmFtZSA9IFtdXG4gIGRhdGFMaXN0LmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgbmFtZSA9IGRhdGEubmFtZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVwZWF0TmFtZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlcGVhdE5hbWVbaV0gPT09IG5hbWUpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUgKyAnICdcbiAgICAgIH1cbiAgICB9XG4gICAgcmVwZWF0TmFtZS5wdXNoKG5hbWUpXG4gICAgbGV0IHBhdGggPSBgJHtwYXJlbnRQYXRofS8ke25hbWV9YFxuICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvblRyZWVVdWlkVG9QYXRoW2RhdGEuaWRdID0gcGF0aFxuICAgIGlmIChkYXRhLmNoaWxkcmVuICYmIGRhdGEuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgcmVzW25hbWVdID0ge1xuICAgICAgICBmaWxlVHlwZTogJ2RpcicsXG4gICAgICAgIGF0dHJzOiB7IHV1aWQ6IGRhdGEuaWQgfSxcbiAgICAgICAgY2hpbGRyZW46IHBhcnNlU3RhdGlvbkRhdGEoZGF0YS5jaGlsZHJlbiwgcGF0aClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW25hbWVdID0ge1xuICAgICAgICBmaWxlVHlwZTogJ2RpcicsXG4gICAgICAgIGF0dHJzOiB7IHV1aWQ6IGRhdGEuaWQsIG5lZWRUb0xvYWQ6IHRydWUgfVxuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHJlc1xufVxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOWIneWni+WMluWPs+S+p+aYr+WQpuS4u+WbvuWxnuaAp1xuICogQHBhcmFtIHt0eXBlfVxuICogQHJldHVybjpcbiAqL1xuZnVuY3Rpb24gaW5pdERpYWdyYW1UeXBlICh2YWx1ZSkge1xuICBlZGl0b3IucmlnaHRUb3BCb3JkZXJQYW5lXG4gICAgLmdldENlbnRlclZpZXcoKVxuICAgIC5kYXRhTW9kZWwuc2V0QXR0cignZGlhZ3JhbVR5cGUnLCB2YWx1ZSlcbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiDpu5jorqTlsZXlvIAsIOeOsOW5s+WPsOaaguaXoOivpemcgOaxglxuICogQHBhcmFtIHt0eXBlfVxuICogQHJldHVybjpcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdEV4cGFuZCAoKSB7XG4gIHRyeSB7XG4gICAgbGV0IGRlZmF1bHRFeHBhbmRBcnIgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3NlbGVjdFRyZWVOb2RlJykpXG4gICAgICAudHJlZUFyck5vZGVFeHBhbmRcbiAgICBkZWZhdWx0RXhwYW5kQXJyLmZvckVhY2godXVpZCA9PiB7XG4gICAgICBsZXQgcGF0aCA9IHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvblRyZWVVdWlkVG9QYXRoW3V1aWRdXG4gICAgICBsZXQgbm9kZSA9IHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci50cmVlXG4gICAgICAgIC5nZXREYXRhTW9kZWwoKVxuICAgICAgICAuZ2V0RGF0YUJ5SWQocGF0aClcbiAgICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvbnNFeHBsb3Jlci50cmVlLmV4cGFuZChub2RlKVxuICAgIH0pXG4gIH0gY2F0Y2ggKGUpIHsgfVxufVxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOm7mOiupOaJk+W8gOWbvue6uCwg546w5bmz5Y+w5pqC5peg6K+l6ZyA5rGCXG4gKiBAcGFyYW0ge3R5cGV9XG4gKiBAcmV0dXJuOlxuICovXG5mdW5jdGlvbiBkZWZhdWx0T3BlbiAoKSB7XG4gIHRyeSB7XG4gICAgbGV0IHNlbGVjdFRyZWVOb2RlID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdzZWxlY3RUcmVlTm9kZScpKVxuICAgIGlmICghc2VsZWN0VHJlZU5vZGUpIHJldHVyblxuXG4gICAgbGV0IGRlZmF1bHRTZWxlY3RQYXRoID1cbiAgICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuc3RhdGlvblRyZWVVdWlkVG9QYXRoW1xuICAgICAgc2VsZWN0VHJlZU5vZGUuc2VsZWN0VHJlZU5vZGVVdWlkXG4gICAgICBdXG4gICAgbGV0IGRlZmF1bHRPcGVuQXJyID0gc2VsZWN0VHJlZU5vZGUuZ3JhcGhVdWlkXG5cbiAgICB3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25zRXhwbG9yZXIudHJlZS5zZWxlY3Rpb25JZHMgPSBbZGVmYXVsdFNlbGVjdFBhdGhdXG4gICAgd2luZG93LmN1c3RvbVN0YXRlcy5nZXREaWFncmFtTGlzdFByb21pc2UgJiZcbiAgICAgIHdpbmRvdy5jdXN0b21TdGF0ZXMuZ2V0RGlhZ3JhbUxpc3RQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICBkZWZhdWx0T3BlbkFyci5mb3JFYWNoKHV1aWQgPT4ge1xuXG4gICAgICAgICAgbGV0IHBhdGggPSB3aW5kb3cuY3VzdG9tU3RhdGVzLnN0YXRpb25UcmVlVXVpZFRvUGF0aFt1dWlkXVxuICAgICAgICAgIGxldCBub2RlID0gd2luZG93LmN1c3RvbVN0YXRlcy5zdGF0aW9uc0V4cGxvcmVyLnRyZWVcbiAgICAgICAgICAgIC5nZXREYXRhTW9kZWwoKVxuICAgICAgICAgICAgLmdldERhdGFCeUlkKHBhdGgpXG4gICAgICAgICAgZWRpdG9yLm9wZW5CeUpTT04oXG4gICAgICAgICAgICAnZGlzcGxheScsXG4gICAgICAgICAgICBgJHtub2RlLnVybH0uanNvbmAsXG4gICAgICAgICAgICBub2RlLmdldE5hbWUoKSxcbiAgICAgICAgICAgIG5vZGUuZ2V0QXR0cignanNvbicpLmpzb25cbiAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgICB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSwgJzg4ODgnKVxuICB9XG59XG4vKipcbiAqIEBkZXNjcmlwdGlvbjog5re75Yqg56uZ54K5dGFi6aG1XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGVkaXRvciA9PiB7XG4gIHZhciBwb2ludHNUYWIgPSBuZXcgaHQuVGFiKClcbiAgcG9pbnRzVGFiLnNldE5hbWUoJ+ermeeCuScpXG4gIGVkaXRvci5sZWZ0VG9wVGFiVmlldy5nZXRUYWJNb2RlbCgpLmFkZChwb2ludHNUYWIsIDApXG4gIHBvaW50c1RhYi5zZXRWaWV3KGNyZWF0ZVN0YXRpb25FeHBsb3JlcihlZGl0b3IsIGZhbHNlKSlcbiAgcmV0dXJuIHBvaW50c1RhYlxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gcmVwbGFjZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHJlcGxhY2VyLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBuYXRpdmVSZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiBuYXRpdmVSZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kID8gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpIDogJ2dldCc7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIi8qXG4gKiBAZGVzY3JpcHRpb246IGVkaXRvclxuICogQHZlcnNpb246IDAuMC4xXG4gKiBAQXV0aG9yOiBkYWlfemhlbmdcbiAqIEBEYXRlOiAyMDE5LTA5LTIwIDE3OjQ1OjQzXG4gKiBATGFzdEVkaXRvcnM6IHpoYW5nX3hpYW5nXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTExLTA2IDA5OjQ4OjEyXG4gKi9cbndpbmRvdy5jdXN0b21TdGF0ZXMgPSB7XG4gIGdldERpYWdyYW1MaXN0UHJvbWlzZTogbnVsbCxcbiAgc3RhdGlvblRyZWVVdWlkVG9QYXRoOiB7fSxcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbjog56uZ54K55bem5L6n5qCPXG4gICAqL1xuICBzdGF0aW9uc0V4cGxvcmVyOiBudWxsLFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uOiDnq5nngrnlt6bkvqfmoJFcbiAgICovXG4gIHN0YXRpb25UcmVlOiB7fSxcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbjog56uZ54K55ou36LSd5pWw5o2uXG4gICAqL1xuICBzdGF0aW9uc0NvcHlEYXRhczogW10sXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb246IOWwhuermeeCuei/lOWbnuaYr+aVsOaNruS/neWtmOi1t+adpVxuICAgKi9cbiAgc3RhdGlvblRyZWVEYXRhOiBbXVxufSIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJ1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKSB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoMSk7IH0pO1xudmFyIEZPUkNFRCA9ICFERVNDUklQVE9SUyB8fCBGQUlMU19PTl9QUklNSVRJVkVTO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSW5kZXhlZE9iamVjdChpdCksIGtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUtleXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuXG4vLyBcIm5ld1wiIHNob3VsZCBjcmVhdGUgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z1xudmFyIENPUlJFQ1RfTkVXID0gbmV3IE5hdGl2ZVJlZ0V4cChyZTEpICE9PSByZTE7XG5cbnZhciBGT1JDRUQgPSBERVNDUklQVE9SUyAmJiBpc0ZvcmNlZCgnUmVnRXhwJywgKCFDT1JSRUNUX05FVyB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuIE5hdGl2ZVJlZ0V4cChyZTEpICE9IHJlMSB8fCBOYXRpdmVSZWdFeHAocmUyKSA9PSByZTIgfHwgTmF0aXZlUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpO1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLWNvbnN0cnVjdG9yXG5pZiAoRk9SQ0VEKSB7XG4gIHZhciBSZWdFeHBXcmFwcGVyID0gZnVuY3Rpb24gUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHRoaXNJc1JlZ0V4cCA9IHRoaXMgaW5zdGFuY2VvZiBSZWdFeHBXcmFwcGVyO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyICYmIGZsYWdzQXJlVW5kZWZpbmVkID8gcGF0dGVyblxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBOYXRpdmVSZWdFeHAocGF0dGVybklzUmVnRXhwICYmICFmbGFnc0FyZVVuZGVmaW5lZCA/IHBhdHRlcm4uc291cmNlIDogcGF0dGVybiwgZmxhZ3MpXG4gICAgICAgIDogTmF0aXZlUmVnRXhwKChwYXR0ZXJuSXNSZWdFeHAgPSBwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwV3JhcHBlcilcbiAgICAgICAgICA/IHBhdHRlcm4uc291cmNlXG4gICAgICAgICAgOiBwYXR0ZXJuLCBwYXR0ZXJuSXNSZWdFeHAgJiYgZmxhZ3NBcmVVbmRlZmluZWQgPyBnZXRGbGFncy5jYWxsKHBhdHRlcm4pIDogZmxhZ3MpXG4gICAgICAsIHRoaXNJc1JlZ0V4cCA/IHRoaXMgOiBSZWdFeHBQcm90b3R5cGUsIFJlZ0V4cFdyYXBwZXIpO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluIFJlZ0V4cFdyYXBwZXIgfHwgZGVmaW5lUHJvcGVydHkoUmVnRXhwV3JhcHBlciwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5hdGl2ZVJlZ0V4cFtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgTmF0aXZlUmVnRXhwW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHByb3h5KGtleXNbaW5kZXgrK10pO1xuICBSZWdFeHBQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWdFeHBXcmFwcGVyO1xuICBSZWdFeHBXcmFwcGVyLnByb3RvdHlwZSA9IFJlZ0V4cFByb3RvdHlwZTtcbiAgcmVkZWZpbmUoZ2xvYmFsLCAnUmVnRXhwJywgUmVnRXhwV3JhcHBlcik7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAtQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdSZWdFeHAnKTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBtYWtlcyBzdWJjbGFzc2luZyB3b3JrIGNvcnJlY3QgZm9yIHdyYXBwZWQgYnVpbHQtaW5zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHtcbiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlO1xuICBpZiAoXG4gICAgLy8gaXQgY2FuIHdvcmsgb25seSB3aXRoIG5hdGl2ZSBgc2V0UHJvdG90eXBlT2ZgXG4gICAgc2V0UHJvdG90eXBlT2YgJiZcbiAgICAvLyB3ZSBoYXZlbid0IGNvbXBsZXRlbHkgY29ycmVjdCBwcmUtRVM2IHdheSBmb3IgZ2V0dGluZyBgbmV3LnRhcmdldGAsIHNvIHVzZSB0aGlzXG4gICAgdHlwZW9mIChOZXdUYXJnZXQgPSBkdW1teS5jb25zdHJ1Y3RvcikgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIE5ld1RhcmdldCAhPT0gV3JhcHBlciAmJlxuICAgIGlzT2JqZWN0KE5ld1RhcmdldFByb3RvdHlwZSA9IE5ld1RhcmdldC5wcm90b3R5cGUpICYmXG4gICAgTmV3VGFyZ2V0UHJvdG90eXBlICE9PSBXcmFwcGVyLnByb3RvdHlwZVxuICApIHNldFByb3RvdHlwZU9mKCR0aGlzLCBOZXdUYXJnZXRQcm90b3R5cGUpO1xuICByZXR1cm4gJHRoaXM7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChNQVRDSCwgbmF0aXZlTWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgbWF0Y2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIG1hdGNoZXIgIT09IHVuZGVmaW5lZCA/IG1hdGNoZXIuY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcblxuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc2VhcmNoJywgMSwgZnVuY3Rpb24gKFNFQVJDSCwgbmF0aXZlU2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNlYXJjaGVyID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIHNlYXJjaGVyICE9PSB1bmRlZmluZWQgPyBzZWFyY2hlci5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVTZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiLy8gYFNhbWVWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zYW1ldmFsdWVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdXRmOCA9IHJlcXVpcmUoJy4vdXRmOCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIEdlbmVyaWNXb3JrZXIgPSByZXF1aXJlKCcuL3N0cmVhbS9HZW5lcmljV29ya2VyJyk7XG52YXIgU3RyZWFtSGVscGVyID0gcmVxdWlyZSgnLi9zdHJlYW0vU3RyZWFtSGVscGVyJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG52YXIgQ29tcHJlc3NlZE9iamVjdCA9IHJlcXVpcmUoJy4vY29tcHJlc3NlZE9iamVjdCcpO1xudmFyIFppcE9iamVjdCA9IHJlcXVpcmUoJy4vemlwT2JqZWN0Jyk7XG52YXIgZ2VuZXJhdGUgPSByZXF1aXJlKFwiLi9nZW5lcmF0ZVwiKTtcbnZhciBub2RlanNVdGlscyA9IHJlcXVpcmUoXCIuL25vZGVqc1V0aWxzXCIpO1xudmFyIE5vZGVqc1N0cmVhbUlucHV0QWRhcHRlciA9IHJlcXVpcmUoXCIuL25vZGVqcy9Ob2RlanNTdHJlYW1JbnB1dEFkYXB0ZXJcIik7XG5cblxuLyoqXG4gKiBBZGQgYSBmaWxlIGluIHRoZSBjdXJyZW50IGZvbGRlci5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgZmlsZVxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGRhdGEgdGhlIGRhdGEgb2YgdGhlIGZpbGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcmlnaW5hbE9wdGlvbnMgdGhlIG9wdGlvbnMgb2YgdGhlIGZpbGVcbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIG5ldyBmaWxlLlxuICovXG52YXIgZmlsZUFkZCA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgIC8vIGJlIHN1cmUgc3ViIGZvbGRlcnMgZXhpc3RcbiAgICB2YXIgZGF0YVR5cGUgPSB1dGlscy5nZXRUeXBlT2YoZGF0YSksXG4gICAgICAgIHBhcmVudDtcblxuXG4gICAgLypcbiAgICAgKiBDb3JyZWN0IG9wdGlvbnMuXG4gICAgICovXG5cbiAgICB2YXIgbyA9IHV0aWxzLmV4dGVuZChvcmlnaW5hbE9wdGlvbnMgfHwge30sIGRlZmF1bHRzKTtcbiAgICBvLmRhdGUgPSBvLmRhdGUgfHwgbmV3IERhdGUoKTtcbiAgICBpZiAoby5jb21wcmVzc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICBvLmNvbXByZXNzaW9uID0gby5jb21wcmVzc2lvbi50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygby51bml4UGVybWlzc2lvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgby51bml4UGVybWlzc2lvbnMgPSBwYXJzZUludChvLnVuaXhQZXJtaXNzaW9ucywgOCk7XG4gICAgfVxuXG4gICAgLy8gVU5YX0lGRElSICAwMDQwMDAwIHNlZSB6aXBpbmZvLmNcbiAgICBpZiAoby51bml4UGVybWlzc2lvbnMgJiYgKG8udW5peFBlcm1pc3Npb25zICYgMHg0MDAwKSkge1xuICAgICAgICBvLmRpciA9IHRydWU7XG4gICAgfVxuICAgIC8vIEJpdCA0ICAgIERpcmVjdG9yeVxuICAgIGlmIChvLmRvc1Blcm1pc3Npb25zICYmIChvLmRvc1Blcm1pc3Npb25zICYgMHgwMDEwKSkge1xuICAgICAgICBvLmRpciA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG8uZGlyKSB7XG4gICAgICAgIG5hbWUgPSBmb3JjZVRyYWlsaW5nU2xhc2gobmFtZSk7XG4gICAgfVxuICAgIGlmIChvLmNyZWF0ZUZvbGRlcnMgJiYgKHBhcmVudCA9IHBhcmVudEZvbGRlcihuYW1lKSkpIHtcbiAgICAgICAgZm9sZGVyQWRkLmNhbGwodGhpcywgcGFyZW50LCB0cnVlKTtcbiAgICB9XG5cbiAgICB2YXIgaXNVbmljb2RlU3RyaW5nID0gZGF0YVR5cGUgPT09IFwic3RyaW5nXCIgJiYgby5iaW5hcnkgPT09IGZhbHNlICYmIG8uYmFzZTY0ID09PSBmYWxzZTtcbiAgICBpZiAoIW9yaWdpbmFsT3B0aW9ucyB8fCB0eXBlb2Ygb3JpZ2luYWxPcHRpb25zLmJpbmFyeSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBvLmJpbmFyeSA9ICFpc1VuaWNvZGVTdHJpbmc7XG4gICAgfVxuXG5cbiAgICB2YXIgaXNDb21wcmVzc2VkRW1wdHkgPSAoZGF0YSBpbnN0YW5jZW9mIENvbXByZXNzZWRPYmplY3QpICYmIGRhdGEudW5jb21wcmVzc2VkU2l6ZSA9PT0gMDtcblxuICAgIGlmIChpc0NvbXByZXNzZWRFbXB0eSB8fCBvLmRpciB8fCAhZGF0YSB8fCBkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBvLmJhc2U2NCA9IGZhbHNlO1xuICAgICAgICBvLmJpbmFyeSA9IHRydWU7XG4gICAgICAgIGRhdGEgPSBcIlwiO1xuICAgICAgICBvLmNvbXByZXNzaW9uID0gXCJTVE9SRVwiO1xuICAgICAgICBkYXRhVHlwZSA9IFwic3RyaW5nXCI7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBDb252ZXJ0IGNvbnRlbnQgdG8gZml0LlxuICAgICAqL1xuXG4gICAgdmFyIHppcE9iamVjdENvbnRlbnQgPSBudWxsO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQ29tcHJlc3NlZE9iamVjdCB8fCBkYXRhIGluc3RhbmNlb2YgR2VuZXJpY1dvcmtlcikge1xuICAgICAgICB6aXBPYmplY3RDb250ZW50ID0gZGF0YTtcbiAgICB9IGVsc2UgaWYgKG5vZGVqc1V0aWxzLmlzTm9kZSAmJiBub2RlanNVdGlscy5pc1N0cmVhbShkYXRhKSkge1xuICAgICAgICB6aXBPYmplY3RDb250ZW50ID0gbmV3IE5vZGVqc1N0cmVhbUlucHV0QWRhcHRlcihuYW1lLCBkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB6aXBPYmplY3RDb250ZW50ID0gdXRpbHMucHJlcGFyZUNvbnRlbnQobmFtZSwgZGF0YSwgby5iaW5hcnksIG8ub3B0aW1pemVkQmluYXJ5U3RyaW5nLCBvLmJhc2U2NCk7XG4gICAgfVxuXG4gICAgdmFyIG9iamVjdCA9IG5ldyBaaXBPYmplY3QobmFtZSwgemlwT2JqZWN0Q29udGVudCwgbyk7XG4gICAgdGhpcy5maWxlc1tuYW1lXSA9IG9iamVjdDtcbiAgICAvKlxuICAgIFRPRE86IHdlIGNhbid0IHRocm93IGFuIGV4Y2VwdGlvbiBiZWNhdXNlIHdlIGhhdmUgYXN5bmMgcHJvbWlzZXNcbiAgICAod2UgY2FuIGhhdmUgYSBwcm9taXNlIG9mIGEgRGF0ZSgpIGZvciBleGFtcGxlKSBidXQgcmV0dXJuaW5nIGFcbiAgICBwcm9taXNlIGlzIHVzZWxlc3MgYmVjYXVzZSBmaWxlKG5hbWUsIGRhdGEpIHJldHVybnMgdGhlIEpTWmlwXG4gICAgb2JqZWN0IGZvciBjaGFpbmluZy4gU2hvdWxkIHdlIGJyZWFrIHRoYXQgdG8gYWxsb3cgdGhlIHVzZXJcbiAgICB0byBjYXRjaCB0aGUgZXJyb3IgP1xuXG4gICAgcmV0dXJuIGV4dGVybmFsLlByb21pc2UucmVzb2x2ZSh6aXBPYmplY3RDb250ZW50KVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcbiAgICAqL1xufTtcblxuLyoqXG4gKiBGaW5kIHRoZSBwYXJlbnQgZm9sZGVyIG9mIHRoZSBwYXRoLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIHRoZSBwYXRoIHRvIHVzZVxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgcGFyZW50IGZvbGRlciwgb3IgXCJcIlxuICovXG52YXIgcGFyZW50Rm9sZGVyID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBpZiAocGF0aC5zbGljZSgtMSkgPT09ICcvJykge1xuICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMCwgcGF0aC5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgdmFyIGxhc3RTbGFzaCA9IHBhdGgubGFzdEluZGV4T2YoJy8nKTtcbiAgICByZXR1cm4gKGxhc3RTbGFzaCA+IDApID8gcGF0aC5zdWJzdHJpbmcoMCwgbGFzdFNsYXNoKSA6IFwiXCI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhdGggd2l0aCBhIHNsYXNoIGF0IHRoZSBlbmQuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGggdGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBwYXRoIHdpdGggYSB0cmFpbGluZyBzbGFzaC5cbiAqL1xudmFyIGZvcmNlVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAvLyBDaGVjayB0aGUgbmFtZSBlbmRzIHdpdGggYSAvXG4gICAgaWYgKHBhdGguc2xpY2UoLTEpICE9PSBcIi9cIikge1xuICAgICAgICBwYXRoICs9IFwiL1wiOyAvLyBJRSBkb2Vzbid0IGxpa2Ugc3Vic3RyKC0xKVxuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn07XG5cbi8qKlxuICogQWRkIGEgKHN1YikgZm9sZGVyIGluIHRoZSBjdXJyZW50IGZvbGRlci5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgZm9sZGVyJ3MgbmFtZVxuICogQHBhcmFtIHtib29sZWFuPX0gW2NyZWF0ZUZvbGRlcnNdIElmIHRydWUsIGF1dG9tYXRpY2FsbHkgY3JlYXRlIHN1YlxuICogIGZvbGRlcnMuIERlZmF1bHRzIHRvIGZhbHNlLlxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgbmV3IGZvbGRlci5cbiAqL1xudmFyIGZvbGRlckFkZCA9IGZ1bmN0aW9uKG5hbWUsIGNyZWF0ZUZvbGRlcnMpIHtcbiAgICBjcmVhdGVGb2xkZXJzID0gKHR5cGVvZiBjcmVhdGVGb2xkZXJzICE9PSAndW5kZWZpbmVkJykgPyBjcmVhdGVGb2xkZXJzIDogZGVmYXVsdHMuY3JlYXRlRm9sZGVycztcblxuICAgIG5hbWUgPSBmb3JjZVRyYWlsaW5nU2xhc2gobmFtZSk7XG5cbiAgICAvLyBEb2VzIHRoaXMgZm9sZGVyIGFscmVhZHkgZXhpc3Q/XG4gICAgaWYgKCF0aGlzLmZpbGVzW25hbWVdKSB7XG4gICAgICAgIGZpbGVBZGQuY2FsbCh0aGlzLCBuYW1lLCBudWxsLCB7XG4gICAgICAgICAgICBkaXI6IHRydWUsXG4gICAgICAgICAgICBjcmVhdGVGb2xkZXJzOiBjcmVhdGVGb2xkZXJzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maWxlc1tuYW1lXTtcbn07XG5cbi8qKlxuKiBDcm9zcy13aW5kb3csIGNyb3NzLU5vZGUtY29udGV4dCByZWd1bGFyIGV4cHJlc3Npb24gZGV0ZWN0aW9uXG4qIEBwYXJhbSAge09iamVjdH0gIG9iamVjdCBBbnl0aGluZ1xuKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgcmVndWxhciBleHByZXNzaW9uLFxuKiBmYWxzZSBvdGhlcndpc2VcbiovXG5mdW5jdGlvbiBpc1JlZ0V4cChvYmplY3QpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09IFwiW29iamVjdCBSZWdFeHBdXCI7XG59XG5cbi8vIHJldHVybiB0aGUgYWN0dWFsIHByb3RvdHlwZSBvZiBKU1ppcFxudmFyIG91dCA9IHtcbiAgICAvKipcbiAgICAgKiBAc2VlIGxvYWRBc3luY1xuICAgICAqL1xuICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGEgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIGVhY2ggZW50cnkgYXQgdGhpcyBmb2xkZXIgbGV2ZWwuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uOlxuICAgICAqIGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIGZpbGUpIHsuLi59XG4gICAgICogSXQgdGFrZXMgMiBhcmd1bWVudHMgOiB0aGUgcmVsYXRpdmUgcGF0aCBhbmQgdGhlIGZpbGUuXG4gICAgICovXG4gICAgZm9yRWFjaDogZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgdmFyIGZpbGVuYW1lLCByZWxhdGl2ZVBhdGgsIGZpbGU7XG4gICAgICAgIGZvciAoZmlsZW5hbWUgaW4gdGhpcy5maWxlcykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmZpbGVzLmhhc093blByb3BlcnR5KGZpbGVuYW1lKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsZSA9IHRoaXMuZmlsZXNbZmlsZW5hbWVdO1xuICAgICAgICAgICAgcmVsYXRpdmVQYXRoID0gZmlsZW5hbWUuc2xpY2UodGhpcy5yb290Lmxlbmd0aCwgZmlsZW5hbWUubGVuZ3RoKTtcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZVBhdGggJiYgZmlsZW5hbWUuc2xpY2UoMCwgdGhpcy5yb290Lmxlbmd0aCkgPT09IHRoaXMucm9vdCkgeyAvLyB0aGUgZmlsZSBpcyBpbiB0aGUgY3VycmVudCByb290XG4gICAgICAgICAgICAgICAgY2IocmVsYXRpdmVQYXRoLCBmaWxlKTsgLy8gVE9ETyByZXZlcnNlIHRoZSBwYXJhbWV0ZXJzID8gbmVlZCB0byBiZSBjbGVhbiBBTkQgY29uc2lzdGVudCB3aXRoIHRoZSBmaWx0ZXIgc2VhcmNoIGZuLi4uXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIG5lc3RlZCBmaWxlcy9mb2xkZXJzIHdpdGggdGhlIHNwZWNpZmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWFyY2ggdGhlIHByZWRpY2F0ZSB0byB1c2UgOlxuICAgICAqIGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIGZpbGUpIHsuLi59XG4gICAgICogSXQgdGFrZXMgMiBhcmd1bWVudHMgOiB0aGUgcmVsYXRpdmUgcGF0aCBhbmQgdGhlIGZpbGUuXG4gICAgICogQHJldHVybiB7QXJyYXl9IEFuIGFycmF5IG9mIG1hdGNoaW5nIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZpbHRlcjogZnVuY3Rpb24oc2VhcmNoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIGVudHJ5KSB7XG4gICAgICAgICAgICBpZiAoc2VhcmNoKHJlbGF0aXZlUGF0aCwgZW50cnkpKSB7IC8vIHRoZSBmaWxlIG1hdGNoZXMgdGhlIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZW50cnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBmaWxlIHRvIHRoZSB6aXAgZmlsZSwgb3Igc2VhcmNoIGEgZmlsZS5cbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfFJlZ0V4cH0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZmlsZSB0byBhZGQgKGlmIGRhdGEgaXMgZGVmaW5lZCksXG4gICAgICogdGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gZmluZCAoaWYgbm8gZGF0YSkgb3IgYSByZWdleCB0byBtYXRjaCBmaWxlcy5cbiAgICAgKiBAcGFyYW0gICB7U3RyaW5nfEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBkYXRhICBUaGUgZmlsZSBkYXRhLCBlaXRoZXIgcmF3IG9yIGJhc2U2NCBlbmNvZGVkXG4gICAgICogQHBhcmFtICAge09iamVjdH0gbyAgICAgRmlsZSBvcHRpb25zXG4gICAgICogQHJldHVybiAge0pTWmlwfE9iamVjdHxBcnJheX0gdGhpcyBKU1ppcCBvYmplY3QgKHdoZW4gYWRkaW5nIGEgZmlsZSksXG4gICAgICogYSBmaWxlICh3aGVuIHNlYXJjaGluZyBieSBzdHJpbmcpIG9yIGFuIGFycmF5IG9mIGZpbGVzICh3aGVuIHNlYXJjaGluZyBieSByZWdleCkuXG4gICAgICovXG4gICAgZmlsZTogZnVuY3Rpb24obmFtZSwgZGF0YSwgbykge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKGlzUmVnRXhwKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IG5hbWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHJlbGF0aXZlUGF0aCwgZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWZpbGUuZGlyICYmIHJlZ2V4cC50ZXN0KHJlbGF0aXZlUGF0aCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHsgLy8gdGV4dFxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB0aGlzLmZpbGVzW3RoaXMucm9vdCArIG5hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChvYmogJiYgIW9iai5kaXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgOiB3ZSBoYXZlIGRhdGEgIVxuICAgICAgICAgICAgbmFtZSA9IHRoaXMucm9vdCArIG5hbWU7XG4gICAgICAgICAgICBmaWxlQWRkLmNhbGwodGhpcywgbmFtZSwgZGF0YSwgbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGRpcmVjdG9yeSB0byB0aGUgemlwIGZpbGUsIG9yIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0gICB7U3RyaW5nfFJlZ0V4cH0gYXJnIFRoZSBuYW1lIG9mIHRoZSBkaXJlY3RvcnkgdG8gYWRkLCBvciBhIHJlZ2V4IHRvIHNlYXJjaCBmb2xkZXJzLlxuICAgICAqIEByZXR1cm4gIHtKU1ppcH0gYW4gb2JqZWN0IHdpdGggdGhlIG5ldyBkaXJlY3RvcnkgYXMgdGhlIHJvb3QsIG9yIGFuIGFycmF5IGNvbnRhaW5pbmcgbWF0Y2hpbmcgZm9sZGVycy5cbiAgICAgKi9cbiAgICBmb2xkZXI6IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICBpZiAoIWFyZykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNSZWdFeHAoYXJnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHJlbGF0aXZlUGF0aCwgZmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLmRpciAmJiBhcmcudGVzdChyZWxhdGl2ZVBhdGgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlbHNlLCBuYW1lIGlzIGEgbmV3IGZvbGRlclxuICAgICAgICB2YXIgbmFtZSA9IHRoaXMucm9vdCArIGFyZztcbiAgICAgICAgdmFyIG5ld0ZvbGRlciA9IGZvbGRlckFkZC5jYWxsKHRoaXMsIG5hbWUpO1xuXG4gICAgICAgIC8vIEFsbG93IGNoYWluaW5nIGJ5IHJldHVybmluZyBhIG5ldyBvYmplY3Qgd2l0aCB0aGlzIGZvbGRlciBhcyB0aGUgcm9vdFxuICAgICAgICB2YXIgcmV0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXQucm9vdCA9IG5ld0ZvbGRlci5uYW1lO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBmaWxlLCBvciBhIGRpcmVjdG9yeSBhbmQgYWxsIHN1Yi1maWxlcywgZnJvbSB0aGUgemlwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gZGVsZXRlXG4gICAgICogQHJldHVybiB7SlNaaXB9IHRoaXMgSlNaaXAgb2JqZWN0XG4gICAgICovXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIG5hbWUgPSB0aGlzLnJvb3QgKyBuYW1lO1xuICAgICAgICB2YXIgZmlsZSA9IHRoaXMuZmlsZXNbbmFtZV07XG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgLy8gTG9vayBmb3IgYW55IGZvbGRlcnNcbiAgICAgICAgICAgIGlmIChuYW1lLnNsaWNlKC0xKSAhPT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICBuYW1lICs9IFwiL1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsZSA9IHRoaXMuZmlsZXNbbmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsZSAmJiAhZmlsZS5kaXIpIHtcbiAgICAgICAgICAgIC8vIGZpbGVcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmZpbGVzW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbWF5YmUgYSBmb2xkZXIsIGRlbGV0ZSByZWN1cnNpdmVseVxuICAgICAgICAgICAgdmFyIGtpZHMgPSB0aGlzLmZpbHRlcihmdW5jdGlvbihyZWxhdGl2ZVBhdGgsIGZpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5uYW1lLnNsaWNlKDAsIG5hbWUubGVuZ3RoKSA9PT0gbmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBraWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZmlsZXNba2lkc1tpXS5uYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSB0aGUgY29tcGxldGUgemlwIGZpbGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgb3B0aW9ucyB0byBnZW5lcmF0ZSB0aGUgemlwIGZpbGUgOlxuICAgICAqIC0gY29tcHJlc3Npb24sIFwiU1RPUkVcIiBieSBkZWZhdWx0LlxuICAgICAqIC0gdHlwZSwgXCJiYXNlNjRcIiBieSBkZWZhdWx0LiBWYWx1ZXMgYXJlIDogc3RyaW5nLCBiYXNlNjQsIHVpbnQ4YXJyYXksIGFycmF5YnVmZmVyLCBibG9iLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ3xVaW50OEFycmF5fEFycmF5QnVmZmVyfEJ1ZmZlcnxCbG9ifSB0aGUgemlwIGZpbGVcbiAgICAgKi9cbiAgICBnZW5lcmF0ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgdGhlIGNvbXBsZXRlIHppcCBmaWxlIGFzIGFuIGludGVybmFsIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgb3B0aW9ucyB0byBnZW5lcmF0ZSB0aGUgemlwIGZpbGUgOlxuICAgICAqIC0gY29tcHJlc3Npb24sIFwiU1RPUkVcIiBieSBkZWZhdWx0LlxuICAgICAqIC0gdHlwZSwgXCJiYXNlNjRcIiBieSBkZWZhdWx0LiBWYWx1ZXMgYXJlIDogc3RyaW5nLCBiYXNlNjQsIHVpbnQ4YXJyYXksIGFycmF5YnVmZmVyLCBibG9iLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbUhlbHBlcn0gdGhlIHN0cmVhbWVkIHppcCBmaWxlLlxuICAgICAqL1xuICAgIGdlbmVyYXRlSW50ZXJuYWxTdHJlYW06IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciB3b3JrZXIsIG9wdHMgPSB7fTtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgb3B0cyA9IHV0aWxzLmV4dGVuZChvcHRpb25zIHx8IHt9LCB7XG4gICAgICAgICAgICAgIHN0cmVhbUZpbGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgY29tcHJlc3Npb246IFwiU1RPUkVcIixcbiAgICAgICAgICAgICAgY29tcHJlc3Npb25PcHRpb25zIDogbnVsbCxcbiAgICAgICAgICAgICAgdHlwZTogXCJcIixcbiAgICAgICAgICAgICAgcGxhdGZvcm06IFwiRE9TXCIsXG4gICAgICAgICAgICAgIGNvbW1lbnQ6IG51bGwsXG4gICAgICAgICAgICAgIG1pbWVUeXBlOiAnYXBwbGljYXRpb24vemlwJyxcbiAgICAgICAgICAgICAgZW5jb2RlRmlsZU5hbWU6IHV0ZjgudXRmOGVuY29kZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgb3B0cy50eXBlID0gb3B0cy50eXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgb3B0cy5jb21wcmVzc2lvbiA9IG9wdHMuY29tcHJlc3Npb24udG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgIC8vIFwiYmluYXJ5c3RyaW5nXCIgaXMgcHJlZmVyZWQgYnV0IHRoZSBpbnRlcm5hbHMgdXNlIFwic3RyaW5nXCIuXG4gICAgICAgICAgaWYob3B0cy50eXBlID09PSBcImJpbmFyeXN0cmluZ1wiKSB7XG4gICAgICAgICAgICBvcHRzLnR5cGUgPSBcInN0cmluZ1wiO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghb3B0cy50eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBvdXRwdXQgdHlwZSBzcGVjaWZpZWQuXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHV0aWxzLmNoZWNrU3VwcG9ydChvcHRzLnR5cGUpO1xuXG4gICAgICAgICAgLy8gYWNjZXB0IG5vZGVqcyBgcHJvY2Vzcy5wbGF0Zm9ybWBcbiAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgb3B0cy5wbGF0Zm9ybSA9PT0gJ2RhcndpbicgfHxcbiAgICAgICAgICAgICAgb3B0cy5wbGF0Zm9ybSA9PT0gJ2ZyZWVic2QnIHx8XG4gICAgICAgICAgICAgIG9wdHMucGxhdGZvcm0gPT09ICdsaW51eCcgfHxcbiAgICAgICAgICAgICAgb3B0cy5wbGF0Zm9ybSA9PT0gJ3N1bm9zJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgICBvcHRzLnBsYXRmb3JtID0gXCJVTklYXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgICAgICAgICAgIG9wdHMucGxhdGZvcm0gPSBcIkRPU1wiO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjb21tZW50ID0gb3B0cy5jb21tZW50IHx8IHRoaXMuY29tbWVudCB8fCBcIlwiO1xuICAgICAgICAgIHdvcmtlciA9IGdlbmVyYXRlLmdlbmVyYXRlV29ya2VyKHRoaXMsIG9wdHMsIGNvbW1lbnQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB3b3JrZXIgPSBuZXcgR2VuZXJpY1dvcmtlcihcImVycm9yXCIpO1xuICAgICAgICB3b3JrZXIuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFN0cmVhbUhlbHBlcih3b3JrZXIsIG9wdHMudHlwZSB8fCBcInN0cmluZ1wiLCBvcHRzLm1pbWVUeXBlKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHRoZSBjb21wbGV0ZSB6aXAgZmlsZSBhc3luY2hyb25vdXNseS5cbiAgICAgKiBAc2VlIGdlbmVyYXRlSW50ZXJuYWxTdHJlYW1cbiAgICAgKi9cbiAgICBnZW5lcmF0ZUFzeW5jOiBmdW5jdGlvbihvcHRpb25zLCBvblVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKG9wdGlvbnMpLmFjY3VtdWxhdGUob25VcGRhdGUpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgdGhlIGNvbXBsZXRlIHppcCBmaWxlIGFzeW5jaHJvbm91c2x5LlxuICAgICAqIEBzZWUgZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbVxuICAgICAqL1xuICAgIGdlbmVyYXRlTm9kZVN0cmVhbTogZnVuY3Rpb24ob3B0aW9ucywgb25VcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGlmICghb3B0aW9ucy50eXBlKSB7XG4gICAgICAgICAgICBvcHRpb25zLnR5cGUgPSBcIm5vZGVidWZmZXJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKG9wdGlvbnMpLnRvTm9kZWpzU3RyZWFtKG9uVXBkYXRlKTtcbiAgICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBvdXQ7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5pbmhlcml0cyhTdHJlYW0sIEVFKTtcblN0cmVhbS5SZWFkYWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcycpO1xuU3RyZWFtLldyaXRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzJyk7XG5TdHJlYW0uRHVwbGV4ID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcycpO1xuU3RyZWFtLlRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMnKTtcblN0cmVhbS5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcycpO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjQueFxuU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTtcblxuXG5cbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcbi8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICB2YXIgc291cmNlID0gdGhpcztcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgLy8gSWYgdGhlICdlbmQnIG9wdGlvbiBpcyBub3Qgc3VwcGxpZWQsIGRlc3QuZW5kKCkgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9XG5cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLlxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuICB9XG5cbiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAtLXRoaXMubGVuZ3RoO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICB9cmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAocCkge1xuICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpO1xuXG5pZiAodXRpbCAmJiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICBtb2R1bGUuZXhwb3J0cy5wcm90b3R5cGVbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iaiA9IHV0aWwuaW5zcGVjdCh7IGxlbmd0aDogdGhpcy5sZW5ndGggfSk7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZSArICcgJyArIG9iajtcbiAgfTtcbn0iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuUGFzc1Rocm91Z2hcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHNldEltbWVkaWF0ZSA6XG5cdGZ1bmN0aW9uIHNldEltbWVkaWF0ZSgpIHtcblx0XHR2YXIgYXJncyA9IFtdLnNsaWNlLmFwcGx5KGFyZ3VtZW50cyk7XG5cdFx0YXJncy5zcGxpY2UoMSwgMCwgMCk7XG5cdFx0c2V0VGltZW91dC5hcHBseShudWxsLCBhcmdzKTtcblx0fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpbW1lZGlhdGUgPSByZXF1aXJlKCdpbW1lZGlhdGUnKTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIElOVEVSTkFMKCkge31cblxudmFyIGhhbmRsZXJzID0ge307XG5cbnZhciBSRUpFQ1RFRCA9IFsnUkVKRUNURUQnXTtcbnZhciBGVUxGSUxMRUQgPSBbJ0ZVTEZJTExFRCddO1xudmFyIFBFTkRJTkcgPSBbJ1BFTkRJTkcnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgcmVzb2x2ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB0aGlzLnN0YXRlID0gUEVORElORztcbiAgdGhpcy5xdWV1ZSA9IFtdO1xuICB0aGlzLm91dGNvbWUgPSB2b2lkIDA7XG4gIGlmIChyZXNvbHZlciAhPT0gSU5URVJOQUwpIHtcbiAgICBzYWZlbHlSZXNvbHZlVGhlbmFibGUodGhpcywgcmVzb2x2ZXIpO1xuICB9XG59XG5cblByb21pc2UucHJvdG90eXBlW1wiZmluYWxseVwiXSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdmFyIHAgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdGhpcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZSh2YWx1ZSkge1xuICAgIGZ1bmN0aW9uIHllcyAoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBwLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbih5ZXMpO1xuICB9XG4gIGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICBmdW5jdGlvbiBubyAoKSB7XG4gICAgICB0aHJvdyByZWFzb247XG4gICAgfVxuICAgIHJldHVybiBwLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihubyk7XG4gIH1cbn07XG5Qcm9taXNlLnByb3RvdHlwZVtcImNhdGNoXCJdID0gZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGVkKTtcbn07XG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIGlmICh0eXBlb2Ygb25GdWxmaWxsZWQgIT09ICdmdW5jdGlvbicgJiYgdGhpcy5zdGF0ZSA9PT0gRlVMRklMTEVEIHx8XG4gICAgdHlwZW9mIG9uUmVqZWN0ZWQgIT09ICdmdW5jdGlvbicgJiYgdGhpcy5zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2YXIgcHJvbWlzZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKElOVEVSTkFMKTtcbiAgaWYgKHRoaXMuc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICB2YXIgcmVzb2x2ZXIgPSB0aGlzLnN0YXRlID09PSBGVUxGSUxMRUQgPyBvbkZ1bGZpbGxlZCA6IG9uUmVqZWN0ZWQ7XG4gICAgdW53cmFwKHByb21pc2UsIHJlc29sdmVyLCB0aGlzLm91dGNvbWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucXVldWUucHVzaChuZXcgUXVldWVJdGVtKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5mdW5jdGlvbiBRdWV1ZUl0ZW0ocHJvbWlzZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgaWYgKHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMub25GdWxmaWxsZWQgPSBvbkZ1bGZpbGxlZDtcbiAgICB0aGlzLmNhbGxGdWxmaWxsZWQgPSB0aGlzLm90aGVyQ2FsbEZ1bGZpbGxlZDtcbiAgfVxuICBpZiAodHlwZW9mIG9uUmVqZWN0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLm9uUmVqZWN0ZWQgPSBvblJlamVjdGVkO1xuICAgIHRoaXMuY2FsbFJlamVjdGVkID0gdGhpcy5vdGhlckNhbGxSZWplY3RlZDtcbiAgfVxufVxuUXVldWVJdGVtLnByb3RvdHlwZS5jYWxsRnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGhhbmRsZXJzLnJlc29sdmUodGhpcy5wcm9taXNlLCB2YWx1ZSk7XG59O1xuUXVldWVJdGVtLnByb3RvdHlwZS5vdGhlckNhbGxGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdW53cmFwKHRoaXMucHJvbWlzZSwgdGhpcy5vbkZ1bGZpbGxlZCwgdmFsdWUpO1xufTtcblF1ZXVlSXRlbS5wcm90b3R5cGUuY2FsbFJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGhhbmRsZXJzLnJlamVjdCh0aGlzLnByb21pc2UsIHZhbHVlKTtcbn07XG5RdWV1ZUl0ZW0ucHJvdG90eXBlLm90aGVyQ2FsbFJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHVud3JhcCh0aGlzLnByb21pc2UsIHRoaXMub25SZWplY3RlZCwgdmFsdWUpO1xufTtcblxuZnVuY3Rpb24gdW53cmFwKHByb21pc2UsIGZ1bmMsIHZhbHVlKSB7XG4gIGltbWVkaWF0ZShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJldHVyblZhbHVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IGZ1bmModmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBoYW5kbGVycy5yZWplY3QocHJvbWlzZSwgZSk7XG4gICAgfVxuICAgIGlmIChyZXR1cm5WYWx1ZSA9PT0gcHJvbWlzZSkge1xuICAgICAgaGFuZGxlcnMucmVqZWN0KHByb21pc2UsIG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCByZXNvbHZlIHByb21pc2Ugd2l0aCBpdHNlbGYnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZXJzLnJlc29sdmUocHJvbWlzZSwgcmV0dXJuVmFsdWUpO1xuICAgIH1cbiAgfSk7XG59XG5cbmhhbmRsZXJzLnJlc29sdmUgPSBmdW5jdGlvbiAoc2VsZiwgdmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoKGdldFRoZW4sIHZhbHVlKTtcbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICByZXR1cm4gaGFuZGxlcnMucmVqZWN0KHNlbGYsIHJlc3VsdC52YWx1ZSk7XG4gIH1cbiAgdmFyIHRoZW5hYmxlID0gcmVzdWx0LnZhbHVlO1xuXG4gIGlmICh0aGVuYWJsZSkge1xuICAgIHNhZmVseVJlc29sdmVUaGVuYWJsZShzZWxmLCB0aGVuYWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICBzZWxmLm91dGNvbWUgPSB2YWx1ZTtcbiAgICB2YXIgaSA9IC0xO1xuICAgIHZhciBsZW4gPSBzZWxmLnF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICBzZWxmLnF1ZXVlW2ldLmNhbGxGdWxmaWxsZWQodmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VsZjtcbn07XG5oYW5kbGVycy5yZWplY3QgPSBmdW5jdGlvbiAoc2VsZiwgZXJyb3IpIHtcbiAgc2VsZi5zdGF0ZSA9IFJFSkVDVEVEO1xuICBzZWxmLm91dGNvbWUgPSBlcnJvcjtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGxlbiA9IHNlbGYucXVldWUubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgc2VsZi5xdWV1ZVtpXS5jYWxsUmVqZWN0ZWQoZXJyb3IpO1xuICB9XG4gIHJldHVybiBzZWxmO1xufTtcblxuZnVuY3Rpb24gZ2V0VGhlbihvYmopIHtcbiAgLy8gTWFrZSBzdXJlIHdlIG9ubHkgYWNjZXNzIHRoZSBhY2Nlc3NvciBvbmNlIGFzIHJlcXVpcmVkIGJ5IHRoZSBzcGVjXG4gIHZhciB0aGVuID0gb2JqICYmIG9iai50aGVuO1xuICBpZiAob2JqICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSAmJiB0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiBhcHB5VGhlbigpIHtcbiAgICAgIHRoZW4uYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gc2FmZWx5UmVzb2x2ZVRoZW5hYmxlKHNlbGYsIHRoZW5hYmxlKSB7XG4gIC8vIEVpdGhlciBmdWxmaWxsLCByZWplY3Qgb3IgcmVqZWN0IHdpdGggZXJyb3JcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBvbkVycm9yKHZhbHVlKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGhhbmRsZXJzLnJlamVjdChzZWxmLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblN1Y2Nlc3ModmFsdWUpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgaGFuZGxlcnMucmVzb2x2ZShzZWxmLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlUb1Vud3JhcCgpIHtcbiAgICB0aGVuYWJsZShvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoKHRyeVRvVW53cmFwKTtcbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICBvbkVycm9yKHJlc3VsdC52YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5Q2F0Y2goZnVuYywgdmFsdWUpIHtcbiAgdmFyIG91dCA9IHt9O1xuICB0cnkge1xuICAgIG91dC52YWx1ZSA9IGZ1bmModmFsdWUpO1xuICAgIG91dC5zdGF0dXMgPSAnc3VjY2Vzcyc7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvdXQuc3RhdHVzID0gJ2Vycm9yJztcbiAgICBvdXQudmFsdWUgPSBlO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5cblByb21pc2UucmVzb2x2ZSA9IHJlc29sdmU7XG5mdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHRoaXMpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGhhbmRsZXJzLnJlc29sdmUobmV3IHRoaXMoSU5URVJOQUwpLCB2YWx1ZSk7XG59XG5cblByb21pc2UucmVqZWN0ID0gcmVqZWN0O1xuZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICB2YXIgcHJvbWlzZSA9IG5ldyB0aGlzKElOVEVSTkFMKTtcbiAgcmV0dXJuIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCByZWFzb24pO1xufVxuXG5Qcm9taXNlLmFsbCA9IGFsbDtcbmZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcmFibGUpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ211c3QgYmUgYW4gYXJyYXknKSk7XG4gIH1cblxuICB2YXIgbGVuID0gaXRlcmFibGUubGVuZ3RoO1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIGlmICghbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7XG4gIH1cblxuICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGxlbik7XG4gIHZhciByZXNvbHZlZCA9IDA7XG4gIHZhciBpID0gLTE7XG4gIHZhciBwcm9taXNlID0gbmV3IHRoaXMoSU5URVJOQUwpO1xuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBhbGxSZXNvbHZlcihpdGVyYWJsZVtpXSwgaSk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2U7XG4gIGZ1bmN0aW9uIGFsbFJlc29sdmVyKHZhbHVlLCBpKSB7XG4gICAgc2VsZi5yZXNvbHZlKHZhbHVlKS50aGVuKHJlc29sdmVGcm9tQWxsLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gcmVzb2x2ZUZyb21BbGwob3V0VmFsdWUpIHtcbiAgICAgIHZhbHVlc1tpXSA9IG91dFZhbHVlO1xuICAgICAgaWYgKCsrcmVzb2x2ZWQgPT09IGxlbiAmJiAhY2FsbGVkKSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGhhbmRsZXJzLnJlc29sdmUocHJvbWlzZSwgdmFsdWVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuUHJvbWlzZS5yYWNlID0gcmFjZTtcbmZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXJhYmxlKSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgIHJldHVybiB0aGlzLnJlamVjdChuZXcgVHlwZUVycm9yKCdtdXN0IGJlIGFuIGFycmF5JykpO1xuICB9XG5cbiAgdmFyIGxlbiA9IGl0ZXJhYmxlLmxlbmd0aDtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICBpZiAoIWxlbikge1xuICAgIHJldHVybiB0aGlzLnJlc29sdmUoW10pO1xuICB9XG5cbiAgdmFyIGkgPSAtMTtcbiAgdmFyIHByb21pc2UgPSBuZXcgdGhpcyhJTlRFUk5BTCk7XG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHJlc29sdmVyKGl0ZXJhYmxlW2ldKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZTtcbiAgZnVuY3Rpb24gcmVzb2x2ZXIodmFsdWUpIHtcbiAgICBzZWxmLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICBoYW5kbGVycy5yZXNvbHZlKHByb21pc2UsIHJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBNdXRhdGlvbiA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuXG52YXIgc2NoZWR1bGVEcmFpbjtcblxue1xuICBpZiAoTXV0YXRpb24pIHtcbiAgICB2YXIgY2FsbGVkID0gMDtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb24obmV4dFRpY2spO1xuICAgIHZhciBlbGVtZW50ID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHtcbiAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgICB9KTtcbiAgICBzY2hlZHVsZURyYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgZWxlbWVudC5kYXRhID0gKGNhbGxlZCA9ICsrY2FsbGVkICUgMik7XG4gICAgfTtcbiAgfSBlbHNlIGlmICghZ2xvYmFsLnNldEltbWVkaWF0ZSAmJiB0eXBlb2YgZ2xvYmFsLk1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBjaGFubmVsID0gbmV3IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCgpO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbmV4dFRpY2s7XG4gICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gICAgfTtcbiAgfSBlbHNlIGlmICgnZG9jdW1lbnQnIGluIGdsb2JhbCAmJiAnb25yZWFkeXN0YXRlY2hhbmdlJyBpbiBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBzY2hlZHVsZURyYWluID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICB2YXIgc2NyaXB0RWwgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHRFbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG5leHRUaWNrKCk7XG5cbiAgICAgICAgc2NyaXB0RWwub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgc2NyaXB0RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHRFbCk7XG4gICAgICAgIHNjcmlwdEVsID0gbnVsbDtcbiAgICAgIH07XG4gICAgICBnbG9iYWwuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHNjcmlwdEVsKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHNjaGVkdWxlRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRUaW1lb3V0KG5leHRUaWNrLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbnZhciBkcmFpbmluZztcbnZhciBxdWV1ZSA9IFtdO1xuLy9uYW1lZCBuZXh0VGljayBmb3IgbGVzcyBjb25mdXNpbmcgc3RhY2sgdHJhY2VzXG5mdW5jdGlvbiBuZXh0VGljaygpIHtcbiAgZHJhaW5pbmcgPSB0cnVlO1xuICB2YXIgaSwgb2xkUXVldWU7XG4gIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChsZW4pIHtcbiAgICBvbGRRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gW107XG4gICAgaSA9IC0xO1xuICAgIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICAgIG9sZFF1ZXVlW2ldKCk7XG4gICAgfVxuICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgfVxuICBkcmFpbmluZyA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGltbWVkaWF0ZTtcbmZ1bmN0aW9uIGltbWVkaWF0ZSh0YXNrKSB7XG4gIGlmIChxdWV1ZS5wdXNoKHRhc2spID09PSAxICYmICFkcmFpbmluZykge1xuICAgIHNjaGVkdWxlRHJhaW4oKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2VuZXJpY1dvcmtlciA9IHJlcXVpcmUoJy4vR2VuZXJpY1dvcmtlcicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBBIHdvcmtlciB3aGljaCBjb252ZXJ0IGNodW5rcyB0byBhIHNwZWNpZmllZCB0eXBlLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gZGVzdFR5cGUgdGhlIGRlc3RpbmF0aW9uIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIENvbnZlcnRXb3JrZXIoZGVzdFR5cGUpIHtcbiAgICBHZW5lcmljV29ya2VyLmNhbGwodGhpcywgXCJDb252ZXJ0V29ya2VyIHRvIFwiICsgZGVzdFR5cGUpO1xuICAgIHRoaXMuZGVzdFR5cGUgPSBkZXN0VHlwZTtcbn1cbnV0aWxzLmluaGVyaXRzKENvbnZlcnRXb3JrZXIsIEdlbmVyaWNXb3JrZXIpO1xuXG4vKipcbiAqIEBzZWUgR2VuZXJpY1dvcmtlci5wcm9jZXNzQ2h1bmtcbiAqL1xuQ29udmVydFdvcmtlci5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgdGhpcy5wdXNoKHtcbiAgICAgICAgZGF0YSA6IHV0aWxzLnRyYW5zZm9ybVRvKHRoaXMuZGVzdFR5cGUsIGNodW5rLmRhdGEpLFxuICAgICAgICBtZXRhIDogY2h1bmsubWV0YVxuICAgIH0pO1xufTtcbm1vZHVsZS5leHBvcnRzID0gQ29udmVydFdvcmtlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJykuUmVhZGFibGU7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG51dGlscy5pbmhlcml0cyhOb2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyLCBSZWFkYWJsZSk7XG5cbi8qKlxuKiBBIG5vZGVqcyBzdHJlYW0gdXNpbmcgYSB3b3JrZXIgYXMgc291cmNlLlxuKiBAc2VlIHRoZSBTb3VyY2VXcmFwcGVyIGluIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbFxuKiBAY29uc3RydWN0b3JcbiogQHBhcmFtIHtTdHJlYW1IZWxwZXJ9IGhlbHBlciB0aGUgaGVscGVyIHdyYXBwaW5nIHRoZSB3b3JrZXJcbiogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIG5vZGVqcyBzdHJlYW0gb3B0aW9uc1xuKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVDYiB0aGUgdXBkYXRlIGNhbGxiYWNrLlxuKi9cbmZ1bmN0aW9uIE5vZGVqc1N0cmVhbU91dHB1dEFkYXB0ZXIoaGVscGVyLCBvcHRpb25zLCB1cGRhdGVDYikge1xuICAgIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgdGhpcy5faGVscGVyID0gaGVscGVyO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGhlbHBlci5vbihcImRhdGFcIiwgZnVuY3Rpb24gKGRhdGEsIG1ldGEpIHtcbiAgICAgICAgaWYgKCFzZWxmLnB1c2goZGF0YSkpIHtcbiAgICAgICAgICAgIHNlbGYuX2hlbHBlci5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmKHVwZGF0ZUNiKSB7XG4gICAgICAgICAgICB1cGRhdGVDYihtZXRhKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgfSlcbiAgICAub24oXCJlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnB1c2gobnVsbCk7XG4gICAgfSk7XG59XG5cblxuTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlci5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9oZWxwZXIucmVzdW1lKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGVqc1N0cmVhbU91dHB1dEFkYXB0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBTdHJlYW1IZWxwZXIgPSByZXF1aXJlKCcuL3N0cmVhbS9TdHJlYW1IZWxwZXInKTtcbnZhciBEYXRhV29ya2VyID0gcmVxdWlyZSgnLi9zdHJlYW0vRGF0YVdvcmtlcicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcbnZhciBDb21wcmVzc2VkT2JqZWN0ID0gcmVxdWlyZSgnLi9jb21wcmVzc2VkT2JqZWN0Jyk7XG52YXIgR2VuZXJpY1dvcmtlciA9IHJlcXVpcmUoJy4vc3RyZWFtL0dlbmVyaWNXb3JrZXInKTtcblxuLyoqXG4gKiBBIHNpbXBsZSBvYmplY3QgcmVwcmVzZW50aW5nIGEgZmlsZSBpbiB0aGUgemlwIGZpbGUuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBmaWxlXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gZGF0YSB0aGUgZGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIG9wdGlvbnMgb2YgdGhlIGZpbGVcbiAqL1xudmFyIFppcE9iamVjdCA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGlyID0gb3B0aW9ucy5kaXI7XG4gICAgdGhpcy5kYXRlID0gb3B0aW9ucy5kYXRlO1xuICAgIHRoaXMuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICB0aGlzLnVuaXhQZXJtaXNzaW9ucyA9IG9wdGlvbnMudW5peFBlcm1pc3Npb25zO1xuICAgIHRoaXMuZG9zUGVybWlzc2lvbnMgPSBvcHRpb25zLmRvc1Blcm1pc3Npb25zO1xuXG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5fZGF0YUJpbmFyeSA9IG9wdGlvbnMuYmluYXJ5O1xuICAgIC8vIGtlZXAgb25seSB0aGUgY29tcHJlc3Npb25cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgIGNvbXByZXNzaW9uIDogb3B0aW9ucy5jb21wcmVzc2lvbixcbiAgICAgICAgY29tcHJlc3Npb25PcHRpb25zIDogb3B0aW9ucy5jb21wcmVzc2lvbk9wdGlvbnNcbiAgICB9O1xufTtcblxuWmlwT2JqZWN0LnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gaW50ZXJuYWwgc3RyZWFtIGZvciB0aGUgY29udGVudCBvZiB0aGlzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgdHlwZSBvZiBlYWNoIGNodW5rLlxuICAgICAqIEByZXR1cm4gU3RyZWFtSGVscGVyIHRoZSBzdHJlYW0uXG4gICAgICovXG4gICAgaW50ZXJuYWxTdHJlYW06IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudWxsLCBvdXRwdXRUeXBlID0gXCJzdHJpbmdcIjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG91dHB1dCB0eXBlIHNwZWNpZmllZC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXRUeXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdmFyIGFza1VuaWNvZGVTdHJpbmcgPSBvdXRwdXRUeXBlID09PSBcInN0cmluZ1wiIHx8IG91dHB1dFR5cGUgPT09IFwidGV4dFwiO1xuICAgICAgICAgICAgaWYgKG91dHB1dFR5cGUgPT09IFwiYmluYXJ5c3RyaW5nXCIgfHwgb3V0cHV0VHlwZSA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRUeXBlID0gXCJzdHJpbmdcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29tcHJlc3NXb3JrZXIoKTtcblxuICAgICAgICAgICAgdmFyIGlzVW5pY29kZVN0cmluZyA9ICF0aGlzLl9kYXRhQmluYXJ5O1xuXG4gICAgICAgICAgICBpZiAoaXNVbmljb2RlU3RyaW5nICYmICFhc2tVbmljb2RlU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnBpcGUobmV3IHV0ZjguVXRmOEVuY29kZVdvcmtlcigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNVbmljb2RlU3RyaW5nICYmIGFza1VuaWNvZGVTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQucGlwZShuZXcgdXRmOC5VdGY4RGVjb2RlV29ya2VyKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgR2VuZXJpY1dvcmtlcihcImVycm9yXCIpO1xuICAgICAgICAgICAgcmVzdWx0LmVycm9yKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW1IZWxwZXIocmVzdWx0LCBvdXRwdXRUeXBlLCBcIlwiKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZSB0aGUgY29udGVudCBpbiB0aGUgYXNrZWQgdHlwZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgdHlwZSBvZiB0aGUgcmVzdWx0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVXBkYXRlIGEgZnVuY3Rpb24gdG8gY2FsbCBvbiBlYWNoIGludGVybmFsIHVwZGF0ZS5cbiAgICAgKiBAcmV0dXJuIFByb21pc2UgdGhlIHByb21pc2Ugb2YgdGhlIHJlc3VsdC5cbiAgICAgKi9cbiAgICBhc3luYzogZnVuY3Rpb24gKHR5cGUsIG9uVXBkYXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsU3RyZWFtKHR5cGUpLmFjY3VtdWxhdGUob25VcGRhdGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHRoZSBjb250ZW50IGFzIGEgbm9kZWpzIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgdHlwZSBvZiBlYWNoIGNodW5rLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVXBkYXRlIGEgZnVuY3Rpb24gdG8gY2FsbCBvbiBlYWNoIGludGVybmFsIHVwZGF0ZS5cbiAgICAgKiBAcmV0dXJuIFN0cmVhbSB0aGUgc3RyZWFtLlxuICAgICAqL1xuICAgIG5vZGVTdHJlYW06IGZ1bmN0aW9uICh0eXBlLCBvblVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFN0cmVhbSh0eXBlIHx8IFwibm9kZWJ1ZmZlclwiKS50b05vZGVqc1N0cmVhbShvblVwZGF0ZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIHdvcmtlciBmb3IgdGhlIGNvbXByZXNzZWQgY29udGVudC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb21wcmVzc2lvbiB0aGUgY29tcHJlc3Npb24gb2JqZWN0IHRvIHVzZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29tcHJlc3Npb25PcHRpb25zIHRoZSBvcHRpb25zIHRvIHVzZSB3aGVuIGNvbXByZXNzaW5nLlxuICAgICAqIEByZXR1cm4gV29ya2VyIHRoZSB3b3JrZXIuXG4gICAgICovXG4gICAgX2NvbXByZXNzV29ya2VyOiBmdW5jdGlvbiAoY29tcHJlc3Npb24sIGNvbXByZXNzaW9uT3B0aW9ucykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLl9kYXRhIGluc3RhbmNlb2YgQ29tcHJlc3NlZE9iamVjdCAmJlxuICAgICAgICAgICAgdGhpcy5fZGF0YS5jb21wcmVzc2lvbi5tYWdpYyA9PT0gY29tcHJlc3Npb24ubWFnaWNcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5nZXRDb21wcmVzc2VkV29ya2VyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO1xuICAgICAgICAgICAgaWYoIXRoaXMuX2RhdGFCaW5hcnkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQucGlwZShuZXcgdXRmOC5VdGY4RW5jb2RlV29ya2VyKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIENvbXByZXNzZWRPYmplY3QuY3JlYXRlV29ya2VyRnJvbShyZXN1bHQsIGNvbXByZXNzaW9uLCBjb21wcmVzc2lvbk9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSB3b3JrZXIgZm9yIHRoZSBkZWNvbXByZXNzZWQgY29udGVudC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4gV29ya2VyIHRoZSB3b3JrZXIuXG4gICAgICovXG4gICAgX2RlY29tcHJlc3NXb3JrZXIgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kYXRhIGluc3RhbmNlb2YgQ29tcHJlc3NlZE9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuZ2V0Q29udGVudFdvcmtlcigpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBHZW5lcmljV29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YVdvcmtlcih0aGlzLl9kYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciByZW1vdmVkTWV0aG9kcyA9IFtcImFzVGV4dFwiLCBcImFzQmluYXJ5XCIsIFwiYXNOb2RlQnVmZmVyXCIsIFwiYXNVaW50OEFycmF5XCIsIFwiYXNBcnJheUJ1ZmZlclwiXTtcbnZhciByZW1vdmVkRm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIik7XG59O1xuXG5mb3IodmFyIGkgPSAwOyBpIDwgcmVtb3ZlZE1ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICBaaXBPYmplY3QucHJvdG90eXBlW3JlbW92ZWRNZXRob2RzW2ldXSA9IHJlbW92ZWRGbjtcbn1cbm1vZHVsZS5leHBvcnRzID0gWmlwT2JqZWN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29tcHJlc3Npb25zID0gcmVxdWlyZSgnLi4vY29tcHJlc3Npb25zJyk7XG52YXIgWmlwRmlsZVdvcmtlciA9IHJlcXVpcmUoJy4vWmlwRmlsZVdvcmtlcicpO1xuXG4vKipcbiAqIEZpbmQgdGhlIGNvbXByZXNzaW9uIHRvIHVzZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlQ29tcHJlc3Npb24gdGhlIGNvbXByZXNzaW9uIGRlZmluZWQgYXQgdGhlIGZpbGUgbGV2ZWwsIGlmIGFueS5cbiAqIEBwYXJhbSB7U3RyaW5nfSB6aXBDb21wcmVzc2lvbiB0aGUgY29tcHJlc3Npb24gZGVmaW5lZCBhdCB0aGUgbG9hZCgpIGxldmVsLlxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgY29tcHJlc3Npb24gb2JqZWN0IHRvIHVzZS5cbiAqL1xudmFyIGdldENvbXByZXNzaW9uID0gZnVuY3Rpb24gKGZpbGVDb21wcmVzc2lvbiwgemlwQ29tcHJlc3Npb24pIHtcblxuICAgIHZhciBjb21wcmVzc2lvbk5hbWUgPSBmaWxlQ29tcHJlc3Npb24gfHwgemlwQ29tcHJlc3Npb247XG4gICAgdmFyIGNvbXByZXNzaW9uID0gY29tcHJlc3Npb25zW2NvbXByZXNzaW9uTmFtZV07XG4gICAgaWYgKCFjb21wcmVzc2lvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcHJlc3Npb25OYW1lICsgXCIgaXMgbm90IGEgdmFsaWQgY29tcHJlc3Npb24gbWV0aG9kICFcIik7XG4gICAgfVxuICAgIHJldHVybiBjb21wcmVzc2lvbjtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgd29ya2VyIHRvIGdlbmVyYXRlIGEgemlwIGZpbGUuXG4gKiBAcGFyYW0ge0pTWmlwfSB6aXAgdGhlIEpTWmlwIGluc3RhbmNlIGF0IHRoZSByaWdodCByb290IGxldmVsLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdG8gZ2VuZXJhdGUgdGhlIHppcCBmaWxlLlxuICogQHBhcmFtIHtTdHJpbmd9IGNvbW1lbnQgdGhlIGNvbW1lbnQgdG8gdXNlLlxuICovXG5leHBvcnRzLmdlbmVyYXRlV29ya2VyID0gZnVuY3Rpb24gKHppcCwgb3B0aW9ucywgY29tbWVudCkge1xuXG4gICAgdmFyIHppcEZpbGVXb3JrZXIgPSBuZXcgWmlwRmlsZVdvcmtlcihvcHRpb25zLnN0cmVhbUZpbGVzLCBjb21tZW50LCBvcHRpb25zLnBsYXRmb3JtLCBvcHRpb25zLmVuY29kZUZpbGVOYW1lKTtcbiAgICB2YXIgZW50cmllc0NvdW50ID0gMDtcbiAgICB0cnkge1xuXG4gICAgICAgIHppcC5mb3JFYWNoKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIGZpbGUpIHtcbiAgICAgICAgICAgIGVudHJpZXNDb3VudCsrO1xuICAgICAgICAgICAgdmFyIGNvbXByZXNzaW9uID0gZ2V0Q29tcHJlc3Npb24oZmlsZS5vcHRpb25zLmNvbXByZXNzaW9uLCBvcHRpb25zLmNvbXByZXNzaW9uKTtcbiAgICAgICAgICAgIHZhciBjb21wcmVzc2lvbk9wdGlvbnMgPSBmaWxlLm9wdGlvbnMuY29tcHJlc3Npb25PcHRpb25zIHx8IG9wdGlvbnMuY29tcHJlc3Npb25PcHRpb25zIHx8IHt9O1xuICAgICAgICAgICAgdmFyIGRpciA9IGZpbGUuZGlyLCBkYXRlID0gZmlsZS5kYXRlO1xuXG4gICAgICAgICAgICBmaWxlLl9jb21wcmVzc1dvcmtlcihjb21wcmVzc2lvbiwgY29tcHJlc3Npb25PcHRpb25zKVxuICAgICAgICAgICAgLndpdGhTdHJlYW1JbmZvKFwiZmlsZVwiLCB7XG4gICAgICAgICAgICAgICAgbmFtZSA6IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgICAgICAgICBkaXIgOiBkaXIsXG4gICAgICAgICAgICAgICAgZGF0ZSA6IGRhdGUsXG4gICAgICAgICAgICAgICAgY29tbWVudCA6IGZpbGUuY29tbWVudCB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIHVuaXhQZXJtaXNzaW9ucyA6IGZpbGUudW5peFBlcm1pc3Npb25zLFxuICAgICAgICAgICAgICAgIGRvc1Blcm1pc3Npb25zIDogZmlsZS5kb3NQZXJtaXNzaW9uc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5waXBlKHppcEZpbGVXb3JrZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgemlwRmlsZVdvcmtlci5lbnRyaWVzQ291bnQgPSBlbnRyaWVzQ291bnQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB6aXBGaWxlV29ya2VyLmVycm9yKGUpO1xuICAgIH1cblxuICAgIHJldHVybiB6aXBGaWxlV29ya2VyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBVU0VfVFlQRURBUlJBWSA9ICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmICh0eXBlb2YgVWludDE2QXJyYXkgIT09ICd1bmRlZmluZWQnKSAmJiAodHlwZW9mIFVpbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyk7XG5cbnZhciBwYWtvID0gcmVxdWlyZShcInBha29cIik7XG52YXIgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBHZW5lcmljV29ya2VyID0gcmVxdWlyZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIik7XG5cbnZhciBBUlJBWV9UWVBFID0gVVNFX1RZUEVEQVJSQVkgPyBcInVpbnQ4YXJyYXlcIiA6IFwiYXJyYXlcIjtcblxuZXhwb3J0cy5tYWdpYyA9IFwiXFx4MDhcXHgwMFwiO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdvcmtlciB0aGF0IHVzZXMgcGFrbyB0byBpbmZsYXRlL2RlZmxhdGUuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb24gdGhlIG5hbWUgb2YgdGhlIHBha28gZnVuY3Rpb24gdG8gY2FsbCA6IGVpdGhlciBcIkRlZmxhdGVcIiBvciBcIkluZmxhdGVcIi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHRoZSBvcHRpb25zIHRvIHVzZSB3aGVuIChkZSljb21wcmVzc2luZy5cbiAqL1xuZnVuY3Rpb24gRmxhdGVXb3JrZXIoYWN0aW9uLCBvcHRpb25zKSB7XG4gICAgR2VuZXJpY1dvcmtlci5jYWxsKHRoaXMsIFwiRmxhdGVXb3JrZXIvXCIgKyBhY3Rpb24pO1xuXG4gICAgdGhpcy5fcGFrbyA9IG51bGw7XG4gICAgdGhpcy5fcGFrb0FjdGlvbiA9IGFjdGlvbjtcbiAgICB0aGlzLl9wYWtvT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gdGhlIGBtZXRhYCBvYmplY3QgZnJvbSB0aGUgbGFzdCBjaHVuayByZWNlaXZlZFxuICAgIC8vIHRoaXMgYWxsb3cgdGhpcyB3b3JrZXIgdG8gcGFzcyBhcm91bmQgbWV0YWRhdGFcbiAgICB0aGlzLm1ldGEgPSB7fTtcbn1cblxudXRpbHMuaW5oZXJpdHMoRmxhdGVXb3JrZXIsIEdlbmVyaWNXb3JrZXIpO1xuXG4vKipcbiAqIEBzZWUgR2VuZXJpY1dvcmtlci5wcm9jZXNzQ2h1bmtcbiAqL1xuRmxhdGVXb3JrZXIucHJvdG90eXBlLnByb2Nlc3NDaHVuayA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgIHRoaXMubWV0YSA9IGNodW5rLm1ldGE7XG4gICAgaWYgKHRoaXMuX3Bha28gPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlUGFrbygpO1xuICAgIH1cbiAgICB0aGlzLl9wYWtvLnB1c2godXRpbHMudHJhbnNmb3JtVG8oQVJSQVlfVFlQRSwgY2h1bmsuZGF0YSksIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQHNlZSBHZW5lcmljV29ya2VyLmZsdXNoXG4gKi9cbkZsYXRlV29ya2VyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBHZW5lcmljV29ya2VyLnByb3RvdHlwZS5mbHVzaC5jYWxsKHRoaXMpO1xuICAgIGlmICh0aGlzLl9wYWtvID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVBha28oKTtcbiAgICB9XG4gICAgdGhpcy5fcGFrby5wdXNoKFtdLCB0cnVlKTtcbn07XG4vKipcbiAqIEBzZWUgR2VuZXJpY1dvcmtlci5jbGVhblVwXG4gKi9cbkZsYXRlV29ya2VyLnByb3RvdHlwZS5jbGVhblVwID0gZnVuY3Rpb24gKCkge1xuICAgIEdlbmVyaWNXb3JrZXIucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9wYWtvID0gbnVsbDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBfcGFrbyBvYmplY3QuXG4gKiBUT0RPOiBsYXp5LWxvYWRpbmcgdGhpcyBvYmplY3QgaXNuJ3QgdGhlIGJlc3Qgc29sdXRpb24gYnV0IGl0J3MgdGhlXG4gKiBxdWlja2VzdC4gVGhlIGJlc3Qgc29sdXRpb24gaXMgdG8gbGF6eS1sb2FkIHRoZSB3b3JrZXIgbGlzdC4gU2VlIGFsc28gdGhlXG4gKiBpc3N1ZSAjNDQ2LlxuICovXG5GbGF0ZVdvcmtlci5wcm90b3R5cGUuX2NyZWF0ZVBha28gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcGFrbyA9IG5ldyBwYWtvW3RoaXMuX3Bha29BY3Rpb25dKHtcbiAgICAgICAgcmF3OiB0cnVlLFxuICAgICAgICBsZXZlbDogdGhpcy5fcGFrb09wdGlvbnMubGV2ZWwgfHwgLTEgLy8gZGVmYXVsdCBjb21wcmVzc2lvblxuICAgIH0pO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLl9wYWtvLm9uRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgc2VsZi5wdXNoKHtcbiAgICAgICAgICAgIGRhdGEgOiBkYXRhLFxuICAgICAgICAgICAgbWV0YSA6IHNlbGYubWV0YVxuICAgICAgICB9KTtcbiAgICB9O1xufTtcblxuZXhwb3J0cy5jb21wcmVzc1dvcmtlciA9IGZ1bmN0aW9uIChjb21wcmVzc2lvbk9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IEZsYXRlV29ya2VyKFwiRGVmbGF0ZVwiLCBjb21wcmVzc2lvbk9wdGlvbnMpO1xufTtcbmV4cG9ydHMudW5jb21wcmVzc1dvcmtlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IEZsYXRlV29ya2VyKFwiSW5mbGF0ZVwiLCB7fSk7XG59O1xuIiwiLy8gVG9wIGxldmVsIGZpbGUgaXMganVzdCBhIG1peGluIG9mIHN1Ym1vZHVsZXMgJiBjb25zdGFudHNcbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiAgICA9IHJlcXVpcmUoJy4vbGliL3V0aWxzL2NvbW1vbicpLmFzc2lnbjtcblxudmFyIGRlZmxhdGUgICA9IHJlcXVpcmUoJy4vbGliL2RlZmxhdGUnKTtcbnZhciBpbmZsYXRlICAgPSByZXF1aXJlKCcuL2xpYi9pbmZsYXRlJyk7XG52YXIgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9saWIvemxpYi9jb25zdGFudHMnKTtcblxudmFyIHBha28gPSB7fTtcblxuYXNzaWduKHBha28sIGRlZmxhdGUsIGluZmxhdGUsIGNvbnN0YW50cyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFrbztcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgemxpYl9kZWZsYXRlID0gcmVxdWlyZSgnLi96bGliL2RlZmxhdGUnKTtcbnZhciB1dGlscyAgICAgICAgPSByZXF1aXJlKCcuL3V0aWxzL2NvbW1vbicpO1xudmFyIHN0cmluZ3MgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMvc3RyaW5ncycpO1xudmFyIG1zZyAgICAgICAgICA9IHJlcXVpcmUoJy4vemxpYi9tZXNzYWdlcycpO1xudmFyIFpTdHJlYW0gICAgICA9IHJlcXVpcmUoJy4vemxpYi96c3RyZWFtJyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG52YXIgWl9OT19GTFVTSCAgICAgID0gMDtcbnZhciBaX0ZJTklTSCAgICAgICAgPSA0O1xuXG52YXIgWl9PSyAgICAgICAgICAgID0gMDtcbnZhciBaX1NUUkVBTV9FTkQgICAgPSAxO1xudmFyIFpfU1lOQ19GTFVTSCAgICA9IDI7XG5cbnZhciBaX0RFRkFVTFRfQ09NUFJFU1NJT04gPSAtMTtcblxudmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgICA9IDA7XG5cbnZhciBaX0RFRkxBVEVEICA9IDg7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyoqXG4gKiBjbGFzcyBEZWZsYXRlXG4gKlxuICogR2VuZXJpYyBKUy1zdHlsZSB3cmFwcGVyIGZvciB6bGliIGNhbGxzLiBJZiB5b3UgZG9uJ3QgbmVlZFxuICogc3RyZWFtaW5nIGJlaGF2aW91ciAtIHVzZSBtb3JlIHNpbXBsZSBmdW5jdGlvbnM6IFtbZGVmbGF0ZV1dLFxuICogW1tkZWZsYXRlUmF3XV0gYW5kIFtbZ3ppcF1dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogRGVmbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbRGVmbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi5cbiAqKi9cblxuLyoqXG4gKiBEZWZsYXRlLnJlc3VsdCAtPiBVaW50OEFycmF5fEFycmF5XG4gKlxuICogQ29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbRGVmbGF0ZSNvbkRhdGFdXVxuICogYW5kIFtbRGVmbGF0ZSNvbkVuZF1dIGhhbmRsZXJzLiBGaWxsZWQgYWZ0ZXIgeW91IHB1c2ggbGFzdCBjaHVua1xuICogKGNhbGwgW1tEZWZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pICBvciBpZiB5b3VcbiAqIHB1c2ggYSBjaHVuayB3aXRoIGV4cGxpY2l0IGZsdXNoIChjYWxsIFtbRGVmbGF0ZSNwdXNoXV0gd2l0aFxuICogYFpfU1lOQ19GTFVTSGAgcGFyYW0pLlxuICoqL1xuXG4vKipcbiAqIERlZmxhdGUuZXJyIC0+IE51bWJlclxuICpcbiAqIEVycm9yIGNvZGUgYWZ0ZXIgZGVmbGF0ZSBmaW5pc2hlZC4gMCAoWl9PSykgb24gc3VjY2Vzcy5cbiAqIFlvdSB3aWxsIG5vdCBuZWVkIGl0IGluIHJlYWwgbGlmZSwgYmVjYXVzZSBkZWZsYXRlIGVycm9yc1xuICogYXJlIHBvc3NpYmxlIG9ubHkgb24gd3Jvbmcgb3B0aW9ucyBvciBiYWQgYG9uRGF0YWAgLyBgb25FbmRgXG4gKiBjdXN0b20gaGFuZGxlcnMuXG4gKiovXG5cbi8qKlxuICogRGVmbGF0ZS5tc2cgLT4gU3RyaW5nXG4gKlxuICogRXJyb3IgbWVzc2FnZSwgaWYgW1tEZWZsYXRlLmVycl1dICE9IDBcbiAqKi9cblxuXG4vKipcbiAqIG5ldyBEZWZsYXRlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIENyZWF0ZXMgbmV3IGRlZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6XG4gKlxuICogLSBgbGV2ZWxgXG4gKiAtIGB3aW5kb3dCaXRzYFxuICogLSBgbWVtTGV2ZWxgXG4gKiAtIGBzdHJhdGVneWBcbiAqIC0gYGRpY3Rpb25hcnlgXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG4gKlxuICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGRlZmxhdGVcbiAqIC0gYGd6aXBgIChCb29sZWFuKSAtIGNyZWF0ZSBnemlwIHdyYXBwZXJcbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIFwiYmluYXJ5IHN0cmluZ1wiXG4gKiAgICAoZWFjaCBjaGFyIGNvZGUgWzAuLjI1NV0pXG4gKiAtIGBoZWFkZXJgIChPYmplY3QpIC0gY3VzdG9tIGhlYWRlciBmb3IgZ3ppcFxuICogICAtIGB0ZXh0YCAoQm9vbGVhbikgLSB0cnVlIGlmIGNvbXByZXNzZWQgZGF0YSBiZWxpZXZlZCB0byBiZSB0ZXh0XG4gKiAgIC0gYHRpbWVgIChOdW1iZXIpIC0gbW9kaWZpY2F0aW9uIHRpbWUsIHVuaXggdGltZXN0YW1wXG4gKiAgIC0gYG9zYCAoTnVtYmVyKSAtIG9wZXJhdGlvbiBzeXN0ZW0gY29kZVxuICogICAtIGBleHRyYWAgKEFycmF5KSAtIGFycmF5IG9mIGJ5dGVzIHdpdGggZXh0cmEgZGF0YSAobWF4IDY1NTM2KVxuICogICAtIGBuYW1lYCAoU3RyaW5nKSAtIGZpbGUgbmFtZSAoYmluYXJ5IHN0cmluZylcbiAqICAgLSBgY29tbWVudGAgKFN0cmluZykgLSBjb21tZW50IChiaW5hcnkgc3RyaW5nKVxuICogICAtIGBoY3JjYCAoQm9vbGVhbikgLSB0cnVlIGlmIGhlYWRlciBjcmMgc2hvdWxkIGJlIGFkZGVkXG4gKlxuICogIyMjIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKVxuICogICAsIGNodW5rMSA9IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSlcbiAqICAgLCBjaHVuazIgPSBVaW50OEFycmF5KFsxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOV0pO1xuICpcbiAqIHZhciBkZWZsYXRlID0gbmV3IHBha28uRGVmbGF0ZSh7IGxldmVsOiAzfSk7XG4gKlxuICogZGVmbGF0ZS5wdXNoKGNodW5rMSwgZmFsc2UpO1xuICogZGVmbGF0ZS5wdXNoKGNodW5rMiwgdHJ1ZSk7ICAvLyB0cnVlIC0+IGxhc3QgY2h1bmtcbiAqXG4gKiBpZiAoZGVmbGF0ZS5lcnIpIHsgdGhyb3cgbmV3IEVycm9yKGRlZmxhdGUuZXJyKTsgfVxuICpcbiAqIGNvbnNvbGUubG9nKGRlZmxhdGUucmVzdWx0KTtcbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gRGVmbGF0ZShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWZsYXRlKSkgcmV0dXJuIG5ldyBEZWZsYXRlKG9wdGlvbnMpO1xuXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmFzc2lnbih7XG4gICAgbGV2ZWw6IFpfREVGQVVMVF9DT01QUkVTU0lPTixcbiAgICBtZXRob2Q6IFpfREVGTEFURUQsXG4gICAgY2h1bmtTaXplOiAxNjM4NCxcbiAgICB3aW5kb3dCaXRzOiAxNSxcbiAgICBtZW1MZXZlbDogOCxcbiAgICBzdHJhdGVneTogWl9ERUZBVUxUX1NUUkFURUdZLFxuICAgIHRvOiAnJ1xuICB9LCBvcHRpb25zIHx8IHt9KTtcblxuICB2YXIgb3B0ID0gdGhpcy5vcHRpb25zO1xuXG4gIGlmIChvcHQucmF3ICYmIChvcHQud2luZG93Qml0cyA+IDApKSB7XG4gICAgb3B0LndpbmRvd0JpdHMgPSAtb3B0LndpbmRvd0JpdHM7XG4gIH1cblxuICBlbHNlIGlmIChvcHQuZ3ppcCAmJiAob3B0LndpbmRvd0JpdHMgPiAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikpIHtcbiAgICBvcHQud2luZG93Qml0cyArPSAxNjtcbiAgfVxuXG4gIHRoaXMuZXJyICAgID0gMDsgICAgICAvLyBlcnJvciBjb2RlLCBpZiBoYXBwZW5zICgwID0gWl9PSylcbiAgdGhpcy5tc2cgICAgPSAnJzsgICAgIC8vIGVycm9yIG1lc3NhZ2VcbiAgdGhpcy5lbmRlZCAgPSBmYWxzZTsgIC8vIHVzZWQgdG8gYXZvaWQgbXVsdGlwbGUgb25FbmQoKSBjYWxsc1xuICB0aGlzLmNodW5rcyA9IFtdOyAgICAgLy8gY2h1bmtzIG9mIGNvbXByZXNzZWQgZGF0YVxuXG4gIHRoaXMuc3RybSA9IG5ldyBaU3RyZWFtKCk7XG4gIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwO1xuXG4gIHZhciBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZUluaXQyKFxuICAgIHRoaXMuc3RybSxcbiAgICBvcHQubGV2ZWwsXG4gICAgb3B0Lm1ldGhvZCxcbiAgICBvcHQud2luZG93Qml0cyxcbiAgICBvcHQubWVtTGV2ZWwsXG4gICAgb3B0LnN0cmF0ZWd5XG4gICk7XG5cbiAgaWYgKHN0YXR1cyAhPT0gWl9PSykge1xuICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7XG4gIH1cblxuICBpZiAob3B0LmhlYWRlcikge1xuICAgIHpsaWJfZGVmbGF0ZS5kZWZsYXRlU2V0SGVhZGVyKHRoaXMuc3RybSwgb3B0LmhlYWRlcik7XG4gIH1cblxuICBpZiAob3B0LmRpY3Rpb25hcnkpIHtcbiAgICB2YXIgZGljdDtcbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIElmIHdlIG5lZWQgdG8gY29tcHJlc3MgdGV4dCwgY2hhbmdlIGVuY29kaW5nIHRvIHV0ZjguXG4gICAgICBkaWN0ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBkaWN0ID0gbmV3IFVpbnQ4QXJyYXkob3B0LmRpY3Rpb25hcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaWN0ID0gb3B0LmRpY3Rpb25hcnk7XG4gICAgfVxuXG4gICAgc3RhdHVzID0gemxpYl9kZWZsYXRlLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgZGljdCk7XG5cbiAgICBpZiAoc3RhdHVzICE9PSBaX09LKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pO1xuICAgIH1cblxuICAgIHRoaXMuX2RpY3Rfc2V0ID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmxhdGUjcHVzaChkYXRhWywgbW9kZV0pIC0+IEJvb2xlYW5cbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxBcnJheUJ1ZmZlcnxTdHJpbmcpOiBpbnB1dCBkYXRhLiBTdHJpbmdzIHdpbGwgYmVcbiAqICAgY29udmVydGVkIHRvIHV0ZjggYnl0ZSBzZXF1ZW5jZS5cbiAqIC0gbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy5cbiAqICAgU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGRlZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0RlZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IGNvbXByZXNzZWQgY2h1bmtzLiBSZXR1cm5zIGB0cnVlYCBvbiBzdWNjZXNzLiBUaGUgbGFzdCBkYXRhIGJsb2NrIG11c3QgaGF2ZVxuICogbW9kZSBaX0ZJTklTSCAob3IgYHRydWVgKS4gVGhhdCB3aWxsIGZsdXNoIGludGVybmFsIHBlbmRpbmcgYnVmZmVycyBhbmQgY2FsbFxuICogW1tEZWZsYXRlI29uRW5kXV0uIEZvciBpbnRlcmltIGV4cGxpY2l0IGZsdXNoZXMgKHdpdGhvdXQgZW5kaW5nIHRoZSBzdHJlYW0pIHlvdVxuICogY2FuIHVzZSBtb2RlIFpfU1lOQ19GTFVTSCwga2VlcGluZyB0aGUgY29tcHJlc3Npb24gY29udGV4dC5cbiAqXG4gKiBPbiBmYWlsIGNhbGwgW1tEZWZsYXRlI29uRW5kXV0gd2l0aCBlcnJvciBjb2RlIGFuZCByZXR1cm4gZmFsc2UuXG4gKlxuICogV2Ugc3Ryb25nbHkgcmVjb21tZW5kIHRvIHVzZSBgVWludDhBcnJheWAgb24gaW5wdXQgZm9yIGJlc3Qgc3BlZWQgKG91dHB1dFxuICogYXJyYXkgZm9ybWF0IGlzIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkpLiBBbHNvLCBkb24ndCBza2lwIGxhc3QgcGFyYW0gYW5kIGFsd2F5c1xuICogdXNlIHRoZSBzYW1lIHR5cGUgaW4geW91ciBjb2RlIChib29sZWFuIG9yIG51bWJlcikuIFRoYXQgd2lsbCBpbXByb3ZlIEpTIHNwZWVkLlxuICpcbiAqIEZvciByZWd1bGFyIGBBcnJheWAtcyBtYWtlIHN1cmUgYWxsIGVsZW1lbnRzIGFyZSBbMC4uMjU1XS5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogcHVzaChjaHVuaywgZmFsc2UpOyAvLyBwdXNoIG9uZSBvZiBkYXRhIGNodW5rc1xuICogLi4uXG4gKiBwdXNoKGNodW5rLCB0cnVlKTsgIC8vIHB1c2ggbGFzdCBjaHVua1xuICogYGBgXG4gKiovXG5EZWZsYXRlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGRhdGEsIG1vZGUpIHtcbiAgdmFyIHN0cm0gPSB0aGlzLnN0cm07XG4gIHZhciBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplO1xuICB2YXIgc3RhdHVzLCBfbW9kZTtcblxuICBpZiAodGhpcy5lbmRlZCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBfbW9kZSA9IChtb2RlID09PSB+fm1vZGUpID8gbW9kZSA6ICgobW9kZSA9PT0gdHJ1ZSkgPyBaX0ZJTklTSCA6IFpfTk9fRkxVU0gpO1xuXG4gIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIC8vIElmIHdlIG5lZWQgdG8gY29tcHJlc3MgdGV4dCwgY2hhbmdlIGVuY29kaW5nIHRvIHV0ZjguXG4gICAgc3RybS5pbnB1dCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihkYXRhKTtcbiAgfSBlbHNlIGlmICh0b1N0cmluZy5jYWxsKGRhdGEpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgc3RybS5pbnB1dCA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHN0cm0uaW5wdXQgPSBkYXRhO1xuICB9XG5cbiAgc3RybS5uZXh0X2luID0gMDtcbiAgc3RybS5hdmFpbF9pbiA9IHN0cm0uaW5wdXQubGVuZ3RoO1xuXG4gIGRvIHtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHN0cm0ub3V0cHV0ID0gbmV3IHV0aWxzLkJ1ZjgoY2h1bmtTaXplKTtcbiAgICAgIHN0cm0ubmV4dF9vdXQgPSAwO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemU7XG4gICAgfVxuICAgIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlKHN0cm0sIF9tb2RlKTsgICAgLyogbm8gYmFkIHJldHVybiB2YWx1ZSAqL1xuXG4gICAgaWYgKHN0YXR1cyAhPT0gWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPT0gWl9PSykge1xuICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCB8fCAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiAoX21vZGUgPT09IFpfRklOSVNIIHx8IF9tb2RlID09PSBaX1NZTkNfRkxVU0gpKSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5vbkRhdGEoc3RyaW5ncy5idWYyYmluc3RyaW5nKHV0aWxzLnNocmlua0J1ZihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25EYXRhKHV0aWxzLnNocmlua0J1ZihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAoKHN0cm0uYXZhaWxfaW4gPiAwIHx8IHN0cm0uYXZhaWxfb3V0ID09PSAwKSAmJiBzdGF0dXMgIT09IFpfU1RSRUFNX0VORCk7XG5cbiAgLy8gRmluYWxpemUgb24gdGhlIGxhc3QgY2h1bmsuXG4gIGlmIChfbW9kZSA9PT0gWl9GSU5JU0gpIHtcbiAgICBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gc3RhdHVzID09PSBaX09LO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaW50ZXJpbSByZXN1bHRzIGlmIFpfU1lOQ19GTFVTSC5cbiAgaWYgKF9tb2RlID09PSBaX1NZTkNfRkxVU0gpIHtcbiAgICB0aGlzLm9uRW5kKFpfT0spO1xuICAgIHN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIERlZmxhdGUjb25EYXRhKGNodW5rKSAtPiBWb2lkXG4gKiAtIGNodW5rIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IG91dHB1dCBkYXRhLiBUeXBlIG9mIGFycmF5IGRlcGVuZHNcbiAqICAgb24ganMgZW5naW5lIHN1cHBvcnQuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsIGVhY2ggY2h1bmtcbiAqICAgd2lsbCBiZSBzdHJpbmcuXG4gKlxuICogQnkgZGVmYXVsdCwgc3RvcmVzIGRhdGEgYmxvY2tzIGluIGBjaHVua3NbXWAgcHJvcGVydHkgYW5kIGdsdWVcbiAqIHRob3NlIGluIGBvbkVuZGAuIE92ZXJyaWRlIHRoaXMgaGFuZGxlciwgaWYgeW91IG5lZWQgYW5vdGhlciBiZWhhdmlvdXIuXG4gKiovXG5EZWZsYXRlLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7XG59O1xuXG5cbi8qKlxuICogRGVmbGF0ZSNvbkVuZChzdGF0dXMpIC0+IFZvaWRcbiAqIC0gc3RhdHVzIChOdW1iZXIpOiBkZWZsYXRlIHN0YXR1cy4gMCAoWl9PSykgb24gc3VjY2VzcyxcbiAqICAgb3RoZXIgaWYgbm90LlxuICpcbiAqIENhbGxlZCBvbmNlIGFmdGVyIHlvdSB0ZWxsIGRlZmxhdGUgdGhhdCB0aGUgaW5wdXQgc3RyZWFtIGlzXG4gKiBjb21wbGV0ZSAoWl9GSU5JU0gpIG9yIHNob3VsZCBiZSBmbHVzaGVkIChaX1NZTkNfRkxVU0gpXG4gKiBvciBpZiBhbiBlcnJvciBoYXBwZW5lZC4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcyxcbiAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG4gKiovXG5EZWZsYXRlLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgLy8gT24gc3VjY2VzcyAtIGpvaW5cbiAgaWYgKHN0YXR1cyA9PT0gWl9PSykge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudG8gPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlc3VsdCA9IHV0aWxzLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpO1xuICAgIH1cbiAgfVxuICB0aGlzLmNodW5rcyA9IFtdO1xuICB0aGlzLmVyciA9IHN0YXR1cztcbiAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnO1xufTtcblxuXG4vKipcbiAqIGRlZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIENvbXByZXNzIGBkYXRhYCB3aXRoIGRlZmxhdGUgYWxnb3JpdGhtIGFuZCBgb3B0aW9uc2AuXG4gKlxuICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICpcbiAqIC0gbGV2ZWxcbiAqIC0gd2luZG93Qml0c1xuICogLSBtZW1MZXZlbFxuICogLSBzdHJhdGVneVxuICogLSBkaWN0aW9uYXJ5XG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogU3VnYXIgKG9wdGlvbnMpOlxuICpcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gc2F5IHRoYXQgd2Ugd29yayB3aXRoIHJhdyBzdHJlYW0sIGlmIHlvdSBkb24ndCB3aXNoIHRvIHNwZWNpZnlcbiAqICAgbmVnYXRpdmUgd2luZG93Qml0cyBpbXBsaWNpdGx5LlxuICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgXCJiaW5hcnkgc3RyaW5nXCJcbiAqICAgIChlYWNoIGNoYXIgY29kZSBbMC4uMjU1XSlcbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiAgICwgZGF0YSA9IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSk7XG4gKlxuICogY29uc29sZS5sb2cocGFrby5kZWZsYXRlKGRhdGEpKTtcbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgZGVmbGF0b3IgPSBuZXcgRGVmbGF0ZShvcHRpb25zKTtcblxuICBkZWZsYXRvci5wdXNoKGlucHV0LCB0cnVlKTtcblxuICAvLyBUaGF0IHdpbGwgbmV2ZXIgaGFwcGVucywgaWYgeW91IGRvbid0IGNoZWF0IHdpdGggb3B0aW9ucyA6KVxuICBpZiAoZGVmbGF0b3IuZXJyKSB7IHRocm93IGRlZmxhdG9yLm1zZyB8fCBtc2dbZGVmbGF0b3IuZXJyXTsgfVxuXG4gIHJldHVybiBkZWZsYXRvci5yZXN1bHQ7XG59XG5cblxuLyoqXG4gKiBkZWZsYXRlUmF3KGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGRlZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBUaGUgc2FtZSBhcyBbW2RlZmxhdGVdXSwgYnV0IGNyZWF0ZXMgcmF3IGRhdGEsIHdpdGhvdXQgd3JhcHBlclxuICogKGhlYWRlciBhbmQgYWRsZXIzMiBjcmMpLlxuICoqL1xuZnVuY3Rpb24gZGVmbGF0ZVJhdyhpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5yYXcgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucyk7XG59XG5cblxuLyoqXG4gKiBnemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGRlZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBUaGUgc2FtZSBhcyBbW2RlZmxhdGVdXSwgYnV0IGNyZWF0ZSBnemlwIHdyYXBwZXIgaW5zdGVhZCBvZlxuICogZGVmbGF0ZSBvbmUuXG4gKiovXG5mdW5jdGlvbiBnemlwKGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmd6aXAgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucyk7XG59XG5cblxuZXhwb3J0cy5EZWZsYXRlID0gRGVmbGF0ZTtcbmV4cG9ydHMuZGVmbGF0ZSA9IGRlZmxhdGU7XG5leHBvcnRzLmRlZmxhdGVSYXcgPSBkZWZsYXRlUmF3O1xuZXhwb3J0cy5nemlwID0gZ3ppcDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG52YXIgdXRpbHMgICA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xudmFyIHRyZWVzICAgPSByZXF1aXJlKCcuL3RyZWVzJyk7XG52YXIgYWRsZXIzMiA9IHJlcXVpcmUoJy4vYWRsZXIzMicpO1xudmFyIGNyYzMyICAgPSByZXF1aXJlKCcuL2NyYzMyJyk7XG52YXIgbXNnICAgICA9IHJlcXVpcmUoJy4vbWVzc2FnZXMnKTtcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqL1xudmFyIFpfTk9fRkxVU0ggICAgICA9IDA7XG52YXIgWl9QQVJUSUFMX0ZMVVNIID0gMTtcbi8vdmFyIFpfU1lOQ19GTFVTSCAgICA9IDI7XG52YXIgWl9GVUxMX0ZMVVNIICAgID0gMztcbnZhciBaX0ZJTklTSCAgICAgICAgPSA0O1xudmFyIFpfQkxPQ0sgICAgICAgICA9IDU7XG4vL3ZhciBaX1RSRUVTICAgICAgICAgPSA2O1xuXG5cbi8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcbiAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cbiAqL1xudmFyIFpfT0sgICAgICAgICAgICA9IDA7XG52YXIgWl9TVFJFQU1fRU5EICAgID0gMTtcbi8vdmFyIFpfTkVFRF9ESUNUICAgICA9IDI7XG4vL3ZhciBaX0VSUk5PICAgICAgICAgPSAtMTtcbnZhciBaX1NUUkVBTV9FUlJPUiAgPSAtMjtcbnZhciBaX0RBVEFfRVJST1IgICAgPSAtMztcbi8vdmFyIFpfTUVNX0VSUk9SICAgICA9IC00O1xudmFyIFpfQlVGX0VSUk9SICAgICA9IC01O1xuLy92YXIgWl9WRVJTSU9OX0VSUk9SID0gLTY7XG5cblxuLyogY29tcHJlc3Npb24gbGV2ZWxzICovXG4vL3ZhciBaX05PX0NPTVBSRVNTSU9OICAgICAgPSAwO1xuLy92YXIgWl9CRVNUX1NQRUVEICAgICAgICAgID0gMTtcbi8vdmFyIFpfQkVTVF9DT01QUkVTU0lPTiAgICA9IDk7XG52YXIgWl9ERUZBVUxUX0NPTVBSRVNTSU9OID0gLTE7XG5cblxudmFyIFpfRklMVEVSRUQgICAgICAgICAgICA9IDE7XG52YXIgWl9IVUZGTUFOX09OTFkgICAgICAgID0gMjtcbnZhciBaX1JMRSAgICAgICAgICAgICAgICAgPSAzO1xudmFyIFpfRklYRUQgICAgICAgICAgICAgICA9IDQ7XG52YXIgWl9ERUZBVUxUX1NUUkFURUdZICAgID0gMDtcblxuLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xuLy92YXIgWl9CSU5BUlkgICAgICAgICAgICAgID0gMDtcbi8vdmFyIFpfVEVYVCAgICAgICAgICAgICAgICA9IDE7XG4vL3ZhciBaX0FTQ0lJICAgICAgICAgICAgICAgPSAxOyAvLyA9IFpfVEVYVFxudmFyIFpfVU5LTk9XTiAgICAgICAgICAgICA9IDI7XG5cblxuLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG52YXIgWl9ERUZMQVRFRCAgPSA4O1xuXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbnZhciBNQVhfTUVNX0xFVkVMID0gOTtcbi8qIE1heGltdW0gdmFsdWUgZm9yIG1lbUxldmVsIGluIGRlZmxhdGVJbml0MiAqL1xudmFyIE1BWF9XQklUUyA9IDE1O1xuLyogMzJLIExaNzcgd2luZG93ICovXG52YXIgREVGX01FTV9MRVZFTCA9IDg7XG5cblxudmFyIExFTkdUSF9DT0RFUyAgPSAyOTtcbi8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqL1xudmFyIExJVEVSQUxTICAgICAgPSAyNTY7XG4vKiBudW1iZXIgb2YgbGl0ZXJhbCBieXRlcyAwLi4yNTUgKi9cbnZhciBMX0NPREVTICAgICAgID0gTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTO1xuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXG52YXIgRF9DT0RFUyAgICAgICA9IDMwO1xuLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovXG52YXIgQkxfQ09ERVMgICAgICA9IDE5O1xuLyogbnVtYmVyIG9mIGNvZGVzIHVzZWQgdG8gdHJhbnNmZXIgdGhlIGJpdCBsZW5ndGhzICovXG52YXIgSEVBUF9TSVpFICAgICA9IDIgKiBMX0NPREVTICsgMTtcbi8qIG1heGltdW0gaGVhcCBzaXplICovXG52YXIgTUFYX0JJVFMgID0gMTU7XG4vKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi9cblxudmFyIE1JTl9NQVRDSCA9IDM7XG52YXIgTUFYX01BVENIID0gMjU4O1xudmFyIE1JTl9MT09LQUhFQUQgPSAoTUFYX01BVENIICsgTUlOX01BVENIICsgMSk7XG5cbnZhciBQUkVTRVRfRElDVCA9IDB4MjA7XG5cbnZhciBJTklUX1NUQVRFID0gNDI7XG52YXIgRVhUUkFfU1RBVEUgPSA2OTtcbnZhciBOQU1FX1NUQVRFID0gNzM7XG52YXIgQ09NTUVOVF9TVEFURSA9IDkxO1xudmFyIEhDUkNfU1RBVEUgPSAxMDM7XG52YXIgQlVTWV9TVEFURSA9IDExMztcbnZhciBGSU5JU0hfU1RBVEUgPSA2NjY7XG5cbnZhciBCU19ORUVEX01PUkUgICAgICA9IDE7IC8qIGJsb2NrIG5vdCBjb21wbGV0ZWQsIG5lZWQgbW9yZSBpbnB1dCBvciBtb3JlIG91dHB1dCAqL1xudmFyIEJTX0JMT0NLX0RPTkUgICAgID0gMjsgLyogYmxvY2sgZmx1c2ggcGVyZm9ybWVkICovXG52YXIgQlNfRklOSVNIX1NUQVJURUQgPSAzOyAvKiBmaW5pc2ggc3RhcnRlZCwgbmVlZCBvbmx5IG1vcmUgb3V0cHV0IGF0IG5leHQgZGVmbGF0ZSAqL1xudmFyIEJTX0ZJTklTSF9ET05FICAgID0gNDsgLyogZmluaXNoIGRvbmUsIGFjY2VwdCBubyBtb3JlIGlucHV0IG9yIG91dHB1dCAqL1xuXG52YXIgT1NfQ09ERSA9IDB4MDM7IC8vIFVuaXggOikgLiBEb24ndCBkZXRlY3QsIHVzZSB0aGlzIGRlZmF1bHQuXG5cbmZ1bmN0aW9uIGVycihzdHJtLCBlcnJvckNvZGUpIHtcbiAgc3RybS5tc2cgPSBtc2dbZXJyb3JDb2RlXTtcbiAgcmV0dXJuIGVycm9yQ29kZTtcbn1cblxuZnVuY3Rpb24gcmFuayhmKSB7XG4gIHJldHVybiAoKGYpIDw8IDEpIC0gKChmKSA+IDQgPyA5IDogMCk7XG59XG5cbmZ1bmN0aW9uIHplcm8oYnVmKSB7IHZhciBsZW4gPSBidWYubGVuZ3RoOyB3aGlsZSAoLS1sZW4gPj0gMCkgeyBidWZbbGVuXSA9IDA7IH0gfVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGUuIEFsbCBkZWZsYXRlKCkgb3V0cHV0IGdvZXNcbiAqIHRocm91Z2ggdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXRcbiAqIHRvIGF2b2lkIGFsbG9jYXRpbmcgYSBsYXJnZSBzdHJtLT5vdXRwdXQgYnVmZmVyIGFuZCBjb3B5aW5nIGludG8gaXQuXG4gKiAoU2VlIGFsc28gcmVhZF9idWYoKSkuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoX3BlbmRpbmcoc3RybSkge1xuICB2YXIgcyA9IHN0cm0uc3RhdGU7XG5cbiAgLy9fdHJfZmx1c2hfYml0cyhzKTtcbiAgdmFyIGxlbiA9IHMucGVuZGluZztcbiAgaWYgKGxlbiA+IHN0cm0uYXZhaWxfb3V0KSB7XG4gICAgbGVuID0gc3RybS5hdmFpbF9vdXQ7XG4gIH1cbiAgaWYgKGxlbiA9PT0gMCkgeyByZXR1cm47IH1cblxuICB1dGlscy5hcnJheVNldChzdHJtLm91dHB1dCwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nX291dCwgbGVuLCBzdHJtLm5leHRfb3V0KTtcbiAgc3RybS5uZXh0X291dCArPSBsZW47XG4gIHMucGVuZGluZ19vdXQgKz0gbGVuO1xuICBzdHJtLnRvdGFsX291dCArPSBsZW47XG4gIHN0cm0uYXZhaWxfb3V0IC09IGxlbjtcbiAgcy5wZW5kaW5nIC09IGxlbjtcbiAgaWYgKHMucGVuZGluZyA9PT0gMCkge1xuICAgIHMucGVuZGluZ19vdXQgPSAwO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZmx1c2hfYmxvY2tfb25seShzLCBsYXN0KSB7XG4gIHRyZWVzLl90cl9mbHVzaF9ibG9jayhzLCAocy5ibG9ja19zdGFydCA+PSAwID8gcy5ibG9ja19zdGFydCA6IC0xKSwgcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQsIGxhc3QpO1xuICBzLmJsb2NrX3N0YXJ0ID0gcy5zdHJzdGFydDtcbiAgZmx1c2hfcGVuZGluZyhzLnN0cm0pO1xufVxuXG5cbmZ1bmN0aW9uIHB1dF9ieXRlKHMsIGIpIHtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBiO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFB1dCBhIHNob3J0IGluIHRoZSBwZW5kaW5nIGJ1ZmZlci4gVGhlIDE2LWJpdCB2YWx1ZSBpcyBwdXQgaW4gTVNCIG9yZGVyLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgc3RyZWFtIHN0YXRlIGlzIGNvcnJlY3QgYW5kIHRoZXJlIGlzIGVub3VnaCByb29tIGluXG4gKiBwZW5kaW5nX2J1Zi5cbiAqL1xuZnVuY3Rpb24gcHV0U2hvcnRNU0IocywgYikge1xuLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiID4+IDgpKTtcbi8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiAmIDB4ZmYpKTtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAoYiA+Pj4gOCkgJiAweGZmO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IGIgJiAweGZmO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmVhZCBhIG5ldyBidWZmZXIgZnJvbSB0aGUgY3VycmVudCBpbnB1dCBzdHJlYW0sIHVwZGF0ZSB0aGUgYWRsZXIzMlxuICogYW5kIHRvdGFsIG51bWJlciBvZiBieXRlcyByZWFkLiAgQWxsIGRlZmxhdGUoKSBpbnB1dCBnb2VzIHRocm91Z2hcbiAqIHRoaXMgZnVuY3Rpb24gc28gc29tZSBhcHBsaWNhdGlvbnMgbWF5IHdpc2ggdG8gbW9kaWZ5IGl0IHRvIGF2b2lkXG4gKiBhbGxvY2F0aW5nIGEgbGFyZ2Ugc3RybS0+aW5wdXQgYnVmZmVyIGFuZCBjb3B5aW5nIGZyb20gaXQuXG4gKiAoU2VlIGFsc28gZmx1c2hfcGVuZGluZygpKS5cbiAqL1xuZnVuY3Rpb24gcmVhZF9idWYoc3RybSwgYnVmLCBzdGFydCwgc2l6ZSkge1xuICB2YXIgbGVuID0gc3RybS5hdmFpbF9pbjtcblxuICBpZiAobGVuID4gc2l6ZSkgeyBsZW4gPSBzaXplOyB9XG4gIGlmIChsZW4gPT09IDApIHsgcmV0dXJuIDA7IH1cblxuICBzdHJtLmF2YWlsX2luIC09IGxlbjtcblxuICAvLyB6bWVtY3B5KGJ1Ziwgc3RybS0+bmV4dF9pbiwgbGVuKTtcbiAgdXRpbHMuYXJyYXlTZXQoYnVmLCBzdHJtLmlucHV0LCBzdHJtLm5leHRfaW4sIGxlbiwgc3RhcnQpO1xuICBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAxKSB7XG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzIoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfVxuXG4gIGVsc2UgaWYgKHN0cm0uc3RhdGUud3JhcCA9PT0gMikge1xuICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpO1xuICB9XG5cbiAgc3RybS5uZXh0X2luICs9IGxlbjtcbiAgc3RybS50b3RhbF9pbiArPSBsZW47XG5cbiAgcmV0dXJuIGxlbjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNldCBtYXRjaF9zdGFydCB0byB0aGUgbG9uZ2VzdCBtYXRjaCBzdGFydGluZyBhdCB0aGUgZ2l2ZW4gc3RyaW5nIGFuZFxuICogcmV0dXJuIGl0cyBsZW5ndGguIE1hdGNoZXMgc2hvcnRlciBvciBlcXVhbCB0byBwcmV2X2xlbmd0aCBhcmUgZGlzY2FyZGVkLFxuICogaW4gd2hpY2ggY2FzZSB0aGUgcmVzdWx0IGlzIGVxdWFsIHRvIHByZXZfbGVuZ3RoIGFuZCBtYXRjaF9zdGFydCBpc1xuICogZ2FyYmFnZS5cbiAqIElOIGFzc2VydGlvbnM6IGN1cl9tYXRjaCBpcyB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiBmb3IgdGhlIGN1cnJlbnRcbiAqICAgc3RyaW5nIChzdHJzdGFydCkgYW5kIGl0cyBkaXN0YW5jZSBpcyA8PSBNQVhfRElTVCwgYW5kIHByZXZfbGVuZ3RoID49IDFcbiAqIE9VVCBhc3NlcnRpb246IHRoZSBtYXRjaCBsZW5ndGggaXMgbm90IGdyZWF0ZXIgdGhhbiBzLT5sb29rYWhlYWQuXG4gKi9cbmZ1bmN0aW9uIGxvbmdlc3RfbWF0Y2gocywgY3VyX21hdGNoKSB7XG4gIHZhciBjaGFpbl9sZW5ndGggPSBzLm1heF9jaGFpbl9sZW5ndGg7ICAgICAgLyogbWF4IGhhc2ggY2hhaW4gbGVuZ3RoICovXG4gIHZhciBzY2FuID0gcy5zdHJzdGFydDsgLyogY3VycmVudCBzdHJpbmcgKi9cbiAgdmFyIG1hdGNoOyAgICAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2hlZCBzdHJpbmcgKi9cbiAgdmFyIGxlbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBtYXRjaCAqL1xuICB2YXIgYmVzdF9sZW4gPSBzLnByZXZfbGVuZ3RoOyAgICAgICAgICAgICAgLyogYmVzdCBtYXRjaCBsZW5ndGggc28gZmFyICovXG4gIHZhciBuaWNlX21hdGNoID0gcy5uaWNlX21hdGNoOyAgICAgICAgICAgICAvKiBzdG9wIGlmIG1hdGNoIGxvbmcgZW5vdWdoICovXG4gIHZhciBsaW1pdCA9IChzLnN0cnN0YXJ0ID4gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpID9cbiAgICAgIHMuc3Ryc3RhcnQgLSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSA6IDAvKk5JTCovO1xuXG4gIHZhciBfd2luID0gcy53aW5kb3c7IC8vIHNob3J0Y3V0XG5cbiAgdmFyIHdtYXNrID0gcy53X21hc2s7XG4gIHZhciBwcmV2ICA9IHMucHJldjtcblxuICAvKiBTdG9wIHdoZW4gY3VyX21hdGNoIGJlY29tZXMgPD0gbGltaXQuIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLFxuICAgKiB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nIG9mIHdpbmRvdyBpbmRleCAwLlxuICAgKi9cblxuICB2YXIgc3RyZW5kID0gcy5zdHJzdGFydCArIE1BWF9NQVRDSDtcbiAgdmFyIHNjYW5fZW5kMSAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbiAtIDFdO1xuICB2YXIgc2Nhbl9lbmQgICA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTtcblxuICAvKiBUaGUgY29kZSBpcyBvcHRpbWl6ZWQgZm9yIEhBU0hfQklUUyA+PSA4IGFuZCBNQVhfTUFUQ0gtMiBtdWx0aXBsZSBvZiAxNi5cbiAgICogSXQgaXMgZWFzeSB0byBnZXQgcmlkIG9mIHRoaXMgb3B0aW1pemF0aW9uIGlmIG5lY2Vzc2FyeS5cbiAgICovXG4gIC8vIEFzc2VydChzLT5oYXNoX2JpdHMgPj0gOCAmJiBNQVhfTUFUQ0ggPT0gMjU4LCBcIkNvZGUgdG9vIGNsZXZlclwiKTtcblxuICAvKiBEbyBub3Qgd2FzdGUgdG9vIG11Y2ggdGltZSBpZiB3ZSBhbHJlYWR5IGhhdmUgYSBnb29kIG1hdGNoOiAqL1xuICBpZiAocy5wcmV2X2xlbmd0aCA+PSBzLmdvb2RfbWF0Y2gpIHtcbiAgICBjaGFpbl9sZW5ndGggPj49IDI7XG4gIH1cbiAgLyogRG8gbm90IGxvb2sgZm9yIG1hdGNoZXMgYmV5b25kIHRoZSBlbmQgb2YgdGhlIGlucHV0LiBUaGlzIGlzIG5lY2Vzc2FyeVxuICAgKiB0byBtYWtlIGRlZmxhdGUgZGV0ZXJtaW5pc3RpYy5cbiAgICovXG4gIGlmIChuaWNlX21hdGNoID4gcy5sb29rYWhlYWQpIHsgbmljZV9tYXRjaCA9IHMubG9va2FoZWFkOyB9XG5cbiAgLy8gQXNzZXJ0KCh1bGcpcy0+c3Ryc3RhcnQgPD0gcy0+d2luZG93X3NpemUtTUlOX0xPT0tBSEVBRCwgXCJuZWVkIGxvb2thaGVhZFwiKTtcblxuICBkbyB7XG4gICAgLy8gQXNzZXJ0KGN1cl9tYXRjaCA8IHMtPnN0cnN0YXJ0LCBcIm5vIGZ1dHVyZVwiKTtcbiAgICBtYXRjaCA9IGN1cl9tYXRjaDtcblxuICAgIC8qIFNraXAgdG8gbmV4dCBtYXRjaCBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGNhbm5vdCBpbmNyZWFzZVxuICAgICAqIG9yIGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbGVzcyB0aGFuIDIuICBOb3RlIHRoYXQgdGhlIGNoZWNrcyBiZWxvd1xuICAgICAqIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgb2NjdXIgb2NjYXNpb25hbGx5IGZvciBwZXJmb3JtYW5jZVxuICAgICAqIHJlYXNvbnMuICBUaGVyZWZvcmUgdW5pbml0aWFsaXplZCBtZW1vcnkgd2lsbCBiZSBhY2Nlc3NlZCwgYW5kXG4gICAgICogY29uZGl0aW9uYWwganVtcHMgd2lsbCBiZSBtYWRlIHRoYXQgZGVwZW5kIG9uIHRob3NlIHZhbHVlcy5cbiAgICAgKiBIb3dldmVyIHRoZSBsZW5ndGggb2YgdGhlIG1hdGNoIGlzIGxpbWl0ZWQgdG8gdGhlIGxvb2thaGVhZCwgc29cbiAgICAgKiB0aGUgb3V0cHV0IG9mIGRlZmxhdGUgaXMgbm90IGFmZmVjdGVkIGJ5IHRoZSB1bmluaXRpYWxpemVkIHZhbHVlcy5cbiAgICAgKi9cblxuICAgIGlmIChfd2luW21hdGNoICsgYmVzdF9sZW5dICAgICAhPT0gc2Nhbl9lbmQgIHx8XG4gICAgICAgIF93aW5bbWF0Y2ggKyBiZXN0X2xlbiAtIDFdICE9PSBzY2FuX2VuZDEgfHxcbiAgICAgICAgX3dpblttYXRjaF0gICAgICAgICAgICAgICAgIT09IF93aW5bc2Nhbl0gfHxcbiAgICAgICAgX3dpblsrK21hdGNoXSAgICAgICAgICAgICAgIT09IF93aW5bc2NhbiArIDFdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKiBUaGUgY2hlY2sgYXQgYmVzdF9sZW4tMSBjYW4gYmUgcmVtb3ZlZCBiZWNhdXNlIGl0IHdpbGwgYmUgbWFkZVxuICAgICAqIGFnYWluIGxhdGVyLiAoVGhpcyBoZXVyaXN0aWMgaXMgbm90IGFsd2F5cyBhIHdpbi4pXG4gICAgICogSXQgaXMgbm90IG5lY2Vzc2FyeSB0byBjb21wYXJlIHNjYW5bMl0gYW5kIG1hdGNoWzJdIHNpbmNlIHRoZXlcbiAgICAgKiBhcmUgYWx3YXlzIGVxdWFsIHdoZW4gdGhlIG90aGVyIGJ5dGVzIG1hdGNoLCBnaXZlbiB0aGF0XG4gICAgICogdGhlIGhhc2gga2V5cyBhcmUgZXF1YWwgYW5kIHRoYXQgSEFTSF9CSVRTID49IDguXG4gICAgICovXG4gICAgc2NhbiArPSAyO1xuICAgIG1hdGNoKys7XG4gICAgLy8gQXNzZXJ0KCpzY2FuID09ICptYXRjaCwgXCJtYXRjaFsyXT9cIik7XG5cbiAgICAvKiBXZSBjaGVjayBmb3IgaW5zdWZmaWNpZW50IGxvb2thaGVhZCBvbmx5IGV2ZXJ5IDh0aCBjb21wYXJpc29uO1xuICAgICAqIHRoZSAyNTZ0aCBjaGVjayB3aWxsIGJlIG1hZGUgYXQgc3Ryc3RhcnQrMjU4LlxuICAgICAqL1xuICAgIGRvIHtcbiAgICAgIC8qanNoaW50IG5vZW1wdHk6ZmFsc2UqL1xuICAgIH0gd2hpbGUgKF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBzY2FuIDwgc3RyZW5kKTtcblxuICAgIC8vIEFzc2VydChzY2FuIDw9IHMtPndpbmRvdysodW5zaWduZWQpKHMtPndpbmRvd19zaXplLTEpLCBcIndpbGQgc2NhblwiKTtcblxuICAgIGxlbiA9IE1BWF9NQVRDSCAtIChzdHJlbmQgLSBzY2FuKTtcbiAgICBzY2FuID0gc3RyZW5kIC0gTUFYX01BVENIO1xuXG4gICAgaWYgKGxlbiA+IGJlc3RfbGVuKSB7XG4gICAgICBzLm1hdGNoX3N0YXJ0ID0gY3VyX21hdGNoO1xuICAgICAgYmVzdF9sZW4gPSBsZW47XG4gICAgICBpZiAobGVuID49IG5pY2VfbWF0Y2gpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzY2FuX2VuZDEgID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcbiAgICAgIHNjYW5fZW5kICAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbl07XG4gICAgfVxuICB9IHdoaWxlICgoY3VyX21hdGNoID0gcHJldltjdXJfbWF0Y2ggJiB3bWFza10pID4gbGltaXQgJiYgLS1jaGFpbl9sZW5ndGggIT09IDApO1xuXG4gIGlmIChiZXN0X2xlbiA8PSBzLmxvb2thaGVhZCkge1xuICAgIHJldHVybiBiZXN0X2xlbjtcbiAgfVxuICByZXR1cm4gcy5sb29rYWhlYWQ7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGaWxsIHRoZSB3aW5kb3cgd2hlbiB0aGUgbG9va2FoZWFkIGJlY29tZXMgaW5zdWZmaWNpZW50LlxuICogVXBkYXRlcyBzdHJzdGFydCBhbmQgbG9va2FoZWFkLlxuICpcbiAqIElOIGFzc2VydGlvbjogbG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRFxuICogT1VUIGFzc2VydGlvbnM6IHN0cnN0YXJ0IDw9IHdpbmRvd19zaXplLU1JTl9MT09LQUhFQURcbiAqICAgIEF0IGxlYXN0IG9uZSBieXRlIGhhcyBiZWVuIHJlYWQsIG9yIGF2YWlsX2luID09IDA7IHJlYWRzIGFyZVxuICogICAgcGVyZm9ybWVkIGZvciBhdCBsZWFzdCB0d28gYnl0ZXMgKHJlcXVpcmVkIGZvciB0aGUgemlwIHRyYW5zbGF0ZV9lb2xcbiAqICAgIG9wdGlvbiAtLSBub3Qgc3VwcG9ydGVkIGhlcmUpLlxuICovXG5mdW5jdGlvbiBmaWxsX3dpbmRvdyhzKSB7XG4gIHZhciBfd19zaXplID0gcy53X3NpemU7XG4gIHZhciBwLCBuLCBtLCBtb3JlLCBzdHI7XG5cbiAgLy9Bc3NlcnQocy0+bG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCwgXCJhbHJlYWR5IGVub3VnaCBsb29rYWhlYWRcIik7XG5cbiAgZG8ge1xuICAgIG1vcmUgPSBzLndpbmRvd19zaXplIC0gcy5sb29rYWhlYWQgLSBzLnN0cnN0YXJ0O1xuXG4gICAgLy8gSlMgaW50cyBoYXZlIDMyIGJpdCwgYmxvY2sgYmVsb3cgbm90IG5lZWRlZFxuICAgIC8qIERlYWwgd2l0aCAhQCMkJSA2NEsgbGltaXQ6ICovXG4gICAgLy9pZiAoc2l6ZW9mKGludCkgPD0gMikge1xuICAgIC8vICAgIGlmIChtb3JlID09IDAgJiYgcy0+c3Ryc3RhcnQgPT0gMCAmJiBzLT5sb29rYWhlYWQgPT0gMCkge1xuICAgIC8vICAgICAgICBtb3JlID0gd3NpemU7XG4gICAgLy9cbiAgICAvLyAgfSBlbHNlIGlmIChtb3JlID09ICh1bnNpZ25lZCkoLTEpKSB7XG4gICAgLy8gICAgICAgIC8qIFZlcnkgdW5saWtlbHksIGJ1dCBwb3NzaWJsZSBvbiAxNiBiaXQgbWFjaGluZSBpZlxuICAgIC8vICAgICAgICAgKiBzdHJzdGFydCA9PSAwICYmIGxvb2thaGVhZCA9PSAxIChpbnB1dCBkb25lIGEgYnl0ZSBhdCB0aW1lKVxuICAgIC8vICAgICAgICAgKi9cbiAgICAvLyAgICAgICAgbW9yZS0tO1xuICAgIC8vICAgIH1cbiAgICAvL31cblxuXG4gICAgLyogSWYgdGhlIHdpbmRvdyBpcyBhbG1vc3QgZnVsbCBhbmQgdGhlcmUgaXMgaW5zdWZmaWNpZW50IGxvb2thaGVhZCxcbiAgICAgKiBtb3ZlIHRoZSB1cHBlciBoYWxmIHRvIHRoZSBsb3dlciBvbmUgdG8gbWFrZSByb29tIGluIHRoZSB1cHBlciBoYWxmLlxuICAgICAqL1xuICAgIGlmIChzLnN0cnN0YXJ0ID49IF93X3NpemUgKyAoX3dfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSB7XG5cbiAgICAgIHV0aWxzLmFycmF5U2V0KHMud2luZG93LCBzLndpbmRvdywgX3dfc2l6ZSwgX3dfc2l6ZSwgMCk7XG4gICAgICBzLm1hdGNoX3N0YXJ0IC09IF93X3NpemU7XG4gICAgICBzLnN0cnN0YXJ0IC09IF93X3NpemU7XG4gICAgICAvKiB3ZSBub3cgaGF2ZSBzdHJzdGFydCA+PSBNQVhfRElTVCAqL1xuICAgICAgcy5ibG9ja19zdGFydCAtPSBfd19zaXplO1xuXG4gICAgICAvKiBTbGlkZSB0aGUgaGFzaCB0YWJsZSAoY291bGQgYmUgYXZvaWRlZCB3aXRoIDMyIGJpdCB2YWx1ZXNcbiAgICAgICBhdCB0aGUgZXhwZW5zZSBvZiBtZW1vcnkgdXNhZ2UpLiBXZSBzbGlkZSBldmVuIHdoZW4gbGV2ZWwgPT0gMFxuICAgICAgIHRvIGtlZXAgdGhlIGhhc2ggdGFibGUgY29uc2lzdGVudCBpZiB3ZSBzd2l0Y2ggYmFjayB0byBsZXZlbCA+IDBcbiAgICAgICBsYXRlci4gKFVzaW5nIGxldmVsIDAgcGVybWFuZW50bHkgaXMgbm90IGFuIG9wdGltYWwgdXNhZ2Ugb2ZcbiAgICAgICB6bGliLCBzbyB3ZSBkb24ndCBjYXJlIGFib3V0IHRoaXMgcGF0aG9sb2dpY2FsIGNhc2UuKVxuICAgICAgICovXG5cbiAgICAgIG4gPSBzLmhhc2hfc2l6ZTtcbiAgICAgIHAgPSBuO1xuICAgICAgZG8ge1xuICAgICAgICBtID0gcy5oZWFkWy0tcF07XG4gICAgICAgIHMuaGVhZFtwXSA9IChtID49IF93X3NpemUgPyBtIC0gX3dfc2l6ZSA6IDApO1xuICAgICAgfSB3aGlsZSAoLS1uKTtcblxuICAgICAgbiA9IF93X3NpemU7XG4gICAgICBwID0gbjtcbiAgICAgIGRvIHtcbiAgICAgICAgbSA9IHMucHJldlstLXBdO1xuICAgICAgICBzLnByZXZbcF0gPSAobSA+PSBfd19zaXplID8gbSAtIF93X3NpemUgOiAwKTtcbiAgICAgICAgLyogSWYgbiBpcyBub3Qgb24gYW55IGhhc2ggY2hhaW4sIHByZXZbbl0gaXMgZ2FyYmFnZSBidXRcbiAgICAgICAgICogaXRzIHZhbHVlIHdpbGwgbmV2ZXIgYmUgdXNlZC5cbiAgICAgICAgICovXG4gICAgICB9IHdoaWxlICgtLW4pO1xuXG4gICAgICBtb3JlICs9IF93X3NpemU7XG4gICAgfVxuICAgIGlmIChzLnN0cm0uYXZhaWxfaW4gPT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8qIElmIHRoZXJlIHdhcyBubyBzbGlkaW5nOlxuICAgICAqICAgIHN0cnN0YXJ0IDw9IFdTSVpFK01BWF9ESVNULTEgJiYgbG9va2FoZWFkIDw9IE1JTl9MT09LQUhFQUQgLSAxICYmXG4gICAgICogICAgbW9yZSA9PSB3aW5kb3dfc2l6ZSAtIGxvb2thaGVhZCAtIHN0cnN0YXJ0XG4gICAgICogPT4gbW9yZSA+PSB3aW5kb3dfc2l6ZSAtIChNSU5fTE9PS0FIRUFELTEgKyBXU0laRSArIE1BWF9ESVNULTEpXG4gICAgICogPT4gbW9yZSA+PSB3aW5kb3dfc2l6ZSAtIDIqV1NJWkUgKyAyXG4gICAgICogSW4gdGhlIEJJR19NRU0gb3IgTU1BUCBjYXNlIChub3QgeWV0IHN1cHBvcnRlZCksXG4gICAgICogICB3aW5kb3dfc2l6ZSA9PSBpbnB1dF9zaXplICsgTUlOX0xPT0tBSEVBRCAgJiZcbiAgICAgKiAgIHN0cnN0YXJ0ICsgcy0+bG9va2FoZWFkIDw9IGlucHV0X3NpemUgPT4gbW9yZSA+PSBNSU5fTE9PS0FIRUFELlxuICAgICAqIE90aGVyd2lzZSwgd2luZG93X3NpemUgPT0gMipXU0laRSBzbyBtb3JlID49IDIuXG4gICAgICogSWYgdGhlcmUgd2FzIHNsaWRpbmcsIG1vcmUgPj0gV1NJWkUuIFNvIGluIGFsbCBjYXNlcywgbW9yZSA+PSAyLlxuICAgICAqL1xuICAgIC8vQXNzZXJ0KG1vcmUgPj0gMiwgXCJtb3JlIDwgMlwiKTtcbiAgICBuID0gcmVhZF9idWYocy5zdHJtLCBzLndpbmRvdywgcy5zdHJzdGFydCArIHMubG9va2FoZWFkLCBtb3JlKTtcbiAgICBzLmxvb2thaGVhZCArPSBuO1xuXG4gICAgLyogSW5pdGlhbGl6ZSB0aGUgaGFzaCB2YWx1ZSBub3cgdGhhdCB3ZSBoYXZlIHNvbWUgaW5wdXQ6ICovXG4gICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPj0gTUlOX01BVENIKSB7XG4gICAgICBzdHIgPSBzLnN0cnN0YXJ0IC0gcy5pbnNlcnQ7XG4gICAgICBzLmluc19oID0gcy53aW5kb3dbc3RyXTtcblxuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyAxXSk7ICovXG4gICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzdHIgKyAxXSkgJiBzLmhhc2hfbWFzaztcbi8vI2lmIE1JTl9NQVRDSCAhPSAzXG4vLyAgICAgICAgQ2FsbCB1cGRhdGVfaGFzaCgpIE1JTl9NQVRDSC0zIG1vcmUgdGltZXNcbi8vI2VuZGlmXG4gICAgICB3aGlsZSAocy5pbnNlcnQpIHtcbiAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyBNSU5fTUFUQ0gtMV0pOyAqL1xuICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzdHIgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcblxuICAgICAgICBzLnByZXZbc3RyICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzdHI7XG4gICAgICAgIHN0cisrO1xuICAgICAgICBzLmluc2VydC0tO1xuICAgICAgICBpZiAocy5sb29rYWhlYWQgKyBzLmluc2VydCA8IE1JTl9NQVRDSCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qIElmIHRoZSB3aG9sZSBpbnB1dCBoYXMgbGVzcyB0aGFuIE1JTl9NQVRDSCBieXRlcywgaW5zX2ggaXMgZ2FyYmFnZSxcbiAgICAgKiBidXQgdGhpcyBpcyBub3QgaW1wb3J0YW50IHNpbmNlIG9ubHkgbGl0ZXJhbCBieXRlcyB3aWxsIGJlIGVtaXR0ZWQuXG4gICAgICovXG5cbiAgfSB3aGlsZSAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIHMuc3RybS5hdmFpbF9pbiAhPT0gMCk7XG5cbiAgLyogSWYgdGhlIFdJTl9JTklUIGJ5dGVzIGFmdGVyIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgZGF0YSBoYXZlIG5ldmVyIGJlZW5cbiAgICogd3JpdHRlbiwgdGhlbiB6ZXJvIHRob3NlIGJ5dGVzIGluIG9yZGVyIHRvIGF2b2lkIG1lbW9yeSBjaGVjayByZXBvcnRzIG9mXG4gICAqIHRoZSB1c2Ugb2YgdW5pbml0aWFsaXplZCAob3IgdW5pbml0aWFsaXNlZCBhcyBKdWxpYW4gd3JpdGVzKSBieXRlcyBieVxuICAgKiB0aGUgbG9uZ2VzdCBtYXRjaCByb3V0aW5lcy4gIFVwZGF0ZSB0aGUgaGlnaCB3YXRlciBtYXJrIGZvciB0aGUgbmV4dFxuICAgKiB0aW1lIHRocm91Z2ggaGVyZS4gIFdJTl9JTklUIGlzIHNldCB0byBNQVhfTUFUQ0ggc2luY2UgdGhlIGxvbmdlc3QgbWF0Y2hcbiAgICogcm91dGluZXMgYWxsb3cgc2Nhbm5pbmcgdG8gc3Ryc3RhcnQgKyBNQVhfTUFUQ0gsIGlnbm9yaW5nIGxvb2thaGVhZC5cbiAgICovXG4vLyAgaWYgKHMuaGlnaF93YXRlciA8IHMud2luZG93X3NpemUpIHtcbi8vICAgIHZhciBjdXJyID0gcy5zdHJzdGFydCArIHMubG9va2FoZWFkO1xuLy8gICAgdmFyIGluaXQgPSAwO1xuLy9cbi8vICAgIGlmIChzLmhpZ2hfd2F0ZXIgPCBjdXJyKSB7XG4vLyAgICAgIC8qIFByZXZpb3VzIGhpZ2ggd2F0ZXIgbWFyayBiZWxvdyBjdXJyZW50IGRhdGEgLS0gemVybyBXSU5fSU5JVFxuLy8gICAgICAgKiBieXRlcyBvciB1cCB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy5cbi8vICAgICAgICovXG4vLyAgICAgIGluaXQgPSBzLndpbmRvd19zaXplIC0gY3Vycjtcbi8vICAgICAgaWYgKGluaXQgPiBXSU5fSU5JVClcbi8vICAgICAgICBpbml0ID0gV0lOX0lOSVQ7XG4vLyAgICAgIHptZW16ZXJvKHMtPndpbmRvdyArIGN1cnIsICh1bnNpZ25lZClpbml0KTtcbi8vICAgICAgcy0+aGlnaF93YXRlciA9IGN1cnIgKyBpbml0O1xuLy8gICAgfVxuLy8gICAgZWxzZSBpZiAocy0+aGlnaF93YXRlciA8ICh1bGcpY3VyciArIFdJTl9JTklUKSB7XG4vLyAgICAgIC8qIEhpZ2ggd2F0ZXIgbWFyayBhdCBvciBhYm92ZSBjdXJyZW50IGRhdGEsIGJ1dCBiZWxvdyBjdXJyZW50IGRhdGFcbi8vICAgICAgICogcGx1cyBXSU5fSU5JVCAtLSB6ZXJvIG91dCB0byBjdXJyZW50IGRhdGEgcGx1cyBXSU5fSU5JVCwgb3IgdXBcbi8vICAgICAgICogdG8gZW5kIG9mIHdpbmRvdywgd2hpY2hldmVyIGlzIGxlc3MuXG4vLyAgICAgICAqL1xuLy8gICAgICBpbml0ID0gKHVsZyljdXJyICsgV0lOX0lOSVQgLSBzLT5oaWdoX3dhdGVyO1xuLy8gICAgICBpZiAoaW5pdCA+IHMtPndpbmRvd19zaXplIC0gcy0+aGlnaF93YXRlcilcbi8vICAgICAgICBpbml0ID0gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyO1xuLy8gICAgICB6bWVtemVybyhzLT53aW5kb3cgKyBzLT5oaWdoX3dhdGVyLCAodW5zaWduZWQpaW5pdCk7XG4vLyAgICAgIHMtPmhpZ2hfd2F0ZXIgKz0gaW5pdDtcbi8vICAgIH1cbi8vICB9XG4vL1xuLy8gIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplIC0gTUlOX0xPT0tBSEVBRCxcbi8vICAgIFwibm90IGVub3VnaCByb29tIGZvciBzZWFyY2hcIik7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weSB3aXRob3V0IGNvbXByZXNzaW9uIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm5cbiAqIHRoZSBjdXJyZW50IGJsb2NrIHN0YXRlLlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBpbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGRpY3Rpb25hcnkgc2luY2VcbiAqIHVuY29tcHJlc3NpYmxlIGRhdGEgaXMgcHJvYmFibHkgbm90IHVzZWZ1bC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VkXG4gKiBvbmx5IGZvciB0aGUgbGV2ZWw9MCBjb21wcmVzc2lvbiBvcHRpb24uXG4gKiBOT1RFOiB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBvcHRpbWl6ZWQgdG8gYXZvaWQgZXh0cmEgY29weWluZyBmcm9tXG4gKiB3aW5kb3cgdG8gcGVuZGluZ19idWYuXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfc3RvcmVkKHMsIGZsdXNoKSB7XG4gIC8qIFN0b3JlZCBibG9ja3MgYXJlIGxpbWl0ZWQgdG8gMHhmZmZmIGJ5dGVzLCBwZW5kaW5nX2J1ZiBpcyBsaW1pdGVkXG4gICAqIHRvIHBlbmRpbmdfYnVmX3NpemUsIGFuZCBlYWNoIHN0b3JlZCBibG9jayBoYXMgYSA1IGJ5dGUgaGVhZGVyOlxuICAgKi9cbiAgdmFyIG1heF9ibG9ja19zaXplID0gMHhmZmZmO1xuXG4gIGlmIChtYXhfYmxvY2tfc2l6ZSA+IHMucGVuZGluZ19idWZfc2l6ZSAtIDUpIHtcbiAgICBtYXhfYmxvY2tfc2l6ZSA9IHMucGVuZGluZ19idWZfc2l6ZSAtIDU7XG4gIH1cblxuICAvKiBDb3B5IGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSBpbnB1dCB0byBvdXRwdXQ6ICovXG4gIGZvciAoOzspIHtcbiAgICAvKiBGaWxsIHRoZSB3aW5kb3cgYXMgbXVjaCBhcyBwb3NzaWJsZTogKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPD0gMSkge1xuXG4gICAgICAvL0Fzc2VydChzLT5zdHJzdGFydCA8IHMtPndfc2l6ZStNQVhfRElTVChzKSB8fFxuICAgICAgLy8gIHMtPmJsb2NrX3N0YXJ0ID49IChsb25nKXMtPndfc2l6ZSwgXCJzbGlkZSB0b28gbGF0ZVwiKTtcbi8vICAgICAgaWYgKCEocy5zdHJzdGFydCA8IHMud19zaXplICsgKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkgfHxcbi8vICAgICAgICBzLmJsb2NrX3N0YXJ0ID49IHMud19zaXplKSkge1xuLy8gICAgICAgIHRocm93ICBuZXcgRXJyb3IoXCJzbGlkZSB0b28gbGF0ZVwiKTtcbi8vICAgICAgfVxuXG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuXG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgIH1cbiAgICAvL0Fzc2VydChzLT5ibG9ja19zdGFydCA+PSAwTCwgXCJibG9jayBnb25lXCIpO1xuLy8gICAgaWYgKHMuYmxvY2tfc3RhcnQgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJibG9jayBnb25lXCIpO1xuXG4gICAgcy5zdHJzdGFydCArPSBzLmxvb2thaGVhZDtcbiAgICBzLmxvb2thaGVhZCA9IDA7XG5cbiAgICAvKiBFbWl0IGEgc3RvcmVkIGJsb2NrIGlmIHBlbmRpbmdfYnVmIHdpbGwgYmUgZnVsbDogKi9cbiAgICB2YXIgbWF4X3N0YXJ0ID0gcy5ibG9ja19zdGFydCArIG1heF9ibG9ja19zaXplO1xuXG4gICAgaWYgKHMuc3Ryc3RhcnQgPT09IDAgfHwgcy5zdHJzdGFydCA+PSBtYXhfc3RhcnQpIHtcbiAgICAgIC8qIHN0cnN0YXJ0ID09IDAgaXMgcG9zc2libGUgd2hlbiB3cmFwYXJvdW5kIG9uIDE2LWJpdCBtYWNoaW5lICovXG4gICAgICBzLmxvb2thaGVhZCA9IHMuc3Ryc3RhcnQgLSBtYXhfc3RhcnQ7XG4gICAgICBzLnN0cnN0YXJ0ID0gbWF4X3N0YXJ0O1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cblxuXG4gICAgfVxuICAgIC8qIEZsdXNoIGlmIHdlIG1heSBoYXZlIHRvIHNsaWRlLCBvdGhlcndpc2UgYmxvY2tfc3RhcnQgbWF5IGJlY29tZVxuICAgICAqIG5lZ2F0aXZlIGFuZCB0aGUgZGF0YSB3aWxsIGJlIGdvbmU6XG4gICAgICovXG4gICAgaWYgKHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0ID49IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuXG4gIHMuaW5zZXJ0ID0gMDtcblxuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cblxuICBpZiAocy5zdHJzdGFydCA+IHMuYmxvY2tfc3RhcnQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cblxuICByZXR1cm4gQlNfTkVFRF9NT1JFO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXByZXNzIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm4gdGhlIGN1cnJlbnRcbiAqIGJsb2NrIHN0YXRlLlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBwZXJmb3JtIGxhenkgZXZhbHVhdGlvbiBvZiBtYXRjaGVzIGFuZCBpbnNlcnRzXG4gKiBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBvbmx5IGZvciB1bm1hdGNoZWQgc3RyaW5ncyBvciBmb3Igc2hvcnRcbiAqIG1hdGNoZXMuIEl0IGlzIHVzZWQgb25seSBmb3IgdGhlIGZhc3QgY29tcHJlc3Npb24gb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9mYXN0KHMsIGZsdXNoKSB7XG4gIHZhciBoYXNoX2hlYWQ7ICAgICAgICAvKiBoZWFkIG9mIHRoZSBoYXNoIGNoYWluICovXG4gIHZhciBiZmx1c2g7ICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG4gICAgICogYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcbiAgICAgKiBmb3IgdGhlIG5leHQgbWF0Y2gsIHBsdXMgTUlOX01BVENIIGJ5dGVzIHRvIGluc2VydCB0aGVcbiAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQpIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgIGJyZWFrOyAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEluc2VydCB0aGUgc3RyaW5nIHdpbmRvd1tzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGVcbiAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjpcbiAgICAgKi9cbiAgICBoYXNoX2hlYWQgPSAwLypOSUwqLztcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgLyoqKi9cbiAgICB9XG5cbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuICAgICAqIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBhbHdheXMgbWF0Y2hfbGVuZ3RoIDwgTUlOX01BVENIXG4gICAgICovXG4gICAgaWYgKGhhc2hfaGVhZCAhPT0gMC8qTklMKi8gJiYgKChzLnN0cnN0YXJ0IC0gaGFzaF9oZWFkKSA8PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkpIHtcbiAgICAgIC8qIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nXG4gICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcbiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7XG4gICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqL1xuICAgIH1cbiAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIKSB7XG4gICAgICAvLyBjaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LCBzLm1hdGNoX3N0YXJ0LCBzLm1hdGNoX2xlbmd0aCk7IC8vIGZvciBkZWJ1ZyBvbmx5XG5cbiAgICAgIC8qKiogX3RyX3RhbGx5X2Rpc3Qocywgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCk7XG5cbiAgICAgIHMubG9va2FoZWFkIC09IHMubWF0Y2hfbGVuZ3RoO1xuXG4gICAgICAvKiBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoXG4gICAgICAgKiBpcyBub3QgdG9vIGxhcmdlLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxuICAgICAgICovXG4gICAgICBpZiAocy5tYXRjaF9sZW5ndGggPD0gcy5tYXhfbGF6eV9tYXRjaC8qbWF4X2luc2VydF9sZW5ndGgqLyAmJiBzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgICAgcy5tYXRjaF9sZW5ndGgtLTsgLyogc3RyaW5nIGF0IHN0cnN0YXJ0IGFscmVhZHkgaW4gdGFibGUgKi9cbiAgICAgICAgZG8ge1xuICAgICAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcbiAgICAgICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgICAgIC8qKiovXG4gICAgICAgICAgLyogc3Ryc3RhcnQgbmV2ZXIgZXhjZWVkcyBXU0laRS1NQVhfTUFUQ0gsIHNvIHRoZXJlIGFyZVxuICAgICAgICAgICAqIGFsd2F5cyBNSU5fTUFUQ0ggYnl0ZXMgYWhlYWQuXG4gICAgICAgICAgICovXG4gICAgICAgIH0gd2hpbGUgKC0tcy5tYXRjaF9sZW5ndGggIT09IDApO1xuICAgICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICB9IGVsc2VcbiAgICAgIHtcbiAgICAgICAgcy5zdHJzdGFydCArPSBzLm1hdGNoX2xlbmd0aDtcbiAgICAgICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgICAgICBzLmluc19oID0gcy53aW5kb3dbcy5zdHJzdGFydF07XG4gICAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMuaW5zX2gsIHMud2luZG93W3Muc3Ryc3RhcnQrMV0pOyAqL1xuICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgMV0pICYgcy5oYXNoX21hc2s7XG5cbi8vI2lmIE1JTl9NQVRDSCAhPSAzXG4vLyAgICAgICAgICAgICAgICBDYWxsIFVQREFURV9IQVNIKCkgTUlOX01BVENILTMgbW9yZSB0aW1lc1xuLy8jZW5kaWZcbiAgICAgICAgLyogSWYgbG9va2FoZWFkIDwgTUlOX01BVENILCBpbnNfaCBpcyBnYXJiYWdlLCBidXQgaXQgZG9lcyBub3RcbiAgICAgICAgICogbWF0dGVyIHNpbmNlIGl0IHdpbGwgYmUgcmVjb21wdXRlZCBhdCBuZXh0IGRlZmxhdGUgY2FsbC5cbiAgICAgICAgICovXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy53aW5kb3dbcy5zdHJzdGFydF0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcblxuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAoKHMuc3Ryc3RhcnQgPCAoTUlOX01BVENIIC0gMSkpID8gcy5zdHJzdGFydCA6IE1JTl9NQVRDSCAtIDEpO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMubGFzdF9saXQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2FtZSBhcyBhYm92ZSwgYnV0IGFjaGlldmVzIGJldHRlciBjb21wcmVzc2lvbi4gV2UgdXNlIGEgbGF6eVxuICogZXZhbHVhdGlvbiBmb3IgbWF0Y2hlczogYSBtYXRjaCBpcyBmaW5hbGx5IGFkb3B0ZWQgb25seSBpZiB0aGVyZSBpc1xuICogbm8gYmV0dGVyIG1hdGNoIGF0IHRoZSBuZXh0IHdpbmRvdyBwb3NpdGlvbi5cbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9zbG93KHMsIGZsdXNoKSB7XG4gIHZhciBoYXNoX2hlYWQ7ICAgICAgICAgIC8qIGhlYWQgb2YgaGFzaCBjaGFpbiAqL1xuICB2YXIgYmZsdXNoOyAgICAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgdmFyIG1heF9pbnNlcnQ7XG5cbiAgLyogUHJvY2VzcyB0aGUgaW5wdXQgYmxvY2suICovXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuICAgICAqIGZvciB0aGUgbmV4dCBtYXRjaCwgcGx1cyBNSU5fTUFUQ0ggYnl0ZXMgdG8gaW5zZXJ0IHRoZVxuICAgICAqIHN0cmluZyBmb2xsb3dpbmcgdGhlIG5leHQgbWF0Y2guXG4gICAgICovXG4gICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsgYnJlYWs7IH0gLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlXG4gICAgICogZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG4gICAgICovXG4gICAgaGFzaF9oZWFkID0gMC8qTklMKi87XG4gICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcbiAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgIC8qKiovXG4gICAgfVxuXG4gICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cbiAgICAgKi9cbiAgICBzLnByZXZfbGVuZ3RoID0gcy5tYXRjaF9sZW5ndGg7XG4gICAgcy5wcmV2X21hdGNoID0gcy5tYXRjaF9zdGFydDtcbiAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG5cbiAgICBpZiAoaGFzaF9oZWFkICE9PSAwLypOSUwqLyAmJiBzLnByZXZfbGVuZ3RoIDwgcy5tYXhfbGF6eV9tYXRjaCAmJlxuICAgICAgICBzLnN0cnN0YXJ0IC0gaGFzaF9oZWFkIDw9IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpLypNQVhfRElTVChzKSovKSB7XG4gICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXG4gICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xuICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi9cblxuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IDUgJiZcbiAgICAgICAgIChzLnN0cmF0ZWd5ID09PSBaX0ZJTFRFUkVEIHx8IChzLm1hdGNoX2xlbmd0aCA9PT0gTUlOX01BVENIICYmIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0ID4gNDA5Ni8qVE9PX0ZBUiovKSkpIHtcblxuICAgICAgICAvKiBJZiBwcmV2X21hdGNoIGlzIGFsc28gTUlOX01BVENILCBtYXRjaF9zdGFydCBpcyBnYXJiYWdlXG4gICAgICAgICAqIGJ1dCB3ZSB3aWxsIGlnbm9yZSB0aGUgY3VycmVudCBtYXRjaCBhbnl3YXkuXG4gICAgICAgICAqL1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIElmIHRoZXJlIHdhcyBhIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBzdGVwIGFuZCB0aGUgY3VycmVudFxuICAgICAqIG1hdGNoIGlzIG5vdCBiZXR0ZXIsIG91dHB1dCB0aGUgcHJldmlvdXMgbWF0Y2g6XG4gICAgICovXG4gICAgaWYgKHMucHJldl9sZW5ndGggPj0gTUlOX01BVENIICYmIHMubWF0Y2hfbGVuZ3RoIDw9IHMucHJldl9sZW5ndGgpIHtcbiAgICAgIG1heF9pbnNlcnQgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQgLSBNSU5fTUFUQ0g7XG4gICAgICAvKiBEbyBub3QgaW5zZXJ0IHN0cmluZ3MgaW4gaGFzaCB0YWJsZSBiZXlvbmQgdGhpcy4gKi9cblxuICAgICAgLy9jaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LTEsIHMucHJldl9tYXRjaCwgcy5wcmV2X2xlbmd0aCk7XG5cbiAgICAgIC8qKipfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7KioqL1xuICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIHMuc3Ryc3RhcnQgLSAxIC0gcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoIC0gTUlOX01BVENIKTtcbiAgICAgIC8qIEluc2VydCBpbiBoYXNoIHRhYmxlIGFsbCBzdHJpbmdzIHVwIHRvIHRoZSBlbmQgb2YgdGhlIG1hdGNoLlxuICAgICAgICogc3Ryc3RhcnQtMSBhbmQgc3Ryc3RhcnQgYXJlIGFscmVhZHkgaW5zZXJ0ZWQuIElmIHRoZXJlIGlzIG5vdFxuICAgICAgICogZW5vdWdoIGxvb2thaGVhZCwgdGhlIGxhc3QgdHdvIHN0cmluZ3MgYXJlIG5vdCBpbnNlcnRlZCBpblxuICAgICAgICogdGhlIGhhc2ggdGFibGUuXG4gICAgICAgKi9cbiAgICAgIHMubG9va2FoZWFkIC09IHMucHJldl9sZW5ndGggLSAxO1xuICAgICAgcy5wcmV2X2xlbmd0aCAtPSAyO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoKytzLnN0cnN0YXJ0IDw9IG1heF9pbnNlcnQpIHtcbiAgICAgICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcbiAgICAgICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgICAgIC8qKiovXG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKC0tcy5wcmV2X2xlbmd0aCAhPT0gMCk7XG4gICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gICAgICBzLnN0cnN0YXJ0Kys7XG5cbiAgICAgIGlmIChiZmx1c2gpIHtcbiAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIC8qKiovXG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHMubWF0Y2hfYXZhaWxhYmxlKSB7XG4gICAgICAvKiBJZiB0aGVyZSB3YXMgbm8gbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHBvc2l0aW9uLCBvdXRwdXQgYVxuICAgICAgICogc2luZ2xlIGxpdGVyYWwuIElmIHRoZXJlIHdhcyBhIG1hdGNoIGJ1dCB0aGUgY3VycmVudCBtYXRjaFxuICAgICAgICogaXMgbG9uZ2VyLCB0cnVuY2F0ZSB0aGUgcHJldmlvdXMgbWF0Y2ggdG8gYSBzaW5nbGUgbGl0ZXJhbC5cbiAgICAgICAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydCAtIDFdKTtcblxuICAgICAgaWYgKGJmbHVzaCkge1xuICAgICAgICAvKioqIEZMVVNIX0JMT0NLX09OTFkocywgMCkgKioqL1xuICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgICAgLyoqKi9cbiAgICAgIH1cbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBUaGVyZSBpcyBubyBwcmV2aW91cyBtYXRjaCB0byBjb21wYXJlIHdpdGgsIHdhaXQgZm9yXG4gICAgICAgKiB0aGUgbmV4dCBzdGVwIHRvIGRlY2lkZS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAxO1xuICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGZsdXNoICE9IFpfTk9fRkxVU0gsIFwibm8gZmx1c2g/XCIpO1xuICBpZiAocy5tYXRjaF9hdmFpbGFibGUpIHtcbiAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydC0xXSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovXG4gICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnQgLSAxXSk7XG5cbiAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gIH1cbiAgcy5pbnNlcnQgPSBzLnN0cnN0YXJ0IDwgTUlOX01BVENIIC0gMSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0ggLSAxO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMubGFzdF9saXQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cblxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZvciBaX1JMRSwgc2ltcGx5IGxvb2sgZm9yIHJ1bnMgb2YgYnl0ZXMsIGdlbmVyYXRlIG1hdGNoZXMgb25seSBvZiBkaXN0YW5jZVxuICogb25lLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS4gIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mXG4gKiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBaX1JMRS4pXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVfcmxlKHMsIGZsdXNoKSB7XG4gIHZhciBiZmx1c2g7ICAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG4gIHZhciBwcmV2OyAgICAgICAgICAgICAgLyogYnl0ZSBhdCBkaXN0YW5jZSBvbmUgdG8gbWF0Y2ggKi9cbiAgdmFyIHNjYW4sIHN0cmVuZDsgICAgICAvKiBzY2FuIGdvZXMgdXAgdG8gc3RyZW5kIGZvciBsZW5ndGggb2YgcnVuICovXG5cbiAgdmFyIF93aW4gPSBzLndpbmRvdztcblxuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG4gICAgICogYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcbiAgICAgKiBmb3IgdGhlIGxvbmdlc3QgcnVuLCBwbHVzIG9uZSBmb3IgdGhlIHVucm9sbGVkIGxvb3AuXG4gICAgICovXG4gICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPD0gTUFYX01BVENIICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsgYnJlYWs7IH0gLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG5cbiAgICAvKiBTZWUgaG93IG1hbnkgdGltZXMgdGhlIHByZXZpb3VzIGJ5dGUgcmVwZWF0cyAqL1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIICYmIHMuc3Ryc3RhcnQgPiAwKSB7XG4gICAgICBzY2FuID0gcy5zdHJzdGFydCAtIDE7XG4gICAgICBwcmV2ID0gX3dpbltzY2FuXTtcbiAgICAgIGlmIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSkge1xuICAgICAgICBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgICAgIH0gd2hpbGUgKHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuICAgICAgICBpZiAocy5tYXRjaF9sZW5ndGggPiBzLmxvb2thaGVhZCkge1xuICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gcy5sb29rYWhlYWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1SW50KShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG4gICAgfVxuXG4gICAgLyogRW1pdCBtYXRjaCBpZiBoYXZlIHJ1biBvZiBNSU5fTUFUQ0ggb3IgbG9uZ2VyLCBlbHNlIGVtaXQgbGl0ZXJhbCAqL1xuICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5zdHJzdGFydCAtIDEsIHMubWF0Y2hfbGVuZ3RoKTtcblxuICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTtcblxuICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcblxuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMubGFzdF9saXQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRm9yIFpfSFVGRk1BTl9PTkxZLCBkbyBub3QgbG9vayBmb3IgbWF0Y2hlcy4gIERvIG5vdCBtYWludGFpbiBhIGhhc2ggdGFibGUuXG4gKiAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBIdWZmbWFuLilcbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9odWZmKHMsIGZsdXNoKSB7XG4gIHZhciBiZmx1c2g7ICAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBoYXZlIGEgbGl0ZXJhbCB0byB3cml0ZS4gKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7ICAgICAgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBPdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnRdKSk7XG4gICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG4gICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcbiAgICBzLmxvb2thaGVhZC0tO1xuICAgIHMuc3Ryc3RhcnQrKztcbiAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuICBzLmluc2VydCA9IDA7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn1cblxuLyogVmFsdWVzIGZvciBtYXhfbGF6eV9tYXRjaCwgZ29vZF9tYXRjaCBhbmQgbWF4X2NoYWluX2xlbmd0aCwgZGVwZW5kaW5nIG9uXG4gKiB0aGUgZGVzaXJlZCBwYWNrIGxldmVsICgwLi45KS4gVGhlIHZhbHVlcyBnaXZlbiBiZWxvdyBoYXZlIGJlZW4gdHVuZWQgdG9cbiAqIGV4Y2x1ZGUgd29yc3QgY2FzZSBwZXJmb3JtYW5jZSBmb3IgcGF0aG9sb2dpY2FsIGZpbGVzLiBCZXR0ZXIgdmFsdWVzIG1heSBiZVxuICogZm91bmQgZm9yIHNwZWNpZmljIGZpbGVzLlxuICovXG5mdW5jdGlvbiBDb25maWcoZ29vZF9sZW5ndGgsIG1heF9sYXp5LCBuaWNlX2xlbmd0aCwgbWF4X2NoYWluLCBmdW5jKSB7XG4gIHRoaXMuZ29vZF9sZW5ndGggPSBnb29kX2xlbmd0aDtcbiAgdGhpcy5tYXhfbGF6eSA9IG1heF9sYXp5O1xuICB0aGlzLm5pY2VfbGVuZ3RoID0gbmljZV9sZW5ndGg7XG4gIHRoaXMubWF4X2NoYWluID0gbWF4X2NoYWluO1xuICB0aGlzLmZ1bmMgPSBmdW5jO1xufVxuXG52YXIgY29uZmlndXJhdGlvbl90YWJsZTtcblxuY29uZmlndXJhdGlvbl90YWJsZSA9IFtcbiAgLyogICAgICBnb29kIGxhenkgbmljZSBjaGFpbiAqL1xuICBuZXcgQ29uZmlnKDAsIDAsIDAsIDAsIGRlZmxhdGVfc3RvcmVkKSwgICAgICAgICAgLyogMCBzdG9yZSBvbmx5ICovXG4gIG5ldyBDb25maWcoNCwgNCwgOCwgNCwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgICAvKiAxIG1heCBzcGVlZCwgbm8gbGF6eSBtYXRjaGVzICovXG4gIG5ldyBDb25maWcoNCwgNSwgMTYsIDgsIGRlZmxhdGVfZmFzdCksICAgICAgICAgICAvKiAyICovXG4gIG5ldyBDb25maWcoNCwgNiwgMzIsIDMyLCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAvKiAzICovXG5cbiAgbmV3IENvbmZpZyg0LCA0LCAxNiwgMTYsIGRlZmxhdGVfc2xvdyksICAgICAgICAgIC8qIDQgbGF6eSBtYXRjaGVzICovXG4gIG5ldyBDb25maWcoOCwgMTYsIDMyLCAzMiwgZGVmbGF0ZV9zbG93KSwgICAgICAgICAvKiA1ICovXG4gIG5ldyBDb25maWcoOCwgMTYsIDEyOCwgMTI4LCBkZWZsYXRlX3Nsb3cpLCAgICAgICAvKiA2ICovXG4gIG5ldyBDb25maWcoOCwgMzIsIDEyOCwgMjU2LCBkZWZsYXRlX3Nsb3cpLCAgICAgICAvKiA3ICovXG4gIG5ldyBDb25maWcoMzIsIDEyOCwgMjU4LCAxMDI0LCBkZWZsYXRlX3Nsb3cpLCAgICAvKiA4ICovXG4gIG5ldyBDb25maWcoMzIsIDI1OCwgMjU4LCA0MDk2LCBkZWZsYXRlX3Nsb3cpICAgICAvKiA5IG1heCBjb21wcmVzc2lvbiAqL1xuXTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIFwibG9uZ2VzdCBtYXRjaFwiIHJvdXRpbmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbVxuICovXG5mdW5jdGlvbiBsbV9pbml0KHMpIHtcbiAgcy53aW5kb3dfc2l6ZSA9IDIgKiBzLndfc2l6ZTtcblxuICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi9cbiAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuXG4gIC8qIFNldCB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnM6XG4gICAqL1xuICBzLm1heF9sYXp5X21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfbGF6eTtcbiAgcy5nb29kX21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5nb29kX2xlbmd0aDtcbiAgcy5uaWNlX21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5uaWNlX2xlbmd0aDtcbiAgcy5tYXhfY2hhaW5fbGVuZ3RoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfY2hhaW47XG5cbiAgcy5zdHJzdGFydCA9IDA7XG4gIHMuYmxvY2tfc3RhcnQgPSAwO1xuICBzLmxvb2thaGVhZCA9IDA7XG4gIHMuaW5zZXJ0ID0gMDtcbiAgcy5tYXRjaF9sZW5ndGggPSBzLnByZXZfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICBzLmluc19oID0gMDtcbn1cblxuXG5mdW5jdGlvbiBEZWZsYXRlU3RhdGUoKSB7XG4gIHRoaXMuc3RybSA9IG51bGw7ICAgICAgICAgICAgLyogcG9pbnRlciBiYWNrIHRvIHRoaXMgemxpYiBzdHJlYW0gKi9cbiAgdGhpcy5zdGF0dXMgPSAwOyAgICAgICAgICAgIC8qIGFzIHRoZSBuYW1lIGltcGxpZXMgKi9cbiAgdGhpcy5wZW5kaW5nX2J1ZiA9IG51bGw7ICAgICAgLyogb3V0cHV0IHN0aWxsIHBlbmRpbmcgKi9cbiAgdGhpcy5wZW5kaW5nX2J1Zl9zaXplID0gMDsgIC8qIHNpemUgb2YgcGVuZGluZ19idWYgKi9cbiAgdGhpcy5wZW5kaW5nX291dCA9IDA7ICAgICAgIC8qIG5leHQgcGVuZGluZyBieXRlIHRvIG91dHB1dCB0byB0aGUgc3RyZWFtICovXG4gIHRoaXMucGVuZGluZyA9IDA7ICAgICAgICAgICAvKiBuYiBvZiBieXRlcyBpbiB0aGUgcGVuZGluZyBidWZmZXIgKi9cbiAgdGhpcy53cmFwID0gMDsgICAgICAgICAgICAgIC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi9cbiAgdGhpcy5nemhlYWQgPSBudWxsOyAgICAgICAgIC8qIGd6aXAgaGVhZGVyIGluZm9ybWF0aW9uIHRvIHdyaXRlICovXG4gIHRoaXMuZ3ppbmRleCA9IDA7ICAgICAgICAgICAvKiB3aGVyZSBpbiBleHRyYSwgbmFtZSwgb3IgY29tbWVudCAqL1xuICB0aGlzLm1ldGhvZCA9IFpfREVGTEFURUQ7IC8qIGNhbiBvbmx5IGJlIERFRkxBVEVEICovXG4gIHRoaXMubGFzdF9mbHVzaCA9IC0xOyAgIC8qIHZhbHVlIG9mIGZsdXNoIHBhcmFtIGZvciBwcmV2aW91cyBkZWZsYXRlIGNhbGwgKi9cblxuICB0aGlzLndfc2l6ZSA9IDA7ICAvKiBMWjc3IHdpbmRvdyBzaXplICgzMksgYnkgZGVmYXVsdCkgKi9cbiAgdGhpcy53X2JpdHMgPSAwOyAgLyogbG9nMih3X3NpemUpICAoOC4uMTYpICovXG4gIHRoaXMud19tYXNrID0gMDsgIC8qIHdfc2l6ZSAtIDEgKi9cblxuICB0aGlzLndpbmRvdyA9IG51bGw7XG4gIC8qIFNsaWRpbmcgd2luZG93LiBJbnB1dCBieXRlcyBhcmUgcmVhZCBpbnRvIHRoZSBzZWNvbmQgaGFsZiBvZiB0aGUgd2luZG93LFxuICAgKiBhbmQgbW92ZSB0byB0aGUgZmlyc3QgaGFsZiBsYXRlciB0byBrZWVwIGEgZGljdGlvbmFyeSBvZiBhdCBsZWFzdCB3U2l6ZVxuICAgKiBieXRlcy4gV2l0aCB0aGlzIG9yZ2FuaXphdGlvbiwgbWF0Y2hlcyBhcmUgbGltaXRlZCB0byBhIGRpc3RhbmNlIG9mXG4gICAqIHdTaXplLU1BWF9NQVRDSCBieXRlcywgYnV0IHRoaXMgZW5zdXJlcyB0aGF0IElPIGlzIGFsd2F5c1xuICAgKiBwZXJmb3JtZWQgd2l0aCBhIGxlbmd0aCBtdWx0aXBsZSBvZiB0aGUgYmxvY2sgc2l6ZS5cbiAgICovXG5cbiAgdGhpcy53aW5kb3dfc2l6ZSA9IDA7XG4gIC8qIEFjdHVhbCBzaXplIG9mIHdpbmRvdzogMip3U2l6ZSwgZXhjZXB0IHdoZW4gdGhlIHVzZXIgaW5wdXQgYnVmZmVyXG4gICAqIGlzIGRpcmVjdGx5IHVzZWQgYXMgc2xpZGluZyB3aW5kb3cuXG4gICAqL1xuXG4gIHRoaXMucHJldiA9IG51bGw7XG4gIC8qIExpbmsgdG8gb2xkZXIgc3RyaW5nIHdpdGggc2FtZSBoYXNoIGluZGV4LiBUbyBsaW1pdCB0aGUgc2l6ZSBvZiB0aGlzXG4gICAqIGFycmF5IHRvIDY0SywgdGhpcyBsaW5rIGlzIG1haW50YWluZWQgb25seSBmb3IgdGhlIGxhc3QgMzJLIHN0cmluZ3MuXG4gICAqIEFuIGluZGV4IGluIHRoaXMgYXJyYXkgaXMgdGh1cyBhIHdpbmRvdyBpbmRleCBtb2R1bG8gMzJLLlxuICAgKi9cblxuICB0aGlzLmhlYWQgPSBudWxsOyAgIC8qIEhlYWRzIG9mIHRoZSBoYXNoIGNoYWlucyBvciBOSUwuICovXG5cbiAgdGhpcy5pbnNfaCA9IDA7ICAgICAgIC8qIGhhc2ggaW5kZXggb2Ygc3RyaW5nIHRvIGJlIGluc2VydGVkICovXG4gIHRoaXMuaGFzaF9zaXplID0gMDsgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgaW4gaGFzaCB0YWJsZSAqL1xuICB0aGlzLmhhc2hfYml0cyA9IDA7ICAgLyogbG9nMihoYXNoX3NpemUpICovXG4gIHRoaXMuaGFzaF9tYXNrID0gMDsgICAvKiBoYXNoX3NpemUtMSAqL1xuXG4gIHRoaXMuaGFzaF9zaGlmdCA9IDA7XG4gIC8qIE51bWJlciBvZiBiaXRzIGJ5IHdoaWNoIGluc19oIG11c3QgYmUgc2hpZnRlZCBhdCBlYWNoIGlucHV0XG4gICAqIHN0ZXAuIEl0IG11c3QgYmUgc3VjaCB0aGF0IGFmdGVyIE1JTl9NQVRDSCBzdGVwcywgdGhlIG9sZGVzdFxuICAgKiBieXRlIG5vIGxvbmdlciB0YWtlcyBwYXJ0IGluIHRoZSBoYXNoIGtleSwgdGhhdCBpczpcbiAgICogICBoYXNoX3NoaWZ0ICogTUlOX01BVENIID49IGhhc2hfYml0c1xuICAgKi9cblxuICB0aGlzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgLyogV2luZG93IHBvc2l0aW9uIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGN1cnJlbnQgb3V0cHV0IGJsb2NrLiBHZXRzXG4gICAqIG5lZ2F0aXZlIHdoZW4gdGhlIHdpbmRvdyBpcyBtb3ZlZCBiYWNrd2FyZHMuXG4gICAqL1xuXG4gIHRoaXMubWF0Y2hfbGVuZ3RoID0gMDsgICAgICAvKiBsZW5ndGggb2YgYmVzdCBtYXRjaCAqL1xuICB0aGlzLnByZXZfbWF0Y2ggPSAwOyAgICAgICAgLyogcHJldmlvdXMgbWF0Y2ggKi9cbiAgdGhpcy5tYXRjaF9hdmFpbGFibGUgPSAwOyAgIC8qIHNldCBpZiBwcmV2aW91cyBtYXRjaCBleGlzdHMgKi9cbiAgdGhpcy5zdHJzdGFydCA9IDA7ICAgICAgICAgIC8qIHN0YXJ0IG9mIHN0cmluZyB0byBpbnNlcnQgKi9cbiAgdGhpcy5tYXRjaF9zdGFydCA9IDA7ICAgICAgIC8qIHN0YXJ0IG9mIG1hdGNoaW5nIHN0cmluZyAqL1xuICB0aGlzLmxvb2thaGVhZCA9IDA7ICAgICAgICAgLyogbnVtYmVyIG9mIHZhbGlkIGJ5dGVzIGFoZWFkIGluIHdpbmRvdyAqL1xuXG4gIHRoaXMucHJldl9sZW5ndGggPSAwO1xuICAvKiBMZW5ndGggb2YgdGhlIGJlc3QgbWF0Y2ggYXQgcHJldmlvdXMgc3RlcC4gTWF0Y2hlcyBub3QgZ3JlYXRlciB0aGFuIHRoaXNcbiAgICogYXJlIGRpc2NhcmRlZC4gVGhpcyBpcyB1c2VkIGluIHRoZSBsYXp5IG1hdGNoIGV2YWx1YXRpb24uXG4gICAqL1xuXG4gIHRoaXMubWF4X2NoYWluX2xlbmd0aCA9IDA7XG4gIC8qIFRvIHNwZWVkIHVwIGRlZmxhdGlvbiwgaGFzaCBjaGFpbnMgYXJlIG5ldmVyIHNlYXJjaGVkIGJleW9uZCB0aGlzXG4gICAqIGxlbmd0aC4gIEEgaGlnaGVyIGxpbWl0IGltcHJvdmVzIGNvbXByZXNzaW9uIHJhdGlvIGJ1dCBkZWdyYWRlcyB0aGVcbiAgICogc3BlZWQuXG4gICAqL1xuXG4gIHRoaXMubWF4X2xhenlfbWF0Y2ggPSAwO1xuICAvKiBBdHRlbXB0IHRvIGZpbmQgYSBiZXR0ZXIgbWF0Y2ggb25seSB3aGVuIHRoZSBjdXJyZW50IG1hdGNoIGlzIHN0cmljdGx5XG4gICAqIHNtYWxsZXIgdGhhbiB0aGlzIHZhbHVlLiBUaGlzIG1lY2hhbmlzbSBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uXG4gICAqIGxldmVscyA+PSA0LlxuICAgKi9cbiAgLy8gVGhhdCdzIGFsaWFzIHRvIG1heF9sYXp5X21hdGNoLCBkb24ndCB1c2UgZGlyZWN0bHlcbiAgLy90aGlzLm1heF9pbnNlcnRfbGVuZ3RoID0gMDtcbiAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBub3RcbiAgICogZ3JlYXRlciB0aGFuIHRoaXMgbGVuZ3RoLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxuICAgKiBtYXhfaW5zZXJ0X2xlbmd0aCBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uIGxldmVscyA8PSAzLlxuICAgKi9cblxuICB0aGlzLmxldmVsID0gMDsgICAgIC8qIGNvbXByZXNzaW9uIGxldmVsICgxLi45KSAqL1xuICB0aGlzLnN0cmF0ZWd5ID0gMDsgIC8qIGZhdm9yIG9yIGZvcmNlIEh1ZmZtYW4gY29kaW5nKi9cblxuICB0aGlzLmdvb2RfbWF0Y2ggPSAwO1xuICAvKiBVc2UgYSBmYXN0ZXIgc2VhcmNoIHdoZW4gdGhlIHByZXZpb3VzIG1hdGNoIGlzIGxvbmdlciB0aGFuIHRoaXMgKi9cblxuICB0aGlzLm5pY2VfbWF0Y2ggPSAwOyAvKiBTdG9wIHNlYXJjaGluZyB3aGVuIGN1cnJlbnQgbWF0Y2ggZXhjZWVkcyB0aGlzICovXG5cbiAgICAgICAgICAgICAgLyogdXNlZCBieSB0cmVlcy5jOiAqL1xuXG4gIC8qIERpZG4ndCB1c2UgY3RfZGF0YSB0eXBlZGVmIGJlbG93IHRvIHN1cHByZXNzIGNvbXBpbGVyIHdhcm5pbmcgKi9cblxuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9sdHJlZVtIRUFQX1NJWkVdOyAgIC8qIGxpdGVyYWwgYW5kIGxlbmd0aCB0cmVlICovXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgZHluX2R0cmVlWzIqRF9DT0RFUysxXTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGJsX3RyZWVbMipCTF9DT0RFUysxXTsgIC8qIEh1ZmZtYW4gdHJlZSBmb3IgYml0IGxlbmd0aHMgKi9cblxuICAvLyBVc2UgZmxhdCBhcnJheSBvZiBET1VCTEUgc2l6ZSwgd2l0aCBpbnRlcmxlYXZlZCBmYXRhLFxuICAvLyBiZWNhdXNlIEpTIGRvZXMgbm90IHN1cHBvcnQgZWZmZWN0aXZlXG4gIHRoaXMuZHluX2x0cmVlICA9IG5ldyB1dGlscy5CdWYxNihIRUFQX1NJWkUgKiAyKTtcbiAgdGhpcy5keW5fZHRyZWUgID0gbmV3IHV0aWxzLkJ1ZjE2KCgyICogRF9DT0RFUyArIDEpICogMik7XG4gIHRoaXMuYmxfdHJlZSAgICA9IG5ldyB1dGlscy5CdWYxNigoMiAqIEJMX0NPREVTICsgMSkgKiAyKTtcbiAgemVybyh0aGlzLmR5bl9sdHJlZSk7XG4gIHplcm8odGhpcy5keW5fZHRyZWUpO1xuICB6ZXJvKHRoaXMuYmxfdHJlZSk7XG5cbiAgdGhpcy5sX2Rlc2MgICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGxpdGVyYWwgdHJlZSAqL1xuICB0aGlzLmRfZGVzYyAgID0gbnVsbDsgICAgICAgICAvKiBkZXNjLiBmb3IgZGlzdGFuY2UgdHJlZSAqL1xuICB0aGlzLmJsX2Rlc2MgID0gbnVsbDsgICAgICAgICAvKiBkZXNjLiBmb3IgYml0IGxlbmd0aCB0cmVlICovXG5cbiAgLy91c2ggYmxfY291bnRbTUFYX0JJVFMrMV07XG4gIHRoaXMuYmxfY291bnQgPSBuZXcgdXRpbHMuQnVmMTYoTUFYX0JJVFMgKyAxKTtcbiAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCBmb3IgYW4gb3B0aW1hbCB0cmVlICovXG5cbiAgLy9pbnQgaGVhcFsyKkxfQ09ERVMrMV07ICAgICAgLyogaGVhcCB1c2VkIHRvIGJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzICovXG4gIHRoaXMuaGVhcCA9IG5ldyB1dGlscy5CdWYxNigyICogTF9DT0RFUyArIDEpOyAgLyogaGVhcCB1c2VkIHRvIGJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzICovXG4gIHplcm8odGhpcy5oZWFwKTtcblxuICB0aGlzLmhlYXBfbGVuID0gMDsgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGhlYXAgKi9cbiAgdGhpcy5oZWFwX21heCA9IDA7ICAgICAgICAgICAgICAgLyogZWxlbWVudCBvZiBsYXJnZXN0IGZyZXF1ZW5jeSAqL1xuICAvKiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLiBoZWFwWzBdIGlzIG5vdCB1c2VkLlxuICAgKiBUaGUgc2FtZSBoZWFwIGFycmF5IGlzIHVzZWQgdG8gYnVpbGQgYWxsIHRyZWVzLlxuICAgKi9cblxuICB0aGlzLmRlcHRoID0gbmV3IHV0aWxzLkJ1ZjE2KDIgKiBMX0NPREVTICsgMSk7IC8vdWNoIGRlcHRoWzIqTF9DT0RFUysxXTtcbiAgemVybyh0aGlzLmRlcHRoKTtcbiAgLyogRGVwdGggb2YgZWFjaCBzdWJ0cmVlIHVzZWQgYXMgdGllIGJyZWFrZXIgZm9yIHRyZWVzIG9mIGVxdWFsIGZyZXF1ZW5jeVxuICAgKi9cblxuICB0aGlzLmxfYnVmID0gMDsgICAgICAgICAgLyogYnVmZmVyIGluZGV4IGZvciBsaXRlcmFscyBvciBsZW5ndGhzICovXG5cbiAgdGhpcy5saXRfYnVmc2l6ZSA9IDA7XG4gIC8qIFNpemUgb2YgbWF0Y2ggYnVmZmVyIGZvciBsaXRlcmFscy9sZW5ndGhzLiAgVGhlcmUgYXJlIDQgcmVhc29ucyBmb3JcbiAgICogbGltaXRpbmcgbGl0X2J1ZnNpemUgdG8gNjRLOlxuICAgKiAgIC0gZnJlcXVlbmNpZXMgY2FuIGJlIGtlcHQgaW4gMTYgYml0IGNvdW50ZXJzXG4gICAqICAgLSBpZiBjb21wcmVzc2lvbiBpcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgdGhlIGZpcnN0IGJsb2NrLCBhbGwgaW5wdXRcbiAgICogICAgIGRhdGEgaXMgc3RpbGwgaW4gdGhlIHdpbmRvdyBzbyB3ZSBjYW4gc3RpbGwgZW1pdCBhIHN0b3JlZCBibG9jayBldmVuXG4gICAqICAgICB3aGVuIGlucHV0IGNvbWVzIGZyb20gc3RhbmRhcmQgaW5wdXQuICAoVGhpcyBjYW4gYWxzbyBiZSBkb25lIGZvclxuICAgKiAgICAgYWxsIGJsb2NrcyBpZiBsaXRfYnVmc2l6ZSBpcyBub3QgZ3JlYXRlciB0aGFuIDMySy4pXG4gICAqICAgLSBpZiBjb21wcmVzc2lvbiBpcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgYSBmaWxlIHNtYWxsZXIgdGhhbiA2NEssIHdlIGNhblxuICAgKiAgICAgZXZlbiBlbWl0IGEgc3RvcmVkIGZpbGUgaW5zdGVhZCBvZiBhIHN0b3JlZCBibG9jayAoc2F2aW5nIDUgYnl0ZXMpLlxuICAgKiAgICAgVGhpcyBpcyBhcHBsaWNhYmxlIG9ubHkgZm9yIHppcCAobm90IGd6aXAgb3IgemxpYikuXG4gICAqICAgLSBjcmVhdGluZyBuZXcgSHVmZm1hbiB0cmVlcyBsZXNzIGZyZXF1ZW50bHkgbWF5IG5vdCBwcm92aWRlIGZhc3RcbiAgICogICAgIGFkYXB0YXRpb24gdG8gY2hhbmdlcyBpbiB0aGUgaW5wdXQgZGF0YSBzdGF0aXN0aWNzLiAoVGFrZSBmb3JcbiAgICogICAgIGV4YW1wbGUgYSBiaW5hcnkgZmlsZSB3aXRoIHBvb3JseSBjb21wcmVzc2libGUgY29kZSBmb2xsb3dlZCBieVxuICAgKiAgICAgYSBoaWdobHkgY29tcHJlc3NpYmxlIHN0cmluZyB0YWJsZS4pIFNtYWxsZXIgYnVmZmVyIHNpemVzIGdpdmVcbiAgICogICAgIGZhc3QgYWRhcHRhdGlvbiBidXQgaGF2ZSBvZiBjb3Vyc2UgdGhlIG92ZXJoZWFkIG9mIHRyYW5zbWl0dGluZ1xuICAgKiAgICAgdHJlZXMgbW9yZSBmcmVxdWVudGx5LlxuICAgKiAgIC0gSSBjYW4ndCBjb3VudCBhYm92ZSA0XG4gICAqL1xuXG4gIHRoaXMubGFzdF9saXQgPSAwOyAgICAgIC8qIHJ1bm5pbmcgaW5kZXggaW4gbF9idWYgKi9cblxuICB0aGlzLmRfYnVmID0gMDtcbiAgLyogQnVmZmVyIGluZGV4IGZvciBkaXN0YW5jZXMuIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCBkX2J1ZiBhbmQgbF9idWYgaGF2ZVxuICAgKiB0aGUgc2FtZSBudW1iZXIgb2YgZWxlbWVudHMuIFRvIHVzZSBkaWZmZXJlbnQgbGVuZ3RocywgYW4gZXh0cmEgZmxhZ1xuICAgKiBhcnJheSB3b3VsZCBiZSBuZWNlc3NhcnkuXG4gICAqL1xuXG4gIHRoaXMub3B0X2xlbiA9IDA7ICAgICAgIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIG9wdGltYWwgdHJlZXMgKi9cbiAgdGhpcy5zdGF0aWNfbGVuID0gMDsgICAgLyogYml0IGxlbmd0aCBvZiBjdXJyZW50IGJsb2NrIHdpdGggc3RhdGljIHRyZWVzICovXG4gIHRoaXMubWF0Y2hlcyA9IDA7ICAgICAgIC8qIG51bWJlciBvZiBzdHJpbmcgbWF0Y2hlcyBpbiBjdXJyZW50IGJsb2NrICovXG4gIHRoaXMuaW5zZXJ0ID0gMDsgICAgICAgIC8qIGJ5dGVzIGF0IGVuZCBvZiB3aW5kb3cgbGVmdCB0byBpbnNlcnQgKi9cblxuXG4gIHRoaXMuYmlfYnVmID0gMDtcbiAgLyogT3V0cHV0IGJ1ZmZlci4gYml0cyBhcmUgaW5zZXJ0ZWQgc3RhcnRpbmcgYXQgdGhlIGJvdHRvbSAobGVhc3RcbiAgICogc2lnbmlmaWNhbnQgYml0cykuXG4gICAqL1xuICB0aGlzLmJpX3ZhbGlkID0gMDtcbiAgLyogTnVtYmVyIG9mIHZhbGlkIGJpdHMgaW4gYmlfYnVmLiAgQWxsIGJpdHMgYWJvdmUgdGhlIGxhc3QgdmFsaWQgYml0XG4gICAqIGFyZSBhbHdheXMgemVyby5cbiAgICovXG5cbiAgLy8gVXNlZCBmb3Igd2luZG93IG1lbW9yeSBpbml0LiBXZSBzYWZlbHkgaWdub3JlIGl0IGZvciBKUy4gVGhhdCBtYWtlc1xuICAvLyBzZW5zZSBvbmx5IGZvciBwb2ludGVycyBhbmQgbWVtb3J5IGNoZWNrIHRvb2xzLlxuICAvL3RoaXMuaGlnaF93YXRlciA9IDA7XG4gIC8qIEhpZ2ggd2F0ZXIgbWFyayBvZmZzZXQgaW4gd2luZG93IGZvciBpbml0aWFsaXplZCBieXRlcyAtLSBieXRlcyBhYm92ZVxuICAgKiB0aGlzIGFyZSBzZXQgdG8gemVybyBpbiBvcmRlciB0byBhdm9pZCBtZW1vcnkgY2hlY2sgd2FybmluZ3Mgd2hlblxuICAgKiBsb25nZXN0IG1hdGNoIHJvdXRpbmVzIGFjY2VzcyBieXRlcyBwYXN0IHRoZSBpbnB1dC4gIFRoaXMgaXMgdGhlblxuICAgKiB1cGRhdGVkIHRvIHRoZSBuZXcgaGlnaCB3YXRlciBtYXJrLlxuICAgKi9cbn1cblxuXG5mdW5jdGlvbiBkZWZsYXRlUmVzZXRLZWVwKHN0cm0pIHtcbiAgdmFyIHM7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUik7XG4gIH1cblxuICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSAwO1xuICBzdHJtLmRhdGFfdHlwZSA9IFpfVU5LTk9XTjtcblxuICBzID0gc3RybS5zdGF0ZTtcbiAgcy5wZW5kaW5nID0gMDtcbiAgcy5wZW5kaW5nX291dCA9IDA7XG5cbiAgaWYgKHMud3JhcCA8IDApIHtcbiAgICBzLndyYXAgPSAtcy53cmFwO1xuICAgIC8qIHdhcyBtYWRlIG5lZ2F0aXZlIGJ5IGRlZmxhdGUoLi4uLCBaX0ZJTklTSCk7ICovXG4gIH1cbiAgcy5zdGF0dXMgPSAocy53cmFwID8gSU5JVF9TVEFURSA6IEJVU1lfU1RBVEUpO1xuICBzdHJtLmFkbGVyID0gKHMud3JhcCA9PT0gMikgP1xuICAgIDAgIC8vIGNyYzMyKDAsIFpfTlVMTCwgMClcbiAgOlxuICAgIDE7IC8vIGFkbGVyMzIoMCwgWl9OVUxMLCAwKVxuICBzLmxhc3RfZmx1c2ggPSBaX05PX0ZMVVNIO1xuICB0cmVlcy5fdHJfaW5pdChzKTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cblxuZnVuY3Rpb24gZGVmbGF0ZVJlc2V0KHN0cm0pIHtcbiAgdmFyIHJldCA9IGRlZmxhdGVSZXNldEtlZXAoc3RybSk7XG4gIGlmIChyZXQgPT09IFpfT0spIHtcbiAgICBsbV9pbml0KHN0cm0uc3RhdGUpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cblxuZnVuY3Rpb24gZGVmbGF0ZVNldEhlYWRlcihzdHJtLCBoZWFkKSB7XG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgaWYgKHN0cm0uc3RhdGUud3JhcCAhPT0gMikgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RybS5zdGF0ZS5nemhlYWQgPSBoZWFkO1xuICByZXR1cm4gWl9PSztcbn1cblxuXG5mdW5jdGlvbiBkZWZsYXRlSW5pdDIoc3RybSwgbGV2ZWwsIG1ldGhvZCwgd2luZG93Qml0cywgbWVtTGV2ZWwsIHN0cmF0ZWd5KSB7XG4gIGlmICghc3RybSkgeyAvLyA9PT0gWl9OVUxMXG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIHZhciB3cmFwID0gMTtcblxuICBpZiAobGV2ZWwgPT09IFpfREVGQVVMVF9DT01QUkVTU0lPTikge1xuICAgIGxldmVsID0gNjtcbiAgfVxuXG4gIGlmICh3aW5kb3dCaXRzIDwgMCkgeyAvKiBzdXBwcmVzcyB6bGliIHdyYXBwZXIgKi9cbiAgICB3cmFwID0gMDtcbiAgICB3aW5kb3dCaXRzID0gLXdpbmRvd0JpdHM7XG4gIH1cblxuICBlbHNlIGlmICh3aW5kb3dCaXRzID4gMTUpIHtcbiAgICB3cmFwID0gMjsgICAgICAgICAgIC8qIHdyaXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkICovXG4gICAgd2luZG93Qml0cyAtPSAxNjtcbiAgfVxuXG5cbiAgaWYgKG1lbUxldmVsIDwgMSB8fCBtZW1MZXZlbCA+IE1BWF9NRU1fTEVWRUwgfHwgbWV0aG9kICE9PSBaX0RFRkxBVEVEIHx8XG4gICAgd2luZG93Qml0cyA8IDggfHwgd2luZG93Qml0cyA+IDE1IHx8IGxldmVsIDwgMCB8fCBsZXZlbCA+IDkgfHxcbiAgICBzdHJhdGVneSA8IDAgfHwgc3RyYXRlZ3kgPiBaX0ZJWEVEKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUik7XG4gIH1cblxuXG4gIGlmICh3aW5kb3dCaXRzID09PSA4KSB7XG4gICAgd2luZG93Qml0cyA9IDk7XG4gIH1cbiAgLyogdW50aWwgMjU2LWJ5dGUgd2luZG93IGJ1ZyBmaXhlZCAqL1xuXG4gIHZhciBzID0gbmV3IERlZmxhdGVTdGF0ZSgpO1xuXG4gIHN0cm0uc3RhdGUgPSBzO1xuICBzLnN0cm0gPSBzdHJtO1xuXG4gIHMud3JhcCA9IHdyYXA7XG4gIHMuZ3poZWFkID0gbnVsbDtcbiAgcy53X2JpdHMgPSB3aW5kb3dCaXRzO1xuICBzLndfc2l6ZSA9IDEgPDwgcy53X2JpdHM7XG4gIHMud19tYXNrID0gcy53X3NpemUgLSAxO1xuXG4gIHMuaGFzaF9iaXRzID0gbWVtTGV2ZWwgKyA3O1xuICBzLmhhc2hfc2l6ZSA9IDEgPDwgcy5oYXNoX2JpdHM7XG4gIHMuaGFzaF9tYXNrID0gcy5oYXNoX3NpemUgLSAxO1xuICBzLmhhc2hfc2hpZnQgPSB+figocy5oYXNoX2JpdHMgKyBNSU5fTUFUQ0ggLSAxKSAvIE1JTl9NQVRDSCk7XG5cbiAgcy53aW5kb3cgPSBuZXcgdXRpbHMuQnVmOChzLndfc2l6ZSAqIDIpO1xuICBzLmhlYWQgPSBuZXcgdXRpbHMuQnVmMTYocy5oYXNoX3NpemUpO1xuICBzLnByZXYgPSBuZXcgdXRpbHMuQnVmMTYocy53X3NpemUpO1xuXG4gIC8vIERvbid0IG5lZWQgbWVtIGluaXQgbWFnaWMgZm9yIEpTLlxuICAvL3MuaGlnaF93YXRlciA9IDA7ICAvKiBub3RoaW5nIHdyaXR0ZW4gdG8gcy0+d2luZG93IHlldCAqL1xuXG4gIHMubGl0X2J1ZnNpemUgPSAxIDw8IChtZW1MZXZlbCArIDYpOyAvKiAxNksgZWxlbWVudHMgYnkgZGVmYXVsdCAqL1xuXG4gIHMucGVuZGluZ19idWZfc2l6ZSA9IHMubGl0X2J1ZnNpemUgKiA0O1xuXG4gIC8vb3ZlcmxheSA9ICh1c2hmICopIFpBTExPQyhzdHJtLCBzLT5saXRfYnVmc2l6ZSwgc2l6ZW9mKHVzaCkrMik7XG4gIC8vcy0+cGVuZGluZ19idWYgPSAodWNoZiAqKSBvdmVybGF5O1xuICBzLnBlbmRpbmdfYnVmID0gbmV3IHV0aWxzLkJ1Zjgocy5wZW5kaW5nX2J1Zl9zaXplKTtcblxuICAvLyBJdCBpcyBvZmZzZXQgZnJvbSBgcy5wZW5kaW5nX2J1ZmAgKHNpemUgaXMgYHMubGl0X2J1ZnNpemUgKiAyYClcbiAgLy9zLT5kX2J1ZiA9IG92ZXJsYXkgKyBzLT5saXRfYnVmc2l6ZS9zaXplb2YodXNoKTtcbiAgcy5kX2J1ZiA9IDEgKiBzLmxpdF9idWZzaXplO1xuXG4gIC8vcy0+bF9idWYgPSBzLT5wZW5kaW5nX2J1ZiArICgxK3NpemVvZih1c2gpKSpzLT5saXRfYnVmc2l6ZTtcbiAgcy5sX2J1ZiA9ICgxICsgMikgKiBzLmxpdF9idWZzaXplO1xuXG4gIHMubGV2ZWwgPSBsZXZlbDtcbiAgcy5zdHJhdGVneSA9IHN0cmF0ZWd5O1xuICBzLm1ldGhvZCA9IG1ldGhvZDtcblxuICByZXR1cm4gZGVmbGF0ZVJlc2V0KHN0cm0pO1xufVxuXG5mdW5jdGlvbiBkZWZsYXRlSW5pdChzdHJtLCBsZXZlbCkge1xuICByZXR1cm4gZGVmbGF0ZUluaXQyKHN0cm0sIGxldmVsLCBaX0RFRkxBVEVELCBNQVhfV0JJVFMsIERFRl9NRU1fTEVWRUwsIFpfREVGQVVMVF9TVFJBVEVHWSk7XG59XG5cblxuZnVuY3Rpb24gZGVmbGF0ZShzdHJtLCBmbHVzaCkge1xuICB2YXIgb2xkX2ZsdXNoLCBzO1xuICB2YXIgYmVnLCB2YWw7IC8vIGZvciBnemlwIGhlYWRlciB3cml0ZSBvbmx5XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIHx8XG4gICAgZmx1c2ggPiBaX0JMT0NLIHx8IGZsdXNoIDwgMCkge1xuICAgIHJldHVybiBzdHJtID8gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKSA6IFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgcyA9IHN0cm0uc3RhdGU7XG5cbiAgaWYgKCFzdHJtLm91dHB1dCB8fFxuICAgICAgKCFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHx8XG4gICAgICAocy5zdGF0dXMgPT09IEZJTklTSF9TVEFURSAmJiBmbHVzaCAhPT0gWl9GSU5JU0gpKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCAoc3RybS5hdmFpbF9vdXQgPT09IDApID8gWl9CVUZfRVJST1IgOiBaX1NUUkVBTV9FUlJPUik7XG4gIH1cblxuICBzLnN0cm0gPSBzdHJtOyAvKiBqdXN0IGluIGNhc2UgKi9cbiAgb2xkX2ZsdXNoID0gcy5sYXN0X2ZsdXNoO1xuICBzLmxhc3RfZmx1c2ggPSBmbHVzaDtcblxuICAvKiBXcml0ZSB0aGUgaGVhZGVyICovXG4gIGlmIChzLnN0YXR1cyA9PT0gSU5JVF9TVEFURSkge1xuXG4gICAgaWYgKHMud3JhcCA9PT0gMikgeyAvLyBHWklQIGhlYWRlclxuICAgICAgc3RybS5hZGxlciA9IDA7ICAvL2NyYzMyKDBMLCBaX05VTEwsIDApO1xuICAgICAgcHV0X2J5dGUocywgMzEpO1xuICAgICAgcHV0X2J5dGUocywgMTM5KTtcbiAgICAgIHB1dF9ieXRlKHMsIDgpO1xuICAgICAgaWYgKCFzLmd6aGVhZCkgeyAvLyBzLT5nemhlYWQgPT0gWl9OVUxMXG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5sZXZlbCA9PT0gOSA/IDIgOlxuICAgICAgICAgICAgICAgICAgICAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMiA/XG4gICAgICAgICAgICAgICAgICAgICA0IDogMCkpO1xuICAgICAgICBwdXRfYnl0ZShzLCBPU19DT0RFKTtcbiAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50ZXh0ID8gMSA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKHMuZ3poZWFkLmhjcmMgPyAyIDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLmV4dHJhID8gMCA6IDQpICtcbiAgICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5uYW1lID8gMCA6IDgpICtcbiAgICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5jb21tZW50ID8gMCA6IDE2KVxuICAgICAgICApO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC50aW1lICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDgpICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDE2KSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAyNCkgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5sZXZlbCA9PT0gOSA/IDIgOlxuICAgICAgICAgICAgICAgICAgICAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMiA/XG4gICAgICAgICAgICAgICAgICAgICA0IDogMCkpO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5vcyAmIDB4ZmYpO1xuICAgICAgICBpZiAocy5nemhlYWQuZXh0cmEgJiYgcy5nemhlYWQuZXh0cmEubGVuZ3RoKSB7XG4gICAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZik7XG4gICAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7XG4gICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZywgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBFWFRSQV9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSAvLyBERUZMQVRFIGhlYWRlclxuICAgIHtcbiAgICAgIHZhciBoZWFkZXIgPSAoWl9ERUZMQVRFRCArICgocy53X2JpdHMgLSA4KSA8PCA0KSkgPDwgODtcbiAgICAgIHZhciBsZXZlbF9mbGFncyA9IC0xO1xuXG4gICAgICBpZiAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMikge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPCA2KSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMTtcbiAgICAgIH0gZWxzZSBpZiAocy5sZXZlbCA9PT0gNikge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXZlbF9mbGFncyA9IDM7XG4gICAgICB9XG4gICAgICBoZWFkZXIgfD0gKGxldmVsX2ZsYWdzIDw8IDYpO1xuICAgICAgaWYgKHMuc3Ryc3RhcnQgIT09IDApIHsgaGVhZGVyIHw9IFBSRVNFVF9ESUNUOyB9XG4gICAgICBoZWFkZXIgKz0gMzEgLSAoaGVhZGVyICUgMzEpO1xuXG4gICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgICBwdXRTaG9ydE1TQihzLCBoZWFkZXIpO1xuXG4gICAgICAvKiBTYXZlIHRoZSBhZGxlcjMyIG9mIHRoZSBwcmVzZXQgZGljdGlvbmFyeTogKi9cbiAgICAgIGlmIChzLnN0cnN0YXJ0ICE9PSAwKSB7XG4gICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgPj4+IDE2KTtcbiAgICAgICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciAmIDB4ZmZmZik7XG4gICAgICB9XG4gICAgICBzdHJtLmFkbGVyID0gMTsgLy8gYWRsZXIzMigwTCwgWl9OVUxMLCAwKTtcbiAgICB9XG4gIH1cblxuLy8jaWZkZWYgR1pJUFxuICBpZiAocy5zdGF0dXMgPT09IEVYVFJBX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmV4dHJhLyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cblxuICAgICAgd2hpbGUgKHMuZ3ppbmRleCA8IChzLmd6aGVhZC5leHRyYS5sZW5ndGggJiAweGZmZmYpKSB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmFbcy5nemluZGV4XSAmIDB4ZmYpO1xuICAgICAgICBzLmd6aW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgaWYgKHMuZ3ppbmRleCA9PT0gcy5nemhlYWQuZXh0cmEubGVuZ3RoKSB7XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gTkFNRV9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IE5BTUVfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gTkFNRV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5uYW1lLyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cbiAgICAgIC8vaW50IHZhbDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgICAgYmVnID0gcy5wZW5kaW5nO1xuICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgICAgdmFsID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBKUyBzcGVjaWZpYzogbGl0dGxlIG1hZ2ljIHRvIGFkZCB6ZXJvIHRlcm1pbmF0b3IgdG8gZW5kIG9mIHN0cmluZ1xuICAgICAgICBpZiAocy5nemluZGV4IDwgcy5nemhlYWQubmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICB2YWwgPSBzLmd6aGVhZC5uYW1lLmNoYXJDb2RlQXQocy5nemluZGV4KyspICYgMHhmZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHB1dF9ieXRlKHMsIHZhbCk7XG4gICAgICB9IHdoaWxlICh2YWwgIT09IDApO1xuXG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgPT09IDApIHtcbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBDT01NRU5UX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmNvbW1lbnQvKiAhPSBaX05VTEwqLykge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuICAgICAgLy9pbnQgdmFsO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICB2YWwgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5jb21tZW50Lmxlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcbiAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG5cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA9PT0gMCkge1xuICAgICAgICBzLnN0YXR1cyA9IEhDUkNfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcy5zdGF0dXMgPSBIQ1JDX1NUQVRFO1xuICAgIH1cbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IEhDUkNfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQuaGNyYykge1xuICAgICAgaWYgKHMucGVuZGluZyArIDIgPiBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChzLnBlbmRpbmcgKyAyIDw9IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XG4gICAgICAgIHN0cm0uYWRsZXIgPSAwOyAvL2NyYzMyKDBMLCBaX05VTEwsIDApO1xuICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuICAgIH1cbiAgfVxuLy8jZW5kaWZcblxuICAvKiBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlICovXG4gIGlmIChzLnBlbmRpbmcgIT09IDApIHtcbiAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgLyogU2luY2UgYXZhaWxfb3V0IGlzIDAsIGRlZmxhdGUgd2lsbCBiZSBjYWxsZWQgYWdhaW4gd2l0aFxuICAgICAgICogbW9yZSBvdXRwdXQgc3BhY2UsIGJ1dCBwb3NzaWJseSB3aXRoIGJvdGggcGVuZGluZyBhbmRcbiAgICAgICAqIGF2YWlsX2luIGVxdWFsIHRvIHplcm8uIFRoZXJlIHdvbid0IGJlIGFueXRoaW5nIHRvIGRvLFxuICAgICAgICogYnV0IHRoaXMgaXMgbm90IGFuIGVycm9yIHNpdHVhdGlvbiBzbyBtYWtlIHN1cmUgd2VcbiAgICAgICAqIHJldHVybiBPSyBpbnN0ZWFkIG9mIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwgb2YgZGVmbGF0ZTpcbiAgICAgICAqL1xuICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICByZXR1cm4gWl9PSztcbiAgICB9XG5cbiAgICAvKiBNYWtlIHN1cmUgdGhlcmUgaXMgc29tZXRoaW5nIHRvIGRvIGFuZCBhdm9pZCBkdXBsaWNhdGUgY29uc2VjdXRpdmVcbiAgICAgKiBmbHVzaGVzLiBGb3IgcmVwZWF0ZWQgYW5kIHVzZWxlc3MgY2FsbHMgd2l0aCBaX0ZJTklTSCwgd2Uga2VlcFxuICAgICAqIHJldHVybmluZyBaX1NUUkVBTV9FTkQgaW5zdGVhZCBvZiBaX0JVRl9FUlJPUi5cbiAgICAgKi9cbiAgfSBlbHNlIGlmIChzdHJtLmF2YWlsX2luID09PSAwICYmIHJhbmsoZmx1c2gpIDw9IHJhbmsob2xkX2ZsdXNoKSAmJlxuICAgIGZsdXNoICE9PSBaX0ZJTklTSCkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9CVUZfRVJST1IpO1xuICB9XG5cbiAgLyogVXNlciBtdXN0IG5vdCBwcm92aWRlIG1vcmUgaW5wdXQgYWZ0ZXIgdGhlIGZpcnN0IEZJTklTSDogKi9cbiAgaWYgKHMuc3RhdHVzID09PSBGSU5JU0hfU1RBVEUgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9CVUZfRVJST1IpO1xuICB9XG5cbiAgLyogU3RhcnQgYSBuZXcgYmxvY2sgb3IgY29udGludWUgdGhlIGN1cnJlbnQgb25lLlxuICAgKi9cbiAgaWYgKHN0cm0uYXZhaWxfaW4gIT09IDAgfHwgcy5sb29rYWhlYWQgIT09IDAgfHxcbiAgICAoZmx1c2ggIT09IFpfTk9fRkxVU0ggJiYgcy5zdGF0dXMgIT09IEZJTklTSF9TVEFURSkpIHtcbiAgICB2YXIgYnN0YXRlID0gKHMuc3RyYXRlZ3kgPT09IFpfSFVGRk1BTl9PTkxZKSA/IGRlZmxhdGVfaHVmZihzLCBmbHVzaCkgOlxuICAgICAgKHMuc3RyYXRlZ3kgPT09IFpfUkxFID8gZGVmbGF0ZV9ybGUocywgZmx1c2gpIDpcbiAgICAgICAgY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5mdW5jKHMsIGZsdXNoKSk7XG5cbiAgICBpZiAoYnN0YXRlID09PSBCU19GSU5JU0hfU1RBUlRFRCB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9ET05FKSB7XG4gICAgICBzLnN0YXR1cyA9IEZJTklTSF9TVEFURTtcbiAgICB9XG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfTkVFRF9NT1JFIHx8IGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQpIHtcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgICAgLyogYXZvaWQgQlVGX0VSUk9SIG5leHQgY2FsbCwgc2VlIGFib3ZlICovXG4gICAgICB9XG4gICAgICByZXR1cm4gWl9PSztcbiAgICAgIC8qIElmIGZsdXNoICE9IFpfTk9fRkxVU0ggJiYgYXZhaWxfb3V0ID09IDAsIHRoZSBuZXh0IGNhbGxcbiAgICAgICAqIG9mIGRlZmxhdGUgc2hvdWxkIHVzZSB0aGUgc2FtZSBmbHVzaCBwYXJhbWV0ZXIgdG8gbWFrZSBzdXJlXG4gICAgICAgKiB0aGF0IHRoZSBmbHVzaCBpcyBjb21wbGV0ZS4gU28gd2UgZG9uJ3QgaGF2ZSB0byBvdXRwdXQgYW5cbiAgICAgICAqIGVtcHR5IGJsb2NrIGhlcmUsIHRoaXMgd2lsbCBiZSBkb25lIGF0IG5leHQgY2FsbC4gVGhpcyBhbHNvXG4gICAgICAgKiBlbnN1cmVzIHRoYXQgZm9yIGEgdmVyeSBzbWFsbCBvdXRwdXQgYnVmZmVyLCB3ZSBlbWl0IGF0IG1vc3RcbiAgICAgICAqIG9uZSBlbXB0eSBibG9jay5cbiAgICAgICAqL1xuICAgIH1cbiAgICBpZiAoYnN0YXRlID09PSBCU19CTE9DS19ET05FKSB7XG4gICAgICBpZiAoZmx1c2ggPT09IFpfUEFSVElBTF9GTFVTSCkge1xuICAgICAgICB0cmVlcy5fdHJfYWxpZ24ocyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChmbHVzaCAhPT0gWl9CTE9DSykgeyAvKiBGVUxMX0ZMVVNIIG9yIFNZTkNfRkxVU0ggKi9cblxuICAgICAgICB0cmVlcy5fdHJfc3RvcmVkX2Jsb2NrKHMsIDAsIDAsIGZhbHNlKTtcbiAgICAgICAgLyogRm9yIGEgZnVsbCBmbHVzaCwgdGhpcyBlbXB0eSBibG9jayB3aWxsIGJlIHJlY29nbml6ZWRcbiAgICAgICAgICogYXMgYSBzcGVjaWFsIG1hcmtlciBieSBpbmZsYXRlX3N5bmMoKS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9GVUxMX0ZMVVNIKSB7XG4gICAgICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovICAgICAgICAgICAgIC8qIGZvcmdldCBoaXN0b3J5ICovXG4gICAgICAgICAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuXG4gICAgICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgICAgICBzLnN0cnN0YXJ0ID0gMDtcbiAgICAgICAgICAgIHMuYmxvY2tfc3RhcnQgPSAwO1xuICAgICAgICAgICAgcy5pbnNlcnQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTsgLyogYXZvaWQgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCwgc2VlIGFib3ZlICovXG4gICAgICAgIHJldHVybiBaX09LO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvL0Fzc2VydChzdHJtLT5hdmFpbF9vdXQgPiAwLCBcImJ1ZzJcIik7XG4gIC8vaWYgKHN0cm0uYXZhaWxfb3V0IDw9IDApIHsgdGhyb3cgbmV3IEVycm9yKFwiYnVnMlwiKTt9XG5cbiAgaWYgKGZsdXNoICE9PSBaX0ZJTklTSCkgeyByZXR1cm4gWl9PSzsgfVxuICBpZiAocy53cmFwIDw9IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VORDsgfVxuXG4gIC8qIFdyaXRlIHRoZSB0cmFpbGVyICovXG4gIGlmIChzLndyYXAgPT09IDIpIHtcbiAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gOCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAxNikgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAyNCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCBzdHJtLnRvdGFsX2luICYgMHhmZik7XG4gICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gOCkgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiAxNikgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiAyNCkgJiAweGZmKTtcbiAgfVxuICBlbHNlXG4gIHtcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG4gICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciAmIDB4ZmZmZik7XG4gIH1cblxuICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAvKiBJZiBhdmFpbF9vdXQgaXMgemVybywgdGhlIGFwcGxpY2F0aW9uIHdpbGwgY2FsbCBkZWZsYXRlIGFnYWluXG4gICAqIHRvIGZsdXNoIHRoZSByZXN0LlxuICAgKi9cbiAgaWYgKHMud3JhcCA+IDApIHsgcy53cmFwID0gLXMud3JhcDsgfVxuICAvKiB3cml0ZSB0aGUgdHJhaWxlciBvbmx5IG9uY2UhICovXG4gIHJldHVybiBzLnBlbmRpbmcgIT09IDAgPyBaX09LIDogWl9TVFJFQU1fRU5EO1xufVxuXG5mdW5jdGlvbiBkZWZsYXRlRW5kKHN0cm0pIHtcbiAgdmFyIHN0YXR1cztcblxuICBpZiAoIXN0cm0vKj09IFpfTlVMTCovIHx8ICFzdHJtLnN0YXRlLyo9PSBaX05VTEwqLykge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHN0YXR1cyA9IHN0cm0uc3RhdGUuc3RhdHVzO1xuICBpZiAoc3RhdHVzICE9PSBJTklUX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBFWFRSQV9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gTkFNRV9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gQ09NTUVOVF9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gSENSQ19TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gQlVTWV9TVEFURSAmJlxuICAgIHN0YXR1cyAhPT0gRklOSVNIX1NUQVRFXG4gICkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgc3RybS5zdGF0ZSA9IG51bGw7XG5cbiAgcmV0dXJuIHN0YXR1cyA9PT0gQlVTWV9TVEFURSA/IGVycihzdHJtLCBaX0RBVEFfRVJST1IpIDogWl9PSztcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplcyB0aGUgY29tcHJlc3Npb24gZGljdGlvbmFyeSBmcm9tIHRoZSBnaXZlbiBieXRlXG4gKiBzZXF1ZW5jZSB3aXRob3V0IHByb2R1Y2luZyBhbnkgY29tcHJlc3NlZCBvdXRwdXQuXG4gKi9cbmZ1bmN0aW9uIGRlZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpIHtcbiAgdmFyIGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDtcblxuICB2YXIgcztcbiAgdmFyIHN0ciwgbjtcbiAgdmFyIHdyYXA7XG4gIHZhciBhdmFpbDtcbiAgdmFyIG5leHQ7XG4gIHZhciBpbnB1dDtcbiAgdmFyIHRtcERpY3Q7XG5cbiAgaWYgKCFzdHJtLyo9PSBaX05VTEwqLyB8fCAhc3RybS5zdGF0ZS8qPT0gWl9OVUxMKi8pIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBzID0gc3RybS5zdGF0ZTtcbiAgd3JhcCA9IHMud3JhcDtcblxuICBpZiAod3JhcCA9PT0gMiB8fCAod3JhcCA9PT0gMSAmJiBzLnN0YXR1cyAhPT0gSU5JVF9TVEFURSkgfHwgcy5sb29rYWhlYWQpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICAvKiB3aGVuIHVzaW5nIHpsaWIgd3JhcHBlcnMsIGNvbXB1dGUgQWRsZXItMzIgZm9yIHByb3ZpZGVkIGRpY3Rpb25hcnkgKi9cbiAgaWYgKHdyYXAgPT09IDEpIHtcbiAgICAvKiBhZGxlcjMyKHN0cm0tPmFkbGVyLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTsgKi9cbiAgICBzdHJtLmFkbGVyID0gYWRsZXIzMihzdHJtLmFkbGVyLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTtcbiAgfVxuXG4gIHMud3JhcCA9IDA7ICAgLyogYXZvaWQgY29tcHV0aW5nIEFkbGVyLTMyIGluIHJlYWRfYnVmICovXG5cbiAgLyogaWYgZGljdGlvbmFyeSB3b3VsZCBmaWxsIHdpbmRvdywganVzdCByZXBsYWNlIHRoZSBoaXN0b3J5ICovXG4gIGlmIChkaWN0TGVuZ3RoID49IHMud19zaXplKSB7XG4gICAgaWYgKHdyYXAgPT09IDApIHsgICAgICAgICAgICAvKiBhbHJlYWR5IGVtcHR5IG90aGVyd2lzZSAqL1xuICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG4gICAgICBzLnN0cnN0YXJ0ID0gMDtcbiAgICAgIHMuYmxvY2tfc3RhcnQgPSAwO1xuICAgICAgcy5pbnNlcnQgPSAwO1xuICAgIH1cbiAgICAvKiB1c2UgdGhlIHRhaWwgKi9cbiAgICAvLyBkaWN0aW9uYXJ5ID0gZGljdGlvbmFyeS5zbGljZShkaWN0TGVuZ3RoIC0gcy53X3NpemUpO1xuICAgIHRtcERpY3QgPSBuZXcgdXRpbHMuQnVmOChzLndfc2l6ZSk7XG4gICAgdXRpbHMuYXJyYXlTZXQodG1wRGljdCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCAtIHMud19zaXplLCBzLndfc2l6ZSwgMCk7XG4gICAgZGljdGlvbmFyeSA9IHRtcERpY3Q7XG4gICAgZGljdExlbmd0aCA9IHMud19zaXplO1xuICB9XG4gIC8qIGluc2VydCBkaWN0aW9uYXJ5IGludG8gd2luZG93IGFuZCBoYXNoICovXG4gIGF2YWlsID0gc3RybS5hdmFpbF9pbjtcbiAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBzdHJtLmF2YWlsX2luID0gZGljdExlbmd0aDtcbiAgc3RybS5uZXh0X2luID0gMDtcbiAgc3RybS5pbnB1dCA9IGRpY3Rpb25hcnk7XG4gIGZpbGxfd2luZG93KHMpO1xuICB3aGlsZSAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgc3RyID0gcy5zdHJzdGFydDtcbiAgICBuID0gcy5sb29rYWhlYWQgLSAoTUlOX01BVENIIC0gMSk7XG4gICAgZG8ge1xuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyBNSU5fTUFUQ0gtMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG5cbiAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG5cbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcbiAgICAgIHN0cisrO1xuICAgIH0gd2hpbGUgKC0tbik7XG4gICAgcy5zdHJzdGFydCA9IHN0cjtcbiAgICBzLmxvb2thaGVhZCA9IE1JTl9NQVRDSCAtIDE7XG4gICAgZmlsbF93aW5kb3cocyk7XG4gIH1cbiAgcy5zdHJzdGFydCArPSBzLmxvb2thaGVhZDtcbiAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG4gIHMuaW5zZXJ0ID0gcy5sb29rYWhlYWQ7XG4gIHMubG9va2FoZWFkID0gMDtcbiAgcy5tYXRjaF9sZW5ndGggPSBzLnByZXZfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICBzdHJtLmlucHV0ID0gaW5wdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSBhdmFpbDtcbiAgcy53cmFwID0gd3JhcDtcbiAgcmV0dXJuIFpfT0s7XG59XG5cblxuZXhwb3J0cy5kZWZsYXRlSW5pdCA9IGRlZmxhdGVJbml0O1xuZXhwb3J0cy5kZWZsYXRlSW5pdDIgPSBkZWZsYXRlSW5pdDI7XG5leHBvcnRzLmRlZmxhdGVSZXNldCA9IGRlZmxhdGVSZXNldDtcbmV4cG9ydHMuZGVmbGF0ZVJlc2V0S2VlcCA9IGRlZmxhdGVSZXNldEtlZXA7XG5leHBvcnRzLmRlZmxhdGVTZXRIZWFkZXIgPSBkZWZsYXRlU2V0SGVhZGVyO1xuZXhwb3J0cy5kZWZsYXRlID0gZGVmbGF0ZTtcbmV4cG9ydHMuZGVmbGF0ZUVuZCA9IGRlZmxhdGVFbmQ7XG5leHBvcnRzLmRlZmxhdGVTZXREaWN0aW9uYXJ5ID0gZGVmbGF0ZVNldERpY3Rpb25hcnk7XG5leHBvcnRzLmRlZmxhdGVJbmZvID0gJ3Bha28gZGVmbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCknO1xuXG4vKiBOb3QgaW1wbGVtZW50ZWRcbmV4cG9ydHMuZGVmbGF0ZUJvdW5kID0gZGVmbGF0ZUJvdW5kO1xuZXhwb3J0cy5kZWZsYXRlQ29weSA9IGRlZmxhdGVDb3B5O1xuZXhwb3J0cy5kZWZsYXRlUGFyYW1zID0gZGVmbGF0ZVBhcmFtcztcbmV4cG9ydHMuZGVmbGF0ZVBlbmRpbmcgPSBkZWZsYXRlUGVuZGluZztcbmV4cG9ydHMuZGVmbGF0ZVByaW1lID0gZGVmbGF0ZVByaW1lO1xuZXhwb3J0cy5kZWZsYXRlVHVuZSA9IGRlZmxhdGVUdW5lO1xuKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBzcGFjZS11bmFyeS1vcHMgKi9cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uJyk7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8vdmFyIFpfRklMVEVSRUQgICAgICAgICAgPSAxO1xuLy92YXIgWl9IVUZGTUFOX09OTFkgICAgICA9IDI7XG4vL3ZhciBaX1JMRSAgICAgICAgICAgICAgID0gMztcbnZhciBaX0ZJWEVEICAgICAgICAgICAgICAgPSA0O1xuLy92YXIgWl9ERUZBVUxUX1NUUkFURUdZICA9IDA7XG5cbi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbnZhciBaX0JJTkFSWSAgICAgICAgICAgICAgPSAwO1xudmFyIFpfVEVYVCAgICAgICAgICAgICAgICA9IDE7XG4vL3ZhciBaX0FTQ0lJICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFRcbnZhciBaX1VOS05PV04gICAgICAgICAgICAgPSAyO1xuXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbmZ1bmN0aW9uIHplcm8oYnVmKSB7IHZhciBsZW4gPSBidWYubGVuZ3RoOyB3aGlsZSAoLS1sZW4gPj0gMCkgeyBidWZbbGVuXSA9IDA7IH0gfVxuXG4vLyBGcm9tIHp1dGlsLmhcblxudmFyIFNUT1JFRF9CTE9DSyA9IDA7XG52YXIgU1RBVElDX1RSRUVTID0gMTtcbnZhciBEWU5fVFJFRVMgICAgPSAyO1xuLyogVGhlIHRocmVlIGtpbmRzIG9mIGJsb2NrIHR5cGUgKi9cblxudmFyIE1JTl9NQVRDSCAgICA9IDM7XG52YXIgTUFYX01BVENIICAgID0gMjU4O1xuLyogVGhlIG1pbmltdW0gYW5kIG1heGltdW0gbWF0Y2ggbGVuZ3RocyAqL1xuXG4vLyBGcm9tIGRlZmxhdGUuaFxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbnRlcm5hbCBjb21wcmVzc2lvbiBzdGF0ZS5cbiAqL1xuXG52YXIgTEVOR1RIX0NPREVTICA9IDI5O1xuLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovXG5cbnZhciBMSVRFUkFMUyAgICAgID0gMjU2O1xuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXG5cbnZhciBMX0NPREVTICAgICAgID0gTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTO1xuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXG5cbnZhciBEX0NPREVTICAgICAgID0gMzA7XG4vKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMgKi9cblxudmFyIEJMX0NPREVTICAgICAgPSAxOTtcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xuXG52YXIgSEVBUF9TSVpFICAgICA9IDIgKiBMX0NPREVTICsgMTtcbi8qIG1heGltdW0gaGVhcCBzaXplICovXG5cbnZhciBNQVhfQklUUyAgICAgID0gMTU7XG4vKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi9cblxudmFyIEJ1Zl9zaXplICAgICAgPSAxNjtcbi8qIHNpemUgb2YgYml0IGJ1ZmZlciBpbiBiaV9idWYgKi9cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0YW50c1xuICovXG5cbnZhciBNQVhfQkxfQklUUyA9IDc7XG4vKiBCaXQgbGVuZ3RoIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQkxfQklUUyBiaXRzICovXG5cbnZhciBFTkRfQkxPQ0sgICA9IDI1Njtcbi8qIGVuZCBvZiBibG9jayBsaXRlcmFsIGNvZGUgKi9cblxudmFyIFJFUF8zXzYgICAgID0gMTY7XG4vKiByZXBlYXQgcHJldmlvdXMgYml0IGxlbmd0aCAzLTYgdGltZXMgKDIgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbnZhciBSRVBaXzNfMTAgICA9IDE3O1xuLyogcmVwZWF0IGEgemVybyBsZW5ndGggMy0xMCB0aW1lcyAgKDMgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbnZhciBSRVBaXzExXzEzOCA9IDE4O1xuLyogcmVwZWF0IGEgemVybyBsZW5ndGggMTEtMTM4IHRpbWVzICAoNyBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxuLyogZXNsaW50LWRpc2FibGUgY29tbWEtc3BhY2luZyxhcnJheS1icmFja2V0LXNwYWNpbmcgKi9cbnZhciBleHRyYV9sYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBsZW5ndGggY29kZSAqL1xuICBbMCwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMiwyLDIsMiwzLDMsMywzLDQsNCw0LDQsNSw1LDUsNSwwXTtcblxudmFyIGV4dHJhX2RiaXRzID0gICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGRpc3RhbmNlIGNvZGUgKi9cbiAgWzAsMCwwLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsMTMsMTNdO1xuXG52YXIgZXh0cmFfYmxiaXRzID0gIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggYml0IGxlbmd0aCBjb2RlICovXG4gIFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIsMyw3XTtcblxudmFyIGJsX29yZGVyID1cbiAgWzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdO1xuLyogZXNsaW50LWVuYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xuXG4vKiBUaGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcyBhcmUgc2VudCBpbiBvcmRlciBvZiBkZWNyZWFzaW5nXG4gKiBwcm9iYWJpbGl0eSwgdG8gYXZvaWQgdHJhbnNtaXR0aW5nIHRoZSBsZW5ndGhzIGZvciB1bnVzZWQgYml0IGxlbmd0aCBjb2Rlcy5cbiAqL1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIExvY2FsIGRhdGEuIFRoZXNlIGFyZSBpbml0aWFsaXplZCBvbmx5IG9uY2UuXG4gKi9cblxuLy8gV2UgcHJlLWZpbGwgYXJyYXlzIHdpdGggMCB0byBhdm9pZCB1bmluaXRpYWxpemVkIGdhcHNcblxudmFyIERJU1RfQ09ERV9MRU4gPSA1MTI7IC8qIHNlZSBkZWZpbml0aW9uIG9mIGFycmF5IGRpc3RfY29kZSBiZWxvdyAqL1xuXG4vLyAhISEhIFVzZSBmbGF0IGFycmF5IGluc3RlYWQgb2Ygc3RydWN0dXJlLCBGcmVxID0gaSoyLCBMZW4gPSBpKjIrMVxudmFyIHN0YXRpY19sdHJlZSAgPSBuZXcgQXJyYXkoKExfQ09ERVMgKyAyKSAqIDIpO1xuemVybyhzdGF0aWNfbHRyZWUpO1xuLyogVGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUuIFNpbmNlIHRoZSBiaXQgbGVuZ3RocyBhcmUgaW1wb3NlZCwgdGhlcmUgaXMgbm9cbiAqIG5lZWQgZm9yIHRoZSBMX0NPREVTIGV4dHJhIGNvZGVzIHVzZWQgZHVyaW5nIGhlYXAgY29uc3RydWN0aW9uLiBIb3dldmVyXG4gKiBUaGUgY29kZXMgMjg2IGFuZCAyODcgYXJlIG5lZWRlZCB0byBidWlsZCBhIGNhbm9uaWNhbCB0cmVlIChzZWUgX3RyX2luaXRcbiAqIGJlbG93KS5cbiAqL1xuXG52YXIgc3RhdGljX2R0cmVlICA9IG5ldyBBcnJheShEX0NPREVTICogMik7XG56ZXJvKHN0YXRpY19kdHJlZSk7XG4vKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUuIChBY3R1YWxseSBhIHRyaXZpYWwgdHJlZSBzaW5jZSBhbGwgY29kZXMgdXNlXG4gKiA1IGJpdHMuKVxuICovXG5cbnZhciBfZGlzdF9jb2RlICAgID0gbmV3IEFycmF5KERJU1RfQ09ERV9MRU4pO1xuemVybyhfZGlzdF9jb2RlKTtcbi8qIERpc3RhbmNlIGNvZGVzLiBUaGUgZmlyc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSBkaXN0YW5jZXNcbiAqIDMgLi4gMjU4LCB0aGUgbGFzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIHRvcCA4IGJpdHMgb2ZcbiAqIHRoZSAxNSBiaXQgZGlzdGFuY2VzLlxuICovXG5cbnZhciBfbGVuZ3RoX2NvZGUgID0gbmV3IEFycmF5KE1BWF9NQVRDSCAtIE1JTl9NQVRDSCArIDEpO1xuemVybyhfbGVuZ3RoX2NvZGUpO1xuLyogbGVuZ3RoIGNvZGUgZm9yIGVhY2ggbm9ybWFsaXplZCBtYXRjaCBsZW5ndGggKDAgPT0gTUlOX01BVENIKSAqL1xuXG52YXIgYmFzZV9sZW5ndGggICA9IG5ldyBBcnJheShMRU5HVEhfQ09ERVMpO1xuemVybyhiYXNlX2xlbmd0aCk7XG4vKiBGaXJzdCBub3JtYWxpemVkIGxlbmd0aCBmb3IgZWFjaCBjb2RlICgwID0gTUlOX01BVENIKSAqL1xuXG52YXIgYmFzZV9kaXN0ICAgICA9IG5ldyBBcnJheShEX0NPREVTKTtcbnplcm8oYmFzZV9kaXN0KTtcbi8qIEZpcnN0IG5vcm1hbGl6ZWQgZGlzdGFuY2UgZm9yIGVhY2ggY29kZSAoMCA9IGRpc3RhbmNlIG9mIDEpICovXG5cblxuZnVuY3Rpb24gU3RhdGljVHJlZURlc2Moc3RhdGljX3RyZWUsIGV4dHJhX2JpdHMsIGV4dHJhX2Jhc2UsIGVsZW1zLCBtYXhfbGVuZ3RoKSB7XG5cbiAgdGhpcy5zdGF0aWNfdHJlZSAgPSBzdGF0aWNfdHJlZTsgIC8qIHN0YXRpYyB0cmVlIG9yIE5VTEwgKi9cbiAgdGhpcy5leHRyYV9iaXRzICAgPSBleHRyYV9iaXRzOyAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggY29kZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYmFzZSAgID0gZXh0cmFfYmFzZTsgICAvKiBiYXNlIGluZGV4IGZvciBleHRyYV9iaXRzICovXG4gIHRoaXMuZWxlbXMgICAgICAgID0gZWxlbXM7ICAgICAgICAvKiBtYXggbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSB0cmVlICovXG4gIHRoaXMubWF4X2xlbmd0aCAgID0gbWF4X2xlbmd0aDsgICAvKiBtYXggYml0IGxlbmd0aCBmb3IgdGhlIGNvZGVzICovXG5cbiAgLy8gc2hvdyBpZiBgc3RhdGljX3RyZWVgIGhhcyBkYXRhIG9yIGR1bW15IC0gbmVlZGVkIGZvciBtb25vbW9ycGhpYyBvYmplY3RzXG4gIHRoaXMuaGFzX3N0cmVlICAgID0gc3RhdGljX3RyZWUgJiYgc3RhdGljX3RyZWUubGVuZ3RoO1xufVxuXG5cbnZhciBzdGF0aWNfbF9kZXNjO1xudmFyIHN0YXRpY19kX2Rlc2M7XG52YXIgc3RhdGljX2JsX2Rlc2M7XG5cblxuZnVuY3Rpb24gVHJlZURlc2MoZHluX3RyZWUsIHN0YXRfZGVzYykge1xuICB0aGlzLmR5bl90cmVlID0gZHluX3RyZWU7ICAgICAvKiB0aGUgZHluYW1pYyB0cmVlICovXG4gIHRoaXMubWF4X2NvZGUgPSAwOyAgICAgICAgICAgIC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuICB0aGlzLnN0YXRfZGVzYyA9IHN0YXRfZGVzYzsgICAvKiB0aGUgY29ycmVzcG9uZGluZyBzdGF0aWMgdHJlZSAqL1xufVxuXG5cblxuZnVuY3Rpb24gZF9jb2RlKGRpc3QpIHtcbiAgcmV0dXJuIGRpc3QgPCAyNTYgPyBfZGlzdF9jb2RlW2Rpc3RdIDogX2Rpc3RfY29kZVsyNTYgKyAoZGlzdCA+Pj4gNyldO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogT3V0cHV0IGEgc2hvcnQgTFNCIGZpcnN0IG9uIHRoZSBzdHJlYW0uXG4gKiBJTiBhc3NlcnRpb246IHRoZXJlIGlzIGVub3VnaCByb29tIGluIHBlbmRpbmdCdWYuXG4gKi9cbmZ1bmN0aW9uIHB1dF9zaG9ydChzLCB3KSB7XG4vLyAgICBwdXRfYnl0ZShzLCAodWNoKSgodykgJiAweGZmKSk7XG4vLyAgICBwdXRfYnl0ZShzLCAodWNoKSgodXNoKSh3KSA+PiA4KSk7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAodyA+Pj4gOCkgJiAweGZmO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIHZhbHVlIG9uIGEgZ2l2ZW4gbnVtYmVyIG9mIGJpdHMuXG4gKiBJTiBhc3NlcnRpb246IGxlbmd0aCA8PSAxNiBhbmQgdmFsdWUgZml0cyBpbiBsZW5ndGggYml0cy5cbiAqL1xuZnVuY3Rpb24gc2VuZF9iaXRzKHMsIHZhbHVlLCBsZW5ndGgpIHtcbiAgaWYgKHMuYmlfdmFsaWQgPiAoQnVmX3NpemUgLSBsZW5ndGgpKSB7XG4gICAgcy5iaV9idWYgfD0gKHZhbHVlIDw8IHMuYmlfdmFsaWQpICYgMHhmZmZmO1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gICAgcy5iaV9idWYgPSB2YWx1ZSA+PiAoQnVmX3NpemUgLSBzLmJpX3ZhbGlkKTtcbiAgICBzLmJpX3ZhbGlkICs9IGxlbmd0aCAtIEJ1Zl9zaXplO1xuICB9IGVsc2Uge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBzLmJpX3ZhbGlkICs9IGxlbmd0aDtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHNlbmRfY29kZShzLCBjLCB0cmVlKSB7XG4gIHNlbmRfYml0cyhzLCB0cmVlW2MgKiAyXS8qLkNvZGUqLywgdHJlZVtjICogMiArIDFdLyouTGVuKi8pO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmV2ZXJzZSB0aGUgZmlyc3QgbGVuIGJpdHMgb2YgYSBjb2RlLCB1c2luZyBzdHJhaWdodGZvcndhcmQgY29kZSAoYSBmYXN0ZXJcbiAqIG1ldGhvZCB3b3VsZCB1c2UgYSB0YWJsZSlcbiAqIElOIGFzc2VydGlvbjogMSA8PSBsZW4gPD0gMTVcbiAqL1xuZnVuY3Rpb24gYmlfcmV2ZXJzZShjb2RlLCBsZW4pIHtcbiAgdmFyIHJlcyA9IDA7XG4gIGRvIHtcbiAgICByZXMgfD0gY29kZSAmIDE7XG4gICAgY29kZSA+Pj49IDE7XG4gICAgcmVzIDw8PSAxO1xuICB9IHdoaWxlICgtLWxlbiA+IDApO1xuICByZXR1cm4gcmVzID4+PiAxO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggdGhlIGJpdCBidWZmZXIsIGtlZXBpbmcgYXQgbW9zdCA3IGJpdHMgaW4gaXQuXG4gKi9cbmZ1bmN0aW9uIGJpX2ZsdXNoKHMpIHtcbiAgaWYgKHMuYmlfdmFsaWQgPT09IDE2KSB7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgICBzLmJpX2J1ZiA9IDA7XG4gICAgcy5iaV92YWxpZCA9IDA7XG5cbiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID49IDgpIHtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmICYgMHhmZjtcbiAgICBzLmJpX2J1ZiA+Pj0gODtcbiAgICBzLmJpX3ZhbGlkIC09IDg7XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgZm9yIGEgdHJlZSBhbmQgdXBkYXRlIHRoZSB0b3RhbCBiaXQgbGVuZ3RoXG4gKiBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQsIGhlYXBbaGVhcF9tYXhdIGFuZFxuICogICAgYWJvdmUgYXJlIHRoZSB0cmVlIG5vZGVzIHNvcnRlZCBieSBpbmNyZWFzaW5nIGZyZXF1ZW5jeS5cbiAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGQgbGVuIGlzIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoLCB0aGVcbiAqICAgICBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgZnJlcXVlbmNpZXMgZm9yIGVhY2ggYml0IGxlbmd0aC5cbiAqICAgICBUaGUgbGVuZ3RoIG9wdF9sZW4gaXMgdXBkYXRlZDsgc3RhdGljX2xlbiBpcyBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXNcbiAqICAgICBub3QgbnVsbC5cbiAqL1xuZnVuY3Rpb24gZ2VuX2JpdGxlbihzLCBkZXNjKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIHRyZWVfZGVzYyAqZGVzYzsgICAgLyogdGhlIHRyZWUgZGVzY3JpcHRvciAqL1xue1xuICB2YXIgdHJlZSAgICAgICAgICAgID0gZGVzYy5keW5fdHJlZTtcbiAgdmFyIG1heF9jb2RlICAgICAgICA9IGRlc2MubWF4X2NvZGU7XG4gIHZhciBzdHJlZSAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5zdGF0aWNfdHJlZTtcbiAgdmFyIGhhc19zdHJlZSAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmhhc19zdHJlZTtcbiAgdmFyIGV4dHJhICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmV4dHJhX2JpdHM7XG4gIHZhciBiYXNlICAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iYXNlO1xuICB2YXIgbWF4X2xlbmd0aCAgICAgID0gZGVzYy5zdGF0X2Rlc2MubWF4X2xlbmd0aDtcbiAgdmFyIGg7ICAgICAgICAgICAgICAvKiBoZWFwIGluZGV4ICovXG4gIHZhciBuLCBtOyAgICAgICAgICAgLyogaXRlcmF0ZSBvdmVyIHRoZSB0cmVlIGVsZW1lbnRzICovXG4gIHZhciBiaXRzOyAgICAgICAgICAgLyogYml0IGxlbmd0aCAqL1xuICB2YXIgeGJpdHM7ICAgICAgICAgIC8qIGV4dHJhIGJpdHMgKi9cbiAgdmFyIGY7ICAgICAgICAgICAgICAvKiBmcmVxdWVuY3kgKi9cbiAgdmFyIG92ZXJmbG93ID0gMDsgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgd2l0aCBiaXQgbGVuZ3RoIHRvbyBsYXJnZSAqL1xuXG4gIGZvciAoYml0cyA9IDA7IGJpdHMgPD0gTUFYX0JJVFM7IGJpdHMrKykge1xuICAgIHMuYmxfY291bnRbYml0c10gPSAwO1xuICB9XG5cbiAgLyogSW4gYSBmaXJzdCBwYXNzLCBjb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzICh3aGljaCBtYXlcbiAgICogb3ZlcmZsb3cgaW4gdGhlIGNhc2Ugb2YgdGhlIGJpdCBsZW5ndGggdHJlZSkuXG4gICAqL1xuICB0cmVlW3MuaGVhcFtzLmhlYXBfbWF4XSAqIDIgKyAxXS8qLkxlbiovID0gMDsgLyogcm9vdCBvZiB0aGUgaGVhcCAqL1xuXG4gIGZvciAoaCA9IHMuaGVhcF9tYXggKyAxOyBoIDwgSEVBUF9TSVpFOyBoKyspIHtcbiAgICBuID0gcy5oZWFwW2hdO1xuICAgIGJpdHMgPSB0cmVlW3RyZWVbbiAqIDIgKyAxXS8qLkRhZCovICogMiArIDFdLyouTGVuKi8gKyAxO1xuICAgIGlmIChiaXRzID4gbWF4X2xlbmd0aCkge1xuICAgICAgYml0cyA9IG1heF9sZW5ndGg7XG4gICAgICBvdmVyZmxvdysrO1xuICAgIH1cbiAgICB0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IGJpdHM7XG4gICAgLyogV2Ugb3ZlcndyaXRlIHRyZWVbbl0uRGFkIHdoaWNoIGlzIG5vIGxvbmdlciBuZWVkZWQgKi9cblxuICAgIGlmIChuID4gbWF4X2NvZGUpIHsgY29udGludWU7IH0gLyogbm90IGEgbGVhZiBub2RlICovXG5cbiAgICBzLmJsX2NvdW50W2JpdHNdKys7XG4gICAgeGJpdHMgPSAwO1xuICAgIGlmIChuID49IGJhc2UpIHtcbiAgICAgIHhiaXRzID0gZXh0cmFbbiAtIGJhc2VdO1xuICAgIH1cbiAgICBmID0gdHJlZVtuICogMl0vKi5GcmVxKi87XG4gICAgcy5vcHRfbGVuICs9IGYgKiAoYml0cyArIHhiaXRzKTtcbiAgICBpZiAoaGFzX3N0cmVlKSB7XG4gICAgICBzLnN0YXRpY19sZW4gKz0gZiAqIChzdHJlZVtuICogMiArIDFdLyouTGVuKi8gKyB4Yml0cyk7XG4gICAgfVxuICB9XG4gIGlmIChvdmVyZmxvdyA9PT0gMCkgeyByZXR1cm47IH1cblxuICAvLyBUcmFjZSgoc3RkZXJyLFwiXFxuYml0IGxlbmd0aCBvdmVyZmxvd1xcblwiKSk7XG4gIC8qIFRoaXMgaGFwcGVucyBmb3IgZXhhbXBsZSBvbiBvYmoyIGFuZCBwaWMgb2YgdGhlIENhbGdhcnkgY29ycHVzICovXG5cbiAgLyogRmluZCB0aGUgZmlyc3QgYml0IGxlbmd0aCB3aGljaCBjb3VsZCBpbmNyZWFzZTogKi9cbiAgZG8ge1xuICAgIGJpdHMgPSBtYXhfbGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAocy5ibF9jb3VudFtiaXRzXSA9PT0gMCkgeyBiaXRzLS07IH1cbiAgICBzLmJsX2NvdW50W2JpdHNdLS07ICAgICAgLyogbW92ZSBvbmUgbGVhZiBkb3duIHRoZSB0cmVlICovXG4gICAgcy5ibF9jb3VudFtiaXRzICsgMV0gKz0gMjsgLyogbW92ZSBvbmUgb3ZlcmZsb3cgaXRlbSBhcyBpdHMgYnJvdGhlciAqL1xuICAgIHMuYmxfY291bnRbbWF4X2xlbmd0aF0tLTtcbiAgICAvKiBUaGUgYnJvdGhlciBvZiB0aGUgb3ZlcmZsb3cgaXRlbSBhbHNvIG1vdmVzIG9uZSBzdGVwIHVwLFxuICAgICAqIGJ1dCB0aGlzIGRvZXMgbm90IGFmZmVjdCBibF9jb3VudFttYXhfbGVuZ3RoXVxuICAgICAqL1xuICAgIG92ZXJmbG93IC09IDI7XG4gIH0gd2hpbGUgKG92ZXJmbG93ID4gMCk7XG5cbiAgLyogTm93IHJlY29tcHV0ZSBhbGwgYml0IGxlbmd0aHMsIHNjYW5uaW5nIGluIGluY3JlYXNpbmcgZnJlcXVlbmN5LlxuICAgKiBoIGlzIHN0aWxsIGVxdWFsIHRvIEhFQVBfU0laRS4gKEl0IGlzIHNpbXBsZXIgdG8gcmVjb25zdHJ1Y3QgYWxsXG4gICAqIGxlbmd0aHMgaW5zdGVhZCBvZiBmaXhpbmcgb25seSB0aGUgd3Jvbmcgb25lcy4gVGhpcyBpZGVhIGlzIHRha2VuXG4gICAqIGZyb20gJ2FyJyB3cml0dGVuIGJ5IEhhcnVoaWtvIE9rdW11cmEuKVxuICAgKi9cbiAgZm9yIChiaXRzID0gbWF4X2xlbmd0aDsgYml0cyAhPT0gMDsgYml0cy0tKSB7XG4gICAgbiA9IHMuYmxfY291bnRbYml0c107XG4gICAgd2hpbGUgKG4gIT09IDApIHtcbiAgICAgIG0gPSBzLmhlYXBbLS1oXTtcbiAgICAgIGlmIChtID4gbWF4X2NvZGUpIHsgY29udGludWU7IH1cbiAgICAgIGlmICh0cmVlW20gKiAyICsgMV0vKi5MZW4qLyAhPT0gYml0cykge1xuICAgICAgICAvLyBUcmFjZSgoc3RkZXJyLFwiY29kZSAlZCBiaXRzICVkLT4lZFxcblwiLCBtLCB0cmVlW21dLkxlbiwgYml0cykpO1xuICAgICAgICBzLm9wdF9sZW4gKz0gKGJpdHMgLSB0cmVlW20gKiAyICsgMV0vKi5MZW4qLykgKiB0cmVlW20gKiAyXS8qLkZyZXEqLztcbiAgICAgICAgdHJlZVttICogMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuICAgICAgfVxuICAgICAgbi0tO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogR2VuZXJhdGUgdGhlIGNvZGVzIGZvciBhIGdpdmVuIHRyZWUgYW5kIGJpdCBjb3VudHMgKHdoaWNoIG5lZWQgbm90IGJlXG4gKiBvcHRpbWFsKS5cbiAqIElOIGFzc2VydGlvbjogdGhlIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBiaXQgbGVuZ3RoIHN0YXRpc3RpY3MgZm9yXG4gKiB0aGUgZ2l2ZW4gdHJlZSBhbmQgdGhlIGZpZWxkIGxlbiBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzLlxuICogT1VUIGFzc2VydGlvbjogdGhlIGZpZWxkIGNvZGUgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cyBvZiBub25cbiAqICAgICB6ZXJvIGNvZGUgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIGJsX2NvdW50KVxuLy8gICAgY3RfZGF0YSAqdHJlZTsgICAgICAgICAgICAgLyogdGhlIHRyZWUgdG8gZGVjb3JhdGUgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgICAgICAgICAgIC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuLy8gICAgdXNoZiAqYmxfY291bnQ7ICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCAqL1xue1xuICB2YXIgbmV4dF9jb2RlID0gbmV3IEFycmF5KE1BWF9CSVRTICsgMSk7IC8qIG5leHQgY29kZSB2YWx1ZSBmb3IgZWFjaCBiaXQgbGVuZ3RoICovXG4gIHZhciBjb2RlID0gMDsgICAgICAgICAgICAgIC8qIHJ1bm5pbmcgY29kZSB2YWx1ZSAqL1xuICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAvKiBiaXQgaW5kZXggKi9cbiAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogY29kZSBpbmRleCAqL1xuXG4gIC8qIFRoZSBkaXN0cmlidXRpb24gY291bnRzIGFyZSBmaXJzdCB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjb2RlIHZhbHVlc1xuICAgKiB3aXRob3V0IGJpdCByZXZlcnNhbC5cbiAgICovXG4gIGZvciAoYml0cyA9IDE7IGJpdHMgPD0gTUFYX0JJVFM7IGJpdHMrKykge1xuICAgIG5leHRfY29kZVtiaXRzXSA9IGNvZGUgPSAoY29kZSArIGJsX2NvdW50W2JpdHMgLSAxXSkgPDwgMTtcbiAgfVxuICAvKiBDaGVjayB0aGF0IHRoZSBiaXQgY291bnRzIGluIGJsX2NvdW50IGFyZSBjb25zaXN0ZW50LiBUaGUgbGFzdCBjb2RlXG4gICAqIG11c3QgYmUgYWxsIG9uZXMuXG4gICAqL1xuICAvL0Fzc2VydCAoY29kZSArIGJsX2NvdW50W01BWF9CSVRTXS0xID09ICgxPDxNQVhfQklUUyktMSxcbiAgLy8gICAgICAgIFwiaW5jb25zaXN0ZW50IGJpdCBjb3VudHNcIik7XG4gIC8vVHJhY2V2KChzdGRlcnIsXCJcXG5nZW5fY29kZXM6IG1heF9jb2RlICVkIFwiLCBtYXhfY29kZSkpO1xuXG4gIGZvciAobiA9IDA7ICBuIDw9IG1heF9jb2RlOyBuKyspIHtcbiAgICB2YXIgbGVuID0gdHJlZVtuICogMiArIDFdLyouTGVuKi87XG4gICAgaWYgKGxlbiA9PT0gMCkgeyBjb250aW51ZTsgfVxuICAgIC8qIE5vdyByZXZlcnNlIHRoZSBiaXRzICovXG4gICAgdHJlZVtuICogMl0vKi5Db2RlKi8gPSBiaV9yZXZlcnNlKG5leHRfY29kZVtsZW5dKyssIGxlbik7XG5cbiAgICAvL1RyYWNlY3YodHJlZSAhPSBzdGF0aWNfbHRyZWUsIChzdGRlcnIsXCJcXG5uICUzZCAlYyBsICUyZCBjICU0eCAoJXgpIFwiLFxuICAgIC8vICAgICBuLCAoaXNncmFwaChuKSA/IG4gOiAnICcpLCBsZW4sIHRyZWVbbl0uQ29kZSwgbmV4dF9jb2RlW2xlbl0tMSkpO1xuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplIHRoZSB2YXJpb3VzICdjb25zdGFudCcgdGFibGVzLlxuICovXG5mdW5jdGlvbiB0cl9zdGF0aWNfaW5pdCgpIHtcbiAgdmFyIG47ICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIGJpdHM7ICAgICAvKiBiaXQgY291bnRlciAqL1xuICB2YXIgbGVuZ3RoOyAgIC8qIGxlbmd0aCB2YWx1ZSAqL1xuICB2YXIgY29kZTsgICAgIC8qIGNvZGUgdmFsdWUgKi9cbiAgdmFyIGRpc3Q7ICAgICAvKiBkaXN0YW5jZSBpbmRleCAqL1xuICB2YXIgYmxfY291bnQgPSBuZXcgQXJyYXkoTUFYX0JJVFMgKyAxKTtcbiAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCBmb3IgYW4gb3B0aW1hbCB0cmVlICovXG5cbiAgLy8gZG8gY2hlY2sgaW4gX3RyX2luaXQoKVxuICAvL2lmIChzdGF0aWNfaW5pdF9kb25lKSByZXR1cm47XG5cbiAgLyogRm9yIHNvbWUgZW1iZWRkZWQgdGFyZ2V0cywgZ2xvYmFsIHZhcmlhYmxlcyBhcmUgbm90IGluaXRpYWxpemVkOiAqL1xuLyojaWZkZWYgTk9fSU5JVF9HTE9CQUxfUE9JTlRFUlNcbiAgc3RhdGljX2xfZGVzYy5zdGF0aWNfdHJlZSA9IHN0YXRpY19sdHJlZTtcbiAgc3RhdGljX2xfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfbGJpdHM7XG4gIHN0YXRpY19kX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfZHRyZWU7XG4gIHN0YXRpY19kX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2RiaXRzO1xuICBzdGF0aWNfYmxfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfYmxiaXRzO1xuI2VuZGlmKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGxlbmd0aCAoMC4uMjU1KSAtPiBsZW5ndGggY29kZSAoMC4uMjgpICovXG4gIGxlbmd0aCA9IDA7XG4gIGZvciAoY29kZSA9IDA7IGNvZGUgPCBMRU5HVEhfQ09ERVMgLSAxOyBjb2RlKyspIHtcbiAgICBiYXNlX2xlbmd0aFtjb2RlXSA9IGxlbmd0aDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfbGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9sZW5ndGhfY29kZVtsZW5ndGgrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAobGVuZ3RoID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogbGVuZ3RoICE9IDI1NlwiKTtcbiAgLyogTm90ZSB0aGF0IHRoZSBsZW5ndGggMjU1IChtYXRjaCBsZW5ndGggMjU4KSBjYW4gYmUgcmVwcmVzZW50ZWRcbiAgICogaW4gdHdvIGRpZmZlcmVudCB3YXlzOiBjb2RlIDI4NCArIDUgYml0cyBvciBjb2RlIDI4NSwgc28gd2VcbiAgICogb3ZlcndyaXRlIGxlbmd0aF9jb2RlWzI1NV0gdG8gdXNlIHRoZSBiZXN0IGVuY29kaW5nOlxuICAgKi9cbiAgX2xlbmd0aF9jb2RlW2xlbmd0aCAtIDFdID0gY29kZTtcblxuICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGRpc3QgKDAuLjMySykgLT4gZGlzdCBjb2RlICgwLi4yOSkgKi9cbiAgZGlzdCA9IDA7XG4gIGZvciAoY29kZSA9IDA7IGNvZGUgPCAxNjsgY29kZSsrKSB7XG4gICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfZGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogZGlzdCAhPSAyNTZcIik7XG4gIGRpc3QgPj49IDc7IC8qIGZyb20gbm93IG9uLCBhbGwgZGlzdGFuY2VzIGFyZSBkaXZpZGVkIGJ5IDEyOCAqL1xuICBmb3IgKDsgY29kZSA8IERfQ09ERVM7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3QgPDwgNztcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgKGV4dHJhX2RiaXRzW2NvZGVdIC0gNykpOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbMjU2ICsgZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogMjU2K2Rpc3QgIT0gNTEyXCIpO1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgY29kZXMgb2YgdGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUgKi9cbiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgYmxfY291bnRbYml0c10gPSAwO1xuICB9XG5cbiAgbiA9IDA7XG4gIHdoaWxlIChuIDw9IDE0Mykge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA4O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs4XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI1NSkge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA5O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs5XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI3OSkge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA3O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs3XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI4Nykge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA4O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs4XSsrO1xuICB9XG4gIC8qIENvZGVzIDI4NiBhbmQgMjg3IGRvIG5vdCBleGlzdCwgYnV0IHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZVxuICAgKiB0cmVlIGNvbnN0cnVjdGlvbiB0byBnZXQgYSBjYW5vbmljYWwgSHVmZm1hbiB0cmVlIChsb25nZXN0IGNvZGVcbiAgICogYWxsIG9uZXMpXG4gICAqL1xuICBnZW5fY29kZXMoc3RhdGljX2x0cmVlLCBMX0NPREVTICsgMSwgYmxfY291bnQpO1xuXG4gIC8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZSBpcyB0cml2aWFsOiAqL1xuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUzsgbisrKSB7XG4gICAgc3RhdGljX2R0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDU7XG4gICAgc3RhdGljX2R0cmVlW24gKiAyXS8qLkNvZGUqLyA9IGJpX3JldmVyc2UobiwgNSk7XG4gIH1cblxuICAvLyBOb3cgZGF0YSByZWFkeSBhbmQgd2UgY2FuIGluaXQgc3RhdGljIHRyZWVzXG4gIHN0YXRpY19sX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2x0cmVlLCBleHRyYV9sYml0cywgTElURVJBTFMgKyAxLCBMX0NPREVTLCBNQVhfQklUUyk7XG4gIHN0YXRpY19kX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2R0cmVlLCBleHRyYV9kYml0cywgMCwgICAgICAgICAgRF9DT0RFUywgTUFYX0JJVFMpO1xuICBzdGF0aWNfYmxfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhuZXcgQXJyYXkoMCksIGV4dHJhX2JsYml0cywgMCwgICAgICAgICBCTF9DT0RFUywgTUFYX0JMX0JJVFMpO1xuXG4gIC8vc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplIGEgbmV3IGJsb2NrLlxuICovXG5mdW5jdGlvbiBpbml0X2Jsb2NrKHMpIHtcbiAgdmFyIG47IC8qIGl0ZXJhdGVzIG92ZXIgdHJlZSBlbGVtZW50cyAqL1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIHRyZWVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDwgTF9DT0RFUzsgIG4rKykgeyBzLmR5bl9sdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG4gIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyAgbisrKSB7IHMuZHluX2R0cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cbiAgZm9yIChuID0gMDsgbiA8IEJMX0NPREVTOyBuKyspIHsgcy5ibF90cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cblxuICBzLmR5bl9sdHJlZVtFTkRfQkxPQ0sgKiAyXS8qLkZyZXEqLyA9IDE7XG4gIHMub3B0X2xlbiA9IHMuc3RhdGljX2xlbiA9IDA7XG4gIHMubGFzdF9saXQgPSBzLm1hdGNoZXMgPSAwO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggdGhlIGJpdCBidWZmZXIgYW5kIGFsaWduIHRoZSBvdXRwdXQgb24gYSBieXRlIGJvdW5kYXJ5XG4gKi9cbmZ1bmN0aW9uIGJpX3dpbmR1cChzKVxue1xuICBpZiAocy5iaV92YWxpZCA+IDgpIHtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICB9IGVsc2UgaWYgKHMuYmlfdmFsaWQgPiAwKSB7XG4gICAgLy9wdXRfYnl0ZShzLCAoQnl0ZSlzLT5iaV9idWYpO1xuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWY7XG4gIH1cbiAgcy5iaV9idWYgPSAwO1xuICBzLmJpX3ZhbGlkID0gMDtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5IGEgc3RvcmVkIGJsb2NrLCBzdG9yaW5nIGZpcnN0IHRoZSBsZW5ndGggYW5kIGl0c1xuICogb25lJ3MgY29tcGxlbWVudCBpZiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGNvcHlfYmxvY2socywgYnVmLCBsZW4sIGhlYWRlcilcbi8vRGVmbGF0ZVN0YXRlICpzO1xuLy9jaGFyZiAgICAqYnVmOyAgICAvKiB0aGUgaW5wdXQgZGF0YSAqL1xuLy91bnNpZ25lZCBsZW47ICAgICAvKiBpdHMgbGVuZ3RoICovXG4vL2ludCAgICAgIGhlYWRlcjsgIC8qIHRydWUgaWYgYmxvY2sgaGVhZGVyIG11c3QgYmUgd3JpdHRlbiAqL1xue1xuICBiaV93aW5kdXAocyk7ICAgICAgICAvKiBhbGlnbiBvbiBieXRlIGJvdW5kYXJ5ICovXG5cbiAgaWYgKGhlYWRlcikge1xuICAgIHB1dF9zaG9ydChzLCBsZW4pO1xuICAgIHB1dF9zaG9ydChzLCB+bGVuKTtcbiAgfVxuLy8gIHdoaWxlIChsZW4tLSkge1xuLy8gICAgcHV0X2J5dGUocywgKmJ1ZisrKTtcbi8vICB9XG4gIHV0aWxzLmFycmF5U2V0KHMucGVuZGluZ19idWYsIHMud2luZG93LCBidWYsIGxlbiwgcy5wZW5kaW5nKTtcbiAgcy5wZW5kaW5nICs9IGxlbjtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wYXJlcyB0byBzdWJ0cmVlcywgdXNpbmcgdGhlIHRyZWUgZGVwdGggYXMgdGllIGJyZWFrZXIgd2hlblxuICogdGhlIHN1YnRyZWVzIGhhdmUgZXF1YWwgZnJlcXVlbmN5LiBUaGlzIG1pbmltaXplcyB0aGUgd29yc3QgY2FzZSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIHNtYWxsZXIodHJlZSwgbiwgbSwgZGVwdGgpIHtcbiAgdmFyIF9uMiA9IG4gKiAyO1xuICB2YXIgX20yID0gbSAqIDI7XG4gIHJldHVybiAodHJlZVtfbjJdLyouRnJlcSovIDwgdHJlZVtfbTJdLyouRnJlcSovIHx8XG4gICAgICAgICAodHJlZVtfbjJdLyouRnJlcSovID09PSB0cmVlW19tMl0vKi5GcmVxKi8gJiYgZGVwdGhbbl0gPD0gZGVwdGhbbV0pKTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXN0b3JlIHRoZSBoZWFwIHByb3BlcnR5IGJ5IG1vdmluZyBkb3duIHRoZSB0cmVlIHN0YXJ0aW5nIGF0IG5vZGUgayxcbiAqIGV4Y2hhbmdpbmcgYSBub2RlIHdpdGggdGhlIHNtYWxsZXN0IG9mIGl0cyB0d28gc29ucyBpZiBuZWNlc3NhcnksIHN0b3BwaW5nXG4gKiB3aGVuIHRoZSBoZWFwIHByb3BlcnR5IGlzIHJlLWVzdGFibGlzaGVkIChlYWNoIGZhdGhlciBzbWFsbGVyIHRoYW4gaXRzXG4gKiB0d28gc29ucykuXG4gKi9cbmZ1bmN0aW9uIHBxZG93bmhlYXAocywgdHJlZSwgaylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAgLyogdGhlIHRyZWUgdG8gcmVzdG9yZSAqL1xuLy8gICAgaW50IGs7ICAgICAgICAgICAgICAgLyogbm9kZSB0byBtb3ZlIGRvd24gKi9cbntcbiAgdmFyIHYgPSBzLmhlYXBba107XG4gIHZhciBqID0gayA8PCAxOyAgLyogbGVmdCBzb24gb2YgayAqL1xuICB3aGlsZSAoaiA8PSBzLmhlYXBfbGVuKSB7XG4gICAgLyogU2V0IGogdG8gdGhlIHNtYWxsZXN0IG9mIHRoZSB0d28gc29uczogKi9cbiAgICBpZiAoaiA8IHMuaGVhcF9sZW4gJiZcbiAgICAgIHNtYWxsZXIodHJlZSwgcy5oZWFwW2ogKyAxXSwgcy5oZWFwW2pdLCBzLmRlcHRoKSkge1xuICAgICAgaisrO1xuICAgIH1cbiAgICAvKiBFeGl0IGlmIHYgaXMgc21hbGxlciB0aGFuIGJvdGggc29ucyAqL1xuICAgIGlmIChzbWFsbGVyKHRyZWUsIHYsIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHsgYnJlYWs7IH1cblxuICAgIC8qIEV4Y2hhbmdlIHYgd2l0aCB0aGUgc21hbGxlc3Qgc29uICovXG4gICAgcy5oZWFwW2tdID0gcy5oZWFwW2pdO1xuICAgIGsgPSBqO1xuXG4gICAgLyogQW5kIGNvbnRpbnVlIGRvd24gdGhlIHRyZWUsIHNldHRpbmcgaiB0byB0aGUgbGVmdCBzb24gb2YgayAqL1xuICAgIGogPDw9IDE7XG4gIH1cbiAgcy5oZWFwW2tdID0gdjtcbn1cblxuXG4vLyBpbmxpbmVkIG1hbnVhbGx5XG4vLyB2YXIgU01BTExFU1QgPSAxO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgdGhlIGJsb2NrIGRhdGEgY29tcHJlc3NlZCB1c2luZyB0aGUgZ2l2ZW4gSHVmZm1hbiB0cmVlc1xuICovXG5mdW5jdGlvbiBjb21wcmVzc19ibG9jayhzLCBsdHJlZSwgZHRyZWUpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY29uc3QgY3RfZGF0YSAqbHRyZWU7IC8qIGxpdGVyYWwgdHJlZSAqL1xuLy8gICAgY29uc3QgY3RfZGF0YSAqZHRyZWU7IC8qIGRpc3RhbmNlIHRyZWUgKi9cbntcbiAgdmFyIGRpc3Q7ICAgICAgICAgICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuICB2YXIgbGM7ICAgICAgICAgICAgIC8qIG1hdGNoIGxlbmd0aCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdCA9PSAwKSAqL1xuICB2YXIgbHggPSAwOyAgICAgICAgIC8qIHJ1bm5pbmcgaW5kZXggaW4gbF9idWYgKi9cbiAgdmFyIGNvZGU7ICAgICAgICAgICAvKiB0aGUgY29kZSB0byBzZW5kICovXG4gIHZhciBleHRyYTsgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgdG8gc2VuZCAqL1xuXG4gIGlmIChzLmxhc3RfbGl0ICE9PSAwKSB7XG4gICAgZG8ge1xuICAgICAgZGlzdCA9IChzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDJdIDw8IDgpIHwgKHMucGVuZGluZ19idWZbcy5kX2J1ZiArIGx4ICogMiArIDFdKTtcbiAgICAgIGxjID0gcy5wZW5kaW5nX2J1ZltzLmxfYnVmICsgbHhdO1xuICAgICAgbHgrKztcblxuICAgICAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAgICAgc2VuZF9jb2RlKHMsIGxjLCBsdHJlZSk7IC8qIHNlbmQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICAgICAgLy9UcmFjZWN2KGlzZ3JhcGgobGMpLCAoc3RkZXJyLFwiICclYycgXCIsIGxjKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIICovXG4gICAgICAgIGNvZGUgPSBfbGVuZ3RoX2NvZGVbbGNdO1xuICAgICAgICBzZW5kX2NvZGUocywgY29kZSArIExJVEVSQUxTICsgMSwgbHRyZWUpOyAvKiBzZW5kIHRoZSBsZW5ndGggY29kZSAqL1xuICAgICAgICBleHRyYSA9IGV4dHJhX2xiaXRzW2NvZGVdO1xuICAgICAgICBpZiAoZXh0cmEgIT09IDApIHtcbiAgICAgICAgICBsYyAtPSBiYXNlX2xlbmd0aFtjb2RlXTtcbiAgICAgICAgICBzZW5kX2JpdHMocywgbGMsIGV4dHJhKTsgICAgICAgLyogc2VuZCB0aGUgZXh0cmEgbGVuZ3RoIGJpdHMgKi9cbiAgICAgICAgfVxuICAgICAgICBkaXN0LS07IC8qIGRpc3QgaXMgbm93IHRoZSBtYXRjaCBkaXN0YW5jZSAtIDEgKi9cbiAgICAgICAgY29kZSA9IGRfY29kZShkaXN0KTtcbiAgICAgICAgLy9Bc3NlcnQgKGNvZGUgPCBEX0NPREVTLCBcImJhZCBkX2NvZGVcIik7XG5cbiAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUsIGR0cmVlKTsgICAgICAgLyogc2VuZCB0aGUgZGlzdGFuY2UgY29kZSAqL1xuICAgICAgICBleHRyYSA9IGV4dHJhX2RiaXRzW2NvZGVdO1xuICAgICAgICBpZiAoZXh0cmEgIT09IDApIHtcbiAgICAgICAgICBkaXN0IC09IGJhc2VfZGlzdFtjb2RlXTtcbiAgICAgICAgICBzZW5kX2JpdHMocywgZGlzdCwgZXh0cmEpOyAgIC8qIHNlbmQgdGhlIGV4dHJhIGRpc3RhbmNlIGJpdHMgKi9cbiAgICAgICAgfVxuICAgICAgfSAvKiBsaXRlcmFsIG9yIG1hdGNoIHBhaXIgPyAqL1xuXG4gICAgICAvKiBDaGVjayB0aGF0IHRoZSBvdmVybGF5IGJldHdlZW4gcGVuZGluZ19idWYgYW5kIGRfYnVmK2xfYnVmIGlzIG9rOiAqL1xuICAgICAgLy9Bc3NlcnQoKHVJbnQpKHMtPnBlbmRpbmcpIDwgcy0+bGl0X2J1ZnNpemUgKyAyKmx4LFxuICAgICAgLy8gICAgICAgXCJwZW5kaW5nQnVmIG92ZXJmbG93XCIpO1xuXG4gICAgfSB3aGlsZSAobHggPCBzLmxhc3RfbGl0KTtcbiAgfVxuXG4gIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIGx0cmVlKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0cnVjdCBvbmUgSHVmZm1hbiB0cmVlIGFuZCBhc3NpZ25zIHRoZSBjb2RlIGJpdCBzdHJpbmdzIGFuZCBsZW5ndGhzLlxuICogVXBkYXRlIHRoZSB0b3RhbCBiaXQgbGVuZ3RoIGZvciB0aGUgY3VycmVudCBibG9jay5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkIGZyZXEgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cbiAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGRzIGxlbiBhbmQgY29kZSBhcmUgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhcbiAqICAgICBhbmQgY29ycmVzcG9uZGluZyBjb2RlLiBUaGUgbGVuZ3RoIG9wdF9sZW4gaXMgdXBkYXRlZDsgc3RhdGljX2xlbiBpc1xuICogICAgIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpcyBub3QgbnVsbC4gVGhlIGZpZWxkIG1heF9jb2RlIGlzIHNldC5cbiAqL1xuZnVuY3Rpb24gYnVpbGRfdHJlZShzLCBkZXNjKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIHRyZWVfZGVzYyAqZGVzYzsgLyogdGhlIHRyZWUgZGVzY3JpcHRvciAqL1xue1xuICB2YXIgdHJlZSAgICAgPSBkZXNjLmR5bl90cmVlO1xuICB2YXIgc3RyZWUgICAgPSBkZXNjLnN0YXRfZGVzYy5zdGF0aWNfdHJlZTtcbiAgdmFyIGhhc19zdHJlZSA9IGRlc2Muc3RhdF9kZXNjLmhhc19zdHJlZTtcbiAgdmFyIGVsZW1zICAgID0gZGVzYy5zdGF0X2Rlc2MuZWxlbXM7XG4gIHZhciBuLCBtOyAgICAgICAgICAvKiBpdGVyYXRlIG92ZXIgaGVhcCBlbGVtZW50cyAqL1xuICB2YXIgbWF4X2NvZGUgPSAtMTsgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4gIHZhciBub2RlOyAgICAgICAgICAvKiBuZXcgbm9kZSBiZWluZyBjcmVhdGVkICovXG5cbiAgLyogQ29uc3RydWN0IHRoZSBpbml0aWFsIGhlYXAsIHdpdGggbGVhc3QgZnJlcXVlbnQgZWxlbWVudCBpblxuICAgKiBoZWFwW1NNQUxMRVNUXS4gVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS5cbiAgICogaGVhcFswXSBpcyBub3QgdXNlZC5cbiAgICovXG4gIHMuaGVhcF9sZW4gPSAwO1xuICBzLmhlYXBfbWF4ID0gSEVBUF9TSVpFO1xuXG4gIGZvciAobiA9IDA7IG4gPCBlbGVtczsgbisrKSB7XG4gICAgaWYgKHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSB7XG4gICAgICBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IG1heF9jb2RlID0gbjtcbiAgICAgIHMuZGVwdGhbbl0gPSAwO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gMDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGUgcGt6aXAgZm9ybWF0IHJlcXVpcmVzIHRoYXQgYXQgbGVhc3Qgb25lIGRpc3RhbmNlIGNvZGUgZXhpc3RzLFxuICAgKiBhbmQgdGhhdCBhdCBsZWFzdCBvbmUgYml0IHNob3VsZCBiZSBzZW50IGV2ZW4gaWYgdGhlcmUgaXMgb25seSBvbmVcbiAgICogcG9zc2libGUgY29kZS4gU28gdG8gYXZvaWQgc3BlY2lhbCBjaGVja3MgbGF0ZXIgb24gd2UgZm9yY2UgYXQgbGVhc3RcbiAgICogdHdvIGNvZGVzIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeS5cbiAgICovXG4gIHdoaWxlIChzLmhlYXBfbGVuIDwgMikge1xuICAgIG5vZGUgPSBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IChtYXhfY29kZSA8IDIgPyArK21heF9jb2RlIDogMCk7XG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSAxO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAwO1xuICAgIHMub3B0X2xlbi0tO1xuXG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuIC09IHN0cmVlW25vZGUgKiAyICsgMV0vKi5MZW4qLztcbiAgICB9XG4gICAgLyogbm9kZSBpcyAwIG9yIDEgc28gaXQgZG9lcyBub3QgaGF2ZSBleHRyYSBiaXRzICovXG4gIH1cbiAgZGVzYy5tYXhfY29kZSA9IG1heF9jb2RlO1xuXG4gIC8qIFRoZSBlbGVtZW50cyBoZWFwW2hlYXBfbGVuLzIrMSAuLiBoZWFwX2xlbl0gYXJlIGxlYXZlcyBvZiB0aGUgdHJlZSxcbiAgICogZXN0YWJsaXNoIHN1Yi1oZWFwcyBvZiBpbmNyZWFzaW5nIGxlbmd0aHM6XG4gICAqL1xuICBmb3IgKG4gPSAocy5oZWFwX2xlbiA+PiAxLyppbnQgLzIqLyk7IG4gPj0gMTsgbi0tKSB7IHBxZG93bmhlYXAocywgdHJlZSwgbik7IH1cblxuICAvKiBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBieSByZXBlYXRlZGx5IGNvbWJpbmluZyB0aGUgbGVhc3QgdHdvXG4gICAqIGZyZXF1ZW50IG5vZGVzLlxuICAgKi9cbiAgbm9kZSA9IGVsZW1zOyAgICAgICAgICAgICAgLyogbmV4dCBpbnRlcm5hbCBub2RlIG9mIHRoZSB0cmVlICovXG4gIGRvIHtcbiAgICAvL3BxcmVtb3ZlKHMsIHRyZWUsIG4pOyAgLyogbiA9IG5vZGUgb2YgbGVhc3QgZnJlcXVlbmN5ICovXG4gICAgLyoqKiBwcXJlbW92ZSAqKiovXG4gICAgbiA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcbiAgICBzLmhlYXBbMS8qU01BTExFU1QqL10gPSBzLmhlYXBbcy5oZWFwX2xlbi0tXTtcbiAgICBwcWRvd25oZWFwKHMsIHRyZWUsIDEvKlNNQUxMRVNUKi8pO1xuICAgIC8qKiovXG5cbiAgICBtID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dOyAvKiBtID0gbm9kZSBvZiBuZXh0IGxlYXN0IGZyZXF1ZW5jeSAqL1xuXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBuOyAvKiBrZWVwIHRoZSBub2RlcyBzb3J0ZWQgYnkgZnJlcXVlbmN5ICovXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBtO1xuXG4gICAgLyogQ3JlYXRlIGEgbmV3IG5vZGUgZmF0aGVyIG9mIG4gYW5kIG0gKi9cbiAgICB0cmVlW25vZGUgKiAyXS8qLkZyZXEqLyA9IHRyZWVbbiAqIDJdLyouRnJlcSovICsgdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgcy5kZXB0aFtub2RlXSA9IChzLmRlcHRoW25dID49IHMuZGVwdGhbbV0gPyBzLmRlcHRoW25dIDogcy5kZXB0aFttXSkgKyAxO1xuICAgIHRyZWVbbiAqIDIgKyAxXS8qLkRhZCovID0gdHJlZVttICogMiArIDFdLyouRGFkKi8gPSBub2RlO1xuXG4gICAgLyogYW5kIGluc2VydCB0aGUgbmV3IG5vZGUgaW4gdGhlIGhlYXAgKi9cbiAgICBzLmhlYXBbMS8qU01BTExFU1QqL10gPSBub2RlKys7XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcblxuICB9IHdoaWxlIChzLmhlYXBfbGVuID49IDIpO1xuXG4gIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dO1xuXG4gIC8qIEF0IHRoaXMgcG9pbnQsIHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQuIFdlIGNhbiBub3dcbiAgICogZ2VuZXJhdGUgdGhlIGJpdCBsZW5ndGhzLlxuICAgKi9cbiAgZ2VuX2JpdGxlbihzLCBkZXNjKTtcblxuICAvKiBUaGUgZmllbGQgbGVuIGlzIG5vdyBzZXQsIHdlIGNhbiBnZW5lcmF0ZSB0aGUgYml0IGNvZGVzICovXG4gIGdlbl9jb2Rlcyh0cmVlLCBtYXhfY29kZSwgcy5ibF9jb3VudCk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTY2FuIGEgbGl0ZXJhbCBvciBkaXN0YW5jZSB0cmVlIHRvIGRldGVybWluZSB0aGUgZnJlcXVlbmNpZXMgb2YgdGhlIGNvZGVzXG4gKiBpbiB0aGUgYml0IGxlbmd0aCB0cmVlLlxuICovXG5mdW5jdGlvbiBzY2FuX3RyZWUocywgdHJlZSwgbWF4X2NvZGUpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgICAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xue1xuICB2YXIgbjsgICAgICAgICAgICAgICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovXG4gIHZhciBwcmV2bGVuID0gLTE7ICAgICAgICAgIC8qIGxhc3QgZW1pdHRlZCBsZW5ndGggKi9cbiAgdmFyIGN1cmxlbjsgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgY29kZSAqL1xuXG4gIHZhciBuZXh0bGVuID0gdHJlZVswICogMiArIDFdLyouTGVuKi87IC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi9cblxuICB2YXIgY291bnQgPSAwOyAgICAgICAgICAgICAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xuICB2YXIgbWF4X2NvdW50ID0gNzsgICAgICAgICAvKiBtYXggcmVwZWF0IGNvdW50ICovXG4gIHZhciBtaW5fY291bnQgPSA0OyAgICAgICAgIC8qIG1pbiByZXBlYXQgY291bnQgKi9cblxuICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgIG1heF9jb3VudCA9IDEzODtcbiAgICBtaW5fY291bnQgPSAzO1xuICB9XG4gIHRyZWVbKG1heF9jb2RlICsgMSkgKiAyICsgMV0vKi5MZW4qLyA9IDB4ZmZmZjsgLyogZ3VhcmQgKi9cblxuICBmb3IgKG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHtcbiAgICBjdXJsZW4gPSBuZXh0bGVuO1xuICAgIG5leHRsZW4gPSB0cmVlWyhuICsgMSkgKiAyICsgMV0vKi5MZW4qLztcblxuICAgIGlmICgrK2NvdW50IDwgbWF4X2NvdW50ICYmIGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgY29udGludWU7XG5cbiAgICB9IGVsc2UgaWYgKGNvdW50IDwgbWluX2NvdW50KSB7XG4gICAgICBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8gKz0gY291bnQ7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuXG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7IHMuYmxfdHJlZVtjdXJsZW4gKiAyXS8qLkZyZXEqLysrOyB9XG4gICAgICBzLmJsX3RyZWVbUkVQXzNfNiAqIDJdLyouRnJlcSovKys7XG5cbiAgICB9IGVsc2UgaWYgKGNvdW50IDw9IDEwKSB7XG4gICAgICBzLmJsX3RyZWVbUkVQWl8zXzEwICogMl0vKi5GcmVxKi8rKztcblxuICAgIH0gZWxzZSB7XG4gICAgICBzLmJsX3RyZWVbUkVQWl8xMV8xMzggKiAyXS8qLkZyZXEqLysrO1xuICAgIH1cblxuICAgIGNvdW50ID0gMDtcbiAgICBwcmV2bGVuID0gY3VybGVuO1xuXG4gICAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICAgIG1heF9jb3VudCA9IDEzODtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgbWF4X2NvdW50ID0gNjtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4X2NvdW50ID0gNztcbiAgICAgIG1pbl9jb3VudCA9IDQ7XG4gICAgfVxuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgbGl0ZXJhbCBvciBkaXN0YW5jZSB0cmVlIGluIGNvbXByZXNzZWQgZm9ybSwgdXNpbmcgdGhlIGNvZGVzIGluXG4gKiBibF90cmVlLlxuICovXG5mdW5jdGlvbiBzZW5kX3RyZWUocywgdHJlZSwgbWF4X2NvZGUpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cbntcbiAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgcHJldmxlbiA9IC0xOyAgICAgICAgICAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovXG4gIHZhciBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuICB2YXIgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXS8qLkxlbiovOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cbiAgdmFyIGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cbiAgdmFyIG1heF9jb3VudCA9IDc7ICAgICAgICAgLyogbWF4IHJlcGVhdCBjb3VudCAqL1xuICB2YXIgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXG5cbiAgLyogdHJlZVttYXhfY29kZSsxXS5MZW4gPSAtMTsgKi8gIC8qIGd1YXJkIGFscmVhZHkgc2V0ICovXG4gIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgbWF4X2NvdW50ID0gMTM4O1xuICAgIG1pbl9jb3VudCA9IDM7XG4gIH1cblxuICBmb3IgKG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHtcbiAgICBjdXJsZW4gPSBuZXh0bGVuO1xuICAgIG5leHRsZW4gPSB0cmVlWyhuICsgMSkgKiAyICsgMV0vKi5MZW4qLztcblxuICAgIGlmICgrK2NvdW50IDwgbWF4X2NvdW50ICYmIGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgY29udGludWU7XG5cbiAgICB9IGVsc2UgaWYgKGNvdW50IDwgbWluX2NvdW50KSB7XG4gICAgICBkbyB7IHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7IH0gd2hpbGUgKC0tY291bnQgIT09IDApO1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcbiAgICAgIGlmIChjdXJsZW4gIT09IHByZXZsZW4pIHtcbiAgICAgICAgc2VuZF9jb2RlKHMsIGN1cmxlbiwgcy5ibF90cmVlKTtcbiAgICAgICAgY291bnQtLTtcbiAgICAgIH1cbiAgICAgIC8vQXNzZXJ0KGNvdW50ID49IDMgJiYgY291bnQgPD0gNiwgXCIgM182P1wiKTtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBfM182LCBzLmJsX3RyZWUpO1xuICAgICAgc2VuZF9iaXRzKHMsIGNvdW50IC0gMywgMik7XG5cbiAgICB9IGVsc2UgaWYgKGNvdW50IDw9IDEwKSB7XG4gICAgICBzZW5kX2NvZGUocywgUkVQWl8zXzEwLCBzLmJsX3RyZWUpO1xuICAgICAgc2VuZF9iaXRzKHMsIGNvdW50IC0gMywgMyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUFpfMTFfMTM4LCBzLmJsX3RyZWUpO1xuICAgICAgc2VuZF9iaXRzKHMsIGNvdW50IC0gMTEsIDcpO1xuICAgIH1cblxuICAgIGNvdW50ID0gMDtcbiAgICBwcmV2bGVuID0gY3VybGVuO1xuICAgIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIG1heF9jb3VudCA9IDY7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1heF9jb3VudCA9IDc7XG4gICAgICBtaW5fY291bnQgPSA0O1xuICAgIH1cbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgZm9yIHRoZSBiaXQgbGVuZ3RocyBhbmQgcmV0dXJuIHRoZSBpbmRleCBpblxuICogYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkX2JsX3RyZWUocykge1xuICB2YXIgbWF4X2JsaW5kZXg7ICAvKiBpbmRleCBvZiBsYXN0IGJpdCBsZW5ndGggY29kZSBvZiBub24gemVybyBmcmVxICovXG5cbiAgLyogRGV0ZXJtaW5lIHRoZSBiaXQgbGVuZ3RoIGZyZXF1ZW5jaWVzIGZvciBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqL1xuICBzY2FuX3RyZWUocywgcy5keW5fbHRyZWUsIHMubF9kZXNjLm1heF9jb2RlKTtcbiAgc2Nhbl90cmVlKHMsIHMuZHluX2R0cmVlLCBzLmRfZGVzYy5tYXhfY29kZSk7XG5cbiAgLyogQnVpbGQgdGhlIGJpdCBsZW5ndGggdHJlZTogKi9cbiAgYnVpbGRfdHJlZShzLCBzLmJsX2Rlc2MpO1xuICAvKiBvcHRfbGVuIG5vdyBpbmNsdWRlcyB0aGUgbGVuZ3RoIG9mIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucywgZXhjZXB0XG4gICAqIHRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RocyBjb2RlcyBhbmQgdGhlIDUrNSs0IGJpdHMgZm9yIHRoZSBjb3VudHMuXG4gICAqL1xuXG4gIC8qIERldGVybWluZSB0aGUgbnVtYmVyIG9mIGJpdCBsZW5ndGggY29kZXMgdG8gc2VuZC4gVGhlIHBremlwIGZvcm1hdFxuICAgKiByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IDQgYml0IGxlbmd0aCBjb2RlcyBiZSBzZW50LiAoYXBwbm90ZS50eHQgc2F5c1xuICAgKiAzIGJ1dCB0aGUgYWN0dWFsIHZhbHVlIHVzZWQgaXMgNC4pXG4gICAqL1xuICBmb3IgKG1heF9ibGluZGV4ID0gQkxfQ09ERVMgLSAxOyBtYXhfYmxpbmRleCA+PSAzOyBtYXhfYmxpbmRleC0tKSB7XG4gICAgaWYgKHMuYmxfdHJlZVtibF9vcmRlclttYXhfYmxpbmRleF0gKiAyICsgMV0vKi5MZW4qLyAhPT0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIC8qIFVwZGF0ZSBvcHRfbGVuIHRvIGluY2x1ZGUgdGhlIGJpdCBsZW5ndGggdHJlZSBhbmQgY291bnRzICovXG4gIHMub3B0X2xlbiArPSAzICogKG1heF9ibGluZGV4ICsgMSkgKyA1ICsgNSArIDQ7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuZHluIHRyZWVzOiBkeW4gJWxkLCBzdGF0ICVsZFwiLFxuICAvLyAgICAgICAgcy0+b3B0X2xlbiwgcy0+c3RhdGljX2xlbikpO1xuXG4gIHJldHVybiBtYXhfYmxpbmRleDtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgdGhlIGhlYWRlciBmb3IgYSBibG9jayB1c2luZyBkeW5hbWljIEh1ZmZtYW4gdHJlZXM6IHRoZSBjb3VudHMsIHRoZVxuICogbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcywgdGhlIGxpdGVyYWwgdHJlZSBhbmQgdGhlIGRpc3RhbmNlIHRyZWUuXG4gKiBJTiBhc3NlcnRpb246IGxjb2RlcyA+PSAyNTcsIGRjb2RlcyA+PSAxLCBibGNvZGVzID49IDQuXG4gKi9cbmZ1bmN0aW9uIHNlbmRfYWxsX3RyZWVzKHMsIGxjb2RlcywgZGNvZGVzLCBibGNvZGVzKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGludCBsY29kZXMsIGRjb2RlcywgYmxjb2RlczsgLyogbnVtYmVyIG9mIGNvZGVzIGZvciBlYWNoIHRyZWUgKi9cbntcbiAgdmFyIHJhbms7ICAgICAgICAgICAgICAgICAgICAvKiBpbmRleCBpbiBibF9vcmRlciAqL1xuXG4gIC8vQXNzZXJ0IChsY29kZXMgPj0gMjU3ICYmIGRjb2RlcyA+PSAxICYmIGJsY29kZXMgPj0gNCwgXCJub3QgZW5vdWdoIGNvZGVzXCIpO1xuICAvL0Fzc2VydCAobGNvZGVzIDw9IExfQ09ERVMgJiYgZGNvZGVzIDw9IERfQ09ERVMgJiYgYmxjb2RlcyA8PSBCTF9DT0RFUyxcbiAgLy8gICAgICAgIFwidG9vIG1hbnkgY29kZXNcIik7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY291bnRzOiBcIikpO1xuICBzZW5kX2JpdHMocywgbGNvZGVzIC0gMjU3LCA1KTsgLyogbm90ICsyNTUgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovXG4gIHNlbmRfYml0cyhzLCBkY29kZXMgLSAxLCAgIDUpO1xuICBzZW5kX2JpdHMocywgYmxjb2RlcyAtIDQsICA0KTsgLyogbm90IC0zIGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBmb3IgKHJhbmsgPSAwOyByYW5rIDwgYmxjb2RlczsgcmFuaysrKSB7XG4gICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCBjb2RlICUyZCBcIiwgYmxfb3JkZXJbcmFua10pKTtcbiAgICBzZW5kX2JpdHMocywgcy5ibF90cmVlW2JsX29yZGVyW3JhbmtdICogMiArIDFdLyouTGVuKi8sIDMpO1xuICB9XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG5cbiAgc2VuZF90cmVlKHMsIHMuZHluX2x0cmVlLCBsY29kZXMgLSAxKTsgLyogbGl0ZXJhbCB0cmVlICovXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxubGl0IHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXG4gIHNlbmRfdHJlZShzLCBzLmR5bl9kdHJlZSwgZGNvZGVzIC0gMSk7IC8qIGRpc3RhbmNlIHRyZWUgKi9cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5kaXN0IHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ2hlY2sgaWYgdGhlIGRhdGEgdHlwZSBpcyBURVhUIG9yIEJJTkFSWSwgdXNpbmcgdGhlIGZvbGxvd2luZyBhbGdvcml0aG06XG4gKiAtIFRFWFQgaWYgdGhlIHR3byBjb25kaXRpb25zIGJlbG93IGFyZSBzYXRpc2ZpZWQ6XG4gKiAgICBhKSBUaGVyZSBhcmUgbm8gbm9uLXBvcnRhYmxlIGNvbnRyb2wgY2hhcmFjdGVycyBiZWxvbmdpbmcgdG8gdGhlXG4gKiAgICAgICBcImJsYWNrIGxpc3RcIiAoMC4uNiwgMTQuLjI1LCAyOC4uMzEpLlxuICogICAgYikgVGhlcmUgaXMgYXQgbGVhc3Qgb25lIHByaW50YWJsZSBjaGFyYWN0ZXIgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJ3aGl0ZSBsaXN0XCIgKDkge1RBQn0sIDEwIHtMRn0sIDEzIHtDUn0sIDMyLi4yNTUpLlxuICogLSBCSU5BUlkgb3RoZXJ3aXNlLlxuICogLSBUaGUgZm9sbG93aW5nIHBhcnRpYWxseS1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgZm9ybSBhXG4gKiAgIFwiZ3JheSBsaXN0XCIgdGhhdCBpcyBpZ25vcmVkIGluIHRoaXMgZGV0ZWN0aW9uIGFsZ29yaXRobTpcbiAqICAgKDcge0JFTH0sIDgge0JTfSwgMTEge1ZUfSwgMTIge0ZGfSwgMjYge1NVQn0sIDI3IHtFU0N9KS5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBGcmVxIG9mIGR5bl9sdHJlZSBhcmUgc2V0LlxuICovXG5mdW5jdGlvbiBkZXRlY3RfZGF0YV90eXBlKHMpIHtcbiAgLyogYmxhY2tfbWFzayBpcyB0aGUgYml0IG1hc2sgb2YgYmxhY2stbGlzdGVkIGJ5dGVzXG4gICAqIHNldCBiaXRzIDAuLjYsIDE0Li4yNSwgYW5kIDI4Li4zMVxuICAgKiAweGYzZmZjMDdmID0gYmluYXJ5IDExMTEwMDExMTExMTExMTExMTAwMDAwMDAxMTExMTExXG4gICAqL1xuICB2YXIgYmxhY2tfbWFzayA9IDB4ZjNmZmMwN2Y7XG4gIHZhciBuO1xuXG4gIC8qIENoZWNrIGZvciBub24tdGV4dHVhbCAoXCJibGFjay1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGZvciAobiA9IDA7IG4gPD0gMzE7IG4rKywgYmxhY2tfbWFzayA+Pj49IDEpIHtcbiAgICBpZiAoKGJsYWNrX21hc2sgJiAxKSAmJiAocy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSkge1xuICAgICAgcmV0dXJuIFpfQklOQVJZO1xuICAgIH1cbiAgfVxuXG4gIC8qIENoZWNrIGZvciB0ZXh0dWFsIChcIndoaXRlLWxpc3RlZFwiKSBieXRlcy4gKi9cbiAgaWYgKHMuZHluX2x0cmVlWzkgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fCBzLmR5bl9sdHJlZVsxMCAqIDJdLyouRnJlcSovICE9PSAwIHx8XG4gICAgICBzLmR5bl9sdHJlZVsxMyAqIDJdLyouRnJlcSovICE9PSAwKSB7XG4gICAgcmV0dXJuIFpfVEVYVDtcbiAgfVxuICBmb3IgKG4gPSAzMjsgbiA8IExJVEVSQUxTOyBuKyspIHtcbiAgICBpZiAocy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSB7XG4gICAgICByZXR1cm4gWl9URVhUO1xuICAgIH1cbiAgfVxuXG4gIC8qIFRoZXJlIGFyZSBubyBcImJsYWNrLWxpc3RlZFwiIG9yIFwid2hpdGUtbGlzdGVkXCIgYnl0ZXM6XG4gICAqIHRoaXMgc3RyZWFtIGVpdGhlciBpcyBlbXB0eSBvciBoYXMgdG9sZXJhdGVkIChcImdyYXktbGlzdGVkXCIpIGJ5dGVzIG9ubHkuXG4gICAqL1xuICByZXR1cm4gWl9CSU5BUlk7XG59XG5cblxudmFyIHN0YXRpY19pbml0X2RvbmUgPSBmYWxzZTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplIHRoZSB0cmVlIGRhdGEgc3RydWN0dXJlcyBmb3IgYSBuZXcgemxpYiBzdHJlYW0uXG4gKi9cbmZ1bmN0aW9uIF90cl9pbml0KHMpXG57XG5cbiAgaWYgKCFzdGF0aWNfaW5pdF9kb25lKSB7XG4gICAgdHJfc3RhdGljX2luaXQoKTtcbiAgICBzdGF0aWNfaW5pdF9kb25lID0gdHJ1ZTtcbiAgfVxuXG4gIHMubF9kZXNjICA9IG5ldyBUcmVlRGVzYyhzLmR5bl9sdHJlZSwgc3RhdGljX2xfZGVzYyk7XG4gIHMuZF9kZXNjICA9IG5ldyBUcmVlRGVzYyhzLmR5bl9kdHJlZSwgc3RhdGljX2RfZGVzYyk7XG4gIHMuYmxfZGVzYyA9IG5ldyBUcmVlRGVzYyhzLmJsX3RyZWUsIHN0YXRpY19ibF9kZXNjKTtcblxuICBzLmJpX2J1ZiA9IDA7XG4gIHMuYmlfdmFsaWQgPSAwO1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIGZpcnN0IGJsb2NrIG9mIHRoZSBmaXJzdCBmaWxlOiAqL1xuICBpbml0X2Jsb2NrKHMpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIHN0b3JlZCBibG9ja1xuICovXG5mdW5jdGlvbiBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdClcbi8vRGVmbGF0ZVN0YXRlICpzO1xuLy9jaGFyZiAqYnVmOyAgICAgICAvKiBpbnB1dCBibG9jayAqL1xuLy91bGcgc3RvcmVkX2xlbjsgICAvKiBsZW5ndGggb2YgaW5wdXQgYmxvY2sgKi9cbi8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xue1xuICBzZW5kX2JpdHMocywgKFNUT1JFRF9CTE9DSyA8PCAxKSArIChsYXN0ID8gMSA6IDApLCAzKTsgICAgLyogc2VuZCBibG9jayB0eXBlICovXG4gIGNvcHlfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCB0cnVlKTsgLyogd2l0aCBoZWFkZXIgKi9cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgb25lIGVtcHR5IHN0YXRpYyBibG9jayB0byBnaXZlIGVub3VnaCBsb29rYWhlYWQgZm9yIGluZmxhdGUuXG4gKiBUaGlzIHRha2VzIDEwIGJpdHMsIG9mIHdoaWNoIDcgbWF5IHJlbWFpbiBpbiB0aGUgYml0IGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gX3RyX2FsaWduKHMpIHtcbiAgc2VuZF9iaXRzKHMsIFNUQVRJQ19UUkVFUyA8PCAxLCAzKTtcbiAgc2VuZF9jb2RlKHMsIEVORF9CTE9DSywgc3RhdGljX2x0cmVlKTtcbiAgYmlfZmx1c2gocyk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBEZXRlcm1pbmUgdGhlIGJlc3QgZW5jb2RpbmcgZm9yIHRoZSBjdXJyZW50IGJsb2NrOiBkeW5hbWljIHRyZWVzLCBzdGF0aWNcbiAqIHRyZWVzIG9yIHN0b3JlLCBhbmQgb3V0cHV0IHRoZSBlbmNvZGVkIGJsb2NrIHRvIHRoZSB6aXAgZmlsZS5cbiAqL1xuZnVuY3Rpb24gX3RyX2ZsdXNoX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdClcbi8vRGVmbGF0ZVN0YXRlICpzO1xuLy9jaGFyZiAqYnVmOyAgICAgICAvKiBpbnB1dCBibG9jaywgb3IgTlVMTCBpZiB0b28gb2xkICovXG4vL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqL1xuLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovXG57XG4gIHZhciBvcHRfbGVuYiwgc3RhdGljX2xlbmI7ICAvKiBvcHRfbGVuIGFuZCBzdGF0aWNfbGVuIGluIGJ5dGVzICovXG4gIHZhciBtYXhfYmxpbmRleCA9IDA7ICAgICAgICAvKiBpbmRleCBvZiBsYXN0IGJpdCBsZW5ndGggY29kZSBvZiBub24gemVybyBmcmVxICovXG5cbiAgLyogQnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgdW5sZXNzIGEgc3RvcmVkIGJsb2NrIGlzIGZvcmNlZCAqL1xuICBpZiAocy5sZXZlbCA+IDApIHtcblxuICAgIC8qIENoZWNrIGlmIHRoZSBmaWxlIGlzIGJpbmFyeSBvciB0ZXh0ICovXG4gICAgaWYgKHMuc3RybS5kYXRhX3R5cGUgPT09IFpfVU5LTk9XTikge1xuICAgICAgcy5zdHJtLmRhdGFfdHlwZSA9IGRldGVjdF9kYXRhX3R5cGUocyk7XG4gICAgfVxuXG4gICAgLyogQ29uc3RydWN0IHRoZSBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqL1xuICAgIGJ1aWxkX3RyZWUocywgcy5sX2Rlc2MpO1xuICAgIC8vIFRyYWNldigoc3RkZXJyLCBcIlxcbmxpdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG5cbiAgICBidWlsZF90cmVlKHMsIHMuZF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5kaXN0IGRhdGE6IGR5biAlbGQsIHN0YXQgJWxkXCIsIHMtPm9wdF9sZW4sXG4gICAgLy8gICAgICAgIHMtPnN0YXRpY19sZW4pKTtcbiAgICAvKiBBdCB0aGlzIHBvaW50LCBvcHRfbGVuIGFuZCBzdGF0aWNfbGVuIGFyZSB0aGUgdG90YWwgYml0IGxlbmd0aHMgb2ZcbiAgICAgKiB0aGUgY29tcHJlc3NlZCBibG9jayBkYXRhLCBleGNsdWRpbmcgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLlxuICAgICAqL1xuXG4gICAgLyogQnVpbGQgdGhlIGJpdCBsZW5ndGggdHJlZSBmb3IgdGhlIGFib3ZlIHR3byB0cmVlcywgYW5kIGdldCB0aGUgaW5kZXhcbiAgICAgKiBpbiBibF9vcmRlciBvZiB0aGUgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgdG8gc2VuZC5cbiAgICAgKi9cbiAgICBtYXhfYmxpbmRleCA9IGJ1aWxkX2JsX3RyZWUocyk7XG5cbiAgICAvKiBEZXRlcm1pbmUgdGhlIGJlc3QgZW5jb2RpbmcuIENvbXB1dGUgdGhlIGJsb2NrIGxlbmd0aHMgaW4gYnl0ZXMuICovXG4gICAgb3B0X2xlbmIgPSAocy5vcHRfbGVuICsgMyArIDcpID4+PiAzO1xuICAgIHN0YXRpY19sZW5iID0gKHMuc3RhdGljX2xlbiArIDMgKyA3KSA+Pj4gMztcblxuICAgIC8vIFRyYWNldigoc3RkZXJyLCBcIlxcbm9wdCAlbHUoJWx1KSBzdGF0ICVsdSglbHUpIHN0b3JlZCAlbHUgbGl0ICV1IFwiLFxuICAgIC8vICAgICAgICBvcHRfbGVuYiwgcy0+b3B0X2xlbiwgc3RhdGljX2xlbmIsIHMtPnN0YXRpY19sZW4sIHN0b3JlZF9sZW4sXG4gICAgLy8gICAgICAgIHMtPmxhc3RfbGl0KSk7XG5cbiAgICBpZiAoc3RhdGljX2xlbmIgPD0gb3B0X2xlbmIpIHsgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYjsgfVxuXG4gIH0gZWxzZSB7XG4gICAgLy8gQXNzZXJ0KGJ1ZiAhPSAoY2hhciopMCwgXCJsb3N0IGJ1ZlwiKTtcbiAgICBvcHRfbGVuYiA9IHN0YXRpY19sZW5iID0gc3RvcmVkX2xlbiArIDU7IC8qIGZvcmNlIGEgc3RvcmVkIGJsb2NrICovXG4gIH1cblxuICBpZiAoKHN0b3JlZF9sZW4gKyA0IDw9IG9wdF9sZW5iKSAmJiAoYnVmICE9PSAtMSkpIHtcbiAgICAvKiA0OiB0d28gd29yZHMgZm9yIHRoZSBsZW5ndGhzICovXG5cbiAgICAvKiBUaGUgdGVzdCBidWYgIT0gTlVMTCBpcyBvbmx5IG5lY2Vzc2FyeSBpZiBMSVRfQlVGU0laRSA+IFdTSVpFLlxuICAgICAqIE90aGVyd2lzZSB3ZSBjYW4ndCBoYXZlIHByb2Nlc3NlZCBtb3JlIHRoYW4gV1NJWkUgaW5wdXQgYnl0ZXMgc2luY2VcbiAgICAgKiB0aGUgbGFzdCBibG9jayBmbHVzaCwgYmVjYXVzZSBjb21wcmVzc2lvbiB3b3VsZCBoYXZlIGJlZW5cbiAgICAgKiBzdWNjZXNzZnVsLiBJZiBMSVRfQlVGU0laRSA8PSBXU0laRSwgaXQgaXMgbmV2ZXIgdG9vIGxhdGUgdG9cbiAgICAgKiB0cmFuc2Zvcm0gYSBibG9jayBpbnRvIGEgc3RvcmVkIGJsb2NrLlxuICAgICAqL1xuICAgIF90cl9zdG9yZWRfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KTtcblxuICB9IGVsc2UgaWYgKHMuc3RyYXRlZ3kgPT09IFpfRklYRUQgfHwgc3RhdGljX2xlbmIgPT09IG9wdF9sZW5iKSB7XG5cbiAgICBzZW5kX2JpdHMocywgKFNUQVRJQ19UUkVFUyA8PCAxKSArIChsYXN0ID8gMSA6IDApLCAzKTtcbiAgICBjb21wcmVzc19ibG9jayhzLCBzdGF0aWNfbHRyZWUsIHN0YXRpY19kdHJlZSk7XG5cbiAgfSBlbHNlIHtcbiAgICBzZW5kX2JpdHMocywgKERZTl9UUkVFUyA8PCAxKSArIChsYXN0ID8gMSA6IDApLCAzKTtcbiAgICBzZW5kX2FsbF90cmVlcyhzLCBzLmxfZGVzYy5tYXhfY29kZSArIDEsIHMuZF9kZXNjLm1heF9jb2RlICsgMSwgbWF4X2JsaW5kZXggKyAxKTtcbiAgICBjb21wcmVzc19ibG9jayhzLCBzLmR5bl9sdHJlZSwgcy5keW5fZHRyZWUpO1xuICB9XG4gIC8vIEFzc2VydCAocy0+Y29tcHJlc3NlZF9sZW4gPT0gcy0+Yml0c19zZW50LCBcImJhZCBjb21wcmVzc2VkIHNpemVcIik7XG4gIC8qIFRoZSBhYm92ZSBjaGVjayBpcyBtYWRlIG1vZCAyXjMyLCBmb3IgZmlsZXMgbGFyZ2VyIHRoYW4gNTEyIE1CXG4gICAqIGFuZCB1TG9uZyBpbXBsZW1lbnRlZCBvbiAzMiBiaXRzLlxuICAgKi9cbiAgaW5pdF9ibG9jayhzKTtcblxuICBpZiAobGFzdCkge1xuICAgIGJpX3dpbmR1cChzKTtcbiAgfVxuICAvLyBUcmFjZXYoKHN0ZGVycixcIlxcbmNvbXBybGVuICVsdSglbHUpIFwiLCBzLT5jb21wcmVzc2VkX2xlbj4+MyxcbiAgLy8gICAgICAgcy0+Y29tcHJlc3NlZF9sZW4tNypsYXN0KSk7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2F2ZSB0aGUgbWF0Y2ggaW5mbyBhbmQgdGFsbHkgdGhlIGZyZXF1ZW5jeSBjb3VudHMuIFJldHVybiB0cnVlIGlmXG4gKiB0aGUgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIF90cl90YWxseShzLCBkaXN0LCBsYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB1bnNpZ25lZCBkaXN0OyAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cbi8vICAgIHVuc2lnbmVkIGxjOyAgICAvKiBtYXRjaCBsZW5ndGgtTUlOX01BVENIIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0PT0wKSAqL1xue1xuICAvL3ZhciBvdXRfbGVuZ3RoLCBpbl9sZW5ndGgsIGRjb2RlO1xuXG4gIHMucGVuZGluZ19idWZbcy5kX2J1ZiArIHMubGFzdF9saXQgKiAyXSAgICAgPSAoZGlzdCA+Pj4gOCkgJiAweGZmO1xuICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMiArIDFdID0gZGlzdCAmIDB4ZmY7XG5cbiAgcy5wZW5kaW5nX2J1ZltzLmxfYnVmICsgcy5sYXN0X2xpdF0gPSBsYyAmIDB4ZmY7XG4gIHMubGFzdF9saXQrKztcblxuICBpZiAoZGlzdCA9PT0gMCkge1xuICAgIC8qIGxjIGlzIHRoZSB1bm1hdGNoZWQgY2hhciAqL1xuICAgIHMuZHluX2x0cmVlW2xjICogMl0vKi5GcmVxKi8rKztcbiAgfSBlbHNlIHtcbiAgICBzLm1hdGNoZXMrKztcbiAgICAvKiBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIICovXG4gICAgZGlzdC0tOyAgICAgICAgICAgICAvKiBkaXN0ID0gbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgLy9Bc3NlcnQoKHVzaClkaXN0IDwgKHVzaClNQVhfRElTVChzKSAmJlxuICAgIC8vICAgICAgICh1c2gpbGMgPD0gKHVzaCkoTUFYX01BVENILU1JTl9NQVRDSCkgJiZcbiAgICAvLyAgICAgICAodXNoKWRfY29kZShkaXN0KSA8ICh1c2gpRF9DT0RFUywgIFwiX3RyX3RhbGx5OiBiYWQgbWF0Y2hcIik7XG5cbiAgICBzLmR5bl9sdHJlZVsoX2xlbmd0aF9jb2RlW2xjXSArIExJVEVSQUxTICsgMSkgKiAyXS8qLkZyZXEqLysrO1xuICAgIHMuZHluX2R0cmVlW2RfY29kZShkaXN0KSAqIDJdLyouRnJlcSovKys7XG4gIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcblxuLy8jaWZkZWYgVFJVTkNBVEVfQkxPQ0tcbi8vICAvKiBUcnkgdG8gZ3Vlc3MgaWYgaXQgaXMgcHJvZml0YWJsZSB0byBzdG9wIHRoZSBjdXJyZW50IGJsb2NrIGhlcmUgKi9cbi8vICBpZiAoKHMubGFzdF9saXQgJiAweDFmZmYpID09PSAwICYmIHMubGV2ZWwgPiAyKSB7XG4vLyAgICAvKiBDb21wdXRlIGFuIHVwcGVyIGJvdW5kIGZvciB0aGUgY29tcHJlc3NlZCBsZW5ndGggKi9cbi8vICAgIG91dF9sZW5ndGggPSBzLmxhc3RfbGl0Kjg7XG4vLyAgICBpbl9sZW5ndGggPSBzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydDtcbi8vXG4vLyAgICBmb3IgKGRjb2RlID0gMDsgZGNvZGUgPCBEX0NPREVTOyBkY29kZSsrKSB7XG4vLyAgICAgIG91dF9sZW5ndGggKz0gcy5keW5fZHRyZWVbZGNvZGUqMl0vKi5GcmVxKi8gKiAoNSArIGV4dHJhX2RiaXRzW2Rjb2RlXSk7XG4vLyAgICB9XG4vLyAgICBvdXRfbGVuZ3RoID4+Pj0gMztcbi8vICAgIC8vVHJhY2V2KChzdGRlcnIsXCJcXG5sYXN0X2xpdCAldSwgaW4gJWxkLCBvdXQgfiVsZCglbGQlJSkgXCIsXG4vLyAgICAvLyAgICAgICBzLT5sYXN0X2xpdCwgaW5fbGVuZ3RoLCBvdXRfbGVuZ3RoLFxuLy8gICAgLy8gICAgICAgMTAwTCAtIG91dF9sZW5ndGgqMTAwTC9pbl9sZW5ndGgpKTtcbi8vICAgIGlmIChzLm1hdGNoZXMgPCAocy5sYXN0X2xpdD4+MSkvKmludCAvMiovICYmIG91dF9sZW5ndGggPCAoaW5fbGVuZ3RoPj4xKS8qaW50IC8yKi8pIHtcbi8vICAgICAgcmV0dXJuIHRydWU7XG4vLyAgICB9XG4vLyAgfVxuLy8jZW5kaWZcblxuICByZXR1cm4gKHMubGFzdF9saXQgPT09IHMubGl0X2J1ZnNpemUgLSAxKTtcbiAgLyogV2UgYXZvaWQgZXF1YWxpdHkgd2l0aCBsaXRfYnVmc2l6ZSBiZWNhdXNlIG9mIHdyYXBhcm91bmQgYXQgNjRLXG4gICAqIG9uIDE2IGJpdCBtYWNoaW5lcyBhbmQgYmVjYXVzZSBzdG9yZWQgYmxvY2tzIGFyZSByZXN0cmljdGVkIHRvXG4gICAqIDY0Sy0xIGJ5dGVzLlxuICAgKi9cbn1cblxuZXhwb3J0cy5fdHJfaW5pdCAgPSBfdHJfaW5pdDtcbmV4cG9ydHMuX3RyX3N0b3JlZF9ibG9jayA9IF90cl9zdG9yZWRfYmxvY2s7XG5leHBvcnRzLl90cl9mbHVzaF9ibG9jayAgPSBfdHJfZmx1c2hfYmxvY2s7XG5leHBvcnRzLl90cl90YWxseSA9IF90cl90YWxseTtcbmV4cG9ydHMuX3RyX2FsaWduID0gX3RyX2FsaWduO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB6bGliX2luZmxhdGUgPSByZXF1aXJlKCcuL3psaWIvaW5mbGF0ZScpO1xudmFyIHV0aWxzICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMvY29tbW9uJyk7XG52YXIgc3RyaW5ncyAgICAgID0gcmVxdWlyZSgnLi91dGlscy9zdHJpbmdzJyk7XG52YXIgYyAgICAgICAgICAgID0gcmVxdWlyZSgnLi96bGliL2NvbnN0YW50cycpO1xudmFyIG1zZyAgICAgICAgICA9IHJlcXVpcmUoJy4vemxpYi9tZXNzYWdlcycpO1xudmFyIFpTdHJlYW0gICAgICA9IHJlcXVpcmUoJy4vemxpYi96c3RyZWFtJyk7XG52YXIgR1poZWFkZXIgICAgID0gcmVxdWlyZSgnLi96bGliL2d6aGVhZGVyJyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogY2xhc3MgSW5mbGF0ZVxuICpcbiAqIEdlbmVyaWMgSlMtc3R5bGUgd3JhcHBlciBmb3IgemxpYiBjYWxscy4gSWYgeW91IGRvbid0IG5lZWRcbiAqIHN0cmVhbWluZyBiZWhhdmlvdXIgLSB1c2UgbW9yZSBzaW1wbGUgZnVuY3Rpb25zOiBbW2luZmxhdGVdXVxuICogYW5kIFtbaW5mbGF0ZVJhd11dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogaW5mbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbSW5mbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi5cbiAqKi9cblxuLyoqXG4gKiBJbmZsYXRlLnJlc3VsdCAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICpcbiAqIFVuY29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbSW5mbGF0ZSNvbkRhdGFdXVxuICogYW5kIFtbSW5mbGF0ZSNvbkVuZF1dIGhhbmRsZXJzLiBGaWxsZWQgYWZ0ZXIgeW91IHB1c2ggbGFzdCBjaHVua1xuICogKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pIG9yIGlmIHlvdVxuICogcHVzaCBhIGNodW5rIHdpdGggZXhwbGljaXQgZmx1c2ggKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoXG4gKiBgWl9TWU5DX0ZMVVNIYCBwYXJhbSkuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5lcnIgLT4gTnVtYmVyXG4gKlxuICogRXJyb3IgY29kZSBhZnRlciBpbmZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuICogU2hvdWxkIGJlIGNoZWNrZWQgaWYgYnJva2VuIGRhdGEgcG9zc2libGUuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5tc2cgLT4gU3RyaW5nXG4gKlxuICogRXJyb3IgbWVzc2FnZSwgaWYgW1tJbmZsYXRlLmVycl1dICE9IDBcbiAqKi9cblxuXG4vKipcbiAqIG5ldyBJbmZsYXRlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIENyZWF0ZXMgbmV3IGluZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6XG4gKlxuICogLSBgd2luZG93Qml0c2BcbiAqIC0gYGRpY3Rpb25hcnlgXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG4gKlxuICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGluZmxhdGVcbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICogQnkgZGVmYXVsdCwgd2hlbiBubyBvcHRpb25zIHNldCwgYXV0b2RldGVjdCBkZWZsYXRlL2d6aXAgZGF0YSBmb3JtYXQgdmlhXG4gKiB3cmFwcGVyIGhlYWRlci5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiAgICwgY2h1bmsxID0gVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIGNodW5rMiA9IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gKlxuICogdmFyIGluZmxhdGUgPSBuZXcgcGFrby5JbmZsYXRlKHsgbGV2ZWw6IDN9KTtcbiAqXG4gKiBpbmZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7XG4gKiBpbmZsYXRlLnB1c2goY2h1bmsyLCB0cnVlKTsgIC8vIHRydWUgLT4gbGFzdCBjaHVua1xuICpcbiAqIGlmIChpbmZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoaW5mbGF0ZS5lcnIpOyB9XG4gKlxuICogY29uc29sZS5sb2coaW5mbGF0ZS5yZXN1bHQpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBJbmZsYXRlKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluZmxhdGUpKSByZXR1cm4gbmV3IEluZmxhdGUob3B0aW9ucyk7XG5cbiAgdGhpcy5vcHRpb25zID0gdXRpbHMuYXNzaWduKHtcbiAgICBjaHVua1NpemU6IDE2Mzg0LFxuICAgIHdpbmRvd0JpdHM6IDAsXG4gICAgdG86ICcnXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIHZhciBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cbiAgLy8gRm9yY2Ugd2luZG93IHNpemUgZm9yIGByYXdgIGRhdGEsIGlmIG5vdCBzZXQgZGlyZWN0bHksXG4gIC8vIGJlY2F1c2Ugd2UgaGF2ZSBubyBoZWFkZXIgZm9yIGF1dG9kZXRlY3QuXG4gIGlmIChvcHQucmF3ICYmIChvcHQud2luZG93Qml0cyA+PSAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikpIHtcbiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgICBpZiAob3B0LndpbmRvd0JpdHMgPT09IDApIHsgb3B0LndpbmRvd0JpdHMgPSAtMTU7IH1cbiAgfVxuXG4gIC8vIElmIGB3aW5kb3dCaXRzYCBub3QgZGVmaW5lZCAoYW5kIG1vZGUgbm90IHJhdykgLSBzZXQgYXV0b2RldGVjdCBmbGFnIGZvciBnemlwL2RlZmxhdGVcbiAgaWYgKChvcHQud2luZG93Qml0cyA+PSAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikgJiZcbiAgICAgICEob3B0aW9ucyAmJiBvcHRpb25zLndpbmRvd0JpdHMpKSB7XG4gICAgb3B0LndpbmRvd0JpdHMgKz0gMzI7XG4gIH1cblxuICAvLyBHemlwIGhlYWRlciBoYXMgbm8gaW5mbyBhYm91dCB3aW5kb3dzIHNpemUsIHdlIGNhbiBkbyBhdXRvZGV0ZWN0IG9ubHlcbiAgLy8gZm9yIGRlZmxhdGUuIFNvLCBpZiB3aW5kb3cgc2l6ZSBub3Qgc2V0LCBmb3JjZSBpdCB0byBtYXggd2hlbiBnemlwIHBvc3NpYmxlXG4gIGlmICgob3B0LndpbmRvd0JpdHMgPiAxNSkgJiYgKG9wdC53aW5kb3dCaXRzIDwgNDgpKSB7XG4gICAgLy8gYml0IDMgKDE2KSAtPiBnemlwcGVkIGRhdGFcbiAgICAvLyBiaXQgNCAoMzIpIC0+IGF1dG9kZXRlY3QgZ3ppcC9kZWZsYXRlXG4gICAgaWYgKChvcHQud2luZG93Qml0cyAmIDE1KSA9PT0gMCkge1xuICAgICAgb3B0LndpbmRvd0JpdHMgfD0gMTU7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICB0aGlzLmVuZGVkICA9IGZhbHNlOyAgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzXG4gIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cbiAgdGhpcy5zdHJtICAgPSBuZXcgWlN0cmVhbSgpO1xuICB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gMDtcblxuICB2YXIgc3RhdHVzICA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlSW5pdDIoXG4gICAgdGhpcy5zdHJtLFxuICAgIG9wdC53aW5kb3dCaXRzXG4gICk7XG5cbiAgaWYgKHN0YXR1cyAhPT0gYy5aX09LKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZ1tzdGF0dXNdKTtcbiAgfVxuXG4gIHRoaXMuaGVhZGVyID0gbmV3IEdaaGVhZGVyKCk7XG5cbiAgemxpYl9pbmZsYXRlLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcik7XG5cbiAgLy8gU2V0dXAgZGljdGlvbmFyeVxuICBpZiAob3B0LmRpY3Rpb25hcnkpIHtcbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBvcHQuZGljdGlvbmFyeSA9IG5ldyBVaW50OEFycmF5KG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9XG4gICAgaWYgKG9wdC5yYXcpIHsgLy9JbiByYXcgbW9kZSB3ZSBuZWVkIHRvIHNldCB0aGUgZGljdGlvbmFyeSBlYXJseVxuICAgICAgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgb3B0LmRpY3Rpb25hcnkpO1xuICAgICAgaWYgKHN0YXR1cyAhPT0gYy5aX09LKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW5mbGF0ZSNwdXNoKGRhdGFbLCBtb2RlXSkgLT4gQm9vbGVhblxuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fEFycmF5QnVmZmVyfFN0cmluZyk6IGlucHV0IGRhdGFcbiAqIC0gbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy5cbiAqICAgU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGluZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0luZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IG91dHB1dCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIFRoZSBsYXN0IGRhdGEgYmxvY2sgbXVzdCBoYXZlXG4gKiBtb2RlIFpfRklOSVNIIChvciBgdHJ1ZWApLiBUaGF0IHdpbGwgZmx1c2ggaW50ZXJuYWwgcGVuZGluZyBidWZmZXJzIGFuZCBjYWxsXG4gKiBbW0luZmxhdGUjb25FbmRdXS4gRm9yIGludGVyaW0gZXhwbGljaXQgZmx1c2hlcyAod2l0aG91dCBlbmRpbmcgdGhlIHN0cmVhbSkgeW91XG4gKiBjYW4gdXNlIG1vZGUgWl9TWU5DX0ZMVVNILCBrZWVwaW5nIHRoZSBkZWNvbXByZXNzaW9uIGNvbnRleHQuXG4gKlxuICogT24gZmFpbCBjYWxsIFtbSW5mbGF0ZSNvbkVuZF1dIHdpdGggZXJyb3IgY29kZSBhbmQgcmV0dXJuIGZhbHNlLlxuICpcbiAqIFdlIHN0cm9uZ2x5IHJlY29tbWVuZCB0byB1c2UgYFVpbnQ4QXJyYXlgIG9uIGlucHV0IGZvciBiZXN0IHNwZWVkIChvdXRwdXRcbiAqIGZvcm1hdCBpcyBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5KS4gQWxzbywgZG9uJ3Qgc2tpcCBsYXN0IHBhcmFtIGFuZCBhbHdheXNcbiAqIHVzZSB0aGUgc2FtZSB0eXBlIGluIHlvdXIgY29kZSAoYm9vbGVhbiBvciBudW1iZXIpLiBUaGF0IHdpbGwgaW1wcm92ZSBKUyBzcGVlZC5cbiAqXG4gKiBGb3IgcmVndWxhciBgQXJyYXlgLXMgbWFrZSBzdXJlIGFsbCBlbGVtZW50cyBhcmUgWzAuLjI1NV0uXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHB1c2goY2h1bmssIGZhbHNlKTsgLy8gcHVzaCBvbmUgb2YgZGF0YSBjaHVua3NcbiAqIC4uLlxuICogcHVzaChjaHVuaywgdHJ1ZSk7ICAvLyBwdXNoIGxhc3QgY2h1bmtcbiAqIGBgYFxuICoqL1xuSW5mbGF0ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChkYXRhLCBtb2RlKSB7XG4gIHZhciBzdHJtID0gdGhpcy5zdHJtO1xuICB2YXIgY2h1bmtTaXplID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcbiAgdmFyIGRpY3Rpb25hcnkgPSB0aGlzLm9wdGlvbnMuZGljdGlvbmFyeTtcbiAgdmFyIHN0YXR1cywgX21vZGU7XG4gIHZhciBuZXh0X291dF91dGY4LCB0YWlsLCB1dGY4c3RyO1xuXG4gIC8vIEZsYWcgdG8gcHJvcGVybHkgcHJvY2VzcyBaX0JVRl9FUlJPUiBvbiB0ZXN0aW5nIGluZmxhdGUgY2FsbFxuICAvLyB3aGVuIHdlIGNoZWNrIHRoYXQgYWxsIG91dHB1dCBkYXRhIHdhcyBmbHVzaGVkLlxuICB2YXIgYWxsb3dCdWZFcnJvciA9IGZhbHNlO1xuXG4gIGlmICh0aGlzLmVuZGVkKSB7IHJldHVybiBmYWxzZTsgfVxuICBfbW9kZSA9IChtb2RlID09PSB+fm1vZGUpID8gbW9kZSA6ICgobW9kZSA9PT0gdHJ1ZSkgPyBjLlpfRklOSVNIIDogYy5aX05PX0ZMVVNIKTtcblxuICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBPbmx5IGJpbmFyeSBzdHJpbmdzIGNhbiBiZSBkZWNvbXByZXNzZWQgb24gcHJhY3RpY2VcbiAgICBzdHJtLmlucHV0ID0gc3RyaW5ncy5iaW5zdHJpbmcyYnVmKGRhdGEpO1xuICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICBzdHJtLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgc3RybS5pbnB1dCA9IGRhdGE7XG4gIH1cblxuICBzdHJtLm5leHRfaW4gPSAwO1xuICBzdHJtLmF2YWlsX2luID0gc3RybS5pbnB1dC5sZW5ndGg7XG5cbiAgZG8ge1xuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgc3RybS5vdXRwdXQgPSBuZXcgdXRpbHMuQnVmOChjaHVua1NpemUpO1xuICAgICAgc3RybS5uZXh0X291dCA9IDA7XG4gICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZTtcbiAgICB9XG5cbiAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZShzdHJtLCBjLlpfTk9fRkxVU0gpOyAgICAvKiBubyBiYWQgcmV0dXJuIHZhbHVlICovXG5cbiAgICBpZiAoc3RhdHVzID09PSBjLlpfTkVFRF9ESUNUICYmIGRpY3Rpb25hcnkpIHtcbiAgICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIGRpY3Rpb25hcnkpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IGMuWl9CVUZfRVJST1IgJiYgYWxsb3dCdWZFcnJvciA9PT0gdHJ1ZSkge1xuICAgICAgc3RhdHVzID0gYy5aX09LO1xuICAgICAgYWxsb3dCdWZFcnJvciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgIT09IGMuWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPT0gYy5aX09LKSB7XG4gICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG4gICAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RybS5uZXh0X291dCkge1xuICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwIHx8IHN0YXR1cyA9PT0gYy5aX1NUUkVBTV9FTkQgfHwgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgKF9tb2RlID09PSBjLlpfRklOSVNIIHx8IF9tb2RlID09PSBjLlpfU1lOQ19GTFVTSCkpKSB7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgIG5leHRfb3V0X3V0ZjggPSBzdHJpbmdzLnV0Zjhib3JkZXIoc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQpO1xuXG4gICAgICAgICAgdGFpbCA9IHN0cm0ubmV4dF9vdXQgLSBuZXh0X291dF91dGY4O1xuICAgICAgICAgIHV0ZjhzdHIgPSBzdHJpbmdzLmJ1ZjJzdHJpbmcoc3RybS5vdXRwdXQsIG5leHRfb3V0X3V0ZjgpO1xuXG4gICAgICAgICAgLy8gbW92ZSB0YWlsXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHRhaWw7XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemUgLSB0YWlsO1xuICAgICAgICAgIGlmICh0YWlsKSB7IHV0aWxzLmFycmF5U2V0KHN0cm0ub3V0cHV0LCBzdHJtLm91dHB1dCwgbmV4dF9vdXRfdXRmOCwgdGFpbCwgMCk7IH1cblxuICAgICAgICAgIHRoaXMub25EYXRhKHV0ZjhzdHIpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vbkRhdGEodXRpbHMuc2hyaW5rQnVmKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXaGVuIG5vIG1vcmUgaW5wdXQgZGF0YSwgd2Ugc2hvdWxkIGNoZWNrIHRoYXQgaW50ZXJuYWwgaW5mbGF0ZSBidWZmZXJzXG4gICAgLy8gYXJlIGZsdXNoZWQuIFRoZSBvbmx5IHdheSB0byBkbyBpdCB3aGVuIGF2YWlsX291dCA9IDAgLSBydW4gb25lIG1vcmVcbiAgICAvLyBpbmZsYXRlIHBhc3MuIEJ1dCBpZiBvdXRwdXQgZGF0YSBub3QgZXhpc3RzLCBpbmZsYXRlIHJldHVybiBaX0JVRl9FUlJPUi5cbiAgICAvLyBIZXJlIHdlIHNldCBmbGFnIHRvIHByb2Nlc3MgdGhpcyBlcnJvciBwcm9wZXJseS5cbiAgICAvL1xuICAgIC8vIE5PVEUuIERlZmxhdGUgZG9lcyBub3QgcmV0dXJuIGVycm9yIGluIHRoaXMgY2FzZSBhbmQgZG9lcyBub3QgbmVlZHMgc3VjaFxuICAgIC8vIGxvZ2ljLlxuICAgIGlmIChzdHJtLmF2YWlsX2luID09PSAwICYmIHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICBhbGxvd0J1ZkVycm9yID0gdHJ1ZTtcbiAgICB9XG5cbiAgfSB3aGlsZSAoKHN0cm0uYXZhaWxfaW4gPiAwIHx8IHN0cm0uYXZhaWxfb3V0ID09PSAwKSAmJiBzdGF0dXMgIT09IGMuWl9TVFJFQU1fRU5EKTtcblxuICBpZiAoc3RhdHVzID09PSBjLlpfU1RSRUFNX0VORCkge1xuICAgIF9tb2RlID0gYy5aX0ZJTklTSDtcbiAgfVxuXG4gIC8vIEZpbmFsaXplIG9uIHRoZSBsYXN0IGNodW5rLlxuICBpZiAoX21vZGUgPT09IGMuWl9GSU5JU0gpIHtcbiAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gc3RhdHVzID09PSBjLlpfT0s7XG4gIH1cblxuICAvLyBjYWxsYmFjayBpbnRlcmltIHJlc3VsdHMgaWYgWl9TWU5DX0ZMVVNILlxuICBpZiAoX21vZGUgPT09IGMuWl9TWU5DX0ZMVVNIKSB7XG4gICAgdGhpcy5vbkVuZChjLlpfT0spO1xuICAgIHN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIEluZmxhdGUjb25EYXRhKGNodW5rKSAtPiBWb2lkXG4gKiAtIGNodW5rIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IG91dHB1dCBkYXRhLiBUeXBlIG9mIGFycmF5IGRlcGVuZHNcbiAqICAgb24ganMgZW5naW5lIHN1cHBvcnQuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsIGVhY2ggY2h1bmtcbiAqICAgd2lsbCBiZSBzdHJpbmcuXG4gKlxuICogQnkgZGVmYXVsdCwgc3RvcmVzIGRhdGEgYmxvY2tzIGluIGBjaHVua3NbXWAgcHJvcGVydHkgYW5kIGdsdWVcbiAqIHRob3NlIGluIGBvbkVuZGAuIE92ZXJyaWRlIHRoaXMgaGFuZGxlciwgaWYgeW91IG5lZWQgYW5vdGhlciBiZWhhdmlvdXIuXG4gKiovXG5JbmZsYXRlLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7XG59O1xuXG5cbi8qKlxuICogSW5mbGF0ZSNvbkVuZChzdGF0dXMpIC0+IFZvaWRcbiAqIC0gc3RhdHVzIChOdW1iZXIpOiBpbmZsYXRlIHN0YXR1cy4gMCAoWl9PSykgb24gc3VjY2VzcyxcbiAqICAgb3RoZXIgaWYgbm90LlxuICpcbiAqIENhbGxlZCBlaXRoZXIgYWZ0ZXIgeW91IHRlbGwgaW5mbGF0ZSB0aGF0IHRoZSBpbnB1dCBzdHJlYW0gaXNcbiAqIGNvbXBsZXRlIChaX0ZJTklTSCkgb3Igc2hvdWxkIGJlIGZsdXNoZWQgKFpfU1lOQ19GTFVTSClcbiAqIG9yIGlmIGFuIGVycm9yIGhhcHBlbmVkLiBCeSBkZWZhdWx0IC0gam9pbiBjb2xsZWN0ZWQgY2h1bmtzLFxuICogZnJlZSBtZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy5cbiAqKi9cbkluZmxhdGUucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAvLyBPbiBzdWNjZXNzIC0gam9pblxuICBpZiAoc3RhdHVzID09PSBjLlpfT0spIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gR2x1ZSAmIGNvbnZlcnQgaGVyZSwgdW50aWwgd2UgdGVhY2ggcGFrbyB0byBzZW5kXG4gICAgICAvLyB1dGY4IGFsaWduZWQgc3RyaW5ncyB0byBvbkRhdGFcbiAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbignJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gdXRpbHMuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcyk7XG4gICAgfVxuICB9XG4gIHRoaXMuY2h1bmtzID0gW107XG4gIHRoaXMuZXJyID0gc3RhdHVzO1xuICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG59O1xuXG5cbi8qKlxuICogaW5mbGF0ZShkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBEZWNvbXByZXNzIGBkYXRhYCB3aXRoIGluZmxhdGUvdW5nemlwIGFuZCBgb3B0aW9uc2AuIEF1dG9kZXRlY3RcbiAqIGZvcm1hdCB2aWEgd3JhcHBlciBoZWFkZXIgYnkgZGVmYXVsdC4gVGhhdCdzIHdoeSB3ZSBkb24ndCBwcm92aWRlXG4gKiBzZXBhcmF0ZSBgdW5nemlwYCBtZXRob2QuXG4gKlxuICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICpcbiAqIC0gd2luZG93Qml0c1xuICpcbiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIFN1Z2FyIChvcHRpb25zKTpcbiAqXG4gKiAtIGByYXdgIChCb29sZWFuKSAtIHNheSB0aGF0IHdlIHdvcmsgd2l0aCByYXcgc3RyZWFtLCBpZiB5b3UgZG9uJ3Qgd2lzaCB0byBzcGVjaWZ5XG4gKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqICAgLCBpbnB1dCA9IHBha28uZGVmbGF0ZShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIG91dHB1dDtcbiAqXG4gKiB0cnkge1xuICogICBvdXRwdXQgPSBwYWtvLmluZmxhdGUoaW5wdXQpO1xuICogfSBjYXRjaCAoZXJyKVxuICogICBjb25zb2xlLmxvZyhlcnIpO1xuICogfVxuICogYGBgXG4gKiovXG5mdW5jdGlvbiBpbmZsYXRlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBpbmZsYXRvciA9IG5ldyBJbmZsYXRlKG9wdGlvbnMpO1xuXG4gIGluZmxhdG9yLnB1c2goaW5wdXQsIHRydWUpO1xuXG4gIC8vIFRoYXQgd2lsbCBuZXZlciBoYXBwZW5zLCBpZiB5b3UgZG9uJ3QgY2hlYXQgd2l0aCBvcHRpb25zIDopXG4gIGlmIChpbmZsYXRvci5lcnIpIHsgdGhyb3cgaW5mbGF0b3IubXNnIHx8IG1zZ1tpbmZsYXRvci5lcnJdOyB9XG5cbiAgcmV0dXJuIGluZmxhdG9yLnJlc3VsdDtcbn1cblxuXG4vKipcbiAqIGluZmxhdGVSYXcoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tpbmZsYXRlXV0sIGJ1dCBjcmVhdGVzIHJhdyBkYXRhLCB3aXRob3V0IHdyYXBwZXJcbiAqIChoZWFkZXIgYW5kIGFkbGVyMzIgY3JjKS5cbiAqKi9cbmZ1bmN0aW9uIGluZmxhdGVSYXcoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMucmF3ID0gdHJ1ZTtcbiAgcmV0dXJuIGluZmxhdGUoaW5wdXQsIG9wdGlvbnMpO1xufVxuXG5cbi8qKlxuICogdW5nemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIEp1c3Qgc2hvcnRjdXQgdG8gW1tpbmZsYXRlXV0sIGJlY2F1c2UgaXQgYXV0b2RldGVjdHMgZm9ybWF0XG4gKiBieSBoZWFkZXIuY29udGVudC4gRG9uZSBmb3IgY29udmVuaWVuY2UuXG4gKiovXG5cblxuZXhwb3J0cy5JbmZsYXRlID0gSW5mbGF0ZTtcbmV4cG9ydHMuaW5mbGF0ZSA9IGluZmxhdGU7XG5leHBvcnRzLmluZmxhdGVSYXcgPSBpbmZsYXRlUmF3O1xuZXhwb3J0cy51bmd6aXAgID0gaW5mbGF0ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG52YXIgdXRpbHMgICAgICAgICA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xudmFyIGFkbGVyMzIgICAgICAgPSByZXF1aXJlKCcuL2FkbGVyMzInKTtcbnZhciBjcmMzMiAgICAgICAgID0gcmVxdWlyZSgnLi9jcmMzMicpO1xudmFyIGluZmxhdGVfZmFzdCAgPSByZXF1aXJlKCcuL2luZmZhc3QnKTtcbnZhciBpbmZsYXRlX3RhYmxlID0gcmVxdWlyZSgnLi9pbmZ0cmVlcycpO1xuXG52YXIgQ09ERVMgPSAwO1xudmFyIExFTlMgPSAxO1xudmFyIERJU1RTID0gMjtcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqL1xuLy92YXIgWl9OT19GTFVTSCAgICAgID0gMDtcbi8vdmFyIFpfUEFSVElBTF9GTFVTSCA9IDE7XG4vL3ZhciBaX1NZTkNfRkxVU0ggICAgPSAyO1xuLy92YXIgWl9GVUxMX0ZMVVNIICAgID0gMztcbnZhciBaX0ZJTklTSCAgICAgICAgPSA0O1xudmFyIFpfQkxPQ0sgICAgICAgICA9IDU7XG52YXIgWl9UUkVFUyAgICAgICAgID0gNjtcblxuXG4vKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFsdWVzXG4gKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gKi9cbnZhciBaX09LICAgICAgICAgICAgPSAwO1xudmFyIFpfU1RSRUFNX0VORCAgICA9IDE7XG52YXIgWl9ORUVEX0RJQ1QgICAgID0gMjtcbi8vdmFyIFpfRVJSTk8gICAgICAgICA9IC0xO1xudmFyIFpfU1RSRUFNX0VSUk9SICA9IC0yO1xudmFyIFpfREFUQV9FUlJPUiAgICA9IC0zO1xudmFyIFpfTUVNX0VSUk9SICAgICA9IC00O1xudmFyIFpfQlVGX0VSUk9SICAgICA9IC01O1xuLy92YXIgWl9WRVJTSU9OX0VSUk9SID0gLTY7XG5cbi8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xudmFyIFpfREVGTEFURUQgID0gODtcblxuXG4vKiBTVEFURVMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG52YXIgICAgSEVBRCA9IDE7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1hZ2ljIGhlYWRlciAqL1xudmFyICAgIEZMQUdTID0gMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtZXRob2QgYW5kIGZsYWdzIChnemlwKSAqL1xudmFyICAgIFRJTUUgPSAzOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtb2RpZmljYXRpb24gdGltZSAoZ3ppcCkgKi9cbnZhciAgICBPUyA9IDQ7ICAgICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgZmxhZ3MgYW5kIG9wZXJhdGluZyBzeXN0ZW0gKGd6aXApICovXG52YXIgICAgRVhMRU4gPSA1OyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGxlbmd0aCAoZ3ppcCkgKi9cbnZhciAgICBFWFRSQSA9IDY7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgYnl0ZXMgKGd6aXApICovXG52YXIgICAgTkFNRSA9IDc7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBmaWxlIG5hbWUgKGd6aXApICovXG52YXIgICAgQ09NTUVOVCA9IDg7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBjb21tZW50IChnemlwKSAqL1xudmFyICAgIEhDUkMgPSA5OyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBoZWFkZXIgY3JjIChnemlwKSAqL1xudmFyICAgIERJQ1RJRCA9IDEwOyAgICAvKiBpOiB3YWl0aW5nIGZvciBkaWN0aW9uYXJ5IGNoZWNrIHZhbHVlICovXG52YXIgICAgRElDVCA9IDExOyAgICAgIC8qIHdhaXRpbmcgZm9yIGluZmxhdGVTZXREaWN0aW9uYXJ5KCkgY2FsbCAqL1xudmFyICAgICAgICBUWVBFID0gMTI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xudmFyICAgICAgICBUWVBFRE8gPSAxMzsgICAgLyogaTogc2FtZSwgYnV0IHNraXAgY2hlY2sgdG8gZXhpdCBpbmZsYXRlIG9uIG5ldyBibG9jayAqL1xudmFyICAgICAgICBTVE9SRUQgPSAxNDsgICAgLyogaTogd2FpdGluZyBmb3Igc3RvcmVkIHNpemUgKGxlbmd0aCBhbmQgY29tcGxlbWVudCkgKi9cbnZhciAgICAgICAgQ09QWV8gPSAxNTsgICAgIC8qIGkvbzogc2FtZSBhcyBDT1BZIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG52YXIgICAgICAgIENPUFkgPSAxNjsgICAgICAvKiBpL286IHdhaXRpbmcgZm9yIGlucHV0IG9yIG91dHB1dCB0byBjb3B5IHN0b3JlZCBibG9jayAqL1xudmFyICAgICAgICBUQUJMRSA9IDE3OyAgICAgLyogaTogd2FpdGluZyBmb3IgZHluYW1pYyBibG9jayB0YWJsZSBsZW5ndGhzICovXG52YXIgICAgICAgIExFTkxFTlMgPSAxODsgICAvKiBpOiB3YWl0aW5nIGZvciBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbnZhciAgICAgICAgQ09ERUxFTlMgPSAxOTsgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQgYW5kIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqL1xudmFyICAgICAgICAgICAgTEVOXyA9IDIwOyAgICAgIC8qIGk6IHNhbWUgYXMgTEVOIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG52YXIgICAgICAgICAgICBMRU4gPSAyMTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdC9lb2IgY29kZSAqL1xudmFyICAgICAgICAgICAgTEVORVhUID0gMjI7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aCBleHRyYSBiaXRzICovXG52YXIgICAgICAgICAgICBESVNUID0gMjM7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZGlzdGFuY2UgY29kZSAqL1xudmFyICAgICAgICAgICAgRElTVEVYVCA9IDI0OyAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGV4dHJhIGJpdHMgKi9cbnZhciAgICAgICAgICAgIE1BVENIID0gMjU7ICAgICAvKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gY29weSBzdHJpbmcgKi9cbnZhciAgICAgICAgICAgIExJVCA9IDI2OyAgICAgICAvKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gd3JpdGUgbGl0ZXJhbCAqL1xudmFyICAgIENIRUNLID0gMjc7ICAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgY2hlY2sgdmFsdWUgKi9cbnZhciAgICBMRU5HVEggPSAyODsgICAgLyogaTogd2FpdGluZyBmb3IgMzItYml0IGxlbmd0aCAoZ3ppcCkgKi9cbnZhciAgICBET05FID0gMjk7ICAgICAgLyogZmluaXNoZWQgY2hlY2ssIGRvbmUgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cbnZhciAgICBCQUQgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyICAgIE1FTSA9IDMxOyAgICAgICAvKiBnb3QgYW4gaW5mbGF0ZSgpIG1lbW9yeSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyICAgIFNZTkMgPSAzMjsgICAgICAvKiBsb29raW5nIGZvciBzeW5jaHJvbml6YXRpb24gYnl0ZXMgdG8gcmVzdGFydCBpbmZsYXRlKCkgKi9cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5cbnZhciBFTk9VR0hfTEVOUyA9IDg1MjtcbnZhciBFTk9VR0hfRElTVFMgPSA1OTI7XG4vL3ZhciBFTk9VR0ggPSAgKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XG5cbnZhciBNQVhfV0JJVFMgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xudmFyIERFRl9XQklUUyA9IE1BWF9XQklUUztcblxuXG5mdW5jdGlvbiB6c3dhcDMyKHEpIHtcbiAgcmV0dXJuICAoKChxID4+PiAyNCkgJiAweGZmKSArXG4gICAgICAgICAgKChxID4+PiA4KSAmIDB4ZmYwMCkgK1xuICAgICAgICAgICgocSAmIDB4ZmYwMCkgPDwgOCkgK1xuICAgICAgICAgICgocSAmIDB4ZmYpIDw8IDI0KSk7XG59XG5cblxuZnVuY3Rpb24gSW5mbGF0ZVN0YXRlKCkge1xuICB0aGlzLm1vZGUgPSAwOyAgICAgICAgICAgICAvKiBjdXJyZW50IGluZmxhdGUgbW9kZSAqL1xuICB0aGlzLmxhc3QgPSBmYWxzZTsgICAgICAgICAgLyogdHJ1ZSBpZiBwcm9jZXNzaW5nIGxhc3QgYmxvY2sgKi9cbiAgdGhpcy53cmFwID0gMDsgICAgICAgICAgICAgIC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi9cbiAgdGhpcy5oYXZlZGljdCA9IGZhbHNlOyAgICAgIC8qIHRydWUgaWYgZGljdGlvbmFyeSBwcm92aWRlZCAqL1xuICB0aGlzLmZsYWdzID0gMDsgICAgICAgICAgICAgLyogZ3ppcCBoZWFkZXIgbWV0aG9kIGFuZCBmbGFncyAoMCBpZiB6bGliKSAqL1xuICB0aGlzLmRtYXggPSAwOyAgICAgICAgICAgICAgLyogemxpYiBoZWFkZXIgbWF4IGRpc3RhbmNlIChJTkZMQVRFX1NUUklDVCkgKi9cbiAgdGhpcy5jaGVjayA9IDA7ICAgICAgICAgICAgIC8qIHByb3RlY3RlZCBjb3B5IG9mIGNoZWNrIHZhbHVlICovXG4gIHRoaXMudG90YWwgPSAwOyAgICAgICAgICAgICAvKiBwcm90ZWN0ZWQgY29weSBvZiBvdXRwdXQgY291bnQgKi9cbiAgLy8gVE9ETzogbWF5IGJlIHt9XG4gIHRoaXMuaGVhZCA9IG51bGw7ICAgICAgICAgICAvKiB3aGVyZSB0byBzYXZlIGd6aXAgaGVhZGVyIGluZm9ybWF0aW9uICovXG5cbiAgLyogc2xpZGluZyB3aW5kb3cgKi9cbiAgdGhpcy53Yml0cyA9IDA7ICAgICAgICAgICAgIC8qIGxvZyBiYXNlIDIgb2YgcmVxdWVzdGVkIHdpbmRvdyBzaXplICovXG4gIHRoaXMud3NpemUgPSAwOyAgICAgICAgICAgICAvKiB3aW5kb3cgc2l6ZSBvciB6ZXJvIGlmIG5vdCB1c2luZyB3aW5kb3cgKi9cbiAgdGhpcy53aGF2ZSA9IDA7ICAgICAgICAgICAgIC8qIHZhbGlkIGJ5dGVzIGluIHRoZSB3aW5kb3cgKi9cbiAgdGhpcy53bmV4dCA9IDA7ICAgICAgICAgICAgIC8qIHdpbmRvdyB3cml0ZSBpbmRleCAqL1xuICB0aGlzLndpbmRvdyA9IG51bGw7ICAgICAgICAgLyogYWxsb2NhdGVkIHNsaWRpbmcgd2luZG93LCBpZiBuZWVkZWQgKi9cblxuICAvKiBiaXQgYWNjdW11bGF0b3IgKi9cbiAgdGhpcy5ob2xkID0gMDsgICAgICAgICAgICAgIC8qIGlucHV0IGJpdCBhY2N1bXVsYXRvciAqL1xuICB0aGlzLmJpdHMgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGJpdHMgaW4gXCJpblwiICovXG5cbiAgLyogZm9yIHN0cmluZyBhbmQgc3RvcmVkIGJsb2NrIGNvcHlpbmcgKi9cbiAgdGhpcy5sZW5ndGggPSAwOyAgICAgICAgICAgIC8qIGxpdGVyYWwgb3IgbGVuZ3RoIG9mIGRhdGEgdG8gY29weSAqL1xuICB0aGlzLm9mZnNldCA9IDA7ICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFjayB0byBjb3B5IHN0cmluZyBmcm9tICovXG5cbiAgLyogZm9yIHRhYmxlIGFuZCBjb2RlIGRlY29kaW5nICovXG4gIHRoaXMuZXh0cmEgPSAwOyAgICAgICAgICAgICAvKiBleHRyYSBiaXRzIG5lZWRlZCAqL1xuXG4gIC8qIGZpeGVkIGFuZCBkeW5hbWljIGNvZGUgdGFibGVzICovXG4gIHRoaXMubGVuY29kZSA9IG51bGw7ICAgICAgICAgIC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAqL1xuICB0aGlzLmRpc3Rjb2RlID0gbnVsbDsgICAgICAgICAvKiBzdGFydGluZyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKi9cbiAgdGhpcy5sZW5iaXRzID0gMDsgICAgICAgICAgIC8qIGluZGV4IGJpdHMgZm9yIGxlbmNvZGUgKi9cbiAgdGhpcy5kaXN0Yml0cyA9IDA7ICAgICAgICAgIC8qIGluZGV4IGJpdHMgZm9yIGRpc3Rjb2RlICovXG5cbiAgLyogZHluYW1pYyB0YWJsZSBidWlsZGluZyAqL1xuICB0aGlzLm5jb2RlID0gMDsgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLm5sZW4gPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy5uZGlzdCA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy5oYXZlID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlIGxlbmd0aHMgaW4gbGVuc1tdICovXG4gIHRoaXMubmV4dCA9IG51bGw7ICAgICAgICAgICAgICAvKiBuZXh0IGF2YWlsYWJsZSBzcGFjZSBpbiBjb2Rlc1tdICovXG5cbiAgdGhpcy5sZW5zID0gbmV3IHV0aWxzLkJ1ZjE2KDMyMCk7IC8qIHRlbXBvcmFyeSBzdG9yYWdlIGZvciBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy53b3JrID0gbmV3IHV0aWxzLkJ1ZjE2KDI4OCk7IC8qIHdvcmsgYXJlYSBmb3IgY29kZSB0YWJsZSBidWlsZGluZyAqL1xuXG4gIC8qXG4gICBiZWNhdXNlIHdlIGRvbid0IGhhdmUgcG9pbnRlcnMgaW4ganMsIHdlIHVzZSBsZW5jb2RlIGFuZCBkaXN0Y29kZSBkaXJlY3RseVxuICAgYXMgYnVmZmVycyBzbyB3ZSBkb24ndCBuZWVkIGNvZGVzXG4gICovXG4gIC8vdGhpcy5jb2RlcyA9IG5ldyB1dGlscy5CdWYzMihFTk9VR0gpOyAgICAgICAvKiBzcGFjZSBmb3IgY29kZSB0YWJsZXMgKi9cbiAgdGhpcy5sZW5keW4gPSBudWxsOyAgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xuICB0aGlzLmRpc3RkeW4gPSBudWxsOyAgICAgICAgICAgICAvKiBkeW5hbWljIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAoSlMgc3BlY2lmaWMpICovXG4gIHRoaXMuc2FuZSA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGlmIGZhbHNlLCBhbGxvdyBpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgKi9cbiAgdGhpcy5iYWNrID0gMDsgICAgICAgICAgICAgICAgICAgLyogYml0cyBiYWNrIG9mIGxhc3QgdW5wcm9jZXNzZWQgbGVuZ3RoL2xpdCAqL1xuICB0aGlzLndhcyA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBpbml0aWFsIGxlbmd0aCBvZiBtYXRjaCAqL1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlUmVzZXRLZWVwKHN0cm0pIHtcbiAgdmFyIHN0YXRlO1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7XG4gIHN0cm0ubXNnID0gJyc7IC8qWl9OVUxMKi9cbiAgaWYgKHN0YXRlLndyYXApIHsgICAgICAgLyogdG8gc3VwcG9ydCBpbGwtY29uY2VpdmVkIEphdmEgdGVzdCBzdWl0ZSAqL1xuICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTtcbiAgfVxuICBzdGF0ZS5tb2RlID0gSEVBRDtcbiAgc3RhdGUubGFzdCA9IDA7XG4gIHN0YXRlLmhhdmVkaWN0ID0gMDtcbiAgc3RhdGUuZG1heCA9IDMyNzY4O1xuICBzdGF0ZS5oZWFkID0gbnVsbC8qWl9OVUxMKi87XG4gIHN0YXRlLmhvbGQgPSAwO1xuICBzdGF0ZS5iaXRzID0gMDtcbiAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW4gPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIX0xFTlMpO1xuICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW4gPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIX0RJU1RTKTtcblxuICBzdGF0ZS5zYW5lID0gMTtcbiAgc3RhdGUuYmFjayA9IC0xO1xuICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IHJlc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVSZXNldChzdHJtKSB7XG4gIHZhciBzdGF0ZTtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgc3RhdGUud3NpemUgPSAwO1xuICBzdGF0ZS53aGF2ZSA9IDA7XG4gIHN0YXRlLnduZXh0ID0gMDtcbiAgcmV0dXJuIGluZmxhdGVSZXNldEtlZXAoc3RybSk7XG5cbn1cblxuZnVuY3Rpb24gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKSB7XG4gIHZhciB3cmFwO1xuICB2YXIgc3RhdGU7XG5cbiAgLyogZ2V0IHRoZSBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovXG4gIGlmICh3aW5kb3dCaXRzIDwgMCkge1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfVxuICBlbHNlIHtcbiAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4gNCkgKyAxO1xuICAgIGlmICh3aW5kb3dCaXRzIDwgNDgpIHtcbiAgICAgIHdpbmRvd0JpdHMgJj0gMTU7XG4gICAgfVxuICB9XG5cbiAgLyogc2V0IG51bWJlciBvZiB3aW5kb3cgYml0cywgZnJlZSB3aW5kb3cgaWYgZGlmZmVyZW50ICovXG4gIGlmICh3aW5kb3dCaXRzICYmICh3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUpKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIGlmIChzdGF0ZS53aW5kb3cgIT09IG51bGwgJiYgc3RhdGUud2JpdHMgIT09IHdpbmRvd0JpdHMpIHtcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuICB9XG5cbiAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXNldCB0aGUgcmVzdCBvZiBpdCAqL1xuICBzdGF0ZS53cmFwID0gd3JhcDtcbiAgc3RhdGUud2JpdHMgPSB3aW5kb3dCaXRzO1xuICByZXR1cm4gaW5mbGF0ZVJlc2V0KHN0cm0pO1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlSW5pdDIoc3RybSwgd2luZG93Qml0cykge1xuICB2YXIgcmV0O1xuICB2YXIgc3RhdGU7XG5cbiAgaWYgKCFzdHJtKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICAvL3N0cm0ubXNnID0gWl9OVUxMOyAgICAgICAgICAgICAgICAgLyogaW4gY2FzZSB3ZSByZXR1cm4gYW4gZXJyb3IgKi9cblxuICBzdGF0ZSA9IG5ldyBJbmZsYXRlU3RhdGUoKTtcblxuICAvL2lmIChzdGF0ZSA9PT0gWl9OVUxMKSByZXR1cm4gWl9NRU1fRVJST1I7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogYWxsb2NhdGVkXFxuXCIpKTtcbiAgc3RybS5zdGF0ZSA9IHN0YXRlO1xuICBzdGF0ZS53aW5kb3cgPSBudWxsLypaX05VTEwqLztcbiAgcmV0ID0gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKTtcbiAgaWYgKHJldCAhPT0gWl9PSykge1xuICAgIHN0cm0uc3RhdGUgPSBudWxsLypaX05VTEwqLztcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlSW5pdChzdHJtKSB7XG4gIHJldHVybiBpbmZsYXRlSW5pdDIoc3RybSwgREVGX1dCSVRTKTtcbn1cblxuXG4vKlxuIFJldHVybiBzdGF0ZSB3aXRoIGxlbmd0aCBhbmQgZGlzdGFuY2UgZGVjb2RpbmcgdGFibGVzIGFuZCBpbmRleCBzaXplcyBzZXQgdG9cbiBmaXhlZCBjb2RlIGRlY29kaW5nLiAgTm9ybWFsbHkgdGhpcyByZXR1cm5zIGZpeGVkIHRhYmxlcyBmcm9tIGluZmZpeGVkLmguXG4gSWYgQlVJTERGSVhFRCBpcyBkZWZpbmVkLCB0aGVuIGluc3RlYWQgdGhpcyByb3V0aW5lIGJ1aWxkcyB0aGUgdGFibGVzIHRoZVxuIGZpcnN0IHRpbWUgaXQncyBjYWxsZWQsIGFuZCByZXR1cm5zIHRob3NlIHRhYmxlcyB0aGUgZmlyc3QgdGltZSBhbmRcbiB0aGVyZWFmdGVyLiAgVGhpcyByZWR1Y2VzIHRoZSBzaXplIG9mIHRoZSBjb2RlIGJ5IGFib3V0IDJLIGJ5dGVzLCBpblxuIGV4Y2hhbmdlIGZvciBhIGxpdHRsZSBleGVjdXRpb24gdGltZS4gIEhvd2V2ZXIsIEJVSUxERklYRUQgc2hvdWxkIG5vdCBiZVxuIHVzZWQgZm9yIHRocmVhZGVkIGFwcGxpY2F0aW9ucywgc2luY2UgdGhlIHJld3JpdGluZyBvZiB0aGUgdGFibGVzIGFuZCB2aXJnaW5cbiBtYXkgbm90IGJlIHRocmVhZC1zYWZlLlxuICovXG52YXIgdmlyZ2luID0gdHJ1ZTtcblxudmFyIGxlbmZpeCwgZGlzdGZpeDsgLy8gV2UgaGF2ZSBubyBwb2ludGVycyBpbiBKUywgc28ga2VlcCB0YWJsZXMgc2VwYXJhdGVcblxuZnVuY3Rpb24gZml4ZWR0YWJsZXMoc3RhdGUpIHtcbiAgLyogYnVpbGQgZml4ZWQgaHVmZm1hbiB0YWJsZXMgaWYgZmlyc3QgY2FsbCAobWF5IG5vdCBiZSB0aHJlYWQgc2FmZSkgKi9cbiAgaWYgKHZpcmdpbikge1xuICAgIHZhciBzeW07XG5cbiAgICBsZW5maXggPSBuZXcgdXRpbHMuQnVmMzIoNTEyKTtcbiAgICBkaXN0Zml4ID0gbmV3IHV0aWxzLkJ1ZjMyKDMyKTtcblxuICAgIC8qIGxpdGVyYWwvbGVuZ3RoIHRhYmxlICovXG4gICAgc3ltID0gMDtcbiAgICB3aGlsZSAoc3ltIDwgMTQ0KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gODsgfVxuICAgIHdoaWxlIChzeW0gPCAyNTYpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA5OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI4MCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDc7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjg4KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gODsgfVxuXG4gICAgaW5mbGF0ZV90YWJsZShMRU5TLCAgc3RhdGUubGVucywgMCwgMjg4LCBsZW5maXgsICAgMCwgc3RhdGUud29yaywgeyBiaXRzOiA5IH0pO1xuXG4gICAgLyogZGlzdGFuY2UgdGFibGUgKi9cbiAgICBzeW0gPSAwO1xuICAgIHdoaWxlIChzeW0gPCAzMikgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDU7IH1cblxuICAgIGluZmxhdGVfdGFibGUoRElTVFMsIHN0YXRlLmxlbnMsIDAsIDMyLCAgIGRpc3RmaXgsIDAsIHN0YXRlLndvcmssIHsgYml0czogNSB9KTtcblxuICAgIC8qIGRvIHRoaXMganVzdCBvbmNlICovXG4gICAgdmlyZ2luID0gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5sZW5jb2RlID0gbGVuZml4O1xuICBzdGF0ZS5sZW5iaXRzID0gOTtcbiAgc3RhdGUuZGlzdGNvZGUgPSBkaXN0Zml4O1xuICBzdGF0ZS5kaXN0Yml0cyA9IDU7XG59XG5cblxuLypcbiBVcGRhdGUgdGhlIHdpbmRvdyB3aXRoIHRoZSBsYXN0IHdzaXplIChub3JtYWxseSAzMkspIGJ5dGVzIHdyaXR0ZW4gYmVmb3JlXG4gcmV0dXJuaW5nLiAgSWYgd2luZG93IGRvZXMgbm90IGV4aXN0IHlldCwgY3JlYXRlIGl0LiAgVGhpcyBpcyBvbmx5IGNhbGxlZFxuIHdoZW4gYSB3aW5kb3cgaXMgYWxyZWFkeSBpbiB1c2UsIG9yIHdoZW4gb3V0cHV0IGhhcyBiZWVuIHdyaXR0ZW4gZHVyaW5nIHRoaXNcbiBpbmZsYXRlIGNhbGwsIGJ1dCB0aGUgZW5kIG9mIHRoZSBkZWZsYXRlIHN0cmVhbSBoYXMgbm90IGJlZW4gcmVhY2hlZCB5ZXQuXG4gSXQgaXMgYWxzbyBjYWxsZWQgdG8gY3JlYXRlIGEgd2luZG93IGZvciBkaWN0aW9uYXJ5IGRhdGEgd2hlbiBhIGRpY3Rpb25hcnlcbiBpcyBsb2FkZWQuXG5cbiBQcm92aWRpbmcgb3V0cHV0IGJ1ZmZlcnMgbGFyZ2VyIHRoYW4gMzJLIHRvIGluZmxhdGUoKSBzaG91bGQgcHJvdmlkZSBhIHNwZWVkXG4gYWR2YW50YWdlLCBzaW5jZSBvbmx5IHRoZSBsYXN0IDMySyBvZiBvdXRwdXQgaXMgY29waWVkIHRvIHRoZSBzbGlkaW5nIHdpbmRvd1xuIHVwb24gcmV0dXJuIGZyb20gaW5mbGF0ZSgpLCBhbmQgc2luY2UgYWxsIGRpc3RhbmNlcyBhZnRlciB0aGUgZmlyc3QgMzJLIG9mXG4gb3V0cHV0IHdpbGwgZmFsbCBpbiB0aGUgb3V0cHV0IGRhdGEsIG1ha2luZyBtYXRjaCBjb3BpZXMgc2ltcGxlciBhbmQgZmFzdGVyLlxuIFRoZSBhZHZhbnRhZ2UgbWF5IGJlIGRlcGVuZGVudCBvbiB0aGUgc2l6ZSBvZiB0aGUgcHJvY2Vzc29yJ3MgZGF0YSBjYWNoZXMuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZXdpbmRvdyhzdHJtLCBzcmMsIGVuZCwgY29weSkge1xuICB2YXIgZGlzdDtcbiAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAvKiBpZiBpdCBoYXNuJ3QgYmVlbiBkb25lIGFscmVhZHksIGFsbG9jYXRlIHNwYWNlIGZvciB0aGUgd2luZG93ICovXG4gIGlmIChzdGF0ZS53aW5kb3cgPT09IG51bGwpIHtcbiAgICBzdGF0ZS53c2l6ZSA9IDEgPDwgc3RhdGUud2JpdHM7XG4gICAgc3RhdGUud25leHQgPSAwO1xuICAgIHN0YXRlLndoYXZlID0gMDtcblxuICAgIHN0YXRlLndpbmRvdyA9IG5ldyB1dGlscy5CdWY4KHN0YXRlLndzaXplKTtcbiAgfVxuXG4gIC8qIGNvcHkgc3RhdGUtPndzaXplIG9yIGxlc3Mgb3V0cHV0IGJ5dGVzIGludG8gdGhlIGNpcmN1bGFyIHdpbmRvdyAqL1xuICBpZiAoY29weSA+PSBzdGF0ZS53c2l6ZSkge1xuICAgIHV0aWxzLmFycmF5U2V0KHN0YXRlLndpbmRvdywgc3JjLCBlbmQgLSBzdGF0ZS53c2l6ZSwgc3RhdGUud3NpemUsIDApO1xuICAgIHN0YXRlLnduZXh0ID0gMDtcbiAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuICB9XG4gIGVsc2Uge1xuICAgIGRpc3QgPSBzdGF0ZS53c2l6ZSAtIHN0YXRlLnduZXh0O1xuICAgIGlmIChkaXN0ID4gY29weSkge1xuICAgICAgZGlzdCA9IGNvcHk7XG4gICAgfVxuICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93ICsgc3RhdGUtPnduZXh0LCBlbmQgLSBjb3B5LCBkaXN0KTtcbiAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gY29weSwgZGlzdCwgc3RhdGUud25leHQpO1xuICAgIGNvcHkgLT0gZGlzdDtcbiAgICBpZiAoY29weSkge1xuICAgICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3csIGVuZCAtIGNvcHksIGNvcHkpO1xuICAgICAgdXRpbHMuYXJyYXlTZXQoc3RhdGUud2luZG93LCBzcmMsIGVuZCAtIGNvcHksIGNvcHksIDApO1xuICAgICAgc3RhdGUud25leHQgPSBjb3B5O1xuICAgICAgc3RhdGUud2hhdmUgPSBzdGF0ZS53c2l6ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzdGF0ZS53bmV4dCArPSBkaXN0O1xuICAgICAgaWYgKHN0YXRlLnduZXh0ID09PSBzdGF0ZS53c2l6ZSkgeyBzdGF0ZS53bmV4dCA9IDA7IH1cbiAgICAgIGlmIChzdGF0ZS53aGF2ZSA8IHN0YXRlLndzaXplKSB7IHN0YXRlLndoYXZlICs9IGRpc3Q7IH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGUoc3RybSwgZmx1c2gpIHtcbiAgdmFyIHN0YXRlO1xuICB2YXIgaW5wdXQsIG91dHB1dDsgICAgICAgICAgLy8gaW5wdXQvb3V0cHV0IGJ1ZmZlcnNcbiAgdmFyIG5leHQ7ICAgICAgICAgICAgICAgICAgIC8qIG5leHQgaW5wdXQgSU5ERVggKi9cbiAgdmFyIHB1dDsgICAgICAgICAgICAgICAgICAgIC8qIG5leHQgb3V0cHV0IElOREVYICovXG4gIHZhciBoYXZlLCBsZWZ0OyAgICAgICAgICAgICAvKiBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICB2YXIgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogYml0IGJ1ZmZlciAqL1xuICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAgLyogYml0cyBpbiBiaXQgYnVmZmVyICovXG4gIHZhciBfaW4sIF9vdXQ7ICAgICAgICAgICAgICAvKiBzYXZlIHN0YXJ0aW5nIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovXG4gIHZhciBjb3B5OyAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2Ygc3RvcmVkIG9yIG1hdGNoIGJ5dGVzIHRvIGNvcHkgKi9cbiAgdmFyIGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggYnl0ZXMgZnJvbSAqL1xuICB2YXIgZnJvbV9zb3VyY2U7XG4gIHZhciBoZXJlID0gMDsgICAgICAgICAgICAgICAvKiBjdXJyZW50IGRlY29kaW5nIHRhYmxlIGVudHJ5ICovXG4gIHZhciBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOyAvLyBwYWtlZCBcImhlcmVcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuICAvL3ZhciBsYXN0OyAgICAgICAgICAgICAgICAgICAvKiBwYXJlbnQgdGFibGUgZW50cnkgKi9cbiAgdmFyIGxhc3RfYml0cywgbGFzdF9vcCwgbGFzdF92YWw7IC8vIHBha2VkIFwibGFzdFwiIGRlbm9ybWFsaXplZCAoSlMgc3BlY2lmaWMpXG4gIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggdG8gY29weSBmb3IgcmVwZWF0cywgYml0cyB0byBkcm9wICovXG4gIHZhciByZXQ7ICAgICAgICAgICAgICAgICAgICAvKiByZXR1cm4gY29kZSAqL1xuICB2YXIgaGJ1ZiA9IG5ldyB1dGlscy5CdWY4KDQpOyAgICAvKiBidWZmZXIgZm9yIGd6aXAgaGVhZGVyIGNyYyBjYWxjdWxhdGlvbiAqL1xuICB2YXIgb3B0cztcblxuICB2YXIgbjsgLy8gdGVtcG9yYXJ5IHZhciBmb3IgTkVFRF9CSVRTXG5cbiAgdmFyIG9yZGVyID0gLyogcGVybXV0YXRpb24gb2YgY29kZSBsZW5ndGhzICovXG4gICAgWyAxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1IF07XG5cblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHwgIXN0cm0ub3V0cHV0IHx8XG4gICAgICAoIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7IHN0YXRlLm1vZGUgPSBUWVBFRE87IH0gICAgLyogc2tpcCBjaGVjayAqL1xuXG5cbiAgLy8tLS0gTE9BRCgpIC0tLVxuICBwdXQgPSBzdHJtLm5leHRfb3V0O1xuICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcbiAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0O1xuICBuZXh0ID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIGhhdmUgPSBzdHJtLmF2YWlsX2luO1xuICBob2xkID0gc3RhdGUuaG9sZDtcbiAgYml0cyA9IHN0YXRlLmJpdHM7XG4gIC8vLS0tXG5cbiAgX2luID0gaGF2ZTtcbiAgX291dCA9IGxlZnQ7XG4gIHJldCA9IFpfT0s7XG5cbiAgaW5mX2xlYXZlOiAvLyBnb3RvIGVtdWxhdGlvblxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChzdGF0ZS5tb2RlKSB7XG4gICAgICBjYXNlIEhFQUQ6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwID09PSAwKSB7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEVETztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLz09PSBORUVEQklUUygxNik7XG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgaWYgKChzdGF0ZS53cmFwICYgMikgJiYgaG9sZCA9PT0gMHg4YjFmKSB7ICAvKiBnemlwIGhlYWRlciAqL1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gMC8qY3JjMzIoMEwsIFpfTlVMTCwgMCkqLztcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgLy89PT0vL1xuXG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubW9kZSA9IEZMQUdTO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmZsYWdzID0gMDsgICAgICAgICAgIC8qIGV4cGVjdCB6bGliIGhlYWRlciAqL1xuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHN0YXRlLndyYXAgJiAxKSB8fCAgIC8qIGNoZWNrIGlmIHpsaWIgaGVhZGVyIGFsbG93ZWQgKi9cbiAgICAgICAgICAoKChob2xkICYgMHhmZikvKkJJVFMoOCkqLyA8PCA4KSArIChob2xkID4+IDgpKSAlIDMxKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGhlYWRlciBjaGVjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICE9PSBaX0RFRkxBVEVEKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDQ7XG4gICAgICAgIGJpdHMgLT0gNDtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBsZW4gPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA4O1xuICAgICAgICBpZiAoc3RhdGUud2JpdHMgPT09IDApIHtcbiAgICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZW4gPiBzdGF0ZS53Yml0cykge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgd2luZG93IHNpemUnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZG1heCA9IDEgPDwgbGVuO1xuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgemxpYiBoZWFkZXIgb2tcXG5cIikpO1xuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgIHN0YXRlLm1vZGUgPSBob2xkICYgMHgyMDAgPyBESUNUSUQgOiBUWVBFO1xuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEZMQUdTOlxuICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUuZmxhZ3MgPSBob2xkO1xuICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHhmZikgIT09IFpfREVGTEFURUQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweGUwMDApIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGhlYWRlciBmbGFncyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLnRleHQgPSAoKGhvbGQgPj4gOCkgJiAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gVElNRTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUSU1FOlxuICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLnRpbWUgPSBob2xkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgIC8vPT09IENSQzQoc3RhdGUuY2hlY2ssIGhvbGQpXG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIGhidWZbMl0gPSAoaG9sZCA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzNdID0gKGhvbGQgPj4+IDI0KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgNCwgMCk7XG4gICAgICAgICAgLy89PT1cbiAgICAgICAgfVxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IE9TO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE9TOlxuICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLnhmbGFncyA9IChob2xkICYgMHhmZik7XG4gICAgICAgICAgc3RhdGUuaGVhZC5vcyA9IChob2xkID4+IDgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBFWExFTjtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBFWExFTjpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwNDAwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkO1xuICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX2xlbiA9IGhvbGQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG51bGwvKlpfTlVMTCovO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm1vZGUgPSBFWFRSQTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBFWFRSQTpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwNDAwKSB7XG4gICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsgY29weSA9IGhhdmU7IH1cbiAgICAgICAgICBpZiAoY29weSkge1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICAgICAgbGVuID0gc3RhdGUuaGVhZC5leHRyYV9sZW4gLSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgICAgICAgIGlmICghc3RhdGUuaGVhZC5leHRyYSkge1xuICAgICAgICAgICAgICAgIC8vIFVzZSB1bnR5cGVkIGFycmF5IGZvciBtb3JlIGNvbnZlbmllbnQgcHJvY2Vzc2luZyBsYXRlclxuICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBuZXcgQXJyYXkoc3RhdGUuaGVhZC5leHRyYV9sZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHV0aWxzLmFycmF5U2V0KFxuICAgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEsXG4gICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBpcyBsaW1pdGVkIHRvIDY1NTM2IGJ5dGVzXG4gICAgICAgICAgICAgICAgLy8gLSBubyBuZWVkIGZvciBhZGRpdGlvbmFsIHNpemUgY2hlY2tcbiAgICAgICAgICAgICAgICBjb3B5LFxuICAgICAgICAgICAgICAgIC8qbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuID8gc3RhdGUuaGVhZC5leHRyYV9tYXggOiBjb3B5LCovXG4gICAgICAgICAgICAgICAgbGVuXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIC8vem1lbWNweShzdGF0ZS5oZWFkLmV4dHJhICsgbGVuLCBuZXh0LFxuICAgICAgICAgICAgICAvLyAgICAgICAgbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4ID9cbiAgICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuIDogY29weSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGgpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubGVuZ3RoID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IE5BTUU7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTkFNRTpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwODAwKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgY29weSA9IDA7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy8gVE9ETzogMiBvciAxIGJ5dGVzP1xuICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107XG4gICAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqL1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQgJiYgbGVuICYmXG4gICAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5uYW1lX21heCovKSkge1xuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XG5cbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICBpZiAobGVuKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT01NRU5UO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPTU1FTlQ6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MTAwMCkge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGNvcHkgPSAwO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdO1xuICAgICAgICAgICAgLyogdXNlIGNvbnN0YW50IGxpbWl0IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkgKi9cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJlxuICAgICAgICAgICAgICAgIChzdGF0ZS5sZW5ndGggPCA2NTUzNiAvKnN0YXRlLmhlYWQuY29tbV9tYXgqLykpIHtcbiAgICAgICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlIChsZW4gJiYgY29weSA8IGhhdmUpO1xuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGlmIChsZW4pIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IEhDUkM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgSENSQzpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaGVhZGVyIGNyYyBtaXNtYXRjaCc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5oY3JjID0gKChzdGF0ZS5mbGFncyA+PiA5KSAmIDEpO1xuICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUNUSUQ6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSB6c3dhcDMyKGhvbGQpO1xuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IERJQ1Q7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElDVDpcbiAgICAgICAgaWYgKHN0YXRlLmhhdmVkaWN0ID09PSAwKSB7XG4gICAgICAgICAgLy8tLS0gUkVTVE9SRSgpIC0tLVxuICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0O1xuICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gICAgICAgICAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7XG4gICAgICAgICAgLy8tLS1cbiAgICAgICAgICByZXR1cm4gWl9ORUVEX0RJQ1Q7XG4gICAgICAgIH1cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUWVBFOlxuICAgICAgICBpZiAoZmx1c2ggPT09IFpfQkxPQ0sgfHwgZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgVFlQRURPOlxuICAgICAgICBpZiAoc3RhdGUubGFzdCkge1xuICAgICAgICAgIC8vLS0tIEJZVEVCSVRTKCkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7XG4gICAgICAgICAgYml0cyAtPSBiaXRzICYgNztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUubW9kZSA9IENIRUNLO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubGFzdCA9IChob2xkICYgMHgwMSkvKkJJVFMoMSkqLztcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoMSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDE7XG4gICAgICAgIGJpdHMgLT0gMTtcbiAgICAgICAgLy8tLS0vL1xuXG4gICAgICAgIHN3aXRjaCAoKGhvbGQgJiAweDAzKS8qQklUUygyKSovKSB7XG4gICAgICAgICAgY2FzZSAwOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3RvcmVkIGJsb2NrICovXG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBzdG9yZWQgYmxvY2slc1xcblwiLFxuICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmxhc3QgPyBcIiAobGFzdClcIiA6IFwiXCIpKTtcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBTVE9SRUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBmaXhlZCBibG9jayAqL1xuICAgICAgICAgICAgZml4ZWR0YWJsZXMoc3RhdGUpO1xuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZml4ZWQgY29kZXMgYmxvY2slc1xcblwiLFxuICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmxhc3QgPyBcIiAobGFzdClcIiA6IFwiXCIpKTtcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU5fOyAgICAgICAgICAgICAvKiBkZWNvZGUgY29kZXMgKi9cbiAgICAgICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykge1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGR5bmFtaWMgYmxvY2sgKi9cbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIGR5bmFtaWMgY29kZXMgYmxvY2slc1xcblwiLFxuICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmxhc3QgPyBcIiAobGFzdClcIiA6IFwiXCIpKTtcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBUQUJMRTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYmxvY2sgdHlwZSc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNUT1JFRDpcbiAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vLyAvKiBnbyB0byBieXRlIGJvdW5kYXJ5ICovXG4gICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNztcbiAgICAgICAgYml0cyAtPSBiaXRzICYgNztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgaWYgKChob2xkICYgMHhmZmZmKSAhPT0gKChob2xkID4+PiAxNikgXiAweGZmZmYpKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3Rocyc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkICYgMHhmZmZmO1xuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBsZW5ndGggJXVcXG5cIixcbiAgICAgICAgLy8gICAgICAgIHN0YXRlLmxlbmd0aCkpO1xuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IENPUFlfO1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09QWV86XG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT1BZO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPUFk6XG4gICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7IGNvcHkgPSBoYXZlOyB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4gICAgICAgICAgaWYgKGNvcHkgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgLy8tLS0gem1lbWNweShwdXQsIG5leHQsIGNvcHkpOyAtLS1cbiAgICAgICAgICB1dGlscy5hcnJheVNldChvdXRwdXQsIGlucHV0LCBuZXh0LCBjb3B5LCBwdXQpO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgICBwdXQgKz0gY29weTtcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBlbmRcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRBQkxFOlxuICAgICAgICAvLz09PSBORUVEQklUUygxNCk7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTQpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubmxlbiA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDI1NztcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDU7XG4gICAgICAgIGJpdHMgLT0gNTtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5uZGlzdCA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDE7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgICBiaXRzIC09IDU7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUubmNvZGUgPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA0O1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg0KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNDtcbiAgICAgICAgYml0cyAtPSA0O1xuICAgICAgICAvLy0tLS8vXG4vLyNpZm5kZWYgUEtaSVBfQlVHX1dPUktBUk9VTkRcbiAgICAgICAgaWYgKHN0YXRlLm5sZW4gPiAyODYgfHwgc3RhdGUubmRpc3QgPiAzMCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3RvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHRhYmxlIHNpemVzIG9rXFxuXCIpKTtcbiAgICAgICAgc3RhdGUuaGF2ZSA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5MRU5TO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTkxFTlM6XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmNvZGUpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzKTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gKGhvbGQgJiAweDA3KTsvL0JJVFMoMyk7XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gMztcbiAgICAgICAgICBiaXRzIC09IDM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgMTkpIHtcbiAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAvL3N0YXRlLm5leHQgPSBzdGF0ZS5jb2RlcztcbiAgICAgICAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcbiAgICAgICAgLy8gU3dpdGNoIHRvIHVzZSBkeW5hbWljIHRhYmxlXG4gICAgICAgIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW47XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSA3O1xuXG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShDT0RFUywgc3RhdGUubGVucywgMCwgMTksIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzO1xuXG4gICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBjb2RlIGxlbmd0aHMgb2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5oYXZlID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IENPREVMRU5TO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPREVMRU5TOlxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUubGVuYml0cykgLSAxKV07LypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cbiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhlcmVfdmFsIDwgMTYpIHtcbiAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGhlcmVfdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChoZXJlX3ZhbCA9PT0gMTYpIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMik7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAyO1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnO1xuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGVuID0gc3RhdGUubGVuc1tzdGF0ZS5oYXZlIC0gMV07XG4gICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAweDAzKTsvL0JJVFMoMik7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhlcmVfdmFsID09PSAxNykge1xuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAzKTtcbiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDM7XG4gICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAweDA3KTsvL0JJVFMoMyk7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSAzO1xuICAgICAgICAgICAgICBiaXRzIC09IDM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyA3KTtcbiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDc7XG4gICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICAgIGNvcHkgPSAxMSArIChob2xkICYgMHg3Zik7Ly9CSVRTKDcpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyg3KSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gNztcbiAgICAgICAgICAgICAgYml0cyAtPSA3O1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSArIGNvcHkgPiBzdGF0ZS5ubGVuICsgc3RhdGUubmRpc3QpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGNvcHktLSkge1xuICAgICAgICAgICAgICBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUrK10gPSBsZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyogaGFuZGxlIGVycm9yIGJyZWFrcyBpbiB3aGlsZSAqL1xuICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gQkFEKSB7IGJyZWFrOyB9XG5cbiAgICAgICAgLyogY2hlY2sgZm9yIGVuZC1vZi1ibG9jayBjb2RlIChiZXR0ZXIgaGF2ZSBvbmUpICovXG4gICAgICAgIGlmIChzdGF0ZS5sZW5zWzI1Nl0gPT09IDApIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBidWlsZCBjb2RlIHRhYmxlcyAtLSBub3RlOiBkbyBub3QgY2hhbmdlIHRoZSBsZW5iaXRzIG9yIGRpc3RiaXRzXG4gICAgICAgICAgIHZhbHVlcyBoZXJlICg5IGFuZCA2KSB3aXRob3V0IHJlYWRpbmcgdGhlIGNvbW1lbnRzIGluIGluZnRyZWVzLmhcbiAgICAgICAgICAgY29uY2VybmluZyB0aGUgRU5PVUdIIGNvbnN0YW50cywgd2hpY2ggZGVwZW5kIG9uIHRob3NlIHZhbHVlcyAqL1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gOTtcblxuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5sZW5iaXRzIH07XG4gICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoTEVOUywgc3RhdGUubGVucywgMCwgc3RhdGUubmxlbiwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXG4gICAgICAgIC8vIHN0YXRlLm5leHRfaW5kZXggPSBvcHRzLnRhYmxlX2luZGV4O1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzO1xuICAgICAgICAvLyBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSA2O1xuICAgICAgICAvL3N0YXRlLmRpc3Rjb2RlLmNvcHkoc3RhdGUuY29kZXMpO1xuICAgICAgICAvLyBTd2l0Y2ggdG8gdXNlIGR5bmFtaWMgdGFibGVcbiAgICAgICAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluO1xuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5kaXN0Yml0cyB9O1xuICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKERJU1RTLCBzdGF0ZS5sZW5zLCBzdGF0ZS5ubGVuLCBzdGF0ZS5uZGlzdCwgc3RhdGUuZGlzdGNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAvLyBzdGF0ZS5uZXh0X2luZGV4ID0gb3B0cy50YWJsZV9pbmRleDtcbiAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgIC8vIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUubmV4dDtcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZXMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICdpbmZsYXRlOiAgICAgICBjb2RlcyBva1xcbicpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTl87XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5fOlxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTjpcbiAgICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkge1xuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgIC8vLS0tXG4gICAgICAgICAgaW5mbGF0ZV9mYXN0KHN0cm0sIF9vdXQpO1xuICAgICAgICAgIC8vLS0tIExPQUQoKSAtLS1cbiAgICAgICAgICBwdXQgPSBzdHJtLm5leHRfb3V0O1xuICAgICAgICAgIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICAgICAgICAgIGxlZnQgPSBzdHJtLmF2YWlsX291dDtcbiAgICAgICAgICBuZXh0ID0gc3RybS5uZXh0X2luO1xuICAgICAgICAgIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgICAgICAgICBoYXZlID0gc3RybS5hdmFpbF9pbjtcbiAgICAgICAgICBob2xkID0gc3RhdGUuaG9sZDtcbiAgICAgICAgICBiaXRzID0gc3RhdGUuYml0cztcbiAgICAgICAgICAvLy0tLVxuXG4gICAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IFRZUEUpIHtcbiAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuYmFjayA9IDA7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOyAgLypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cbiAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgaWYgKGhlcmVfYml0cyA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXJlX29wICYmIChoZXJlX29wICYgMHhmMCkgPT09IDApIHtcbiAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7XG4gICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XG4gICAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDtcbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtsYXN0X3ZhbCArXG4gICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xuICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xuICAgICAgICBzdGF0ZS5sZW5ndGggPSBoZXJlX3ZhbDtcbiAgICAgICAgaWYgKGhlcmVfb3AgPT09IDApIHtcbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAnJWMnXFxuXCIgOlxuICAgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gTElUO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXJlX29wICYgMzIpIHtcbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGVuZCBvZiBibG9ja1xcblwiKSk7XG4gICAgICAgICAgc3RhdGUuYmFjayA9IC0xO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXJlX29wICYgNjQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZXh0cmEgPSBoZXJlX29wICYgMTU7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5FWFQ7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVORVhUOlxuICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7XG4gICAgICAgICAgbiA9IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpLypCSVRTKHN0YXRlLmV4dHJhKSovO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICBiaXRzIC09IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIHN0YXRlLmxlbmd0aCkpO1xuICAgICAgICBzdGF0ZS53YXMgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBESVNUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJU1Q6XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxKV07LypCSVRTKHN0YXRlLmRpc3RiaXRzKSovXG4gICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XG4gICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xuICAgICAgICAgIGxhc3Rfb3AgPSBoZXJlX29wO1xuICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2xhc3RfdmFsICtcbiAgICAgICAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkvKkJJVFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLyA+PiBsYXN0X2JpdHMpXTtcbiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgICBpZiAoKGxhc3RfYml0cyArIGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMobGFzdC5iaXRzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7XG4gICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUuYmFjayArPSBoZXJlX2JpdHM7XG4gICAgICAgIGlmIChoZXJlX29wICYgNjQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUub2Zmc2V0ID0gaGVyZV92YWw7XG4gICAgICAgIHN0YXRlLmV4dHJhID0gKGhlcmVfb3ApICYgMTU7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBESVNURVhUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJU1RFWFQ6XG4gICAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUub2Zmc2V0ICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XG4gICAgICAgIH1cbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gICAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBzdGF0ZS5kbWF4KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZGlzdGFuY2UgJXVcXG5cIiwgc3RhdGUub2Zmc2V0KSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBNQVRDSDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBNQVRDSDpcbiAgICAgICAgaWYgKGxlZnQgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIGNvcHkgPSBfb3V0IC0gbGVmdDtcbiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IGNvcHkpIHsgICAgICAgICAvKiBjb3B5IGZyb20gd2luZG93ICovXG4gICAgICAgICAgY29weSA9IHN0YXRlLm9mZnNldCAtIGNvcHk7XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53aGF2ZSkge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXG4vLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG4vLyNpZmRlZiBJTkZMQVRFX0FMTE9XX0lOVkFMSURfRElTVEFOQ0VfVE9PRkFSX0FSUlJcbi8vICAgICAgICAgIFRyYWNlKChzdGRlcnIsIFwiaW5mbGF0ZS5jIHRvbyBmYXJcXG5cIikpO1xuLy8gICAgICAgICAgY29weSAtPSBzdGF0ZS53aGF2ZTtcbi8vICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7IGNvcHkgPSBzdGF0ZS5sZW5ndGg7IH1cbi8vICAgICAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxuLy8gICAgICAgICAgbGVmdCAtPSBjb3B5O1xuLy8gICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4vLyAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgIG91dHB1dFtwdXQrK10gPSAwO1xuLy8gICAgICAgICAgfSB3aGlsZSAoLS1jb3B5KTtcbi8vICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsgc3RhdGUubW9kZSA9IExFTjsgfVxuLy8gICAgICAgICAgYnJlYWs7XG4vLyNlbmRpZlxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLnduZXh0KSB7XG4gICAgICAgICAgICBjb3B5IC09IHN0YXRlLnduZXh0O1xuICAgICAgICAgICAgZnJvbSA9IHN0YXRlLndzaXplIC0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmcm9tID0gc3RhdGUud25leHQgLSBjb3B5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9XG4gICAgICAgICAgZnJvbV9zb3VyY2UgPSBzdGF0ZS53aW5kb3c7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY29weSBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICAgIGZyb20gPSBwdXQgLSBzdGF0ZS5vZmZzZXQ7XG4gICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgbGVmdCAtPSBjb3B5O1xuICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIG91dHB1dFtwdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICB9IHdoaWxlICgtLWNvcHkpO1xuICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7IHN0YXRlLm1vZGUgPSBMRU47IH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExJVDpcbiAgICAgICAgaWYgKGxlZnQgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIG91dHB1dFtwdXQrK10gPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIGxlZnQtLTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENIRUNLOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIC8vIFVzZSAnfCcgaW5zdGVhZCBvZiAnKycgdG8gbWFrZSBzdXJlIHRoYXQgcmVzdWx0IGlzIHNpZ25lZFxuICAgICAgICAgICAgaG9sZCB8PSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBfb3V0IC09IGxlZnQ7XG4gICAgICAgICAgc3RybS50b3RhbF9vdXQgKz0gX291dDtcbiAgICAgICAgICBzdGF0ZS50b3RhbCArPSBfb3V0O1xuICAgICAgICAgIGlmIChfb3V0KSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPVxuICAgICAgICAgICAgICAgIC8qVVBEQVRFKHN0YXRlLmNoZWNrLCBwdXQgLSBfb3V0LCBfb3V0KTsqL1xuICAgICAgICAgICAgICAgIChzdGF0ZS5mbGFncyA/IGNyYzMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpIDogYWRsZXIzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBwdXQgLSBfb3V0KSk7XG5cbiAgICAgICAgICB9XG4gICAgICAgICAgX291dCA9IGxlZnQ7XG4gICAgICAgICAgLy8gTkI6IGNyYzMyIHN0b3JlZCBhcyBzaWduZWQgMzItYml0IGludCwgenN3YXAzMiByZXR1cm5zIHNpZ25lZCB0b29cbiAgICAgICAgICBpZiAoKHN0YXRlLmZsYWdzID8gaG9sZCA6IHpzd2FwMzIoaG9sZCkpICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGRhdGEgY2hlY2snO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgY2hlY2sgbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOR1RIO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTkdUSDpcbiAgICAgICAgaWYgKHN0YXRlLndyYXAgJiYgc3RhdGUuZmxhZ3MpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIGlmIChob2xkICE9PSAoc3RhdGUudG90YWwgJiAweGZmZmZmZmZmKSkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGxlbmd0aCBjaGVjayc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBsZW5ndGggbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gRE9ORTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBET05FOlxuICAgICAgICByZXQgPSBaX1NUUkVBTV9FTkQ7XG4gICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgIGNhc2UgQkFEOlxuICAgICAgICByZXQgPSBaX0RBVEFfRVJST1I7XG4gICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgIGNhc2UgTUVNOlxuICAgICAgICByZXR1cm4gWl9NRU1fRVJST1I7XG4gICAgICBjYXNlIFNZTkM6XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICB9XG4gIH1cblxuICAvLyBpbmZfbGVhdmUgPC0gaGVyZSBpcyByZWFsIHBsYWNlIGZvciBcImdvdG8gaW5mX2xlYXZlXCIsIGVtdWxhdGVkIHZpYSBcImJyZWFrIGluZl9sZWF2ZVwiXG5cbiAgLypcbiAgICAgUmV0dXJuIGZyb20gaW5mbGF0ZSgpLCB1cGRhdGluZyB0aGUgdG90YWwgY291bnRzIGFuZCB0aGUgY2hlY2sgdmFsdWUuXG4gICAgIElmIHRoZXJlIHdhcyBubyBwcm9ncmVzcyBkdXJpbmcgdGhlIGluZmxhdGUoKSBjYWxsLCByZXR1cm4gYSBidWZmZXJcbiAgICAgZXJyb3IuICBDYWxsIHVwZGF0ZXdpbmRvdygpIHRvIGNyZWF0ZSBhbmQvb3IgdXBkYXRlIHRoZSB3aW5kb3cgc3RhdGUuXG4gICAgIE5vdGU6IGEgbWVtb3J5IGVycm9yIGZyb20gaW5mbGF0ZSgpIGlzIG5vbi1yZWNvdmVyYWJsZS5cbiAgICovXG5cbiAgLy8tLS0gUkVTVE9SRSgpIC0tLVxuICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgc3RhdGUuYml0cyA9IGJpdHM7XG4gIC8vLS0tXG5cbiAgaWYgKHN0YXRlLndzaXplIHx8IChfb3V0ICE9PSBzdHJtLmF2YWlsX291dCAmJiBzdGF0ZS5tb2RlIDwgQkFEICYmXG4gICAgICAgICAgICAgICAgICAgICAgKHN0YXRlLm1vZGUgPCBDSEVDSyB8fCBmbHVzaCAhPT0gWl9GSU5JU0gpKSkge1xuICAgIGlmICh1cGRhdGV3aW5kb3coc3RybSwgc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQsIF9vdXQgLSBzdHJtLmF2YWlsX291dCkpIHtcbiAgICAgIHN0YXRlLm1vZGUgPSBNRU07XG4gICAgICByZXR1cm4gWl9NRU1fRVJST1I7XG4gICAgfVxuICB9XG4gIF9pbiAtPSBzdHJtLmF2YWlsX2luO1xuICBfb3V0IC09IHN0cm0uYXZhaWxfb3V0O1xuICBzdHJtLnRvdGFsX2luICs9IF9pbjtcbiAgc3RybS50b3RhbF9vdXQgKz0gX291dDtcbiAgc3RhdGUudG90YWwgKz0gX291dDtcbiAgaWYgKHN0YXRlLndyYXAgJiYgX291dCkge1xuICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IC8qVVBEQVRFKHN0YXRlLmNoZWNrLCBzdHJtLm5leHRfb3V0IC0gX291dCwgX291dCk7Ki9cbiAgICAgIChzdGF0ZS5mbGFncyA/IGNyYzMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpKTtcbiAgfVxuICBzdHJtLmRhdGFfdHlwZSA9IHN0YXRlLmJpdHMgKyAoc3RhdGUubGFzdCA/IDY0IDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gVFlQRSA/IDEyOCA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKHN0YXRlLm1vZGUgPT09IExFTl8gfHwgc3RhdGUubW9kZSA9PT0gQ09QWV8gPyAyNTYgOiAwKTtcbiAgaWYgKCgoX2luID09PSAwICYmIF9vdXQgPT09IDApIHx8IGZsdXNoID09PSBaX0ZJTklTSCkgJiYgcmV0ID09PSBaX09LKSB7XG4gICAgcmV0ID0gWl9CVUZfRVJST1I7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZUVuZChzdHJtKSB7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIC8qfHwgc3RybS0+emZyZWUgPT0gKGZyZWVfZnVuYykwKi8pIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICB2YXIgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoc3RhdGUud2luZG93KSB7XG4gICAgc3RhdGUud2luZG93ID0gbnVsbDtcbiAgfVxuICBzdHJtLnN0YXRlID0gbnVsbDtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVHZXRIZWFkZXIoc3RybSwgaGVhZCkge1xuICB2YXIgc3RhdGU7XG5cbiAgLyogY2hlY2sgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmICgoc3RhdGUud3JhcCAmIDIpID09PSAwKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuXG4gIC8qIHNhdmUgaGVhZGVyIHN0cnVjdHVyZSAqL1xuICBzdGF0ZS5oZWFkID0gaGVhZDtcbiAgaGVhZC5kb25lID0gZmFsc2U7XG4gIHJldHVybiBaX09LO1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlU2V0RGljdGlvbmFyeShzdHJtLCBkaWN0aW9uYXJ5KSB7XG4gIHZhciBkaWN0TGVuZ3RoID0gZGljdGlvbmFyeS5sZW5ndGg7XG5cbiAgdmFyIHN0YXRlO1xuICB2YXIgZGljdGlkO1xuICB2YXIgcmV0O1xuXG4gIC8qIGNoZWNrIHN0YXRlICovXG4gIGlmICghc3RybSAvKiA9PSBaX05VTEwgKi8gfHwgIXN0cm0uc3RhdGUgLyogPT0gWl9OVUxMICovKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgaWYgKHN0YXRlLndyYXAgIT09IDAgJiYgc3RhdGUubW9kZSAhPT0gRElDVCkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIC8qIGNoZWNrIGZvciBjb3JyZWN0IGRpY3Rpb25hcnkgaWRlbnRpZmllciAqL1xuICBpZiAoc3RhdGUubW9kZSA9PT0gRElDVCkge1xuICAgIGRpY3RpZCA9IDE7IC8qIGFkbGVyMzIoMCwgbnVsbCwgMCkqL1xuICAgIC8qIGRpY3RpZCA9IGFkbGVyMzIoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTsgKi9cbiAgICBkaWN0aWQgPSBhZGxlcjMyKGRpY3RpZCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgMCk7XG4gICAgaWYgKGRpY3RpZCAhPT0gc3RhdGUuY2hlY2spIHtcbiAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7XG4gICAgfVxuICB9XG4gIC8qIGNvcHkgZGljdGlvbmFyeSB0byB3aW5kb3cgdXNpbmcgdXBkYXRld2luZG93KCksIHdoaWNoIHdpbGwgYW1lbmQgdGhlXG4gICBleGlzdGluZyBkaWN0aW9uYXJ5IGlmIGFwcHJvcHJpYXRlICovXG4gIHJldCA9IHVwZGF0ZXdpbmRvdyhzdHJtLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCBkaWN0TGVuZ3RoKTtcbiAgaWYgKHJldCkge1xuICAgIHN0YXRlLm1vZGUgPSBNRU07XG4gICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICB9XG4gIHN0YXRlLmhhdmVkaWN0ID0gMTtcbiAgLy8gVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBkaWN0aW9uYXJ5IHNldFxcblwiKSk7XG4gIHJldHVybiBaX09LO1xufVxuXG5leHBvcnRzLmluZmxhdGVSZXNldCA9IGluZmxhdGVSZXNldDtcbmV4cG9ydHMuaW5mbGF0ZVJlc2V0MiA9IGluZmxhdGVSZXNldDI7XG5leHBvcnRzLmluZmxhdGVSZXNldEtlZXAgPSBpbmZsYXRlUmVzZXRLZWVwO1xuZXhwb3J0cy5pbmZsYXRlSW5pdCA9IGluZmxhdGVJbml0O1xuZXhwb3J0cy5pbmZsYXRlSW5pdDIgPSBpbmZsYXRlSW5pdDI7XG5leHBvcnRzLmluZmxhdGUgPSBpbmZsYXRlO1xuZXhwb3J0cy5pbmZsYXRlRW5kID0gaW5mbGF0ZUVuZDtcbmV4cG9ydHMuaW5mbGF0ZUdldEhlYWRlciA9IGluZmxhdGVHZXRIZWFkZXI7XG5leHBvcnRzLmluZmxhdGVTZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZVNldERpY3Rpb25hcnk7XG5leHBvcnRzLmluZmxhdGVJbmZvID0gJ3Bha28gaW5mbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCknO1xuXG4vKiBOb3QgaW1wbGVtZW50ZWRcbmV4cG9ydHMuaW5mbGF0ZUNvcHkgPSBpbmZsYXRlQ29weTtcbmV4cG9ydHMuaW5mbGF0ZUdldERpY3Rpb25hcnkgPSBpbmZsYXRlR2V0RGljdGlvbmFyeTtcbmV4cG9ydHMuaW5mbGF0ZU1hcmsgPSBpbmZsYXRlTWFyaztcbmV4cG9ydHMuaW5mbGF0ZVByaW1lID0gaW5mbGF0ZVByaW1lO1xuZXhwb3J0cy5pbmZsYXRlU3luYyA9IGluZmxhdGVTeW5jO1xuZXhwb3J0cy5pbmZsYXRlU3luY1BvaW50ID0gaW5mbGF0ZVN5bmNQb2ludDtcbmV4cG9ydHMuaW5mbGF0ZVVuZGVybWluZSA9IGluZmxhdGVVbmRlcm1pbmU7XG4qL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFNlZSBzdGF0ZSBkZWZzIGZyb20gaW5mbGF0ZS5qc1xudmFyIEJBRCA9IDMwOyAgICAgICAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgVFlQRSA9IDEyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIHR5cGUgYml0cywgaW5jbHVkaW5nIGxhc3QtZmxhZyBiaXQgKi9cblxuLypcbiAgIERlY29kZSBsaXRlcmFsLCBsZW5ndGgsIGFuZCBkaXN0YW5jZSBjb2RlcyBhbmQgd3JpdGUgb3V0IHRoZSByZXN1bHRpbmdcbiAgIGxpdGVyYWwgYW5kIG1hdGNoIGJ5dGVzIHVudGlsIGVpdGhlciBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dCBpc1xuICAgYXZhaWxhYmxlLCBhbiBlbmQtb2YtYmxvY2sgaXMgZW5jb3VudGVyZWQsIG9yIGEgZGF0YSBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAgIFdoZW4gbGFyZ2UgZW5vdWdoIGlucHV0IGFuZCBvdXRwdXQgYnVmZmVycyBhcmUgc3VwcGxpZWQgdG8gaW5mbGF0ZSgpLCBmb3JcbiAgIGV4YW1wbGUsIGEgMTZLIGlucHV0IGJ1ZmZlciBhbmQgYSA2NEsgb3V0cHV0IGJ1ZmZlciwgbW9yZSB0aGFuIDk1JSBvZiB0aGVcbiAgIGluZmxhdGUgZXhlY3V0aW9uIHRpbWUgaXMgc3BlbnQgaW4gdGhpcyByb3V0aW5lLlxuXG4gICBFbnRyeSBhc3N1bXB0aW9uczpcblxuICAgICAgICBzdGF0ZS5tb2RlID09PSBMRU5cbiAgICAgICAgc3RybS5hdmFpbF9pbiA+PSA2XG4gICAgICAgIHN0cm0uYXZhaWxfb3V0ID49IDI1OFxuICAgICAgICBzdGFydCA+PSBzdHJtLmF2YWlsX291dFxuICAgICAgICBzdGF0ZS5iaXRzIDwgOFxuXG4gICBPbiByZXR1cm4sIHN0YXRlLm1vZGUgaXMgb25lIG9mOlxuXG4gICAgICAgIExFTiAtLSByYW4gb3V0IG9mIGVub3VnaCBvdXRwdXQgc3BhY2Ugb3IgZW5vdWdoIGF2YWlsYWJsZSBpbnB1dFxuICAgICAgICBUWVBFIC0tIHJlYWNoZWQgZW5kIG9mIGJsb2NrIGNvZGUsIGluZmxhdGUoKSB0byBpbnRlcnByZXQgbmV4dCBibG9ja1xuICAgICAgICBCQUQgLS0gZXJyb3IgaW4gYmxvY2sgZGF0YVxuXG4gICBOb3RlczpcblxuICAgIC0gVGhlIG1heGltdW0gaW5wdXQgYml0cyB1c2VkIGJ5IGEgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgaXMgMTUgYml0cyBmb3IgdGhlXG4gICAgICBsZW5ndGggY29kZSwgNSBiaXRzIGZvciB0aGUgbGVuZ3RoIGV4dHJhLCAxNSBiaXRzIGZvciB0aGUgZGlzdGFuY2UgY29kZSxcbiAgICAgIGFuZCAxMyBiaXRzIGZvciB0aGUgZGlzdGFuY2UgZXh0cmEuICBUaGlzIHRvdGFscyA0OCBiaXRzLCBvciBzaXggYnl0ZXMuXG4gICAgICBUaGVyZWZvcmUgaWYgc3RybS5hdmFpbF9pbiA+PSA2LCB0aGVuIHRoZXJlIGlzIGVub3VnaCBpbnB1dCB0byBhdm9pZFxuICAgICAgY2hlY2tpbmcgZm9yIGF2YWlsYWJsZSBpbnB1dCB3aGlsZSBkZWNvZGluZy5cblxuICAgIC0gVGhlIG1heGltdW0gYnl0ZXMgdGhhdCBhIHNpbmdsZSBsZW5ndGgvZGlzdGFuY2UgcGFpciBjYW4gb3V0cHV0IGlzIDI1OFxuICAgICAgYnl0ZXMsIHdoaWNoIGlzIHRoZSBtYXhpbXVtIGxlbmd0aCB0aGF0IGNhbiBiZSBjb2RlZC4gIGluZmxhdGVfZmFzdCgpXG4gICAgICByZXF1aXJlcyBzdHJtLmF2YWlsX291dCA+PSAyNTggZm9yIGVhY2ggbG9vcCB0byBhdm9pZCBjaGVja2luZyBmb3JcbiAgICAgIG91dHB1dCBzcGFjZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmZsYXRlX2Zhc3Qoc3RybSwgc3RhcnQpIHtcbiAgdmFyIHN0YXRlO1xuICB2YXIgX2luOyAgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5pbnB1dCAqL1xuICB2YXIgbGFzdDsgICAgICAgICAgICAgICAgICAgLyogaGF2ZSBlbm91Z2ggaW5wdXQgd2hpbGUgaW4gPCBsYXN0ICovXG4gIHZhciBfb3V0OyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLm91dHB1dCAqL1xuICB2YXIgYmVnOyAgICAgICAgICAgICAgICAgICAgLyogaW5mbGF0ZSgpJ3MgaW5pdGlhbCBzdHJtLm91dHB1dCAqL1xuICB2YXIgZW5kOyAgICAgICAgICAgICAgICAgICAgLyogd2hpbGUgb3V0IDwgZW5kLCBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlICovXG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICB2YXIgZG1heDsgICAgICAgICAgICAgICAgICAgLyogbWF4aW11bSBkaXN0YW5jZSBmcm9tIHpsaWIgaGVhZGVyICovXG4vLyNlbmRpZlxuICB2YXIgd3NpemU7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gIHZhciB3aGF2ZTsgICAgICAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gIHZhciB3bmV4dDsgICAgICAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cbiAgLy8gVXNlIGBzX3dpbmRvd2AgaW5zdGVhZCBgd2luZG93YCwgYXZvaWQgY29uZmxpY3Qgd2l0aCBpbnN0cnVtZW50YXRpb24gdG9vbHNcbiAgdmFyIHNfd2luZG93OyAgICAgICAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgd3NpemUgIT0gMCAqL1xuICB2YXIgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5ob2xkICovXG4gIHZhciBiaXRzOyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmJpdHMgKi9cbiAgdmFyIGxjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0ubGVuY29kZSAqL1xuICB2YXIgZGNvZGU7ICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5kaXN0Y29kZSAqL1xuICB2YXIgbG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgbGVuZ3RoIGNvZGVzICovXG4gIHZhciBkbWFzazsgICAgICAgICAgICAgICAgICAvKiBtYXNrIGZvciBmaXJzdCBsZXZlbCBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuICB2YXIgaGVyZTsgICAgICAgICAgICAgICAgICAgLyogcmV0cmlldmVkIHRhYmxlIGVudHJ5ICovXG4gIHZhciBvcDsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMsIG9wZXJhdGlvbiwgZXh0cmEgYml0cywgb3IgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICB3aW5kb3cgcG9zaXRpb24sIHdpbmRvdyBieXRlcyB0byBjb3B5ICovXG4gIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGgsIHVudXNlZCBieXRlcyAqL1xuICB2YXIgZGlzdDsgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggZGlzdGFuY2UgKi9cbiAgdmFyIGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggZnJvbSAqL1xuICB2YXIgZnJvbV9zb3VyY2U7XG5cblxuICB2YXIgaW5wdXQsIG91dHB1dDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuXG4gIC8qIGNvcHkgc3RhdGUgdG8gbG9jYWwgdmFyaWFibGVzICovXG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgLy9oZXJlID0gc3RhdGUuaGVyZTtcbiAgX2luID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIGxhc3QgPSBfaW4gKyAoc3RybS5hdmFpbF9pbiAtIDUpO1xuICBfb3V0ID0gc3RybS5uZXh0X291dDtcbiAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gIGJlZyA9IF9vdXQgLSAoc3RhcnQgLSBzdHJtLmF2YWlsX291dCk7XG4gIGVuZCA9IF9vdXQgKyAoc3RybS5hdmFpbF9vdXQgLSAyNTcpO1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgZG1heCA9IHN0YXRlLmRtYXg7XG4vLyNlbmRpZlxuICB3c2l6ZSA9IHN0YXRlLndzaXplO1xuICB3aGF2ZSA9IHN0YXRlLndoYXZlO1xuICB3bmV4dCA9IHN0YXRlLnduZXh0O1xuICBzX3dpbmRvdyA9IHN0YXRlLndpbmRvdztcbiAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICBsY29kZSA9IHN0YXRlLmxlbmNvZGU7XG4gIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7XG4gIGxtYXNrID0gKDEgPDwgc3RhdGUubGVuYml0cykgLSAxO1xuICBkbWFzayA9ICgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDE7XG5cblxuICAvKiBkZWNvZGUgbGl0ZXJhbHMgYW5kIGxlbmd0aC9kaXN0YW5jZXMgdW50aWwgZW5kLW9mLWJsb2NrIG9yIG5vdCBlbm91Z2hcbiAgICAgaW5wdXQgZGF0YSBvciBvdXRwdXQgc3BhY2UgKi9cblxuICB0b3A6XG4gIGRvIHtcbiAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgYml0cyArPSA4O1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICB9XG5cbiAgICBoZXJlID0gbGNvZGVbaG9sZCAmIGxtYXNrXTtcblxuICAgIGRvbGVuOlxuICAgIGZvciAoOzspIHsgLy8gR290byBlbXVsYXRpb25cbiAgICAgIG9wID0gaGVyZSA+Pj4gMjQvKmhlcmUuYml0cyovO1xuICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgYml0cyAtPSBvcDtcbiAgICAgIG9wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmYvKmhlcmUub3AqLztcbiAgICAgIGlmIChvcCA9PT0gMCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGl0ZXJhbCAqL1xuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuICAgICAgICBvdXRwdXRbX291dCsrXSA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDE2KSB7ICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIGJhc2UgKi9cbiAgICAgICAgbGVuID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgb3AgJj0gMTU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgaWYgKG9wKSB7XG4gICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgbGVuKSk7XG4gICAgICAgIGlmIChiaXRzIDwgMTUpIHtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICBoZXJlID0gZGNvZGVbaG9sZCAmIGRtYXNrXTtcblxuICAgICAgICBkb2Rpc3Q6XG4gICAgICAgIGZvciAoOzspIHsgLy8gZ290byBlbXVsYXRpb25cbiAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgICAgICBob2xkID4+Pj0gb3A7XG4gICAgICAgICAgYml0cyAtPSBvcDtcbiAgICAgICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG5cbiAgICAgICAgICBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYXNlICovXG4gICAgICAgICAgICBkaXN0ID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpc3QgKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gICAgICAgICAgICBpZiAoZGlzdCA+IGRtYXgpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICBicmVhayB0b3A7XG4gICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgICAgYml0cyAtPSBvcDtcbiAgICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZGlzdGFuY2UgJXVcXG5cIiwgZGlzdCkpO1xuICAgICAgICAgICAgb3AgPSBfb3V0IC0gYmVnOyAgICAgICAgICAgICAgICAvKiBtYXggZGlzdGFuY2UgaW4gb3V0cHV0ICovXG4gICAgICAgICAgICBpZiAoZGlzdCA+IG9wKSB7ICAgICAgICAgICAgICAgIC8qIHNlZSBpZiBjb3B5IGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgIG9wID0gZGlzdCAtIG9wOyAgICAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhY2sgaW4gd2luZG93ICovXG4gICAgICAgICAgICAgIGlmIChvcCA+IHdoYXZlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHtcbiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgICAgICBicmVhayB0b3A7XG4gICAgICAgICAgICAgICAgfVxuXG4vLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLFxuLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXG4vLyAgICAgICAgICAgICAgICBpZiAobGVuIDw9IG9wIC0gd2hhdmUpIHtcbi8vICAgICAgICAgICAgICAgICAgZG8ge1xuLy8gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICBsZW4gLT0gb3AgLSB3aGF2ZTtcbi8vICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSAwO1xuLy8gICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCA+IHdoYXZlKTtcbi8vICAgICAgICAgICAgICAgIGlmIChvcCA9PT0gMCkge1xuLy8gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuLy8gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWxlbik7XG4vLyAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHRvcDtcbi8vICAgICAgICAgICAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZnJvbSA9IDA7IC8vIHdpbmRvdyBpbmRleFxuICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IHNfd2luZG93O1xuICAgICAgICAgICAgICBpZiAod25leHQgPT09IDApIHsgICAgICAgICAgIC8qIHZlcnkgY29tbW9uIGNhc2UgKi9cbiAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplIC0gb3A7XG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGlmICh3bmV4dCA8IG9wKSB7ICAgICAgLyogd3JhcCBhcm91bmQgd2luZG93ICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSArIHduZXh0IC0gb3A7XG4gICAgICAgICAgICAgICAgb3AgLT0gd25leHQ7XG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIGVuZCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gMDtcbiAgICAgICAgICAgICAgICAgIGlmICh3bmV4dCA8IGxlbikgeyAgLyogc29tZSBmcm9tIHN0YXJ0IG9mIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgICBvcCA9IHduZXh0O1xuICAgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAgICAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgIC8qIGNvbnRpZ3VvdXMgaW4gd2luZG93ICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgd2hpbGUgKGxlbiA+IDIpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBsZW4gLT0gMztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgICAgICAvKiBjb3B5IGRpcmVjdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICBkbyB7ICAgICAgICAgICAgICAgICAgICAgICAgLyogbWluaW11bSBsZW5ndGggaXMgdGhyZWUgKi9cbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBsZW4gLT0gMztcbiAgICAgICAgICAgICAgfSB3aGlsZSAobGVuID4gMik7XG4gICAgICAgICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgLyogMm5kIGxldmVsIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgICAgIGhlcmUgPSBkY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuICAgICAgICAgICAgY29udGludWUgZG9kaXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKChvcCAmIDY0KSA9PT0gMCkgeyAgICAgICAgICAgICAgLyogMm5kIGxldmVsIGxlbmd0aCBjb2RlICovXG4gICAgICAgIGhlcmUgPSBsY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuICAgICAgICBjb250aW51ZSBkb2xlbjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG9wICYgMzIpIHsgICAgICAgICAgICAgICAgICAgICAvKiBlbmQtb2YtYmxvY2sgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgIGJyZWFrIHRvcDtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7IC8vIG5lZWQgdG8gZW11bGF0ZSBnb3RvIHZpYSBcImNvbnRpbnVlXCJcbiAgICB9XG4gIH0gd2hpbGUgKF9pbiA8IGxhc3QgJiYgX291dCA8IGVuZCk7XG5cbiAgLyogcmV0dXJuIHVudXNlZCBieXRlcyAob24gZW50cnksIGJpdHMgPCA4LCBzbyBpbiB3b24ndCBnbyB0b28gZmFyIGJhY2spICovXG4gIGxlbiA9IGJpdHMgPj4gMztcbiAgX2luIC09IGxlbjtcbiAgYml0cyAtPSBsZW4gPDwgMztcbiAgaG9sZCAmPSAoMSA8PCBiaXRzKSAtIDE7XG5cbiAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXR1cm4gKi9cbiAgc3RybS5uZXh0X2luID0gX2luO1xuICBzdHJtLm5leHRfb3V0ID0gX291dDtcbiAgc3RybS5hdmFpbF9pbiA9IChfaW4gPCBsYXN0ID8gNSArIChsYXN0IC0gX2luKSA6IDUgLSAoX2luIC0gbGFzdCkpO1xuICBzdHJtLmF2YWlsX291dCA9IChfb3V0IDwgZW5kID8gMjU3ICsgKGVuZCAtIF9vdXQpIDogMjU3IC0gKF9vdXQgLSBlbmQpKTtcbiAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gIHN0YXRlLmJpdHMgPSBiaXRzO1xuICByZXR1cm47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xuXG52YXIgTUFYQklUUyA9IDE1O1xudmFyIEVOT1VHSF9MRU5TID0gODUyO1xudmFyIEVOT1VHSF9ESVNUUyA9IDU5Mjtcbi8vdmFyIEVOT1VHSCA9IChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpO1xuXG52YXIgQ09ERVMgPSAwO1xudmFyIExFTlMgPSAxO1xudmFyIERJU1RTID0gMjtcblxudmFyIGxiYXNlID0gWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgYmFzZSAqL1xuICAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLFxuICAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMFxuXTtcblxudmFyIGxleHQgPSBbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBleHRyYSAqL1xuICAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTcsIDE3LCAxOCwgMTgsIDE4LCAxOCxcbiAgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMTYsIDcyLCA3OFxuXTtcblxudmFyIGRiYXNlID0gWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBiYXNlICovXG4gIDEsIDIsIDMsIDQsIDUsIDcsIDksIDEzLCAxNywgMjUsIDMzLCA0OSwgNjUsIDk3LCAxMjksIDE5MyxcbiAgMjU3LCAzODUsIDUxMywgNzY5LCAxMDI1LCAxNTM3LCAyMDQ5LCAzMDczLCA0MDk3LCA2MTQ1LFxuICA4MTkzLCAxMjI4OSwgMTYzODUsIDI0NTc3LCAwLCAwXG5dO1xuXG52YXIgZGV4dCA9IFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgZXh0cmEgKi9cbiAgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTgsIDE4LCAxOSwgMTksIDIwLCAyMCwgMjEsIDIxLCAyMiwgMjIsXG4gIDIzLCAyMywgMjQsIDI0LCAyNSwgMjUsIDI2LCAyNiwgMjcsIDI3LFxuICAyOCwgMjgsIDI5LCAyOSwgNjQsIDY0XG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluZmxhdGVfdGFibGUodHlwZSwgbGVucywgbGVuc19pbmRleCwgY29kZXMsIHRhYmxlLCB0YWJsZV9pbmRleCwgd29yaywgb3B0cylcbntcbiAgdmFyIGJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAvL2hlcmUgPSBvcHRzLmhlcmU7IC8qIHRhYmxlIGVudHJ5IGZvciBkdXBsaWNhdGlvbiAqL1xuXG4gIHZhciBsZW4gPSAwOyAgICAgICAgICAgICAgIC8qIGEgY29kZSdzIGxlbmd0aCBpbiBiaXRzICovXG4gIHZhciBzeW0gPSAwOyAgICAgICAgICAgICAgIC8qIGluZGV4IG9mIGNvZGUgc3ltYm9scyAqL1xuICB2YXIgbWluID0gMCwgbWF4ID0gMDsgICAgICAgICAgLyogbWluaW11bSBhbmQgbWF4aW11bSBjb2RlIGxlbmd0aHMgKi9cbiAgdmFyIHJvb3QgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHJvb3QgdGFibGUgKi9cbiAgdmFyIGN1cnIgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIGN1cnJlbnQgdGFibGUgKi9cbiAgdmFyIGRyb3AgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBiaXRzIHRvIGRyb3AgZm9yIHN1Yi10YWJsZSAqL1xuICB2YXIgbGVmdCA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBwcmVmaXggY29kZXMgYXZhaWxhYmxlICovXG4gIHZhciB1c2VkID0gMDsgICAgICAgICAgICAgIC8qIGNvZGUgZW50cmllcyBpbiB0YWJsZSB1c2VkICovXG4gIHZhciBodWZmID0gMDsgICAgICAgICAgICAgIC8qIEh1ZmZtYW4gY29kZSAqL1xuICB2YXIgaW5jcjsgICAgICAgICAgICAgIC8qIGZvciBpbmNyZW1lbnRpbmcgY29kZSwgaW5kZXggKi9cbiAgdmFyIGZpbGw7ICAgICAgICAgICAgICAvKiBpbmRleCBmb3IgcmVwbGljYXRpbmcgZW50cmllcyAqL1xuICB2YXIgbG93OyAgICAgICAgICAgICAgIC8qIGxvdyBiaXRzIGZvciBjdXJyZW50IHJvb3QgZW50cnkgKi9cbiAgdmFyIG1hc2s7ICAgICAgICAgICAgICAvKiBtYXNrIGZvciBsb3cgcm9vdCBiaXRzICovXG4gIHZhciBuZXh0OyAgICAgICAgICAgICAvKiBuZXh0IGF2YWlsYWJsZSBzcGFjZSBpbiB0YWJsZSAqL1xuICB2YXIgYmFzZSA9IG51bGw7ICAgICAvKiBiYXNlIHZhbHVlIHRhYmxlIHRvIHVzZSAqL1xuICB2YXIgYmFzZV9pbmRleCA9IDA7XG4vLyAgdmFyIHNob2V4dHJhOyAgICAvKiBleHRyYSBiaXRzIHRhYmxlIHRvIHVzZSAqL1xuICB2YXIgZW5kOyAgICAgICAgICAgICAgICAgICAgLyogdXNlIGJhc2UgYW5kIGV4dHJhIGZvciBzeW1ib2wgPiBlbmQgKi9cbiAgdmFyIGNvdW50ID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgLyogbnVtYmVyIG9mIGNvZGVzIG9mIGVhY2ggbGVuZ3RoICovXG4gIHZhciBvZmZzID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgIC8qIG9mZnNldHMgaW4gdGFibGUgZm9yIGVhY2ggbGVuZ3RoICovXG4gIHZhciBleHRyYSA9IG51bGw7XG4gIHZhciBleHRyYV9pbmRleCA9IDA7XG5cbiAgdmFyIGhlcmVfYml0cywgaGVyZV9vcCwgaGVyZV92YWw7XG5cbiAgLypcbiAgIFByb2Nlc3MgYSBzZXQgb2YgY29kZSBsZW5ndGhzIHRvIGNyZWF0ZSBhIGNhbm9uaWNhbCBIdWZmbWFuIGNvZGUuICBUaGVcbiAgIGNvZGUgbGVuZ3RocyBhcmUgbGVuc1swLi5jb2Rlcy0xXS4gIEVhY2ggbGVuZ3RoIGNvcnJlc3BvbmRzIHRvIHRoZVxuICAgc3ltYm9scyAwLi5jb2Rlcy0xLiAgVGhlIEh1ZmZtYW4gY29kZSBpcyBnZW5lcmF0ZWQgYnkgZmlyc3Qgc29ydGluZyB0aGVcbiAgIHN5bWJvbHMgYnkgbGVuZ3RoIGZyb20gc2hvcnQgdG8gbG9uZywgYW5kIHJldGFpbmluZyB0aGUgc3ltYm9sIG9yZGVyXG4gICBmb3IgY29kZXMgd2l0aCBlcXVhbCBsZW5ndGhzLiAgVGhlbiB0aGUgY29kZSBzdGFydHMgd2l0aCBhbGwgemVybyBiaXRzXG4gICBmb3IgdGhlIGZpcnN0IGNvZGUgb2YgdGhlIHNob3J0ZXN0IGxlbmd0aCwgYW5kIHRoZSBjb2RlcyBhcmUgaW50ZWdlclxuICAgaW5jcmVtZW50cyBmb3IgdGhlIHNhbWUgbGVuZ3RoLCBhbmQgemVyb3MgYXJlIGFwcGVuZGVkIGFzIHRoZSBsZW5ndGhcbiAgIGluY3JlYXNlcy4gIEZvciB0aGUgZGVmbGF0ZSBmb3JtYXQsIHRoZXNlIGJpdHMgYXJlIHN0b3JlZCBiYWNrd2FyZHNcbiAgIGZyb20gdGhlaXIgbW9yZSBuYXR1cmFsIGludGVnZXIgaW5jcmVtZW50IG9yZGVyaW5nLCBhbmQgc28gd2hlbiB0aGVcbiAgIGRlY29kaW5nIHRhYmxlcyBhcmUgYnVpbHQgaW4gdGhlIGxhcmdlIGxvb3AgYmVsb3csIHRoZSBpbnRlZ2VyIGNvZGVzXG4gICBhcmUgaW5jcmVtZW50ZWQgYmFja3dhcmRzLlxuXG4gICBUaGlzIHJvdXRpbmUgYXNzdW1lcywgYnV0IGRvZXMgbm90IGNoZWNrLCB0aGF0IGFsbCBvZiB0aGUgZW50cmllcyBpblxuICAgbGVuc1tdIGFyZSBpbiB0aGUgcmFuZ2UgMC4uTUFYQklUUy4gIFRoZSBjYWxsZXIgbXVzdCBhc3N1cmUgdGhpcy5cbiAgIDEuLk1BWEJJVFMgaXMgaW50ZXJwcmV0ZWQgYXMgdGhhdCBjb2RlIGxlbmd0aC4gIHplcm8gbWVhbnMgdGhhdCB0aGF0XG4gICBzeW1ib2wgZG9lcyBub3Qgb2NjdXIgaW4gdGhpcyBjb2RlLlxuXG4gICBUaGUgY29kZXMgYXJlIHNvcnRlZCBieSBjb21wdXRpbmcgYSBjb3VudCBvZiBjb2RlcyBmb3IgZWFjaCBsZW5ndGgsXG4gICBjcmVhdGluZyBmcm9tIHRoYXQgYSB0YWJsZSBvZiBzdGFydGluZyBpbmRpY2VzIGZvciBlYWNoIGxlbmd0aCBpbiB0aGVcbiAgIHNvcnRlZCB0YWJsZSwgYW5kIHRoZW4gZW50ZXJpbmcgdGhlIHN5bWJvbHMgaW4gb3JkZXIgaW4gdGhlIHNvcnRlZFxuICAgdGFibGUuICBUaGUgc29ydGVkIHRhYmxlIGlzIHdvcmtbXSwgd2l0aCB0aGF0IHNwYWNlIGJlaW5nIHByb3ZpZGVkIGJ5XG4gICB0aGUgY2FsbGVyLlxuXG4gICBUaGUgbGVuZ3RoIGNvdW50cyBhcmUgdXNlZCBmb3Igb3RoZXIgcHVycG9zZXMgYXMgd2VsbCwgaS5lLiBmaW5kaW5nXG4gICB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBsZW5ndGggY29kZXMsIGRldGVybWluaW5nIGlmIHRoZXJlIGFyZSBhbnlcbiAgIGNvZGVzIGF0IGFsbCwgY2hlY2tpbmcgZm9yIGEgdmFsaWQgc2V0IG9mIGxlbmd0aHMsIGFuZCBsb29raW5nIGFoZWFkXG4gICBhdCBsZW5ndGggY291bnRzIHRvIGRldGVybWluZSBzdWItdGFibGUgc2l6ZXMgd2hlbiBidWlsZGluZyB0aGVcbiAgIGRlY29kaW5nIHRhYmxlcy5cbiAgICovXG5cbiAgLyogYWNjdW11bGF0ZSBsZW5ndGhzIGZvciBjb2RlcyAoYXNzdW1lcyBsZW5zW10gYWxsIGluIDAuLk1BWEJJVFMpICovXG4gIGZvciAobGVuID0gMDsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgY291bnRbbGVuXSA9IDA7XG4gIH1cbiAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspIHtcbiAgICBjb3VudFtsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrO1xuICB9XG5cbiAgLyogYm91bmQgY29kZSBsZW5ndGhzLCBmb3JjZSByb290IHRvIGJlIHdpdGhpbiBjb2RlIGxlbmd0aHMgKi9cbiAgcm9vdCA9IGJpdHM7XG4gIGZvciAobWF4ID0gTUFYQklUUzsgbWF4ID49IDE7IG1heC0tKSB7XG4gICAgaWYgKGNvdW50W21heF0gIT09IDApIHsgYnJlYWs7IH1cbiAgfVxuICBpZiAocm9vdCA+IG1heCkge1xuICAgIHJvb3QgPSBtYXg7XG4gIH1cbiAgaWYgKG1heCA9PT0gMCkgeyAgICAgICAgICAgICAgICAgICAgIC8qIG5vIHN5bWJvbHMgdG8gY29kZSBhdCBhbGwgKi9cbiAgICAvL3RhYmxlLm9wW29wdHMudGFibGVfaW5kZXhdID0gNjQ7ICAvL2hlcmUub3AgPSAodmFyIGNoYXIpNjQ7ICAgIC8qIGludmFsaWQgY29kZSBtYXJrZXIgKi9cbiAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxOyAgIC8vaGVyZS5iaXRzID0gKHZhciBjaGFyKTE7XG4gICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7ICAgLy9oZXJlLnZhbCA9ICh2YXIgc2hvcnQpMDtcbiAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9ICgxIDw8IDI0KSB8ICg2NCA8PCAxNikgfCAwO1xuXG5cbiAgICAvL3RhYmxlLm9wW29wdHMudGFibGVfaW5kZXhdID0gNjQ7XG4gICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTtcbiAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDtcbiAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9ICgxIDw8IDI0KSB8ICg2NCA8PCAxNikgfCAwO1xuXG4gICAgb3B0cy5iaXRzID0gMTtcbiAgICByZXR1cm4gMDsgICAgIC8qIG5vIHN5bWJvbHMsIGJ1dCB3YWl0IGZvciBkZWNvZGluZyB0byByZXBvcnQgZXJyb3IgKi9cbiAgfVxuICBmb3IgKG1pbiA9IDE7IG1pbiA8IG1heDsgbWluKyspIHtcbiAgICBpZiAoY291bnRbbWluXSAhPT0gMCkgeyBicmVhazsgfVxuICB9XG4gIGlmIChyb290IDwgbWluKSB7XG4gICAgcm9vdCA9IG1pbjtcbiAgfVxuXG4gIC8qIGNoZWNrIGZvciBhbiBvdmVyLXN1YnNjcmliZWQgb3IgaW5jb21wbGV0ZSBzZXQgb2YgbGVuZ3RocyAqL1xuICBsZWZ0ID0gMTtcbiAgZm9yIChsZW4gPSAxOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICBsZWZ0IDw8PSAxO1xuICAgIGxlZnQgLT0gY291bnRbbGVuXTtcbiAgICBpZiAobGVmdCA8IDApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9ICAgICAgICAvKiBvdmVyLXN1YnNjcmliZWQgKi9cbiAgfVxuICBpZiAobGVmdCA+IDAgJiYgKHR5cGUgPT09IENPREVTIHx8IG1heCAhPT0gMSkpIHtcbiAgICByZXR1cm4gLTE7ICAgICAgICAgICAgICAgICAgICAgIC8qIGluY29tcGxldGUgc2V0ICovXG4gIH1cblxuICAvKiBnZW5lcmF0ZSBvZmZzZXRzIGludG8gc3ltYm9sIHRhYmxlIGZvciBlYWNoIGxlbmd0aCBmb3Igc29ydGluZyAqL1xuICBvZmZzWzFdID0gMDtcbiAgZm9yIChsZW4gPSAxOyBsZW4gPCBNQVhCSVRTOyBsZW4rKykge1xuICAgIG9mZnNbbGVuICsgMV0gPSBvZmZzW2xlbl0gKyBjb3VudFtsZW5dO1xuICB9XG5cbiAgLyogc29ydCBzeW1ib2xzIGJ5IGxlbmd0aCwgYnkgc3ltYm9sIG9yZGVyIHdpdGhpbiBlYWNoIGxlbmd0aCAqL1xuICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xuICAgIGlmIChsZW5zW2xlbnNfaW5kZXggKyBzeW1dICE9PSAwKSB7XG4gICAgICB3b3JrW29mZnNbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rK10gPSBzeW07XG4gICAgfVxuICB9XG5cbiAgLypcbiAgIENyZWF0ZSBhbmQgZmlsbCBpbiBkZWNvZGluZyB0YWJsZXMuICBJbiB0aGlzIGxvb3AsIHRoZSB0YWJsZSBiZWluZ1xuICAgZmlsbGVkIGlzIGF0IG5leHQgYW5kIGhhcyBjdXJyIGluZGV4IGJpdHMuICBUaGUgY29kZSBiZWluZyB1c2VkIGlzIGh1ZmZcbiAgIHdpdGggbGVuZ3RoIGxlbi4gIFRoYXQgY29kZSBpcyBjb252ZXJ0ZWQgdG8gYW4gaW5kZXggYnkgZHJvcHBpbmcgZHJvcFxuICAgYml0cyBvZmYgb2YgdGhlIGJvdHRvbS4gIEZvciBjb2RlcyB3aGVyZSBsZW4gaXMgbGVzcyB0aGFuIGRyb3AgKyBjdXJyLFxuICAgdGhvc2UgdG9wIGRyb3AgKyBjdXJyIC0gbGVuIGJpdHMgYXJlIGluY3JlbWVudGVkIHRocm91Z2ggYWxsIHZhbHVlcyB0b1xuICAgZmlsbCB0aGUgdGFibGUgd2l0aCByZXBsaWNhdGVkIGVudHJpZXMuXG5cbiAgIHJvb3QgaXMgdGhlIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciB0aGUgcm9vdCB0YWJsZS4gIFdoZW4gbGVuIGV4Y2VlZHNcbiAgIHJvb3QsIHN1Yi10YWJsZXMgYXJlIGNyZWF0ZWQgcG9pbnRlZCB0byBieSB0aGUgcm9vdCBlbnRyeSB3aXRoIGFuIGluZGV4XG4gICBvZiB0aGUgbG93IHJvb3QgYml0cyBvZiBodWZmLiAgVGhpcyBpcyBzYXZlZCBpbiBsb3cgdG8gY2hlY2sgZm9yIHdoZW4gYVxuICAgbmV3IHN1Yi10YWJsZSBzaG91bGQgYmUgc3RhcnRlZC4gIGRyb3AgaXMgemVybyB3aGVuIHRoZSByb290IHRhYmxlIGlzXG4gICBiZWluZyBmaWxsZWQsIGFuZCBkcm9wIGlzIHJvb3Qgd2hlbiBzdWItdGFibGVzIGFyZSBiZWluZyBmaWxsZWQuXG5cbiAgIFdoZW4gYSBuZXcgc3ViLXRhYmxlIGlzIG5lZWRlZCwgaXQgaXMgbmVjZXNzYXJ5IHRvIGxvb2sgYWhlYWQgaW4gdGhlXG4gICBjb2RlIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIHdoYXQgc2l6ZSBzdWItdGFibGUgaXMgbmVlZGVkLiAgVGhlIGxlbmd0aFxuICAgY291bnRzIGFyZSB1c2VkIGZvciB0aGlzLCBhbmQgc28gY291bnRbXSBpcyBkZWNyZW1lbnRlZCBhcyBjb2RlcyBhcmVcbiAgIGVudGVyZWQgaW4gdGhlIHRhYmxlcy5cblxuICAgdXNlZCBrZWVwcyB0cmFjayBvZiBob3cgbWFueSB0YWJsZSBlbnRyaWVzIGhhdmUgYmVlbiBhbGxvY2F0ZWQgZnJvbSB0aGVcbiAgIHByb3ZpZGVkICp0YWJsZSBzcGFjZS4gIEl0IGlzIGNoZWNrZWQgZm9yIExFTlMgYW5kIERJU1QgdGFibGVzIGFnYWluc3RcbiAgIHRoZSBjb25zdGFudHMgRU5PVUdIX0xFTlMgYW5kIEVOT1VHSF9ESVNUUyB0byBndWFyZCBhZ2FpbnN0IGNoYW5nZXMgaW5cbiAgIHRoZSBpbml0aWFsIHJvb3QgdGFibGUgc2l6ZSBjb25zdGFudHMuICBTZWUgdGhlIGNvbW1lbnRzIGluIGluZnRyZWVzLmhcbiAgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG4gICBzeW0gaW5jcmVtZW50cyB0aHJvdWdoIGFsbCBzeW1ib2xzLCBhbmQgdGhlIGxvb3AgdGVybWluYXRlcyB3aGVuXG4gICBhbGwgY29kZXMgb2YgbGVuZ3RoIG1heCwgaS5lLiBhbGwgY29kZXMsIGhhdmUgYmVlbiBwcm9jZXNzZWQuICBUaGlzXG4gICByb3V0aW5lIHBlcm1pdHMgaW5jb21wbGV0ZSBjb2Rlcywgc28gYW5vdGhlciBsb29wIGFmdGVyIHRoaXMgb25lIGZpbGxzXG4gICBpbiB0aGUgcmVzdCBvZiB0aGUgZGVjb2RpbmcgdGFibGVzIHdpdGggaW52YWxpZCBjb2RlIG1hcmtlcnMuXG4gICAqL1xuXG4gIC8qIHNldCB1cCBmb3IgY29kZSB0eXBlICovXG4gIC8vIHBvb3IgbWFuIG9wdGltaXphdGlvbiAtIHVzZSBpZi1lbHNlIGluc3RlYWQgb2Ygc3dpdGNoLFxuICAvLyB0byBhdm9pZCBkZW9wdHMgaW4gb2xkIHY4XG4gIGlmICh0eXBlID09PSBDT0RFUykge1xuICAgIGJhc2UgPSBleHRyYSA9IHdvcms7ICAgIC8qIGR1bW15IHZhbHVlLS1ub3QgdXNlZCAqL1xuICAgIGVuZCA9IDE5O1xuXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTEVOUykge1xuICAgIGJhc2UgPSBsYmFzZTtcbiAgICBiYXNlX2luZGV4IC09IDI1NztcbiAgICBleHRyYSA9IGxleHQ7XG4gICAgZXh0cmFfaW5kZXggLT0gMjU3O1xuICAgIGVuZCA9IDI1NjtcblxuICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgLyogRElTVFMgKi9cbiAgICBiYXNlID0gZGJhc2U7XG4gICAgZXh0cmEgPSBkZXh0O1xuICAgIGVuZCA9IC0xO1xuICB9XG5cbiAgLyogaW5pdGlhbGl6ZSBvcHRzIGZvciBsb29wICovXG4gIGh1ZmYgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlICovXG4gIHN5bSA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIHN5bWJvbCAqL1xuICBsZW4gPSBtaW47ICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBsZW5ndGggKi9cbiAgbmV4dCA9IHRhYmxlX2luZGV4OyAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSB0byBmaWxsIGluICovXG4gIGN1cnIgPSByb290OyAgICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIGluZGV4IGJpdHMgKi9cbiAgZHJvcCA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgYml0cyB0byBkcm9wIGZyb20gY29kZSBmb3IgaW5kZXggKi9cbiAgbG93ID0gLTE7ICAgICAgICAgICAgICAgICAgIC8qIHRyaWdnZXIgbmV3IHN1Yi10YWJsZSB3aGVuIGxlbiA+IHJvb3QgKi9cbiAgdXNlZCA9IDEgPDwgcm9vdDsgICAgICAgICAgLyogdXNlIHJvb3QgdGFibGUgZW50cmllcyAqL1xuICBtYXNrID0gdXNlZCAtIDE7ICAgICAgICAgICAgLyogbWFzayBmb3IgY29tcGFyaW5nIGxvdyAqL1xuXG4gIC8qIGNoZWNrIGF2YWlsYWJsZSB0YWJsZSBzcGFjZSAqL1xuICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxuICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgLyogcHJvY2VzcyBhbGwgY29kZXMgYW5kIG1ha2UgdGFibGUgZW50cmllcyAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogY3JlYXRlIHRhYmxlIGVudHJ5ICovXG4gICAgaGVyZV9iaXRzID0gbGVuIC0gZHJvcDtcbiAgICBpZiAod29ya1tzeW1dIDwgZW5kKSB7XG4gICAgICBoZXJlX29wID0gMDtcbiAgICAgIGhlcmVfdmFsID0gd29ya1tzeW1dO1xuICAgIH1cbiAgICBlbHNlIGlmICh3b3JrW3N5bV0gPiBlbmQpIHtcbiAgICAgIGhlcmVfb3AgPSBleHRyYVtleHRyYV9pbmRleCArIHdvcmtbc3ltXV07XG4gICAgICBoZXJlX3ZhbCA9IGJhc2VbYmFzZV9pbmRleCArIHdvcmtbc3ltXV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaGVyZV9vcCA9IDMyICsgNjQ7ICAgICAgICAgLyogZW5kIG9mIGJsb2NrICovXG4gICAgICBoZXJlX3ZhbCA9IDA7XG4gICAgfVxuXG4gICAgLyogcmVwbGljYXRlIGZvciB0aG9zZSBpbmRpY2VzIHdpdGggbG93IGxlbiBiaXRzIGVxdWFsIHRvIGh1ZmYgKi9cbiAgICBpbmNyID0gMSA8PCAobGVuIC0gZHJvcCk7XG4gICAgZmlsbCA9IDEgPDwgY3VycjtcbiAgICBtaW4gPSBmaWxsOyAgICAgICAgICAgICAgICAgLyogc2F2ZSBvZmZzZXQgdG8gbmV4dCB0YWJsZSAqL1xuICAgIGRvIHtcbiAgICAgIGZpbGwgLT0gaW5jcjtcbiAgICAgIHRhYmxlW25leHQgKyAoaHVmZiA+PiBkcm9wKSArIGZpbGxdID0gKGhlcmVfYml0cyA8PCAyNCkgfCAoaGVyZV9vcCA8PCAxNikgfCBoZXJlX3ZhbCB8MDtcbiAgICB9IHdoaWxlIChmaWxsICE9PSAwKTtcblxuICAgIC8qIGJhY2t3YXJkcyBpbmNyZW1lbnQgdGhlIGxlbi1iaXQgY29kZSBodWZmICovXG4gICAgaW5jciA9IDEgPDwgKGxlbiAtIDEpO1xuICAgIHdoaWxlIChodWZmICYgaW5jcikge1xuICAgICAgaW5jciA+Pj0gMTtcbiAgICB9XG4gICAgaWYgKGluY3IgIT09IDApIHtcbiAgICAgIGh1ZmYgJj0gaW5jciAtIDE7XG4gICAgICBodWZmICs9IGluY3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGh1ZmYgPSAwO1xuICAgIH1cblxuICAgIC8qIGdvIHRvIG5leHQgc3ltYm9sLCB1cGRhdGUgY291bnQsIGxlbiAqL1xuICAgIHN5bSsrO1xuICAgIGlmICgtLWNvdW50W2xlbl0gPT09IDApIHtcbiAgICAgIGlmIChsZW4gPT09IG1heCkgeyBicmVhazsgfVxuICAgICAgbGVuID0gbGVuc1tsZW5zX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICB9XG5cbiAgICAvKiBjcmVhdGUgbmV3IHN1Yi10YWJsZSBpZiBuZWVkZWQgKi9cbiAgICBpZiAobGVuID4gcm9vdCAmJiAoaHVmZiAmIG1hc2spICE9PSBsb3cpIHtcbiAgICAgIC8qIGlmIGZpcnN0IHRpbWUsIHRyYW5zaXRpb24gdG8gc3ViLXRhYmxlcyAqL1xuICAgICAgaWYgKGRyb3AgPT09IDApIHtcbiAgICAgICAgZHJvcCA9IHJvb3Q7XG4gICAgICB9XG5cbiAgICAgIC8qIGluY3JlbWVudCBwYXN0IGxhc3QgdGFibGUgKi9cbiAgICAgIG5leHQgKz0gbWluOyAgICAgICAgICAgIC8qIGhlcmUgbWluIGlzIDEgPDwgY3VyciAqL1xuXG4gICAgICAvKiBkZXRlcm1pbmUgbGVuZ3RoIG9mIG5leHQgdGFibGUgKi9cbiAgICAgIGN1cnIgPSBsZW4gLSBkcm9wO1xuICAgICAgbGVmdCA9IDEgPDwgY3VycjtcbiAgICAgIHdoaWxlIChjdXJyICsgZHJvcCA8IG1heCkge1xuICAgICAgICBsZWZ0IC09IGNvdW50W2N1cnIgKyBkcm9wXTtcbiAgICAgICAgaWYgKGxlZnQgPD0gMCkgeyBicmVhazsgfVxuICAgICAgICBjdXJyKys7XG4gICAgICAgIGxlZnQgPDw9IDE7XG4gICAgICB9XG5cbiAgICAgIC8qIGNoZWNrIGZvciBlbm91Z2ggc3BhY2UgKi9cbiAgICAgIHVzZWQgKz0gMSA8PCBjdXJyO1xuICAgICAgaWYgKCh0eXBlID09PSBMRU5TICYmIHVzZWQgPiBFTk9VR0hfTEVOUykgfHxcbiAgICAgICAgKHR5cGUgPT09IERJU1RTICYmIHVzZWQgPiBFTk9VR0hfRElTVFMpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICAvKiBwb2ludCBlbnRyeSBpbiByb290IHRhYmxlIHRvIHN1Yi10YWJsZSAqL1xuICAgICAgbG93ID0gaHVmZiAmIG1hc2s7XG4gICAgICAvKnRhYmxlLm9wW2xvd10gPSBjdXJyO1xuICAgICAgdGFibGUuYml0c1tsb3ddID0gcm9vdDtcbiAgICAgIHRhYmxlLnZhbFtsb3ddID0gbmV4dCAtIG9wdHMudGFibGVfaW5kZXg7Ki9cbiAgICAgIHRhYmxlW2xvd10gPSAocm9vdCA8PCAyNCkgfCAoY3VyciA8PCAxNikgfCAobmV4dCAtIHRhYmxlX2luZGV4KSB8MDtcbiAgICB9XG4gIH1cblxuICAvKiBmaWxsIGluIHJlbWFpbmluZyB0YWJsZSBlbnRyeSBpZiBjb2RlIGlzIGluY29tcGxldGUgKGd1YXJhbnRlZWQgdG8gaGF2ZVxuICAgYXQgbW9zdCBvbmUgcmVtYWluaW5nIGVudHJ5LCBzaW5jZSBpZiB0aGUgY29kZSBpcyBpbmNvbXBsZXRlLCB0aGVcbiAgIG1heGltdW0gY29kZSBsZW5ndGggdGhhdCB3YXMgYWxsb3dlZCB0byBnZXQgdGhpcyBmYXIgaXMgb25lIGJpdCkgKi9cbiAgaWYgKGh1ZmYgIT09IDApIHtcbiAgICAvL3RhYmxlLm9wW25leHQgKyBodWZmXSA9IDY0OyAgICAgICAgICAgIC8qIGludmFsaWQgY29kZSBtYXJrZXIgKi9cbiAgICAvL3RhYmxlLmJpdHNbbmV4dCArIGh1ZmZdID0gbGVuIC0gZHJvcDtcbiAgICAvL3RhYmxlLnZhbFtuZXh0ICsgaHVmZl0gPSAwO1xuICAgIHRhYmxlW25leHQgKyBodWZmXSA9ICgobGVuIC0gZHJvcCkgPDwgMjQpIHwgKDY0IDw8IDE2KSB8MDtcbiAgfVxuXG4gIC8qIHNldCByZXR1cm4gcGFyYW1ldGVycyAqL1xuICAvL29wdHMudGFibGVfaW5kZXggKz0gdXNlZDtcbiAgb3B0cy5iaXRzID0gcm9vdDtcbiAgcmV0dXJuIDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIEdaaGVhZGVyKCkge1xuICAvKiB0cnVlIGlmIGNvbXByZXNzZWQgZGF0YSBiZWxpZXZlZCB0byBiZSB0ZXh0ICovXG4gIHRoaXMudGV4dCAgICAgICA9IDA7XG4gIC8qIG1vZGlmaWNhdGlvbiB0aW1lICovXG4gIHRoaXMudGltZSAgICAgICA9IDA7XG4gIC8qIGV4dHJhIGZsYWdzIChub3QgdXNlZCB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXG4gIHRoaXMueGZsYWdzICAgICA9IDA7XG4gIC8qIG9wZXJhdGluZyBzeXN0ZW0gKi9cbiAgdGhpcy5vcyAgICAgICAgID0gMDtcbiAgLyogcG9pbnRlciB0byBleHRyYSBmaWVsZCBvciBaX05VTEwgaWYgbm9uZSAqL1xuICB0aGlzLmV4dHJhICAgICAgPSBudWxsO1xuICAvKiBleHRyYSBmaWVsZCBsZW5ndGggKHZhbGlkIGlmIGV4dHJhICE9IFpfTlVMTCkgKi9cbiAgdGhpcy5leHRyYV9sZW4gID0gMDsgLy8gQWN0dWFsbHksIHdlIGRvbid0IG5lZWQgaXQgaW4gSlMsXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBsZWF2ZSBmb3IgZmV3IGNvZGUgbW9kaWZpY2F0aW9uc1xuXG4gIC8vXG4gIC8vIFNldHVwIGxpbWl0cyBpcyBub3QgbmVjZXNzYXJ5IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnlcbiAgLy8gZm9yIGluZmxhdGUgdXNlIGNvbnN0YW50IGxpbWl0IGluIDY1NTM2IGJ5dGVzXG4gIC8vXG5cbiAgLyogc3BhY2UgYXQgZXh0cmEgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5leHRyYV9tYXggID0gMDtcbiAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgZmlsZSBuYW1lIG9yIFpfTlVMTCAqL1xuICB0aGlzLm5hbWUgICAgICAgPSAnJztcbiAgLyogc3BhY2UgYXQgbmFtZSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLm5hbWVfbWF4ICAgPSAwO1xuICAvKiBwb2ludGVyIHRvIHplcm8tdGVybWluYXRlZCBjb21tZW50IG9yIFpfTlVMTCAqL1xuICB0aGlzLmNvbW1lbnQgICAgPSAnJztcbiAgLyogc3BhY2UgYXQgY29tbWVudCAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLmNvbW1fbWF4ICAgPSAwO1xuICAvKiB0cnVlIGlmIHRoZXJlIHdhcyBvciB3aWxsIGJlIGEgaGVhZGVyIGNyYyAqL1xuICB0aGlzLmhjcmMgICAgICAgPSAwO1xuICAvKiB0cnVlIHdoZW4gZG9uZSByZWFkaW5nIGd6aXAgaGVhZGVyIChub3QgdXNlZCB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXG4gIHRoaXMuZG9uZSAgICAgICA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdaaGVhZGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEdlbmVyaWNXb3JrZXIgPSByZXF1aXJlKCcuLi9zdHJlYW0vR2VuZXJpY1dvcmtlcicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuLi91dGY4Jyk7XG52YXIgY3JjMzIgPSByZXF1aXJlKCcuLi9jcmMzMicpO1xudmFyIHNpZ25hdHVyZSA9IHJlcXVpcmUoJy4uL3NpZ25hdHVyZScpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBpbnRlZ2VyIGludG8gYSBzdHJpbmcgaW4gaGV4YWRlY2ltYWwuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGRlYyB0aGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gYnl0ZXMgdGhlIG51bWJlciBvZiBieXRlcyB0byBnZW5lcmF0ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSByZXN1bHQuXG4gKi9cbnZhciBkZWNUb0hleCA9IGZ1bmN0aW9uKGRlYywgYnl0ZXMpIHtcbiAgICB2YXIgaGV4ID0gXCJcIiwgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykge1xuICAgICAgICBoZXggKz0gU3RyaW5nLmZyb21DaGFyQ29kZShkZWMgJiAweGZmKTtcbiAgICAgICAgZGVjID0gZGVjID4+PiA4O1xuICAgIH1cbiAgICByZXR1cm4gaGV4O1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSB0aGUgVU5JWCBwYXJ0IG9mIHRoZSBleHRlcm5hbCBmaWxlIGF0dHJpYnV0ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gdW5peFBlcm1pc3Npb25zIHRoZSB1bml4IHBlcm1pc3Npb25zIG9yIG51bGwuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzRGlyIHRydWUgaWYgdGhlIGVudHJ5IGlzIGEgZGlyZWN0b3J5LCBmYWxzZSBvdGhlcndpc2UuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGEgMzIgYml0IGludGVnZXIuXG4gKlxuICogYWRhcHRlZCBmcm9tIGh0dHA6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8xNDcwNS90aGUtemlwLWZvcm1hdHMtZXh0ZXJuYWwtZmlsZS1hdHRyaWJ1dGUgOlxuICpcbiAqIFRUVFRzc3Ryd3hyd3hyd3gwMDAwMDAwMDAwQURWU0hSXG4gKiBeXl5eX19fX19fX19fX19fX19fX19fX19fX19fX19fXyBmaWxlIHR5cGUsIHNlZSB6aXBpbmZvLmMgKFVOWF8qKVxuICogICAgIF5eXl9fX19fX19fX19fX19fX19fX19fX19fX18gc2V0dWlkLCBzZXRnaWQsIHN0aWNreVxuICogICAgICAgIF5eXl5eXl5eXl9fX19fX19fX19fX19fX18gcGVybWlzc2lvbnNcbiAqICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eX19fX19fIG5vdCB1c2VkID9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eIERPUyBhdHRyaWJ1dGUgYml0cyA6IEFyY2hpdmUsIERpcmVjdG9yeSwgVm9sdW1lIGxhYmVsLCBTeXN0ZW0gZmlsZSwgSGlkZGVuLCBSZWFkIG9ubHlcbiAqL1xudmFyIGdlbmVyYXRlVW5peEV4dGVybmFsRmlsZUF0dHIgPSBmdW5jdGlvbiAodW5peFBlcm1pc3Npb25zLCBpc0Rpcikge1xuXG4gICAgdmFyIHJlc3VsdCA9IHVuaXhQZXJtaXNzaW9ucztcbiAgICBpZiAoIXVuaXhQZXJtaXNzaW9ucykge1xuICAgICAgICAvLyBJIGNhbid0IHVzZSBvY3RhbCB2YWx1ZXMgaW4gc3RyaWN0IG1vZGUsIGhlbmNlIHRoZSBoZXhhLlxuICAgICAgICAvLyAgMDQwNzc1ID0+IDB4NDFmZFxuICAgICAgICAvLyAwMTAwNjY0ID0+IDB4ODFiNFxuICAgICAgICByZXN1bHQgPSBpc0RpciA/IDB4NDFmZCA6IDB4ODFiNDtcbiAgICB9XG4gICAgcmV0dXJuIChyZXN1bHQgJiAweEZGRkYpIDw8IDE2O1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSB0aGUgRE9TIHBhcnQgb2YgdGhlIGV4dGVybmFsIGZpbGUgYXR0cmlidXRlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBkb3NQZXJtaXNzaW9ucyB0aGUgZG9zIHBlcm1pc3Npb25zIG9yIG51bGwuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzRGlyIHRydWUgaWYgdGhlIGVudHJ5IGlzIGEgZGlyZWN0b3J5LCBmYWxzZSBvdGhlcndpc2UuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGEgMzIgYml0IGludGVnZXIuXG4gKlxuICogQml0IDAgICAgIFJlYWQtT25seVxuICogQml0IDEgICAgIEhpZGRlblxuICogQml0IDIgICAgIFN5c3RlbVxuICogQml0IDMgICAgIFZvbHVtZSBMYWJlbFxuICogQml0IDQgICAgIERpcmVjdG9yeVxuICogQml0IDUgICAgIEFyY2hpdmVcbiAqL1xudmFyIGdlbmVyYXRlRG9zRXh0ZXJuYWxGaWxlQXR0ciA9IGZ1bmN0aW9uIChkb3NQZXJtaXNzaW9ucywgaXNEaXIpIHtcblxuICAgIC8vIHRoZSBkaXIgZmxhZyBpcyBhbHJlYWR5IHNldCBmb3IgY29tcGF0aWJpbGl0eVxuICAgIHJldHVybiAoZG9zUGVybWlzc2lvbnMgfHwgMCkgICYgMHgzRjtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgdGhlIHZhcmlvdXMgcGFydHMgdXNlZCBpbiB0aGUgY29uc3RydWN0aW9uIG9mIHRoZSBmaW5hbCB6aXAgZmlsZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHJlYW1JbmZvIHRoZSBoYXNoIHdpdGggaW5mb3JtYXRpb25zIGFib3V0IHRoZSBjb21wcmVzc2VkIGZpbGUuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN0cmVhbWVkQ29udGVudCBpcyB0aGUgY29udGVudCBzdHJlYW1lZCA/XG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN0cmVhbWluZ0VuZGVkIGlzIHRoZSBzdHJlYW0gZmluaXNoZWQgP1xuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCB0aGUgY3VycmVudCBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHppcCBmaWxlLlxuICogQHBhcmFtIHtTdHJpbmd9IHBsYXRmb3JtIGxldCdzIHByZXRlbmQgd2UgYXJlIHRoaXMgcGxhdGZvcm0gKGNoYW5nZSBwbGF0Zm9ybSBkZXBlbmRlbnRzIGZpZWxkcylcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZUZpbGVOYW1lIHRoZSBmdW5jdGlvbiB0byBlbmNvZGUgdGhlIGZpbGUgbmFtZSAvIGNvbW1lbnQuXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSB6aXAgcGFydHMuXG4gKi9cbnZhciBnZW5lcmF0ZVppcFBhcnRzID0gZnVuY3Rpb24oc3RyZWFtSW5mbywgc3RyZWFtZWRDb250ZW50LCBzdHJlYW1pbmdFbmRlZCwgb2Zmc2V0LCBwbGF0Zm9ybSwgZW5jb2RlRmlsZU5hbWUpIHtcbiAgICB2YXIgZmlsZSA9IHN0cmVhbUluZm9bJ2ZpbGUnXSxcbiAgICBjb21wcmVzc2lvbiA9IHN0cmVhbUluZm9bJ2NvbXByZXNzaW9uJ10sXG4gICAgdXNlQ3VzdG9tRW5jb2RpbmcgPSBlbmNvZGVGaWxlTmFtZSAhPT0gdXRmOC51dGY4ZW5jb2RlLFxuICAgIGVuY29kZWRGaWxlTmFtZSA9IHV0aWxzLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIGVuY29kZUZpbGVOYW1lKGZpbGUubmFtZSkpLFxuICAgIHV0ZkVuY29kZWRGaWxlTmFtZSA9IHV0aWxzLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIHV0ZjgudXRmOGVuY29kZShmaWxlLm5hbWUpKSxcbiAgICBjb21tZW50ID0gZmlsZS5jb21tZW50LFxuICAgIGVuY29kZWRDb21tZW50ID0gdXRpbHMudHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgZW5jb2RlRmlsZU5hbWUoY29tbWVudCkpLFxuICAgIHV0ZkVuY29kZWRDb21tZW50ID0gdXRpbHMudHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgdXRmOC51dGY4ZW5jb2RlKGNvbW1lbnQpKSxcbiAgICB1c2VVVEY4Rm9yRmlsZU5hbWUgPSB1dGZFbmNvZGVkRmlsZU5hbWUubGVuZ3RoICE9PSBmaWxlLm5hbWUubGVuZ3RoLFxuICAgIHVzZVVURjhGb3JDb21tZW50ID0gdXRmRW5jb2RlZENvbW1lbnQubGVuZ3RoICE9PSBjb21tZW50Lmxlbmd0aCxcbiAgICBkb3NUaW1lLFxuICAgIGRvc0RhdGUsXG4gICAgZXh0cmFGaWVsZHMgPSBcIlwiLFxuICAgIHVuaWNvZGVQYXRoRXh0cmFGaWVsZCA9IFwiXCIsXG4gICAgdW5pY29kZUNvbW1lbnRFeHRyYUZpZWxkID0gXCJcIixcbiAgICBkaXIgPSBmaWxlLmRpcixcbiAgICBkYXRlID0gZmlsZS5kYXRlO1xuXG5cbiAgICB2YXIgZGF0YUluZm8gPSB7XG4gICAgICAgIGNyYzMyIDogMCxcbiAgICAgICAgY29tcHJlc3NlZFNpemUgOiAwLFxuICAgICAgICB1bmNvbXByZXNzZWRTaXplIDogMFxuICAgIH07XG5cbiAgICAvLyBpZiB0aGUgY29udGVudCBpcyBzdHJlYW1lZCwgdGhlIHNpemVzL2NyYzMyIGFyZSBvbmx5IGF2YWlsYWJsZSBBRlRFUlxuICAgIC8vIHRoZSBlbmQgb2YgdGhlIHN0cmVhbS5cbiAgICBpZiAoIXN0cmVhbWVkQ29udGVudCB8fCBzdHJlYW1pbmdFbmRlZCkge1xuICAgICAgICBkYXRhSW5mby5jcmMzMiA9IHN0cmVhbUluZm9bJ2NyYzMyJ107XG4gICAgICAgIGRhdGFJbmZvLmNvbXByZXNzZWRTaXplID0gc3RyZWFtSW5mb1snY29tcHJlc3NlZFNpemUnXTtcbiAgICAgICAgZGF0YUluZm8udW5jb21wcmVzc2VkU2l6ZSA9IHN0cmVhbUluZm9bJ3VuY29tcHJlc3NlZFNpemUnXTtcbiAgICB9XG5cbiAgICB2YXIgYml0ZmxhZyA9IDA7XG4gICAgaWYgKHN0cmVhbWVkQ29udGVudCkge1xuICAgICAgICAvLyBCaXQgMzogdGhlIHNpemVzL2NyYzMyIGFyZSBzZXQgdG8gemVybyBpbiB0aGUgbG9jYWwgaGVhZGVyLlxuICAgICAgICAvLyBUaGUgY29ycmVjdCB2YWx1ZXMgYXJlIHB1dCBpbiB0aGUgZGF0YSBkZXNjcmlwdG9yIGltbWVkaWF0ZWx5XG4gICAgICAgIC8vIGZvbGxvd2luZyB0aGUgY29tcHJlc3NlZCBkYXRhLlxuICAgICAgICBiaXRmbGFnIHw9IDB4MDAwODtcbiAgICB9XG4gICAgaWYgKCF1c2VDdXN0b21FbmNvZGluZyAmJiAodXNlVVRGOEZvckZpbGVOYW1lIHx8IHVzZVVURjhGb3JDb21tZW50KSkge1xuICAgICAgICAvLyBCaXQgMTE6IExhbmd1YWdlIGVuY29kaW5nIGZsYWcgKEVGUykuXG4gICAgICAgIGJpdGZsYWcgfD0gMHgwODAwO1xuICAgIH1cblxuXG4gICAgdmFyIGV4dEZpbGVBdHRyID0gMDtcbiAgICB2YXIgdmVyc2lvbk1hZGVCeSA9IDA7XG4gICAgaWYgKGRpcikge1xuICAgICAgICAvLyBkb3Mgb3IgdW5peCwgd2Ugc2V0IHRoZSBkb3MgZGlyIGZsYWdcbiAgICAgICAgZXh0RmlsZUF0dHIgfD0gMHgwMDAxMDtcbiAgICB9XG4gICAgaWYocGxhdGZvcm0gPT09IFwiVU5JWFwiKSB7XG4gICAgICAgIHZlcnNpb25NYWRlQnkgPSAweDAzMUU7IC8vIFVOSVgsIHZlcnNpb24gMy4wXG4gICAgICAgIGV4dEZpbGVBdHRyIHw9IGdlbmVyYXRlVW5peEV4dGVybmFsRmlsZUF0dHIoZmlsZS51bml4UGVybWlzc2lvbnMsIGRpcik7XG4gICAgfSBlbHNlIHsgLy8gRE9TIG9yIG90aGVyLCBmYWxsYmFjayB0byBET1NcbiAgICAgICAgdmVyc2lvbk1hZGVCeSA9IDB4MDAxNDsgLy8gRE9TLCB2ZXJzaW9uIDIuMFxuICAgICAgICBleHRGaWxlQXR0ciB8PSBnZW5lcmF0ZURvc0V4dGVybmFsRmlsZUF0dHIoZmlsZS5kb3NQZXJtaXNzaW9ucywgZGlyKTtcbiAgICB9XG5cbiAgICAvLyBkYXRlXG4gICAgLy8gQHNlZSBodHRwOi8vd3d3LmRlbG9yaWUuY29tL2RqZ3BwL2RvYy9yYmludGVyL2l0LzUyLzEzLmh0bWxcbiAgICAvLyBAc2VlIGh0dHA6Ly93d3cuZGVsb3JpZS5jb20vZGpncHAvZG9jL3JiaW50ZXIvaXQvNjUvMTYuaHRtbFxuICAgIC8vIEBzZWUgaHR0cDovL3d3dy5kZWxvcmllLmNvbS9kamdwcC9kb2MvcmJpbnRlci9pdC82Ni8xNi5odG1sXG5cbiAgICBkb3NUaW1lID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGRvc1RpbWUgPSBkb3NUaW1lIDw8IDY7XG4gICAgZG9zVGltZSA9IGRvc1RpbWUgfCBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcbiAgICBkb3NUaW1lID0gZG9zVGltZSA8PCA1O1xuICAgIGRvc1RpbWUgPSBkb3NUaW1lIHwgZGF0ZS5nZXRVVENTZWNvbmRzKCkgLyAyO1xuXG4gICAgZG9zRGF0ZSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAtIDE5ODA7XG4gICAgZG9zRGF0ZSA9IGRvc0RhdGUgPDwgNDtcbiAgICBkb3NEYXRlID0gZG9zRGF0ZSB8IChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKTtcbiAgICBkb3NEYXRlID0gZG9zRGF0ZSA8PCA1O1xuICAgIGRvc0RhdGUgPSBkb3NEYXRlIHwgZGF0ZS5nZXRVVENEYXRlKCk7XG5cbiAgICBpZiAodXNlVVRGOEZvckZpbGVOYW1lKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdW5pY29kZSBwYXRoIGV4dHJhIGZpZWxkLiB1bnppcCBuZWVkcyBhdCBsZWFzdCBvbmUgZXh0cmFcbiAgICAgICAgLy8gZmllbGQgdG8gY29ycmVjdGx5IGhhbmRsZSB1bmljb2RlIHBhdGgsIHNvIHVzaW5nIHRoZSBwYXRoIGlzIGFzIGdvb2RcbiAgICAgICAgLy8gYXMgYW55IG90aGVyIGluZm9ybWF0aW9uLiBUaGlzIGNvdWxkIGltcHJvdmUgdGhlIHNpdHVhdGlvbiB3aXRoXG4gICAgICAgIC8vIG90aGVyIGFyY2hpdmUgbWFuYWdlcnMgdG9vLlxuICAgICAgICAvLyBUaGlzIGZpZWxkIGlzIHVzdWFsbHkgdXNlZCB3aXRob3V0IHRoZSB1dGY4IGZsYWcsIHdpdGggYSBub25cbiAgICAgICAgLy8gdW5pY29kZSBwYXRoIGluIHRoZSBoZWFkZXIgKHdpbnJhciwgd2luemlwKS4gVGhpcyBoZWxwcyAoYSBiaXQpXG4gICAgICAgIC8vIHdpdGggdGhlIG1lc3N5IFdpbmRvd3MnIGRlZmF1bHQgY29tcHJlc3NlZCBmb2xkZXJzIGZlYXR1cmUgYnV0XG4gICAgICAgIC8vIGJyZWFrcyBvbiBwN3ppcCB3aGljaCBkb2Vzbid0IHNlZWsgdGhlIHVuaWNvZGUgcGF0aCBleHRyYSBmaWVsZC5cbiAgICAgICAgLy8gU28gZm9yIG5vdywgVVRGLTggZXZlcnl3aGVyZSAhXG4gICAgICAgIHVuaWNvZGVQYXRoRXh0cmFGaWVsZCA9XG4gICAgICAgICAgICAvLyBWZXJzaW9uXG4gICAgICAgICAgICBkZWNUb0hleCgxLCAxKSArXG4gICAgICAgICAgICAvLyBOYW1lQ1JDMzJcbiAgICAgICAgICAgIGRlY1RvSGV4KGNyYzMyKGVuY29kZWRGaWxlTmFtZSksIDQpICtcbiAgICAgICAgICAgIC8vIFVuaWNvZGVOYW1lXG4gICAgICAgICAgICB1dGZFbmNvZGVkRmlsZU5hbWU7XG5cbiAgICAgICAgZXh0cmFGaWVsZHMgKz1cbiAgICAgICAgICAgIC8vIEluZm8tWklQIFVuaWNvZGUgUGF0aCBFeHRyYSBGaWVsZFxuICAgICAgICAgICAgXCJcXHg3NVxceDcwXCIgK1xuICAgICAgICAgICAgLy8gc2l6ZVxuICAgICAgICAgICAgZGVjVG9IZXgodW5pY29kZVBhdGhFeHRyYUZpZWxkLmxlbmd0aCwgMikgK1xuICAgICAgICAgICAgLy8gY29udGVudFxuICAgICAgICAgICAgdW5pY29kZVBhdGhFeHRyYUZpZWxkO1xuICAgIH1cblxuICAgIGlmKHVzZVVURjhGb3JDb21tZW50KSB7XG5cbiAgICAgICAgdW5pY29kZUNvbW1lbnRFeHRyYUZpZWxkID1cbiAgICAgICAgICAgIC8vIFZlcnNpb25cbiAgICAgICAgICAgIGRlY1RvSGV4KDEsIDEpICtcbiAgICAgICAgICAgIC8vIENvbW1lbnRDUkMzMlxuICAgICAgICAgICAgZGVjVG9IZXgoY3JjMzIoZW5jb2RlZENvbW1lbnQpLCA0KSArXG4gICAgICAgICAgICAvLyBVbmljb2RlTmFtZVxuICAgICAgICAgICAgdXRmRW5jb2RlZENvbW1lbnQ7XG5cbiAgICAgICAgZXh0cmFGaWVsZHMgKz1cbiAgICAgICAgICAgIC8vIEluZm8tWklQIFVuaWNvZGUgUGF0aCBFeHRyYSBGaWVsZFxuICAgICAgICAgICAgXCJcXHg3NVxceDYzXCIgK1xuICAgICAgICAgICAgLy8gc2l6ZVxuICAgICAgICAgICAgZGVjVG9IZXgodW5pY29kZUNvbW1lbnRFeHRyYUZpZWxkLmxlbmd0aCwgMikgK1xuICAgICAgICAgICAgLy8gY29udGVudFxuICAgICAgICAgICAgdW5pY29kZUNvbW1lbnRFeHRyYUZpZWxkO1xuICAgIH1cblxuICAgIHZhciBoZWFkZXIgPSBcIlwiO1xuXG4gICAgLy8gdmVyc2lvbiBuZWVkZWQgdG8gZXh0cmFjdFxuICAgIGhlYWRlciArPSBcIlxceDBBXFx4MDBcIjtcbiAgICAvLyBnZW5lcmFsIHB1cnBvc2UgYml0IGZsYWdcbiAgICBoZWFkZXIgKz0gZGVjVG9IZXgoYml0ZmxhZywgMik7XG4gICAgLy8gY29tcHJlc3Npb24gbWV0aG9kXG4gICAgaGVhZGVyICs9IGNvbXByZXNzaW9uLm1hZ2ljO1xuICAgIC8vIGxhc3QgbW9kIGZpbGUgdGltZVxuICAgIGhlYWRlciArPSBkZWNUb0hleChkb3NUaW1lLCAyKTtcbiAgICAvLyBsYXN0IG1vZCBmaWxlIGRhdGVcbiAgICBoZWFkZXIgKz0gZGVjVG9IZXgoZG9zRGF0ZSwgMik7XG4gICAgLy8gY3JjLTMyXG4gICAgaGVhZGVyICs9IGRlY1RvSGV4KGRhdGFJbmZvLmNyYzMyLCA0KTtcbiAgICAvLyBjb21wcmVzc2VkIHNpemVcbiAgICBoZWFkZXIgKz0gZGVjVG9IZXgoZGF0YUluZm8uY29tcHJlc3NlZFNpemUsIDQpO1xuICAgIC8vIHVuY29tcHJlc3NlZCBzaXplXG4gICAgaGVhZGVyICs9IGRlY1RvSGV4KGRhdGFJbmZvLnVuY29tcHJlc3NlZFNpemUsIDQpO1xuICAgIC8vIGZpbGUgbmFtZSBsZW5ndGhcbiAgICBoZWFkZXIgKz0gZGVjVG9IZXgoZW5jb2RlZEZpbGVOYW1lLmxlbmd0aCwgMik7XG4gICAgLy8gZXh0cmEgZmllbGQgbGVuZ3RoXG4gICAgaGVhZGVyICs9IGRlY1RvSGV4KGV4dHJhRmllbGRzLmxlbmd0aCwgMik7XG5cblxuICAgIHZhciBmaWxlUmVjb3JkID0gc2lnbmF0dXJlLkxPQ0FMX0ZJTEVfSEVBREVSICsgaGVhZGVyICsgZW5jb2RlZEZpbGVOYW1lICsgZXh0cmFGaWVsZHM7XG5cbiAgICB2YXIgZGlyUmVjb3JkID0gc2lnbmF0dXJlLkNFTlRSQUxfRklMRV9IRUFERVIgK1xuICAgICAgICAvLyB2ZXJzaW9uIG1hZGUgYnkgKDAwOiBET1MpXG4gICAgICAgIGRlY1RvSGV4KHZlcnNpb25NYWRlQnksIDIpICtcbiAgICAgICAgLy8gZmlsZSBoZWFkZXIgKGNvbW1vbiB0byBmaWxlIGFuZCBjZW50cmFsIGRpcmVjdG9yeSlcbiAgICAgICAgaGVhZGVyICtcbiAgICAgICAgLy8gZmlsZSBjb21tZW50IGxlbmd0aFxuICAgICAgICBkZWNUb0hleChlbmNvZGVkQ29tbWVudC5sZW5ndGgsIDIpICtcbiAgICAgICAgLy8gZGlzayBudW1iZXIgc3RhcnRcbiAgICAgICAgXCJcXHgwMFxceDAwXCIgK1xuICAgICAgICAvLyBpbnRlcm5hbCBmaWxlIGF0dHJpYnV0ZXMgVE9ET1xuICAgICAgICBcIlxceDAwXFx4MDBcIiArXG4gICAgICAgIC8vIGV4dGVybmFsIGZpbGUgYXR0cmlidXRlc1xuICAgICAgICBkZWNUb0hleChleHRGaWxlQXR0ciwgNCkgK1xuICAgICAgICAvLyByZWxhdGl2ZSBvZmZzZXQgb2YgbG9jYWwgaGVhZGVyXG4gICAgICAgIGRlY1RvSGV4KG9mZnNldCwgNCkgK1xuICAgICAgICAvLyBmaWxlIG5hbWVcbiAgICAgICAgZW5jb2RlZEZpbGVOYW1lICtcbiAgICAgICAgLy8gZXh0cmEgZmllbGRcbiAgICAgICAgZXh0cmFGaWVsZHMgK1xuICAgICAgICAvLyBmaWxlIGNvbW1lbnRcbiAgICAgICAgZW5jb2RlZENvbW1lbnQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmaWxlUmVjb3JkOiBmaWxlUmVjb3JkLFxuICAgICAgICBkaXJSZWNvcmQ6IGRpclJlY29yZFxuICAgIH07XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIHRoZSBFT0NEIHJlY29yZC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBlbnRyaWVzQ291bnQgdGhlIG51bWJlciBvZiBlbnRyaWVzIGluIHRoZSB6aXAgZmlsZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBjZW50cmFsRGlyTGVuZ3RoIHRoZSBsZW5ndGggKGluIGJ5dGVzKSBvZiB0aGUgY2VudHJhbCBkaXIuXG4gKiBAcGFyYW0ge051bWJlcn0gbG9jYWxEaXJMZW5ndGggdGhlIGxlbmd0aCAoaW4gYnl0ZXMpIG9mIHRoZSBsb2NhbCBkaXIuXG4gKiBAcGFyYW0ge1N0cmluZ30gY29tbWVudCB0aGUgemlwIGZpbGUgY29tbWVudCBhcyBhIGJpbmFyeSBzdHJpbmcuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVGaWxlTmFtZSB0aGUgZnVuY3Rpb24gdG8gZW5jb2RlIHRoZSBjb21tZW50LlxuICogQHJldHVybiB7U3RyaW5nfSB0aGUgRU9DRCByZWNvcmQuXG4gKi9cbnZhciBnZW5lcmF0ZUNlbnRyYWxEaXJlY3RvcnlFbmQgPSBmdW5jdGlvbiAoZW50cmllc0NvdW50LCBjZW50cmFsRGlyTGVuZ3RoLCBsb2NhbERpckxlbmd0aCwgY29tbWVudCwgZW5jb2RlRmlsZU5hbWUpIHtcbiAgICB2YXIgZGlyRW5kID0gXCJcIjtcbiAgICB2YXIgZW5jb2RlZENvbW1lbnQgPSB1dGlscy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCBlbmNvZGVGaWxlTmFtZShjb21tZW50KSk7XG5cbiAgICAvLyBlbmQgb2YgY2VudHJhbCBkaXIgc2lnbmF0dXJlXG4gICAgZGlyRW5kID0gc2lnbmF0dXJlLkNFTlRSQUxfRElSRUNUT1JZX0VORCArXG4gICAgICAgIC8vIG51bWJlciBvZiB0aGlzIGRpc2tcbiAgICAgICAgXCJcXHgwMFxceDAwXCIgK1xuICAgICAgICAvLyBudW1iZXIgb2YgdGhlIGRpc2sgd2l0aCB0aGUgc3RhcnQgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5XG4gICAgICAgIFwiXFx4MDBcXHgwMFwiICtcbiAgICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIGNlbnRyYWwgZGlyZWN0b3J5IG9uIHRoaXMgZGlza1xuICAgICAgICBkZWNUb0hleChlbnRyaWVzQ291bnQsIDIpICtcbiAgICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIGNlbnRyYWwgZGlyZWN0b3J5XG4gICAgICAgIGRlY1RvSGV4KGVudHJpZXNDb3VudCwgMikgK1xuICAgICAgICAvLyBzaXplIG9mIHRoZSBjZW50cmFsIGRpcmVjdG9yeSAgIDQgYnl0ZXNcbiAgICAgICAgZGVjVG9IZXgoY2VudHJhbERpckxlbmd0aCwgNCkgK1xuICAgICAgICAvLyBvZmZzZXQgb2Ygc3RhcnQgb2YgY2VudHJhbCBkaXJlY3Rvcnkgd2l0aCByZXNwZWN0IHRvIHRoZSBzdGFydGluZyBkaXNrIG51bWJlclxuICAgICAgICBkZWNUb0hleChsb2NhbERpckxlbmd0aCwgNCkgK1xuICAgICAgICAvLyAuWklQIGZpbGUgY29tbWVudCBsZW5ndGhcbiAgICAgICAgZGVjVG9IZXgoZW5jb2RlZENvbW1lbnQubGVuZ3RoLCAyKSArXG4gICAgICAgIC8vIC5aSVAgZmlsZSBjb21tZW50XG4gICAgICAgIGVuY29kZWRDb21tZW50O1xuXG4gICAgcmV0dXJuIGRpckVuZDtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgZGF0YSBkZXNjcmlwdG9ycyBmb3IgYSBmaWxlIGVudHJ5LlxuICogQHBhcmFtIHtPYmplY3R9IHN0cmVhbUluZm8gdGhlIGhhc2ggZ2VuZXJhdGVkIGJ5IGEgd29ya2VyLCBjb250YWluaW5nIGluZm9ybWF0aW9uc1xuICogb24gdGhlIGZpbGUgZW50cnkuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBkYXRhIGRlc2NyaXB0b3JzLlxuICovXG52YXIgZ2VuZXJhdGVEYXRhRGVzY3JpcHRvcnMgPSBmdW5jdGlvbiAoc3RyZWFtSW5mbykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gXCJcIjtcbiAgICBkZXNjcmlwdG9yID0gc2lnbmF0dXJlLkRBVEFfREVTQ1JJUFRPUiArXG4gICAgICAgIC8vIGNyYy0zMiAgICAgICAgICAgICAgICAgICAgICAgICAgNCBieXRlc1xuICAgICAgICBkZWNUb0hleChzdHJlYW1JbmZvWydjcmMzMiddLCA0KSArXG4gICAgICAgIC8vIGNvbXByZXNzZWQgc2l6ZSAgICAgICAgICAgICAgICAgNCBieXRlc1xuICAgICAgICBkZWNUb0hleChzdHJlYW1JbmZvWydjb21wcmVzc2VkU2l6ZSddLCA0KSArXG4gICAgICAgIC8vIHVuY29tcHJlc3NlZCBzaXplICAgICAgICAgICAgICAgNCBieXRlc1xuICAgICAgICBkZWNUb0hleChzdHJlYW1JbmZvWyd1bmNvbXByZXNzZWRTaXplJ10sIDQpO1xuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG5cbi8qKlxuICogQSB3b3JrZXIgdG8gY29uY2F0ZW5hdGUgb3RoZXIgd29ya2VycyB0byBjcmVhdGUgYSB6aXAgZmlsZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3RyZWFtRmlsZXMgYHRydWVgIHRvIHN0cmVhbSB0aGUgY29udGVudCBvZiB0aGUgZmlsZXMsXG4gKiBgZmFsc2VgIHRvIGFjY3VtdWxhdGUgaXQuXG4gKiBAcGFyYW0ge1N0cmluZ30gY29tbWVudCB0aGUgY29tbWVudCB0byB1c2UuXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhdGZvcm0gdGhlIHBsYXRmb3JtIHRvIHVzZSwgXCJVTklYXCIgb3IgXCJET1NcIi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZUZpbGVOYW1lIHRoZSBmdW5jdGlvbiB0byBlbmNvZGUgZmlsZSBuYW1lcyBhbmQgY29tbWVudHMuXG4gKi9cbmZ1bmN0aW9uIFppcEZpbGVXb3JrZXIoc3RyZWFtRmlsZXMsIGNvbW1lbnQsIHBsYXRmb3JtLCBlbmNvZGVGaWxlTmFtZSkge1xuICAgIEdlbmVyaWNXb3JrZXIuY2FsbCh0aGlzLCBcIlppcEZpbGVXb3JrZXJcIik7XG4gICAgLy8gVGhlIG51bWJlciBvZiBieXRlcyB3cml0dGVuIHNvIGZhci4gVGhpcyBkb2Vzbid0IGNvdW50IGFjY3VtdWxhdGVkIGNodW5rcy5cbiAgICB0aGlzLmJ5dGVzV3JpdHRlbiA9IDA7XG4gICAgLy8gVGhlIGNvbW1lbnQgb2YgdGhlIHppcCBmaWxlXG4gICAgdGhpcy56aXBDb21tZW50ID0gY29tbWVudDtcbiAgICAvLyBUaGUgcGxhdGZvcm0gXCJnZW5lcmF0aW5nXCIgdGhlIHppcCBmaWxlLlxuICAgIHRoaXMuemlwUGxhdGZvcm0gPSBwbGF0Zm9ybTtcbiAgICAvLyB0aGUgZnVuY3Rpb24gdG8gZW5jb2RlIGZpbGUgbmFtZXMgYW5kIGNvbW1lbnRzLlxuICAgIHRoaXMuZW5jb2RlRmlsZU5hbWUgPSBlbmNvZGVGaWxlTmFtZTtcbiAgICAvLyBTaG91bGQgd2Ugc3RyZWFtIHRoZSBjb250ZW50IG9mIHRoZSBmaWxlcyA/XG4gICAgdGhpcy5zdHJlYW1GaWxlcyA9IHN0cmVhbUZpbGVzO1xuICAgIC8vIElmIGBzdHJlYW1GaWxlc2AgaXMgZmFsc2UsIHdlIHdpbGwgbmVlZCB0byBhY2N1bXVsYXRlIHRoZSBjb250ZW50IG9mIHRoZVxuICAgIC8vIGZpbGVzIHRvIGNhbGN1bGF0ZSBzaXplcyAvIGNyYzMyIChhbmQgd3JpdGUgdGhlbSAqYmVmb3JlKiB0aGUgY29udGVudCkuXG4gICAgLy8gVGhpcyBib29sZWFuIGluZGljYXRlcyBpZiB3ZSBhcmUgYWNjdW11bGF0aW5nIGNodW5rcyAoaXQgd2lsbCBjaGFuZ2UgYSBsb3RcbiAgICAvLyBkdXJpbmcgdGhlIGxpZmV0aW1lIG9mIHRoaXMgd29ya2VyKS5cbiAgICB0aGlzLmFjY3VtdWxhdGUgPSBmYWxzZTtcbiAgICAvLyBUaGUgYnVmZmVyIHJlY2VpdmluZyBjaHVua3Mgd2hlbiBhY2N1bXVsYXRpbmcgY29udGVudC5cbiAgICB0aGlzLmNvbnRlbnRCdWZmZXIgPSBbXTtcbiAgICAvLyBUaGUgbGlzdCBvZiBnZW5lcmF0ZWQgZGlyZWN0b3J5IHJlY29yZHMuXG4gICAgdGhpcy5kaXJSZWNvcmRzID0gW107XG4gICAgLy8gVGhlIG9mZnNldCAoaW4gYnl0ZXMpIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgemlwIGZpbGUgZm9yIHRoZSBjdXJyZW50IHNvdXJjZS5cbiAgICB0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQgPSAwO1xuICAgIC8vIFRoZSB0b3RhbCBudW1iZXIgb2YgZW50cmllcyBpbiB0aGlzIHppcCBmaWxlLlxuICAgIHRoaXMuZW50cmllc0NvdW50ID0gMDtcbiAgICAvLyB0aGUgbmFtZSBvZiB0aGUgZmlsZSBjdXJyZW50bHkgYmVpbmcgYWRkZWQsIG51bGwgd2hlbiBoYW5kbGluZyB0aGUgZW5kIG9mIHRoZSB6aXAgZmlsZS5cbiAgICAvLyBVc2VkIGZvciB0aGUgZW1pdGVkIG1ldGFkYXRhLlxuICAgIHRoaXMuY3VycmVudEZpbGUgPSBudWxsO1xuXG5cblxuICAgIHRoaXMuX3NvdXJjZXMgPSBbXTtcbn1cbnV0aWxzLmluaGVyaXRzKFppcEZpbGVXb3JrZXIsIEdlbmVyaWNXb3JrZXIpO1xuXG4vKipcbiAqIEBzZWUgR2VuZXJpY1dvcmtlci5wdXNoXG4gKi9cblppcEZpbGVXb3JrZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmspIHtcblxuICAgIHZhciBjdXJyZW50RmlsZVBlcmNlbnQgPSBjaHVuay5tZXRhLnBlcmNlbnQgfHwgMDtcbiAgICB2YXIgZW50cmllc0NvdW50ID0gdGhpcy5lbnRyaWVzQ291bnQ7XG4gICAgdmFyIHJlbWFpbmluZ0ZpbGVzID0gdGhpcy5fc291cmNlcy5sZW5ndGg7XG5cbiAgICBpZih0aGlzLmFjY3VtdWxhdGUpIHtcbiAgICAgICAgdGhpcy5jb250ZW50QnVmZmVyLnB1c2goY2h1bmspO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYnl0ZXNXcml0dGVuICs9IGNodW5rLmRhdGEubGVuZ3RoO1xuXG4gICAgICAgIEdlbmVyaWNXb3JrZXIucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICBkYXRhIDogY2h1bmsuZGF0YSxcbiAgICAgICAgICAgIG1ldGEgOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudEZpbGUgOiB0aGlzLmN1cnJlbnRGaWxlLFxuICAgICAgICAgICAgICAgIHBlcmNlbnQgOiBlbnRyaWVzQ291bnQgPyAoY3VycmVudEZpbGVQZXJjZW50ICsgMTAwICogKGVudHJpZXNDb3VudCAtIHJlbWFpbmluZ0ZpbGVzIC0gMSkpIC8gZW50cmllc0NvdW50IDogMTAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbi8qKlxuICogVGhlIHdvcmtlciBzdGFydGVkIGEgbmV3IHNvdXJjZSAoYW4gb3RoZXIgd29ya2VyKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHJlYW1JbmZvIHRoZSBzdHJlYW1JbmZvIG9iamVjdCBmcm9tIHRoZSBuZXcgc291cmNlLlxuICovXG5aaXBGaWxlV29ya2VyLnByb3RvdHlwZS5vcGVuZWRTb3VyY2UgPSBmdW5jdGlvbiAoc3RyZWFtSW5mbykge1xuICAgIHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCA9IHRoaXMuYnl0ZXNXcml0dGVuO1xuICAgIHRoaXMuY3VycmVudEZpbGUgPSBzdHJlYW1JbmZvWydmaWxlJ10ubmFtZTtcblxuICAgIHZhciBzdHJlYW1lZENvbnRlbnQgPSB0aGlzLnN0cmVhbUZpbGVzICYmICFzdHJlYW1JbmZvWydmaWxlJ10uZGlyO1xuXG4gICAgLy8gZG9uJ3Qgc3RyZWFtIGZvbGRlcnMgKGJlY2F1c2UgdGhleSBkb24ndCBoYXZlIGFueSBjb250ZW50KVxuICAgIGlmKHN0cmVhbWVkQ29udGVudCkge1xuICAgICAgICB2YXIgcmVjb3JkID0gZ2VuZXJhdGVaaXBQYXJ0cyhzdHJlYW1JbmZvLCBzdHJlYW1lZENvbnRlbnQsIGZhbHNlLCB0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQsIHRoaXMuemlwUGxhdGZvcm0sIHRoaXMuZW5jb2RlRmlsZU5hbWUpO1xuICAgICAgICB0aGlzLnB1c2goe1xuICAgICAgICAgICAgZGF0YSA6IHJlY29yZC5maWxlUmVjb3JkLFxuICAgICAgICAgICAgbWV0YSA6IHtwZXJjZW50OjB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIHdob2xlIGZpbGUgYmVmb3JlIHB1c2hpbmcgYW55dGhpbmdcbiAgICAgICAgdGhpcy5hY2N1bXVsYXRlID0gdHJ1ZTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFRoZSB3b3JrZXIgZmluaXNoZWQgYSBzb3VyY2UgKGFuIG90aGVyIHdvcmtlcikuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RyZWFtSW5mbyB0aGUgc3RyZWFtSW5mbyBvYmplY3QgZnJvbSB0aGUgZmluaXNoZWQgc291cmNlLlxuICovXG5aaXBGaWxlV29ya2VyLnByb3RvdHlwZS5jbG9zZWRTb3VyY2UgPSBmdW5jdGlvbiAoc3RyZWFtSW5mbykge1xuICAgIHRoaXMuYWNjdW11bGF0ZSA9IGZhbHNlO1xuICAgIHZhciBzdHJlYW1lZENvbnRlbnQgPSB0aGlzLnN0cmVhbUZpbGVzICYmICFzdHJlYW1JbmZvWydmaWxlJ10uZGlyO1xuICAgIHZhciByZWNvcmQgPSBnZW5lcmF0ZVppcFBhcnRzKHN0cmVhbUluZm8sIHN0cmVhbWVkQ29udGVudCwgdHJ1ZSwgdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0LCB0aGlzLnppcFBsYXRmb3JtLCB0aGlzLmVuY29kZUZpbGVOYW1lKTtcblxuICAgIHRoaXMuZGlyUmVjb3Jkcy5wdXNoKHJlY29yZC5kaXJSZWNvcmQpO1xuICAgIGlmKHN0cmVhbWVkQ29udGVudCkge1xuICAgICAgICAvLyBhZnRlciB0aGUgc3RyZWFtZWQgZmlsZSwgd2UgcHV0IGRhdGEgZGVzY3JpcHRvcnNcbiAgICAgICAgdGhpcy5wdXNoKHtcbiAgICAgICAgICAgIGRhdGEgOiBnZW5lcmF0ZURhdGFEZXNjcmlwdG9ycyhzdHJlYW1JbmZvKSxcbiAgICAgICAgICAgIG1ldGEgOiB7cGVyY2VudDoxMDB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoZSBjb250ZW50IHdhc24ndCBzdHJlYW1lZCwgd2UgbmVlZCB0byBwdXNoIGV2ZXJ5dGhpbmcgbm93XG4gICAgICAgIC8vIGZpcnN0IHRoZSBmaWxlIHJlY29yZCwgdGhlbiB0aGUgY29udGVudFxuICAgICAgICB0aGlzLnB1c2goe1xuICAgICAgICAgICAgZGF0YSA6IHJlY29yZC5maWxlUmVjb3JkLFxuICAgICAgICAgICAgbWV0YSA6IHtwZXJjZW50OjB9XG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSh0aGlzLmNvbnRlbnRCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2godGhpcy5jb250ZW50QnVmZmVyLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuY3VycmVudEZpbGUgPSBudWxsO1xufTtcblxuLyoqXG4gKiBAc2VlIEdlbmVyaWNXb3JrZXIuZmx1c2hcbiAqL1xuWmlwRmlsZVdvcmtlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgbG9jYWxEaXJMZW5ndGggPSB0aGlzLmJ5dGVzV3JpdHRlbjtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5kaXJSZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMucHVzaCh7XG4gICAgICAgICAgICBkYXRhIDogdGhpcy5kaXJSZWNvcmRzW2ldLFxuICAgICAgICAgICAgbWV0YSA6IHtwZXJjZW50OjEwMH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBjZW50cmFsRGlyTGVuZ3RoID0gdGhpcy5ieXRlc1dyaXR0ZW4gLSBsb2NhbERpckxlbmd0aDtcblxuICAgIHZhciBkaXJFbmQgPSBnZW5lcmF0ZUNlbnRyYWxEaXJlY3RvcnlFbmQodGhpcy5kaXJSZWNvcmRzLmxlbmd0aCwgY2VudHJhbERpckxlbmd0aCwgbG9jYWxEaXJMZW5ndGgsIHRoaXMuemlwQ29tbWVudCwgdGhpcy5lbmNvZGVGaWxlTmFtZSk7XG5cbiAgICB0aGlzLnB1c2goe1xuICAgICAgICBkYXRhIDogZGlyRW5kLFxuICAgICAgICBtZXRhIDoge3BlcmNlbnQ6MTAwfVxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBQcmVwYXJlIHRoZSBuZXh0IHNvdXJjZSB0byBiZSByZWFkLlxuICovXG5aaXBGaWxlV29ya2VyLnByb3RvdHlwZS5wcmVwYXJlTmV4dFNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByZXZpb3VzID0gdGhpcy5fc291cmNlcy5zaGlmdCgpO1xuICAgIHRoaXMub3BlbmVkU291cmNlKHRoaXMucHJldmlvdXMuc3RyZWFtSW5mbyk7XG4gICAgaWYgKHRoaXMuaXNQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91cy5wYXVzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJldmlvdXMucmVzdW1lKCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBAc2VlIEdlbmVyaWNXb3JrZXIucmVnaXN0ZXJQcmV2aW91c1xuICovXG5aaXBGaWxlV29ya2VyLnByb3RvdHlwZS5yZWdpc3RlclByZXZpb3VzID0gZnVuY3Rpb24gKHByZXZpb3VzKSB7XG4gICAgdGhpcy5fc291cmNlcy5wdXNoKHByZXZpb3VzKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBwcmV2aW91cy5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICBzZWxmLnByb2Nlc3NDaHVuayhjaHVuayk7XG4gICAgfSk7XG4gICAgcHJldmlvdXMub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5jbG9zZWRTb3VyY2Uoc2VsZi5wcmV2aW91cy5zdHJlYW1JbmZvKTtcbiAgICAgICAgaWYoc2VsZi5fc291cmNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNlbGYucHJlcGFyZU5leHRTb3VyY2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYuZW5kKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBwcmV2aW91cy5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBzZWxmLmVycm9yKGUpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBAc2VlIEdlbmVyaWNXb3JrZXIucmVzdW1lXG4gKi9cblppcEZpbGVXb3JrZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZighR2VuZXJpY1dvcmtlci5wcm90b3R5cGUucmVzdW1lLmNhbGwodGhpcykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5wcmV2aW91cyAmJiB0aGlzLl9zb3VyY2VzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnByZXBhcmVOZXh0U291cmNlKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucHJldmlvdXMgJiYgIXRoaXMuX3NvdXJjZXMubGVuZ3RoICYmICF0aGlzLmdlbmVyYXRlZEVycm9yKSB7XG4gICAgICAgIHRoaXMuZW5kKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07XG5cbi8qKlxuICogQHNlZSBHZW5lcmljV29ya2VyLmVycm9yXG4gKi9cblppcEZpbGVXb3JrZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc291cmNlcyA9IHRoaXMuX3NvdXJjZXM7XG4gICAgaWYoIUdlbmVyaWNXb3JrZXIucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcywgZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc291cmNlc1tpXS5lcnJvcihlKTtcbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAvLyB0aGUgYGVycm9yYCBleHBsb2RlZCwgbm90aGluZyB0byBkb1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBAc2VlIEdlbmVyaWNXb3JrZXIubG9ja1xuICovXG5aaXBGaWxlV29ya2VyLnByb3RvdHlwZS5sb2NrID0gZnVuY3Rpb24gKCkge1xuICAgIEdlbmVyaWNXb3JrZXIucHJvdG90eXBlLmxvY2suY2FsbCh0aGlzKTtcbiAgICB2YXIgc291cmNlcyA9IHRoaXMuX3NvdXJjZXM7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc291cmNlc1tpXS5sb2NrKCk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBaaXBGaWxlV29ya2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgR2VuZXJpY1dvcmtlciA9IHJlcXVpcmUoJy4uL3N0cmVhbS9HZW5lcmljV29ya2VyJyk7XG5cbi8qKlxuICogQSB3b3JrZXIgdGhhdCB1c2UgYSBub2RlanMgc3RyZWFtIGFzIHNvdXJjZS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IGZpbGVuYW1lIHRoZSBuYW1lIG9mIHRoZSBmaWxlIGVudHJ5IGZvciB0aGlzIHN0cmVhbS5cbiAqIEBwYXJhbSB7UmVhZGFibGV9IHN0cmVhbSB0aGUgbm9kZWpzIHN0cmVhbS5cbiAqL1xuZnVuY3Rpb24gTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyKGZpbGVuYW1lLCBzdHJlYW0pIHtcbiAgICBHZW5lcmljV29ya2VyLmNhbGwodGhpcywgXCJOb2RlanMgc3RyZWFtIGlucHV0IGFkYXB0ZXIgZm9yIFwiICsgZmlsZW5hbWUpO1xuICAgIHRoaXMuX3Vwc3RyZWFtRW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9iaW5kU3RyZWFtKHN0cmVhbSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKE5vZGVqc1N0cmVhbUlucHV0QWRhcHRlciwgR2VuZXJpY1dvcmtlcik7XG5cbi8qKlxuICogUHJlcGFyZSB0aGUgc3RyZWFtIGFuZCBiaW5kIHRoZSBjYWxsYmFja3Mgb24gaXQuXG4gKiBEbyB0aGlzIEFTQVAgb24gbm9kZSAwLjEwICEgQSBsYXp5IGJpbmRpbmcgZG9lc24ndCBhbHdheXMgd29yay5cbiAqIEBwYXJhbSB7U3RyZWFtfSBzdHJlYW0gdGhlIG5vZGVqcyBzdHJlYW0gdG8gdXNlLlxuICovXG5Ob2RlanNTdHJlYW1JbnB1dEFkYXB0ZXIucHJvdG90eXBlLl9iaW5kU3RyZWFtID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLl9zdHJlYW0gPSBzdHJlYW07XG4gICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgc3RyZWFtXG4gICAgLm9uKFwiZGF0YVwiLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgc2VsZi5wdXNoKHtcbiAgICAgICAgICAgIGRhdGE6IGNodW5rLFxuICAgICAgICAgICAgbWV0YSA6IHtcbiAgICAgICAgICAgICAgICBwZXJjZW50IDogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KVxuICAgIC5vbihcImVycm9yXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmKHNlbGYuaXNQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVkRXJyb3IgPSBlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLm9uKFwiZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYoc2VsZi5pc1BhdXNlZCkge1xuICAgICAgICAgICAgc2VsZi5fdXBzdHJlYW1FbmRlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLmVuZCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZighR2VuZXJpY1dvcmtlci5wcm90b3R5cGUucGF1c2UuY2FsbCh0aGlzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX3N0cmVhbS5wYXVzZSgpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbk5vZGVqc1N0cmVhbUlucHV0QWRhcHRlci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmKCFHZW5lcmljV29ya2VyLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYodGhpcy5fdXBzdHJlYW1FbmRlZCkge1xuICAgICAgICB0aGlzLmVuZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGV4dGVybmFsID0gcmVxdWlyZShcIi4vZXh0ZXJuYWxcIik7XG52YXIgdXRmOCA9IHJlcXVpcmUoJy4vdXRmOCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIFppcEVudHJpZXMgPSByZXF1aXJlKCcuL3ppcEVudHJpZXMnKTtcbnZhciBDcmMzMlByb2JlID0gcmVxdWlyZSgnLi9zdHJlYW0vQ3JjMzJQcm9iZScpO1xudmFyIG5vZGVqc1V0aWxzID0gcmVxdWlyZShcIi4vbm9kZWpzVXRpbHNcIik7XG5cbi8qKlxuICogQ2hlY2sgdGhlIENSQzMyIG9mIGFuIGVudHJ5LlxuICogQHBhcmFtIHtaaXBFbnRyeX0gemlwRW50cnkgdGhlIHppcCBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSByZXN1bHQuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrRW50cnlDUkMzMih6aXBFbnRyeSkge1xuICAgIHJldHVybiBuZXcgZXh0ZXJuYWwuUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciB3b3JrZXIgPSB6aXBFbnRyeS5kZWNvbXByZXNzZWQuZ2V0Q29udGVudFdvcmtlcigpLnBpcGUobmV3IENyYzMyUHJvYmUoKSk7XG4gICAgICAgIHdvcmtlci5vbihcImVycm9yXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcImVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAod29ya2VyLnN0cmVhbUluZm8uY3JjMzIgIT09IHppcEVudHJ5LmRlY29tcHJlc3NlZC5jcmMzMikge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogQ1JDMzIgbWlzbWF0Y2hcIikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5yZXN1bWUoKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkYXRhLCBvcHRpb25zKSB7XG4gICAgdmFyIHppcCA9IHRoaXM7XG4gICAgb3B0aW9ucyA9IHV0aWxzLmV4dGVuZChvcHRpb25zIHx8IHt9LCB7XG4gICAgICAgIGJhc2U2NDogZmFsc2UsXG4gICAgICAgIGNoZWNrQ1JDMzI6IGZhbHNlLFxuICAgICAgICBvcHRpbWl6ZWRCaW5hcnlTdHJpbmc6IGZhbHNlLFxuICAgICAgICBjcmVhdGVGb2xkZXJzOiBmYWxzZSxcbiAgICAgICAgZGVjb2RlRmlsZU5hbWU6IHV0ZjgudXRmOGRlY29kZVxuICAgIH0pO1xuXG4gICAgaWYgKG5vZGVqc1V0aWxzLmlzTm9kZSAmJiBub2RlanNVdGlscy5pc1N0cmVhbShkYXRhKSkge1xuICAgICAgICByZXR1cm4gZXh0ZXJuYWwuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSlNaaXAgY2FuJ3QgYWNjZXB0IGEgc3RyZWFtIHdoZW4gbG9hZGluZyBhIHppcCBmaWxlLlwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHV0aWxzLnByZXBhcmVDb250ZW50KFwidGhlIGxvYWRlZCB6aXAgZmlsZVwiLCBkYXRhLCB0cnVlLCBvcHRpb25zLm9wdGltaXplZEJpbmFyeVN0cmluZywgb3B0aW9ucy5iYXNlNjQpXG4gICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB2YXIgemlwRW50cmllcyA9IG5ldyBaaXBFbnRyaWVzKG9wdGlvbnMpO1xuICAgICAgICB6aXBFbnRyaWVzLmxvYWQoZGF0YSk7XG4gICAgICAgIHJldHVybiB6aXBFbnRyaWVzO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gY2hlY2tDUkMzMih6aXBFbnRyaWVzKSB7XG4gICAgICAgIHZhciBwcm9taXNlcyA9IFtleHRlcm5hbC5Qcm9taXNlLnJlc29sdmUoemlwRW50cmllcyldO1xuICAgICAgICB2YXIgZmlsZXMgPSB6aXBFbnRyaWVzLmZpbGVzO1xuICAgICAgICBpZiAob3B0aW9ucy5jaGVja0NSQzMyKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChjaGVja0VudHJ5Q1JDMzIoZmlsZXNbaV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0ZXJuYWwuUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gYWRkRmlsZXMocmVzdWx0cykge1xuICAgICAgICB2YXIgemlwRW50cmllcyA9IHJlc3VsdHMuc2hpZnQoKTtcbiAgICAgICAgdmFyIGZpbGVzID0gemlwRW50cmllcy5maWxlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gZmlsZXNbaV07XG4gICAgICAgICAgICB6aXAuZmlsZShpbnB1dC5maWxlTmFtZVN0ciwgaW5wdXQuZGVjb21wcmVzc2VkLCB7XG4gICAgICAgICAgICAgICAgYmluYXJ5OiB0cnVlLFxuICAgICAgICAgICAgICAgIG9wdGltaXplZEJpbmFyeVN0cmluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkYXRlOiBpbnB1dC5kYXRlLFxuICAgICAgICAgICAgICAgIGRpcjogaW5wdXQuZGlyLFxuICAgICAgICAgICAgICAgIGNvbW1lbnQgOiBpbnB1dC5maWxlQ29tbWVudFN0ci5sZW5ndGggPyBpbnB1dC5maWxlQ29tbWVudFN0ciA6IG51bGwsXG4gICAgICAgICAgICAgICAgdW5peFBlcm1pc3Npb25zIDogaW5wdXQudW5peFBlcm1pc3Npb25zLFxuICAgICAgICAgICAgICAgIGRvc1Blcm1pc3Npb25zIDogaW5wdXQuZG9zUGVybWlzc2lvbnMsXG4gICAgICAgICAgICAgICAgY3JlYXRlRm9sZGVyczogb3B0aW9ucy5jcmVhdGVGb2xkZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoemlwRW50cmllcy56aXBDb21tZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgemlwLmNvbW1lbnQgPSB6aXBFbnRyaWVzLnppcENvbW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gemlwO1xuICAgIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWFkZXJGb3IgPSByZXF1aXJlKCcuL3JlYWRlci9yZWFkZXJGb3InKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBzaWcgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xudmFyIFppcEVudHJ5ID0gcmVxdWlyZSgnLi96aXBFbnRyeScpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcbnZhciBzdXBwb3J0ID0gcmVxdWlyZSgnLi9zdXBwb3J0Jyk7XG4vLyAgY2xhc3MgWmlwRW50cmllcyB7e3tcbi8qKlxuICogQWxsIHRoZSBlbnRyaWVzIGluIHRoZSB6aXAgZmlsZS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IGxvYWRPcHRpb25zIE9wdGlvbnMgZm9yIGxvYWRpbmcgdGhlIHN0cmVhbS5cbiAqL1xuZnVuY3Rpb24gWmlwRW50cmllcyhsb2FkT3B0aW9ucykge1xuICAgIHRoaXMuZmlsZXMgPSBbXTtcbiAgICB0aGlzLmxvYWRPcHRpb25zID0gbG9hZE9wdGlvbnM7XG59XG5aaXBFbnRyaWVzLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGF0IHRoZSByZWFkZXIgaXMgb24gdGhlIHNwZWNpZmllZCBzaWduYXR1cmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cGVjdGVkU2lnbmF0dXJlIHRoZSBleHBlY3RlZCBzaWduYXR1cmUuXG4gICAgICogQHRocm93cyB7RXJyb3J9IGlmIGl0IGlzIGFuIG90aGVyIHNpZ25hdHVyZS5cbiAgICAgKi9cbiAgICBjaGVja1NpZ25hdHVyZTogZnVuY3Rpb24oZXhwZWN0ZWRTaWduYXR1cmUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmUoZXhwZWN0ZWRTaWduYXR1cmUpKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRlci5pbmRleCAtPSA0O1xuICAgICAgICAgICAgdmFyIHNpZ25hdHVyZSA9IHRoaXMucmVhZGVyLnJlYWRTdHJpbmcoNCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIG9yIGJ1ZzogdW5leHBlY3RlZCBzaWduYXR1cmUgXCIgKyBcIihcIiArIHV0aWxzLnByZXR0eShzaWduYXR1cmUpICsgXCIsIGV4cGVjdGVkIFwiICsgdXRpbHMucHJldHR5KGV4cGVjdGVkU2lnbmF0dXJlKSArIFwiKVwiKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHNpZ25hdHVyZSBpcyBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFza2VkSW5kZXggdGhlIGluZGV4IHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHBlY3RlZFNpZ25hdHVyZSB0aGUgc2lnbmF0dXJlIHRvIGV4cGVjdC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBzaWduYXR1cmUgaXMgaGVyZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGlzU2lnbmF0dXJlOiBmdW5jdGlvbihhc2tlZEluZGV4LCBleHBlY3RlZFNpZ25hdHVyZSkge1xuICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5yZWFkZXIuaW5kZXg7XG4gICAgICAgIHRoaXMucmVhZGVyLnNldEluZGV4KGFza2VkSW5kZXgpO1xuICAgICAgICB2YXIgc2lnbmF0dXJlID0gdGhpcy5yZWFkZXIucmVhZFN0cmluZyg0KTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHNpZ25hdHVyZSA9PT0gZXhwZWN0ZWRTaWduYXR1cmU7XG4gICAgICAgIHRoaXMucmVhZGVyLnNldEluZGV4KGN1cnJlbnRJbmRleCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZWFkIHRoZSBlbmQgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5LlxuICAgICAqL1xuICAgIHJlYWRCbG9ja0VuZE9mQ2VudHJhbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlza051bWJlciA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7XG4gICAgICAgIHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpO1xuICAgICAgICB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzayA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7XG4gICAgICAgIHRoaXMuY2VudHJhbERpclJlY29yZHMgPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpO1xuICAgICAgICB0aGlzLmNlbnRyYWxEaXJTaXplID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTtcbiAgICAgICAgdGhpcy5jZW50cmFsRGlyT2Zmc2V0ID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTtcblxuICAgICAgICB0aGlzLnppcENvbW1lbnRMZW5ndGggPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpO1xuICAgICAgICAvLyB3YXJuaW5nIDogdGhlIGVuY29kaW5nIGRlcGVuZHMgb2YgdGhlIHN5c3RlbSBsb2NhbGVcbiAgICAgICAgLy8gT24gYSBsaW51eCBtYWNoaW5lIHdpdGggTEFORz1lbl9VUy51dGY4LCB0aGlzIGZpZWxkIGlzIHV0ZjggZW5jb2RlZC5cbiAgICAgICAgLy8gT24gYSB3aW5kb3dzIG1hY2hpbmUsIHRoaXMgZmllbGQgaXMgZW5jb2RlZCB3aXRoIHRoZSBsb2NhbGl6ZWQgd2luZG93cyBjb2RlIHBhZ2UuXG4gICAgICAgIHZhciB6aXBDb21tZW50ID0gdGhpcy5yZWFkZXIucmVhZERhdGEodGhpcy56aXBDb21tZW50TGVuZ3RoKTtcbiAgICAgICAgdmFyIGRlY29kZVBhcmFtVHlwZSA9IHN1cHBvcnQudWludDhhcnJheSA/IFwidWludDhhcnJheVwiIDogXCJhcnJheVwiO1xuICAgICAgICAvLyBUbyBnZXQgY29uc2lzdGVudCBiZWhhdmlvciB3aXRoIHRoZSBnZW5lcmF0aW9uIHBhcnQsIHdlIHdpbGwgYXNzdW1lIHRoYXRcbiAgICAgICAgLy8gdGhpcyBpcyB1dGY4IGVuY29kZWQgdW5sZXNzIHNwZWNpZmllZCBvdGhlcndpc2UuXG4gICAgICAgIHZhciBkZWNvZGVDb250ZW50ID0gdXRpbHMudHJhbnNmb3JtVG8oZGVjb2RlUGFyYW1UeXBlLCB6aXBDb21tZW50KTtcbiAgICAgICAgdGhpcy56aXBDb21tZW50ID0gdGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShkZWNvZGVDb250ZW50KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlYWQgdGhlIGVuZCBvZiB0aGUgWmlwIDY0IGNlbnRyYWwgZGlyZWN0b3J5LlxuICAgICAqIE5vdCBtZXJnZWQgd2l0aCB0aGUgbWV0aG9kIHJlYWRFbmRPZkNlbnRyYWwgOlxuICAgICAqIFRoZSBlbmQgb2YgY2VudHJhbCBjYW4gY29leGlzdCB3aXRoIGl0cyBaaXA2NCBicm90aGVyLFxuICAgICAqIEkgZG9uJ3Qgd2FudCB0byByZWFkIHRoZSB3cm9uZyBudW1iZXIgb2YgYnl0ZXMgIVxuICAgICAqL1xuICAgIHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUgPSB0aGlzLnJlYWRlci5yZWFkSW50KDgpO1xuICAgICAgICB0aGlzLnJlYWRlci5za2lwKDQpO1xuICAgICAgICAvLyB0aGlzLnZlcnNpb25NYWRlQnkgPSB0aGlzLnJlYWRlci5yZWFkU3RyaW5nKDIpO1xuICAgICAgICAvLyB0aGlzLnZlcnNpb25OZWVkZWQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpO1xuICAgICAgICB0aGlzLmRpc2tOdW1iZXIgPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpO1xuICAgICAgICB0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0ID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTtcbiAgICAgICAgdGhpcy5jZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2sgPSB0aGlzLnJlYWRlci5yZWFkSW50KDgpO1xuICAgICAgICB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzID0gdGhpcy5yZWFkZXIucmVhZEludCg4KTtcbiAgICAgICAgdGhpcy5jZW50cmFsRGlyU2l6ZSA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCk7XG4gICAgICAgIHRoaXMuY2VudHJhbERpck9mZnNldCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCk7XG5cbiAgICAgICAgdGhpcy56aXA2NEV4dGVuc2libGVEYXRhID0ge307XG4gICAgICAgIHZhciBleHRyYURhdGFTaXplID0gdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUgLSA0NCxcbiAgICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICAgIGV4dHJhRmllbGRJZCxcbiAgICAgICAgICAgIGV4dHJhRmllbGRMZW5ndGgsXG4gICAgICAgICAgICBleHRyYUZpZWxkVmFsdWU7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGV4dHJhRGF0YVNpemUpIHtcbiAgICAgICAgICAgIGV4dHJhRmllbGRJZCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7XG4gICAgICAgICAgICBleHRyYUZpZWxkTGVuZ3RoID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTtcbiAgICAgICAgICAgIGV4dHJhRmllbGRWYWx1ZSA9IHRoaXMucmVhZGVyLnJlYWREYXRhKGV4dHJhRmllbGRMZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy56aXA2NEV4dGVuc2libGVEYXRhW2V4dHJhRmllbGRJZF0gPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGV4dHJhRmllbGRJZCxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGV4dHJhRmllbGRMZW5ndGgsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGV4dHJhRmllbGRWYWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmVhZCB0aGUgZW5kIG9mIHRoZSBaaXAgNjQgY2VudHJhbCBkaXJlY3RvcnkgbG9jYXRvci5cbiAgICAgKi9cbiAgICByZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc2tXaXRoWmlwNjRDZW50cmFsRGlyU3RhcnQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpO1xuICAgICAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIgPSB0aGlzLnJlYWRlci5yZWFkSW50KDgpO1xuICAgICAgICB0aGlzLmRpc2tzQ291bnQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpO1xuICAgICAgICBpZiAodGhpcy5kaXNrc0NvdW50ID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVsdGktdm9sdW1lcyB6aXAgYXJlIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlYWQgdGhlIGxvY2FsIGZpbGVzLCBiYXNlZCBvbiB0aGUgb2Zmc2V0IHJlYWQgaW4gdGhlIGNlbnRyYWwgcGFydC5cbiAgICAgKi9cbiAgICByZWFkTG9jYWxGaWxlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCBmaWxlO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZmlsZSA9IHRoaXMuZmlsZXNbaV07XG4gICAgICAgICAgICB0aGlzLnJlYWRlci5zZXRJbmRleChmaWxlLmxvY2FsSGVhZGVyT2Zmc2V0KTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tTaWduYXR1cmUoc2lnLkxPQ0FMX0ZJTEVfSEVBREVSKTtcbiAgICAgICAgICAgIGZpbGUucmVhZExvY2FsUGFydCh0aGlzLnJlYWRlcik7XG4gICAgICAgICAgICBmaWxlLmhhbmRsZVVURjgoKTtcbiAgICAgICAgICAgIGZpbGUucHJvY2Vzc0F0dHJpYnV0ZXMoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmVhZCB0aGUgY2VudHJhbCBkaXJlY3RvcnkuXG4gICAgICovXG4gICAgcmVhZENlbnRyYWxEaXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZmlsZTtcblxuICAgICAgICB0aGlzLnJlYWRlci5zZXRJbmRleCh0aGlzLmNlbnRyYWxEaXJPZmZzZXQpO1xuICAgICAgICB3aGlsZSAodGhpcy5yZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlKHNpZy5DRU5UUkFMX0ZJTEVfSEVBREVSKSkge1xuICAgICAgICAgICAgZmlsZSA9IG5ldyBaaXBFbnRyeSh7XG4gICAgICAgICAgICAgICAgemlwNjQ6IHRoaXMuemlwNjRcbiAgICAgICAgICAgIH0sIHRoaXMubG9hZE9wdGlvbnMpO1xuICAgICAgICAgICAgZmlsZS5yZWFkQ2VudHJhbFBhcnQodGhpcy5yZWFkZXIpO1xuICAgICAgICAgICAgdGhpcy5maWxlcy5wdXNoKGZpbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY2VudHJhbERpclJlY29yZHMgIT09IHRoaXMuZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jZW50cmFsRGlyUmVjb3JkcyAhPT0gMCAmJiB0aGlzLmZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGV4cGVjdGVkIHNvbWUgcmVjb3JkcyBidXQgY291bGRuJ3QgZmluZCBBTlkuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyByZWFsbHkgc3VzcGljaW91cywgYXMgaWYgc29tZXRoaW5nIHdlbnQgd3JvbmcuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWc6IGV4cGVjdGVkIFwiICsgdGhpcy5jZW50cmFsRGlyUmVjb3JkcyArIFwiIHJlY29yZHMgaW4gY2VudHJhbCBkaXIsIGdvdCBcIiArIHRoaXMuZmlsZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgc29tZSByZWNvcmRzIGJ1dCBub3QgYWxsLlxuICAgICAgICAgICAgICAgIC8vIFNvbWV0aGluZyBpcyB3cm9uZyBidXQgd2UgZ290IHNvbWV0aGluZyBmb3IgdGhlIHVzZXI6IG5vIGVycm9yIGhlcmUuXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiZXhwZWN0ZWRcIiwgdGhpcy5jZW50cmFsRGlyUmVjb3JkcywgXCJyZWNvcmRzIGluIGNlbnRyYWwgZGlyLCBnb3RcIiwgdGhpcy5maWxlcy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZWFkIHRoZSBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkuXG4gICAgICovXG4gICAgcmVhZEVuZE9mQ2VudHJhbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzaWcuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKTtcbiAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250ZW50IGlzIGEgdHJ1bmNhdGVkIHppcCBvciBjb21wbGV0ZSBnYXJiYWdlLlxuICAgICAgICAgICAgLy8gQSBcIkxPQ0FMX0ZJTEVfSEVBREVSXCIgaXMgbm90IHJlcXVpcmVkIGF0IHRoZSBiZWdpbm5pbmcgKGF1dG9cbiAgICAgICAgICAgIC8vIGV4dHJhY3RpYmxlIHppcCBmb3IgZXhhbXBsZSkgYnV0IGl0IGNhbiBnaXZlIGEgZ29vZCBoaW50LlxuICAgICAgICAgICAgLy8gSWYgYW4gYWpheCByZXF1ZXN0IHdhcyB1c2VkIHdpdGhvdXQgcmVzcG9uc2VUeXBlLCB3ZSB3aWxsIGFsc29cbiAgICAgICAgICAgIC8vIGdldCB1bnJlYWRhYmxlIGRhdGEuXG4gICAgICAgICAgICB2YXIgaXNHYXJiYWdlID0gIXRoaXMuaXNTaWduYXR1cmUoMCwgc2lnLkxPQ0FMX0ZJTEVfSEVBREVSKTtcblxuICAgICAgICAgICAgaWYgKGlzR2FyYmFnZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGZpbmQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IDogaXMgdGhpcyBhIHppcCBmaWxlID8gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIklmIGl0IGlzLCBzZWUgaHR0cHM6Ly9zdHVrLmdpdGh1Yi5pby9qc3ppcC9kb2N1bWVudGF0aW9uL2hvd3RvL3JlYWRfemlwLmh0bWxcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IGNhbid0IGZpbmQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWFkZXIuc2V0SW5kZXgob2Zmc2V0KTtcbiAgICAgICAgdmFyIGVuZE9mQ2VudHJhbERpck9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5jaGVja1NpZ25hdHVyZShzaWcuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKTtcbiAgICAgICAgdGhpcy5yZWFkQmxvY2tFbmRPZkNlbnRyYWwoKTtcblxuXG4gICAgICAgIC8qIGV4dHJhY3QgZnJvbSB0aGUgemlwIHNwZWMgOlxuICAgICAgICAgICAgNCkgIElmIG9uZSBvZiB0aGUgZmllbGRzIGluIHRoZSBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICByZWNvcmQgaXMgdG9vIHNtYWxsIHRvIGhvbGQgcmVxdWlyZWQgZGF0YSwgdGhlIGZpZWxkXG4gICAgICAgICAgICAgICAgc2hvdWxkIGJlIHNldCB0byAtMSAoMHhGRkZGIG9yIDB4RkZGRkZGRkYpIGFuZCB0aGVcbiAgICAgICAgICAgICAgICBaSVA2NCBmb3JtYXQgcmVjb3JkIHNob3VsZCBiZSBjcmVhdGVkLlxuICAgICAgICAgICAgNSkgIFRoZSBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgcmVjb3JkIGFuZCB0aGVcbiAgICAgICAgICAgICAgICBaaXA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgbG9jYXRvciByZWNvcmQgbXVzdFxuICAgICAgICAgICAgICAgIHJlc2lkZSBvbiB0aGUgc2FtZSBkaXNrIHdoZW4gc3BsaXR0aW5nIG9yIHNwYW5uaW5nXG4gICAgICAgICAgICAgICAgYW4gYXJjaGl2ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0aGlzLmRpc2tOdW1iZXIgPT09IHV0aWxzLk1BWF9WQUxVRV8xNkJJVFMgfHwgdGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydCA9PT0gdXRpbHMuTUFYX1ZBTFVFXzE2QklUUyB8fCB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzayA9PT0gdXRpbHMuTUFYX1ZBTFVFXzE2QklUUyB8fCB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzID09PSB1dGlscy5NQVhfVkFMVUVfMTZCSVRTIHx8IHRoaXMuY2VudHJhbERpclNpemUgPT09IHV0aWxzLk1BWF9WQUxVRV8zMkJJVFMgfHwgdGhpcy5jZW50cmFsRGlyT2Zmc2V0ID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7XG4gICAgICAgICAgICB0aGlzLnppcDY0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIFdhcm5pbmcgOiB0aGUgemlwNjQgZXh0ZW5zaW9uIGlzIHN1cHBvcnRlZCwgYnV0IE9OTFkgaWYgdGhlIDY0Yml0cyBpbnRlZ2VyIHJlYWQgZnJvbVxuICAgICAgICAgICAgdGhlIHppcCBmaWxlIGNhbiBmaXQgaW50byBhIDMyYml0cyBpbnRlZ2VyLiBUaGlzIGNhbm5vdCBiZSBzb2x2ZWQgOiBKYXZhU2NyaXB0IHJlcHJlc2VudHNcbiAgICAgICAgICAgIGFsbCBudW1iZXJzIGFzIDY0LWJpdCBkb3VibGUgcHJlY2lzaW9uIElFRUUgNzU0IGZsb2F0aW5nIHBvaW50IG51bWJlcnMuXG4gICAgICAgICAgICBTbywgd2UgaGF2ZSA1M2JpdHMgZm9yIGludGVnZXJzIGFuZCBiaXR3aXNlIG9wZXJhdGlvbnMgdHJlYXQgZXZlcnl0aGluZyBhcyAzMmJpdHMuXG4gICAgICAgICAgICBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQml0d2lzZV9PcGVyYXRvcnNcbiAgICAgICAgICAgIGFuZCBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvcHVibGljYXRpb25zL2ZpbGVzL0VDTUEtU1QvRUNNQS0yNjIucGRmIHNlY3Rpb24gOC41XG4gICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvLyBzaG91bGQgbG9vayBmb3IgYSB6aXA2NCBFT0NEIGxvY2F0b3JcbiAgICAgICAgICAgIG9mZnNldCA9IHRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHNpZy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SKTtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3JcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlYWRlci5zZXRJbmRleChvZmZzZXQpO1xuICAgICAgICAgICAgdGhpcy5jaGVja1NpZ25hdHVyZShzaWcuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUik7XG4gICAgICAgICAgICB0aGlzLnJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsTG9jYXRvcigpO1xuXG4gICAgICAgICAgICAvLyBub3cgdGhlIHppcDY0IEVPQ0QgcmVjb3JkXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNTaWduYXR1cmUodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyLCBzaWcuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcIlpJUDY0IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSBub3Qgd2hlcmUgZXhwZWN0ZWQuXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciA9IHRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHNpZy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IGNhbid0IGZpbmQgdGhlIFpJUDY0IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlYWRlci5zZXRJbmRleCh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIpO1xuICAgICAgICAgICAgdGhpcy5jaGVja1NpZ25hdHVyZShzaWcuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKTtcbiAgICAgICAgICAgIHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBleHBlY3RlZEVuZE9mQ2VudHJhbERpck9mZnNldCA9IHRoaXMuY2VudHJhbERpck9mZnNldCArIHRoaXMuY2VudHJhbERpclNpemU7XG4gICAgICAgIGlmICh0aGlzLnppcDY0KSB7XG4gICAgICAgICAgICBleHBlY3RlZEVuZE9mQ2VudHJhbERpck9mZnNldCArPSAyMDsgLy8gZW5kIG9mIGNlbnRyYWwgZGlyIDY0IGxvY2F0b3JcbiAgICAgICAgICAgIGV4cGVjdGVkRW5kT2ZDZW50cmFsRGlyT2Zmc2V0ICs9IDEyIC8qIHNob3VsZCBub3QgaW5jbHVkZSB0aGUgbGVhZGluZyAxMiBieXRlcyAqLyArIHRoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV4dHJhQnl0ZXMgPSBlbmRPZkNlbnRyYWxEaXJPZmZzZXQgLSBleHBlY3RlZEVuZE9mQ2VudHJhbERpck9mZnNldDtcblxuICAgICAgICBpZiAoZXh0cmFCeXRlcyA+IDApIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihleHRyYUJ5dGVzLCBcImV4dHJhIGJ5dGVzIGF0IGJlZ2lubmluZyBvciB3aXRoaW4gemlwZmlsZVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2lnbmF0dXJlKGVuZE9mQ2VudHJhbERpck9mZnNldCwgc2lnLkNFTlRSQUxfRklMRV9IRUFERVIpKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIG9mZnNldHMgc2VlbSB3cm9uZywgYnV0IHdlIGhhdmUgc29tZXRoaW5nIGF0IHRoZSBzcGVjaWZpZWQgb2Zmc2V0LlxuICAgICAgICAgICAgICAgIC8vIFNv4oCmIHdlIGtlZXAgaXQuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRoZSBvZmZzZXQgaXMgd3JvbmcsIHVwZGF0ZSB0aGUgXCJ6ZXJvXCIgb2YgdGhlIHJlYWRlclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaGFwcGVucyBpZiBkYXRhIGhhcyBiZWVuIHByZXBlbmRlZCAoY3J4IGZpbGVzIGZvciBleGFtcGxlKVxuICAgICAgICAgICAgICAgIHRoaXMucmVhZGVyLnplcm8gPSBleHRyYUJ5dGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBtaXNzaW5nIFwiICsgTWF0aC5hYnMoZXh0cmFCeXRlcykgKyBcIiBieXRlcy5cIik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHByZXBhcmVSZWFkZXI6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgdGhpcy5yZWFkZXIgPSByZWFkZXJGb3IoZGF0YSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZWFkIGEgemlwIGZpbGUgYW5kIGNyZWF0ZSBaaXBFbnRyaWVzLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBkYXRhIHRoZSBiaW5hcnkgc3RyaW5nIHJlcHJlc2VudGluZyBhIHppcCBmaWxlLlxuICAgICAqL1xuICAgIGxvYWQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgdGhpcy5wcmVwYXJlUmVhZGVyKGRhdGEpO1xuICAgICAgICB0aGlzLnJlYWRFbmRPZkNlbnRyYWwoKTtcbiAgICAgICAgdGhpcy5yZWFkQ2VudHJhbERpcigpO1xuICAgICAgICB0aGlzLnJlYWRMb2NhbEZpbGVzKCk7XG4gICAgfVxufTtcbi8vIH19fSBlbmQgb2YgWmlwRW50cmllc1xubW9kdWxlLmV4cG9ydHMgPSBaaXBFbnRyaWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERhdGFSZWFkZXIgPSByZXF1aXJlKCcuL0RhdGFSZWFkZXInKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIFN0cmluZ1JlYWRlcihkYXRhKSB7XG4gICAgRGF0YVJlYWRlci5jYWxsKHRoaXMsIGRhdGEpO1xufVxudXRpbHMuaW5oZXJpdHMoU3RyaW5nUmVhZGVyLCBEYXRhUmVhZGVyKTtcbi8qKlxuICogQHNlZSBEYXRhUmVhZGVyLmJ5dGVBdFxuICovXG5TdHJpbmdSZWFkZXIucHJvdG90eXBlLmJ5dGVBdCA9IGZ1bmN0aW9uKGkpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmNoYXJDb2RlQXQodGhpcy56ZXJvICsgaSk7XG59O1xuLyoqXG4gKiBAc2VlIERhdGFSZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmVcbiAqL1xuU3RyaW5nUmVhZGVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZlNpZ25hdHVyZSA9IGZ1bmN0aW9uKHNpZykge1xuICAgIHJldHVybiB0aGlzLmRhdGEubGFzdEluZGV4T2Yoc2lnKSAtIHRoaXMuemVybztcbn07XG4vKipcbiAqIEBzZWUgRGF0YVJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmVcbiAqL1xuU3RyaW5nUmVhZGVyLnByb3RvdHlwZS5yZWFkQW5kQ2hlY2tTaWduYXR1cmUgPSBmdW5jdGlvbiAoc2lnKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnJlYWREYXRhKDQpO1xuICAgIHJldHVybiBzaWcgPT09IGRhdGE7XG59O1xuLyoqXG4gKiBAc2VlIERhdGFSZWFkZXIucmVhZERhdGFcbiAqL1xuU3RyaW5nUmVhZGVyLnByb3RvdHlwZS5yZWFkRGF0YSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICB0aGlzLmNoZWNrT2Zmc2V0KHNpemUpO1xuICAgIC8vIHRoaXMgd2lsbCB3b3JrIGJlY2F1c2UgdGhlIGNvbnN0cnVjdG9yIGFwcGxpZWQgdGhlIFwiJiAweGZmXCIgbWFzay5cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyArIHRoaXMuaW5kZXgsIHRoaXMuemVybyArIHRoaXMuaW5kZXggKyBzaXplKTtcbiAgICB0aGlzLmluZGV4ICs9IHNpemU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZ1JlYWRlcjtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBVaW50OEFycmF5UmVhZGVyID0gcmVxdWlyZSgnLi9VaW50OEFycmF5UmVhZGVyJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5mdW5jdGlvbiBOb2RlQnVmZmVyUmVhZGVyKGRhdGEpIHtcbiAgICBVaW50OEFycmF5UmVhZGVyLmNhbGwodGhpcywgZGF0YSk7XG59XG51dGlscy5pbmhlcml0cyhOb2RlQnVmZmVyUmVhZGVyLCBVaW50OEFycmF5UmVhZGVyKTtcblxuLyoqXG4gKiBAc2VlIERhdGFSZWFkZXIucmVhZERhdGFcbiAqL1xuTm9kZUJ1ZmZlclJlYWRlci5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgdGhpcy5jaGVja09mZnNldChzaXplKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyArIHRoaXMuaW5kZXgsIHRoaXMuemVybyArIHRoaXMuaW5kZXggKyBzaXplKTtcbiAgICB0aGlzLmluZGV4ICs9IHNpemU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IE5vZGVCdWZmZXJSZWFkZXI7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVhZGVyRm9yID0gcmVxdWlyZSgnLi9yZWFkZXIvcmVhZGVyRm9yJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgQ29tcHJlc3NlZE9iamVjdCA9IHJlcXVpcmUoJy4vY29tcHJlc3NlZE9iamVjdCcpO1xudmFyIGNyYzMyZm4gPSByZXF1aXJlKCcuL2NyYzMyJyk7XG52YXIgdXRmOCA9IHJlcXVpcmUoJy4vdXRmOCcpO1xudmFyIGNvbXByZXNzaW9ucyA9IHJlcXVpcmUoJy4vY29tcHJlc3Npb25zJyk7XG52YXIgc3VwcG9ydCA9IHJlcXVpcmUoJy4vc3VwcG9ydCcpO1xuXG52YXIgTUFERV9CWV9ET1MgPSAweDAwO1xudmFyIE1BREVfQllfVU5JWCA9IDB4MDM7XG5cbi8qKlxuICogRmluZCBhIGNvbXByZXNzaW9uIHJlZ2lzdGVyZWQgaW4gSlNaaXAuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcHJlc3Npb25NZXRob2QgdGhlIG1ldGhvZCBtYWdpYyB0byBmaW5kLlxuICogQHJldHVybiB7T2JqZWN0fG51bGx9IHRoZSBKU1ppcCBjb21wcmVzc2lvbiBvYmplY3QsIG51bGwgaWYgbm9uZSBmb3VuZC5cbiAqL1xudmFyIGZpbmRDb21wcmVzc2lvbiA9IGZ1bmN0aW9uKGNvbXByZXNzaW9uTWV0aG9kKSB7XG4gICAgZm9yICh2YXIgbWV0aG9kIGluIGNvbXByZXNzaW9ucykge1xuICAgICAgICBpZiAoIWNvbXByZXNzaW9ucy5oYXNPd25Qcm9wZXJ0eShtZXRob2QpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcHJlc3Npb25zW21ldGhvZF0ubWFnaWMgPT09IGNvbXByZXNzaW9uTWV0aG9kKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcHJlc3Npb25zW21ldGhvZF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG4vLyBjbGFzcyBaaXBFbnRyeSB7e3tcbi8qKlxuICogQW4gZW50cnkgaW4gdGhlIHppcCBmaWxlLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIG9mIHRoZSBjdXJyZW50IGZpbGUuXG4gKiBAcGFyYW0ge09iamVjdH0gbG9hZE9wdGlvbnMgT3B0aW9ucyBmb3IgbG9hZGluZyB0aGUgc3RyZWFtLlxuICovXG5mdW5jdGlvbiBaaXBFbnRyeShvcHRpb25zLCBsb2FkT3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5sb2FkT3B0aW9ucyA9IGxvYWRPcHRpb25zO1xufVxuWmlwRW50cnkucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNheSBpZiB0aGUgZmlsZSBpcyBlbmNyeXB0ZWQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZmlsZSBpcyBlbmNyeXB0ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBpc0VuY3J5cHRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGJpdCAxIGlzIHNldFxuICAgICAgICByZXR1cm4gKHRoaXMuYml0RmxhZyAmIDB4MDAwMSkgPT09IDB4MDAwMTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIHNheSBpZiB0aGUgZmlsZSBoYXMgdXRmLTggZmlsZW5hbWUvY29tbWVudC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBmaWxlbmFtZS9jb21tZW50IGlzIGluIHV0Zi04LCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgdXNlVVRGODogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGJpdCAxMSBpcyBzZXRcbiAgICAgICAgcmV0dXJuICh0aGlzLmJpdEZsYWcgJiAweDA4MDApID09PSAweDA4MDA7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZWFkIHRoZSBsb2NhbCBwYXJ0IG9mIGEgemlwIGZpbGUgYW5kIGFkZCB0aGUgaW5mbyBpbiB0aGlzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0RhdGFSZWFkZXJ9IHJlYWRlciB0aGUgcmVhZGVyIHRvIHVzZS5cbiAgICAgKi9cbiAgICByZWFkTG9jYWxQYXJ0OiBmdW5jdGlvbihyZWFkZXIpIHtcbiAgICAgICAgdmFyIGNvbXByZXNzaW9uLCBsb2NhbEV4dHJhRmllbGRzTGVuZ3RoO1xuXG4gICAgICAgIC8vIHdlIGFscmVhZHkga25vdyBldmVyeXRoaW5nIGZyb20gdGhlIGNlbnRyYWwgZGlyICFcbiAgICAgICAgLy8gSWYgdGhlIGNlbnRyYWwgZGlyIGRhdGEgYXJlIGZhbHNlLCB3ZSBhcmUgZG9vbWVkLlxuICAgICAgICAvLyBPbiB0aGUgYnJpZ2h0IHNpZGUsIHRoZSBsb2NhbCBwYXJ0IGlzIHNjYXJ5ICA6IHppcDY0LCBkYXRhIGRlc2NyaXB0b3JzLCBib3RoLCBldGMuXG4gICAgICAgIC8vIFRoZSBsZXNzIGRhdGEgd2UgZ2V0IGhlcmUsIHRoZSBtb3JlIHJlbGlhYmxlIHRoaXMgc2hvdWxkIGJlLlxuICAgICAgICAvLyBMZXQncyBza2lwIHRoZSB3aG9sZSBoZWFkZXIgYW5kIGRhc2ggdG8gdGhlIGRhdGEgIVxuICAgICAgICByZWFkZXIuc2tpcCgyMik7XG4gICAgICAgIC8vIGluIHNvbWUgemlwIGNyZWF0ZWQgb24gd2luZG93cywgdGhlIGZpbGVuYW1lIHN0b3JlZCBpbiB0aGUgY2VudHJhbCBkaXIgY29udGFpbnMgXFwgaW5zdGVhZCBvZiAvLlxuICAgICAgICAvLyBTdHJhbmdlbHksIHRoZSBmaWxlbmFtZSBoZXJlIGlzIE9LLlxuICAgICAgICAvLyBJIHdvdWxkIGxvdmUgdG8gdHJlYXQgdGhlc2UgemlwIGZpbGVzIGFzIGNvcnJ1cHRlZCAoc2VlIGh0dHA6Ly93d3cuaW5mby16aXAub3JnL0ZBUS5odG1sI2JhY2tzbGFzaGVzXG4gICAgICAgIC8vIG9yIEFQUE5PVEUjNC40LjE3LjEsIFwiQWxsIHNsYXNoZXMgTVVTVCBiZSBmb3J3YXJkIHNsYXNoZXMgJy8nXCIpIGJ1dCB0aGVyZSBhcmUgYSBsb3Qgb2YgYmFkIHppcCBnZW5lcmF0b3JzLi4uXG4gICAgICAgIC8vIFNlYXJjaCBcInVuemlwIG1pc21hdGNoaW5nIFwibG9jYWxcIiBmaWxlbmFtZSBjb250aW51aW5nIHdpdGggXCJjZW50cmFsXCIgZmlsZW5hbWUgdmVyc2lvblwiIG9uXG4gICAgICAgIC8vIHRoZSBpbnRlcm5ldC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSSB0aGluayBJIHNlZSB0aGUgbG9naWMgaGVyZSA6IHRoZSBjZW50cmFsIGRpcmVjdG9yeSBpcyB1c2VkIHRvIGRpc3BsYXlcbiAgICAgICAgLy8gY29udGVudCBhbmQgdGhlIGxvY2FsIGRpcmVjdG9yeSBpcyB1c2VkIHRvIGV4dHJhY3QgdGhlIGZpbGVzLiBNaXhpbmcgLyBhbmQgXFxcbiAgICAgICAgLy8gbWF5IGJlIHVzZWQgdG8gZGlzcGxheSBcXCB0byB3aW5kb3dzIHVzZXJzIGFuZCB1c2UgLyB3aGVuIGV4dHJhY3RpbmcgdGhlIGZpbGVzLlxuICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCB0aGlzIGxlYWQgYWxzbyB0byBzb21lIGlzc3VlcyA6IGh0dHA6Ly9zZWNsaXN0cy5vcmcvZnVsbGRpc2Nsb3N1cmUvMjAwOS9TZXAvMzk0XG4gICAgICAgIHRoaXMuZmlsZU5hbWVMZW5ndGggPSByZWFkZXIucmVhZEludCgyKTtcbiAgICAgICAgbG9jYWxFeHRyYUZpZWxkc0xlbmd0aCA9IHJlYWRlci5yZWFkSW50KDIpOyAvLyBjYW4ndCBiZSBzdXJlIHRoaXMgd2lsbCBiZSB0aGUgc2FtZSBhcyB0aGUgY2VudHJhbCBkaXJcbiAgICAgICAgLy8gdGhlIGZpbGVOYW1lIGlzIHN0b3JlZCBhcyBiaW5hcnkgZGF0YSwgdGhlIGhhbmRsZVVURjggbWV0aG9kIHdpbGwgdGFrZSBjYXJlIG9mIHRoZSBlbmNvZGluZy5cbiAgICAgICAgdGhpcy5maWxlTmFtZSA9IHJlYWRlci5yZWFkRGF0YSh0aGlzLmZpbGVOYW1lTGVuZ3RoKTtcbiAgICAgICAgcmVhZGVyLnNraXAobG9jYWxFeHRyYUZpZWxkc0xlbmd0aCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29tcHJlc3NlZFNpemUgPT09IC0xIHx8IHRoaXMudW5jb21wcmVzc2VkU2l6ZSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJ1ZyBvciBjb3JydXB0ZWQgemlwIDogZGlkbid0IGdldCBlbm91Z2ggaW5mb3JtYXRpb25zIGZyb20gdGhlIGNlbnRyYWwgZGlyZWN0b3J5IFwiICsgXCIoY29tcHJlc3NlZFNpemUgPT09IC0xIHx8IHVuY29tcHJlc3NlZFNpemUgPT09IC0xKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXByZXNzaW9uID0gZmluZENvbXByZXNzaW9uKHRoaXMuY29tcHJlc3Npb25NZXRob2QpO1xuICAgICAgICBpZiAoY29tcHJlc3Npb24gPT09IG51bGwpIHsgLy8gbm8gY29tcHJlc3Npb24gZm91bmRcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBjb21wcmVzc2lvbiBcIiArIHV0aWxzLnByZXR0eSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKSArIFwiIHVua25vd24gKGlubmVyIGZpbGUgOiBcIiArIHV0aWxzLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIHRoaXMuZmlsZU5hbWUpICsgXCIpXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVjb21wcmVzc2VkID0gbmV3IENvbXByZXNzZWRPYmplY3QodGhpcy5jb21wcmVzc2VkU2l6ZSwgdGhpcy51bmNvbXByZXNzZWRTaXplLCB0aGlzLmNyYzMyLCBjb21wcmVzc2lvbiwgcmVhZGVyLnJlYWREYXRhKHRoaXMuY29tcHJlc3NlZFNpemUpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVhZCB0aGUgY2VudHJhbCBwYXJ0IG9mIGEgemlwIGZpbGUgYW5kIGFkZCB0aGUgaW5mbyBpbiB0aGlzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0RhdGFSZWFkZXJ9IHJlYWRlciB0aGUgcmVhZGVyIHRvIHVzZS5cbiAgICAgKi9cbiAgICByZWFkQ2VudHJhbFBhcnQ6IGZ1bmN0aW9uKHJlYWRlcikge1xuICAgICAgICB0aGlzLnZlcnNpb25NYWRlQnkgPSByZWFkZXIucmVhZEludCgyKTtcbiAgICAgICAgcmVhZGVyLnNraXAoMik7XG4gICAgICAgIC8vIHRoaXMudmVyc2lvbk5lZWRlZCA9IHJlYWRlci5yZWFkSW50KDIpO1xuICAgICAgICB0aGlzLmJpdEZsYWcgPSByZWFkZXIucmVhZEludCgyKTtcbiAgICAgICAgdGhpcy5jb21wcmVzc2lvbk1ldGhvZCA9IHJlYWRlci5yZWFkU3RyaW5nKDIpO1xuICAgICAgICB0aGlzLmRhdGUgPSByZWFkZXIucmVhZERhdGUoKTtcbiAgICAgICAgdGhpcy5jcmMzMiA9IHJlYWRlci5yZWFkSW50KDQpO1xuICAgICAgICB0aGlzLmNvbXByZXNzZWRTaXplID0gcmVhZGVyLnJlYWRJbnQoNCk7XG4gICAgICAgIHRoaXMudW5jb21wcmVzc2VkU2l6ZSA9IHJlYWRlci5yZWFkSW50KDQpO1xuICAgICAgICB2YXIgZmlsZU5hbWVMZW5ndGggPSByZWFkZXIucmVhZEludCgyKTtcbiAgICAgICAgdGhpcy5leHRyYUZpZWxkc0xlbmd0aCA9IHJlYWRlci5yZWFkSW50KDIpO1xuICAgICAgICB0aGlzLmZpbGVDb21tZW50TGVuZ3RoID0gcmVhZGVyLnJlYWRJbnQoMik7XG4gICAgICAgIHRoaXMuZGlza051bWJlclN0YXJ0ID0gcmVhZGVyLnJlYWRJbnQoMik7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxGaWxlQXR0cmlidXRlcyA9IHJlYWRlci5yZWFkSW50KDIpO1xuICAgICAgICB0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMgPSByZWFkZXIucmVhZEludCg0KTtcbiAgICAgICAgdGhpcy5sb2NhbEhlYWRlck9mZnNldCA9IHJlYWRlci5yZWFkSW50KDQpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzRW5jcnlwdGVkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVuY3J5cHRlZCB6aXAgYXJlIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3aWxsIGJlIHJlYWQgaW4gdGhlIGxvY2FsIHBhcnQsIHNlZSB0aGUgY29tbWVudHMgdGhlcmVcbiAgICAgICAgcmVhZGVyLnNraXAoZmlsZU5hbWVMZW5ndGgpO1xuICAgICAgICB0aGlzLnJlYWRFeHRyYUZpZWxkcyhyZWFkZXIpO1xuICAgICAgICB0aGlzLnBhcnNlWklQNjRFeHRyYUZpZWxkKHJlYWRlcik7XG4gICAgICAgIHRoaXMuZmlsZUNvbW1lbnQgPSByZWFkZXIucmVhZERhdGEodGhpcy5maWxlQ29tbWVudExlbmd0aCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBhcnNlIHRoZSBleHRlcm5hbCBmaWxlIGF0dHJpYnV0ZXMgYW5kIGdldCB0aGUgdW5peC9kb3MgcGVybWlzc2lvbnMuXG4gICAgICovXG4gICAgcHJvY2Vzc0F0dHJpYnV0ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51bml4UGVybWlzc2lvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLmRvc1Blcm1pc3Npb25zID0gbnVsbDtcbiAgICAgICAgdmFyIG1hZGVCeSA9IHRoaXMudmVyc2lvbk1hZGVCeSA+PiA4O1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgdGhlIERPUyBkaXJlY3RvcnkgZmxhZyBzZXQuXG4gICAgICAgIC8vIFdlIGxvb2sgZm9yIGl0IGluIHRoZSBET1MgYW5kIFVOSVggcGVybWlzc2lvbnNcbiAgICAgICAgLy8gYnV0IHNvbWUgdW5rbm93biBwbGF0Zm9ybSBjb3VsZCBzZXQgaXQgYXMgYSBjb21wYXRpYmlsaXR5IGZsYWcuXG4gICAgICAgIHRoaXMuZGlyID0gdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzICYgMHgwMDEwID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgIGlmKG1hZGVCeSA9PT0gTUFERV9CWV9ET1MpIHtcbiAgICAgICAgICAgIC8vIGZpcnN0IDYgYml0cyAoMCB0byA1KVxuICAgICAgICAgICAgdGhpcy5kb3NQZXJtaXNzaW9ucyA9IHRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyAmIDB4M0Y7XG4gICAgICAgIH1cblxuICAgICAgICBpZihtYWRlQnkgPT09IE1BREVfQllfVU5JWCkge1xuICAgICAgICAgICAgdGhpcy51bml4UGVybWlzc2lvbnMgPSAodGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzID4+IDE2KSAmIDB4RkZGRjtcbiAgICAgICAgICAgIC8vIHRoZSBvY3RhbCBwZXJtaXNzaW9ucyBhcmUgaW4gKHRoaXMudW5peFBlcm1pc3Npb25zICYgMHgwMUZGKS50b1N0cmluZyg4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhaWwgc2FmZSA6IGlmIHRoZSBuYW1lIGVuZHMgd2l0aCBhIC8gaXQgcHJvYmFibHkgbWVhbnMgYSBmb2xkZXJcbiAgICAgICAgaWYgKCF0aGlzLmRpciAmJiB0aGlzLmZpbGVOYW1lU3RyLnNsaWNlKC0xKSA9PT0gJy8nKSB7XG4gICAgICAgICAgICB0aGlzLmRpciA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGFyc2UgdGhlIFpJUDY0IGV4dHJhIGZpZWxkIGFuZCBtZXJnZSB0aGUgaW5mbyBpbiB0aGUgY3VycmVudCBaaXBFbnRyeS5cbiAgICAgKiBAcGFyYW0ge0RhdGFSZWFkZXJ9IHJlYWRlciB0aGUgcmVhZGVyIHRvIHVzZS5cbiAgICAgKi9cbiAgICBwYXJzZVpJUDY0RXh0cmFGaWVsZDogZnVuY3Rpb24ocmVhZGVyKSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLmV4dHJhRmllbGRzWzB4MDAwMV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3VsZCBiZSBzb21ldGhpbmcsIHByZXBhcmluZyB0aGUgZXh0cmEgcmVhZGVyXG4gICAgICAgIHZhciBleHRyYVJlYWRlciA9IHJlYWRlckZvcih0aGlzLmV4dHJhRmllbGRzWzB4MDAwMV0udmFsdWUpO1xuXG4gICAgICAgIC8vIEkgcmVhbGx5IGhvcGUgdGhhdCB0aGVzZSA2NGJpdHMgaW50ZWdlciBjYW4gZml0IGluIDMyIGJpdHMgaW50ZWdlciwgYmVjYXVzZSBqc1xuICAgICAgICAvLyB3b24ndCBsZXQgdXMgaGF2ZSBtb3JlLlxuICAgICAgICBpZiAodGhpcy51bmNvbXByZXNzZWRTaXplID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7XG4gICAgICAgICAgICB0aGlzLnVuY29tcHJlc3NlZFNpemUgPSBleHRyYVJlYWRlci5yZWFkSW50KDgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbXByZXNzZWRTaXplID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXByZXNzZWRTaXplID0gZXh0cmFSZWFkZXIucmVhZEludCg4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sb2NhbEhlYWRlck9mZnNldCA9PT0gdXRpbHMuTUFYX1ZBTFVFXzMyQklUUykge1xuICAgICAgICAgICAgdGhpcy5sb2NhbEhlYWRlck9mZnNldCA9IGV4dHJhUmVhZGVyLnJlYWRJbnQoOCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGlza051bWJlclN0YXJ0ID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2tOdW1iZXJTdGFydCA9IGV4dHJhUmVhZGVyLnJlYWRJbnQoNCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlYWQgdGhlIGNlbnRyYWwgcGFydCBvZiBhIHppcCBmaWxlIGFuZCBhZGQgdGhlIGluZm8gaW4gdGhpcyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtEYXRhUmVhZGVyfSByZWFkZXIgdGhlIHJlYWRlciB0byB1c2UuXG4gICAgICovXG4gICAgcmVhZEV4dHJhRmllbGRzOiBmdW5jdGlvbihyZWFkZXIpIHtcbiAgICAgICAgdmFyIGVuZCA9IHJlYWRlci5pbmRleCArIHRoaXMuZXh0cmFGaWVsZHNMZW5ndGgsXG4gICAgICAgICAgICBleHRyYUZpZWxkSWQsXG4gICAgICAgICAgICBleHRyYUZpZWxkTGVuZ3RoLFxuICAgICAgICAgICAgZXh0cmFGaWVsZFZhbHVlO1xuXG4gICAgICAgIGlmICghdGhpcy5leHRyYUZpZWxkcykge1xuICAgICAgICAgICAgdGhpcy5leHRyYUZpZWxkcyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKHJlYWRlci5pbmRleCA8IGVuZCkge1xuICAgICAgICAgICAgZXh0cmFGaWVsZElkID0gcmVhZGVyLnJlYWRJbnQoMik7XG4gICAgICAgICAgICBleHRyYUZpZWxkTGVuZ3RoID0gcmVhZGVyLnJlYWRJbnQoMik7XG4gICAgICAgICAgICBleHRyYUZpZWxkVmFsdWUgPSByZWFkZXIucmVhZERhdGEoZXh0cmFGaWVsZExlbmd0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuZXh0cmFGaWVsZHNbZXh0cmFGaWVsZElkXSA9IHtcbiAgICAgICAgICAgICAgICBpZDogZXh0cmFGaWVsZElkLFxuICAgICAgICAgICAgICAgIGxlbmd0aDogZXh0cmFGaWVsZExlbmd0aCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZXh0cmFGaWVsZFZhbHVlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBcHBseSBhbiBVVEY4IHRyYW5zZm9ybWF0aW9uIGlmIG5lZWRlZC5cbiAgICAgKi9cbiAgICBoYW5kbGVVVEY4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRlY29kZVBhcmFtVHlwZSA9IHN1cHBvcnQudWludDhhcnJheSA/IFwidWludDhhcnJheVwiIDogXCJhcnJheVwiO1xuICAgICAgICBpZiAodGhpcy51c2VVVEY4KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsZU5hbWVTdHIgPSB1dGY4LnV0ZjhkZWNvZGUodGhpcy5maWxlTmFtZSk7XG4gICAgICAgICAgICB0aGlzLmZpbGVDb21tZW50U3RyID0gdXRmOC51dGY4ZGVjb2RlKHRoaXMuZmlsZUNvbW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHVwYXRoID0gdGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoKCk7XG4gICAgICAgICAgICBpZiAodXBhdGggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVOYW1lU3RyID0gdXBhdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFTQ0lJIHRleHQgb3IgdW5zdXBwb3J0ZWQgY29kZSBwYWdlXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVOYW1lQnl0ZUFycmF5ID0gIHV0aWxzLnRyYW5zZm9ybVRvKGRlY29kZVBhcmFtVHlwZSwgdGhpcy5maWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxlTmFtZVN0ciA9IHRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUoZmlsZU5hbWVCeXRlQXJyYXkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdWNvbW1lbnQgPSB0aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQoKTtcbiAgICAgICAgICAgIGlmICh1Y29tbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsZUNvbW1lbnRTdHIgPSB1Y29tbWVudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQVNDSUkgdGV4dCBvciB1bnN1cHBvcnRlZCBjb2RlIHBhZ2VcbiAgICAgICAgICAgICAgICB2YXIgY29tbWVudEJ5dGVBcnJheSA9ICB1dGlscy50cmFuc2Zvcm1UbyhkZWNvZGVQYXJhbVR5cGUsIHRoaXMuZmlsZUNvbW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsZUNvbW1lbnRTdHIgPSB0aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKGNvbW1lbnRCeXRlQXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIHVuaWNvZGUgcGF0aCBkZWNsYXJlZCBpbiB0aGUgZXh0cmEgZmllbGQsIGlmIGFueS5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSB1bmljb2RlIHBhdGgsIG51bGwgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdXBhdGhGaWVsZCA9IHRoaXMuZXh0cmFGaWVsZHNbMHg3MDc1XTtcbiAgICAgICAgaWYgKHVwYXRoRmllbGQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYVJlYWRlciA9IHJlYWRlckZvcih1cGF0aEZpZWxkLnZhbHVlKTtcblxuICAgICAgICAgICAgLy8gd3JvbmcgdmVyc2lvblxuICAgICAgICAgICAgaWYgKGV4dHJhUmVhZGVyLnJlYWRJbnQoMSkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdGhlIGNyYyBvZiB0aGUgZmlsZW5hbWUgY2hhbmdlZCwgdGhpcyBmaWVsZCBpcyBvdXQgb2YgZGF0ZS5cbiAgICAgICAgICAgIGlmIChjcmMzMmZuKHRoaXMuZmlsZU5hbWUpICE9PSBleHRyYVJlYWRlci5yZWFkSW50KDQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1dGY4LnV0ZjhkZWNvZGUoZXh0cmFSZWFkZXIucmVhZERhdGEodXBhdGhGaWVsZC5sZW5ndGggLSA1KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIHVuaWNvZGUgY29tbWVudCBkZWNsYXJlZCBpbiB0aGUgZXh0cmEgZmllbGQsIGlmIGFueS5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSB1bmljb2RlIGNvbW1lbnQsIG51bGwgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdWNvbW1lbnRGaWVsZCA9IHRoaXMuZXh0cmFGaWVsZHNbMHg2Mzc1XTtcbiAgICAgICAgaWYgKHVjb21tZW50RmllbGQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYVJlYWRlciA9IHJlYWRlckZvcih1Y29tbWVudEZpZWxkLnZhbHVlKTtcblxuICAgICAgICAgICAgLy8gd3JvbmcgdmVyc2lvblxuICAgICAgICAgICAgaWYgKGV4dHJhUmVhZGVyLnJlYWRJbnQoMSkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdGhlIGNyYyBvZiB0aGUgY29tbWVudCBjaGFuZ2VkLCB0aGlzIGZpZWxkIGlzIG91dCBvZiBkYXRlLlxuICAgICAgICAgICAgaWYgKGNyYzMyZm4odGhpcy5maWxlQ29tbWVudCkgIT09IGV4dHJhUmVhZGVyLnJlYWRJbnQoNCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHV0ZjgudXRmOGRlY29kZShleHRyYVJlYWRlci5yZWFkRGF0YSh1Y29tbWVudEZpZWxkLmxlbmd0aCAtIDUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBaaXBFbnRyeTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSAhPT0gJ1tvYmplY3Qgel0nID8gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn0gOiB0ZXN0LnRvU3RyaW5nO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGZuLCB0aGF0LCBBU19FTlRSSUVTID8gMiA6IDEpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBzdGVwO1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gQVNfRU5UUklFU1xuICAgICAgICAgID8gYm91bmRGdW5jdGlvbihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSlcbiAgICAgICAgICA6IGJvdW5kRnVuY3Rpb24oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgcmVzdWx0ID0gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgYm91bmRGdW5jdGlvbiwgc3RlcC52YWx1ZSwgQVNfRU5UUklFUyk7XG4gICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcblxuaXRlcmF0ZS5zdG9wID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCByZXN1bHQpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2VyLWFnZW50Jyk7XG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChNdXRhdGlvbk9ic2VydmVyICYmICEvKGlwaG9uZXxpcG9kfGlwYWQpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KSkge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgdGhlbiA9IHByb21pc2UudGhlbjtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuLmNhbGwocHJvbWlzZSwgZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbicpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuYXNzaWduICE9PSBhc3NpZ24gfSwge1xuICBhc3NpZ246IGFzc2lnblxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xuXG52YXIgbmF0aXZlQXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICFuYXRpdmVBc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiBuYXRpdmVBc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gb2JqZWN0S2V5cyhTKS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiBuYXRpdmVBc3NpZ247XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKSB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBDb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlLmNhbGwoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGhpZGUoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCBjcmVhdGUobnVsbCkpO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9qc29uXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG4kKHsgdGFyZ2V0OiAnVVJMJywgcHJvdG86IHRydWUsIGVudW1lcmFibGU6IHRydWUgfSwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gVVJMLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9XG59KTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcblxuaWYgKERFU0NSSVBUT1JTICYmIHR5cGVvZiBOYXRpdmVTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAoISgnZGVzY3JpcHRpb24nIGluIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcyBpbnN0YW5jZW9mIFN5bWJvbFdyYXBwZXJcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpO1xuICB2YXIgc3ltYm9sUHJvdG90eXBlID0gU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wucHJvdG90eXBlO1xuICBzeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG5hdGl2ZSA9IFN0cmluZyhOYXRpdmVTeW1ib2woJ3Rlc3QnKSkgPT0gJ1N5bWJvbCh0ZXN0KSc7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICBkZWZpbmVQcm9wZXJ0eShzeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBpc09iamVjdCh0aGlzKSA/IHRoaXMudmFsdWVPZigpIDogdGhpcztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZy5jYWxsKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBuYXRpdmUgPyBzdHJpbmcuc2xpY2UoNywgLTEpIDogc3RyaW5nLnJlcGxhY2UocmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsImZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRoSG9sZXM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdDsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVSZXN0OyIsIi8qXG4gKiBAZGVzY3JpcHRpb246IGVkaXRvclxuICogQHZlcnNpb246IDAuMC4xXG4gKiBAQXV0aG9yOiBkYWlfemhlbmdcbiAqIEBEYXRlOiAyMDE5LTA5LTIwIDE3OjI5OjAzXG4gKiBATGFzdEVkaXRvcnM6IGRhaV96aGVuZ1xuICogQExhc3RFZGl0VGltZTogMjAxOS0wOS0yMCAxNzoyOTowM1xuICovXG5yZXF1aXJlKCcuL21vY2tTZXJ2aWNlLmpzJykiLCIvKlxuICogQGRlc2NyaXB0aW9uOiBodW1hblxuICogQHZlcnNpb246IDAuMC4xXG4gKiBAQXV0aG9yOiBkYWlfemhlbmdcbiAqIEBEYXRlOiAyMDE5LTA5LTEwIDE2OjIyOjU0XG4gKiBATGFzdEVkaXRvcnM6IFBsZWFzZSBzZXQgTGFzdEVkaXRvcnNcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjAtMDctMDEgMTA6NDk6MDBcbiAqL1xuaW1wb3J0IGFwaUNvbmZpZyBmcm9tICdAL2FwaS9hcGktY29uZmlnJ1xuaW1wb3J0IHtcbiAgYWRkRGlhZ3JhbSxcbiAgdXBkYXRlRGlhZ3JhbSxcbiAgcmVuYW1lRGlhZ3JhbVxufSBmcm9tICdAL2FwaS9hcGktbGlzdC9kaWFncmFtJ1xuaW1wb3J0IHtcbiAgZGVsZXRlRmlsZSxcbiAgYWRkRmlsZSxcbiAgZ2V0RmlsZUxpc3QsXG4gIGNyZWF0ZU1rZGlyLFxuICByZW5hbWVGaWxlLFxuICBnZXRGaWxlQ29udFxufSBmcm9tICdAL2FwaS9hcGktbGlzdC9maWxlJ1xuaW1wb3J0IHV0aWwgZnJvbSAnQC91dGlscy91dGlscydcbmxldCBlZGl0b3JUeXBlID0gdXRpbC5nZXRVcmxQYXJhbSgndHlwZScpXG52YXIgZXhwb3J0QXBpTmFtZSA9IGFwaUNvbmZpZy5hcGlOYW1lXG5sZXQga2V5M2QgPSBhcGlDb25maWcua2V5M2RcbndpbmRvdy5Nb2NrU2VydmljZSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gIHRoaXMuaGFuZGxlciA9IGhhbmRsZXJcbiAgdGhpcy5oYW5kbGVyKHtcbiAgICB0eXBlOiAnY29ubmVjdGVkJyxcbiAgICBtZXNzYWdlOiAnTW9jayBzZXJ2aWNlIGNvbm5lY3RlZCdcbiAgfSlcbn1cblxuaHQuRGVmYXVsdC5kZWYoJ01vY2tTZXJ2aWNlJywgT2JqZWN0LCB7XG4gIHJlcXVlc3Q6IGZ1bmN0aW9uIChjbWQsIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgdGhpc1tjbWRdKGRhdGEsIGNhbGxiYWNrKVxuICAgIHZhciBtZXNzYWdlID0gY21kXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWVzc2FnZSA9IGNtZCArICc6ICcgKyBkYXRhXG4gICAgICB9IGVsc2UgaWYgKGRhdGEucGF0aCkge1xuICAgICAgICBtZXNzYWdlID0gY21kICsgJzogJyArIGRhdGEucGF0aFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmhhbmRsZXIoeyB0eXBlOiAncmVxdWVzdCcsIG1lc3NhZ2U6IG1lc3NhZ2UsIGNtZDogY21kLCBkYXRhOiBkYXRhIH0pXG4gIH0sXG4gIGV4cGxvcmU6IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgIHZhciBmaWxlRGF0YU9iaiA9IHtcbiAgICAgIFwiL2Rpc3BsYXlzXCI6e30sXG4gICAgICBcIi9zeW1ib2xzXCI6e1wi5o6l57q/5Zu+XCI6e1wi55S15oqX5ZmoXCI6e1wi5YiG6KOC55S15oqX5ZmoLmpzb25cIjp0cnVlLFwi55S15oqX5ZmoLmpzb25cIjp0cnVlLFwi5YiG6KOC55S15oqX5ZmoLnBuZ1wiOnRydWUsXCLnlLXlipvnlKjmiLdcIjp7XCLnlLXlipvnlKjmiLcxLmpzb25cIjp0cnVlLFwi55S15Yqb55So5oi3MS5wbmdcIjp0cnVlfSxcIueUteaKl+WZqC5wbmdcIjp0cnVlfSxcIuavjee6v+autVwiOnt9LFwi56uZ5oi/XCI6e30sXCLppojnur/mrrVcIjp7fSxcIue7hOWQiOW8gOWFs1wiOntcIlblnovlvIDlhbMxIOKAkyAzLnBuZ1wiOnRydWUsXCLkuInlt6XkvY3otJ/ojbflvIDlhbMucG5nXCI6dHJ1ZSxcIuWPjOWQkemalOemu+W8gOWFsyAxLnBuZ1wiOnRydWUsXCLogZTliqjlvIDlhbMxLmpzb25cIjp0cnVlLFwiVOWei+W8gOWFszEucG5nXCI6dHJ1ZSxcIuS4ieW3peS9jeWIgOmXuC5qc29uXCI6dHJ1ZSxcIuaJi+i9pui0n+iNt+W8gOWFsy5wbmdcIjp0cnVlLFwiVOWei+W8gOWFszEuanNvblwiOnRydWUsXCJW5Z6L5byA5YWzMS5wbmdcIjp0cnVlLFwi5LiJ5bel5L2N5YiA6Ze4LnBuZ1wiOnRydWUsXCLmlq3ot6/lmagucG5nXCI6dHJ1ZSxcIuaJi+i9puW8gOWFsy5wbmdcIjp0cnVlLFwi5byA5YWzLnBuZ1wiOnRydWUsXCJW5Z6L5byA5YWzMS5qc29uXCI6dHJ1ZSxcIlblnovlvIDlhbMxIOKAkyAzLmpzb25cIjp0cnVlLFwi5omL6L2m6LSf6I235byA5YWzLmpzb25cIjp0cnVlLFwi6IGU5Yqo5byA5YWzMS5wbmdcIjp0cnVlLFwiVuWei+W8gOWFszEg4oCTIDEucG5nXCI6dHJ1ZSxcIuS4ieW3peS9jei0n+iNt+W8gOWFsy5qc29uXCI6dHJ1ZSxcIuWPjOWQkemalOemu+W8gOWFsyAxLmpzb25cIjp0cnVlLFwi5LiJ5bel5L2N5pat6Lev5ZmoLnBuZ1wiOnRydWUsXCLkuInlt6XkvY3mlq3ot6/lmaguanNvblwiOnRydWUsXCLmiYvovablvIDlhbMuanNvblwiOnRydWUsXCJW5Z6L5byA5YWzMSDigJMgMS5qc29uXCI6dHJ1ZSxcIuaWrei3r+WZqC5qc29uXCI6dHJ1ZSxcIuW8gOWFsy5qc29uXCI6dHJ1ZX0sXCLnlLXljovkupLmhJ/lmahcIjp7XCLlnIblnIgucG5nXCI6dHJ1ZSxcIuWchuWciC5qc29uXCI6dHJ1ZSxcIuermeaIvy5wbmdcIjp0cnVlLFwi55S15a655ZmoXCI6e1wi5Liy6IGU55S15a655ZmoMi5wbmdcIjp0cnVlLFwi5bm26IGU55S15a655ZmoIOKAkyAxMS5wbmdcIjp0cnVlLFwi5bm26IGU55S15a655ZmoIOKAkyAyLnBuZ1wiOnRydWUsXCLlubbogZTnlLXlrrnlmagg4oCTIDExLmpzb25cIjp0cnVlLFwi5bm26IGU55S15a655ZmoIOKAkyAyLmpzb25cIjp0cnVlLFwi5Liy6IGU55S15a655ZmoMi5qc29uXCI6dHJ1ZX0sXCLnq5nmiL8uanNvblwiOnRydWV9LFwi5YiA6Ze4XCI6e1wi5o2i55u45YiA6Ze4MS5wbmdcIjp0cnVlLFwi5YiA6Ze4IOWQiC5wbmdcIjp0cnVlLFwi5YiA6Ze4Lmpzb25cIjp0cnVlLFwi5o2i55u45YiA6Ze4IOWQiCAyLnBuZ1wiOnRydWUsXCLliIDpl7gg5ZCILmpzb25cIjp0cnVlLFwi5o2i55u45YiA6Ze4MS5qc29uXCI6dHJ1ZSxcIuWIgOmXuC5wbmdcIjp0cnVlLFwi5o2i55u45YiA6Ze4IOWQiCAyLmpzb25cIjp0cnVlfSxcIumFjeeUteWPmOWOi+WZqFwiOntcIuWFrOWPmC5qc29uXCI6dHJ1ZSxcIuWFrOWPmC5wbmdcIjp0cnVlLFwi5LiJ5Y235Y+Y5Y6L5ZmoLmpzb25cIjp0cnVlLFwi5LiJ5Y235Y+Y5Y6L5ZmoLnBuZ1wiOnRydWV9LFwi6LSf6I235byA5YWzXCI6e1wi6LSf6I235byA5YWzMTEg4oCTIDYuanNvblwiOnRydWUsXCLotJ/ojbflvIDlhbMxMSDigJMgNi5wbmdcIjp0cnVlfSxcIueUtea6kFwiOntcIuWcsOeDreeUteWOgiDigJMgMi5wbmdcIjp0cnVlLFwi5r2u5rGQ55S156uZMS5wbmdcIjp0cnVlLFwi5r2u5rGQ55S156uZMS5qc29uXCI6dHJ1ZSxcIuawtOeUteWOgiDigJMgMy5wbmdcIjp0cnVlLFwi54Gr55S15Y6CIOKAkyAyLmpzb25cIjp0cnVlLFwi56e456eG55S156uZMS5qc29uXCI6dHJ1ZSxcIuWcsOeDreeUteWOgiDigJMgMi5qc29uXCI6dHJ1ZSxcIuawtOeUteWOgiDigJMgMy5qc29uXCI6dHJ1ZSxcIuenuOenhueUteermTEucG5nXCI6dHJ1ZSxcIumjjuWKm+WPkeeUteermS5wbmdcIjp0cnVlLFwi5Z6D5Zy+55S156uZMS5qc29uXCI6dHJ1ZSxcIumjjuWKm+WPkeeUteermS5qc29uXCI6dHJ1ZSxcIueUteermS5wbmdcIjp0cnVlLFwi55S156uZLmpzb25cIjp0cnVlLFwi5rC055S15Y6CIOKAkyA0Lmpzb25cIjp0cnVlLFwi5rC055S15Y6CIOKAkyA0LnBuZ1wiOnRydWUsXCLlnoPlnL7nlLXnq5kxLnBuZ1wiOnRydWUsXCLlnLDng63nlLXljoIuanNvblwiOnRydWUsXCLlnLDng63nlLXljoIucG5nXCI6dHJ1ZSxcIueBq+eUteWOgiDigJMgMi5wbmdcIjp0cnVlfSxcIuaVhemanOaMh+ekuuWZqFwiOntcIuaVhemanOaMh+ekuuWZqC5qc29uXCI6dHJ1ZSxcIuaVhemanOaMh+ekuuWZqC5wbmdcIjp0cnVlfSxcIueGlOaWreWZqFwiOntcIui3jOiQveW8j+eGlOaWreWZqCDigJMgMi5wbmdcIjp0cnVlLFwi6LeM6JC95byP54aU5pat5ZmoIOKAkyAyLmpzb25cIjp0cnVlLFwi54aU5LidMS5qc29uXCI6dHJ1ZSxcIueGlOS4nTEucG5nXCI6dHJ1ZX0sXCLlgqjog73nsbtcIjp7XCLlgqjog70ucG5nXCI6dHJ1ZSxcIuWCqOiDvS5qc29uXCI6dHJ1ZX0sXCLloZTmnYZcIjp7XCLmnYbloZQuanNvblwiOnRydWUsXCLmnYbloZQucG5nXCI6dHJ1ZX0sXCLmjqXlnLDliIDpl7hcIjp7XCLmjqXlnLDliIDpl7gxLnBuZ1wiOnRydWUsXCLmjqXlnLDliIDpl7gxLmpzb25cIjp0cnVlfX0sXCLmoIcuanNvblwiOnRydWUsXCLmoIcucG5nXCI6dHJ1ZSxcInRpbWcgKDEpLmpwZ1wiOnRydWUsXCLnjq/looPorr7lpIdcIjp7XCLmlrDmkYTlg4/lpLQxLnBuZ1wiOnRydWUsXCLnqbrosIMucG5nXCI6dHJ1ZSxcIuaXoOmUoeermeaIv1wiOntcIuWimeS9ky5wbmdcIjp0cnVlLFwi5rC05rO1LnBuZ1wiOnRydWUsXCLmsLTms7UuanNvblwiOnRydWUsXCLkupXnm5YucG5nXCI6dHJ1ZSxcIue7hCAxMjkyLnN2Z1wiOnRydWUsXCLok53oibLpl6gucG5nXCI6dHJ1ZSxcIuWbvuaghzEucG5nXCI6dHJ1ZSxcIuWimeS9ky5qc29uXCI6dHJ1ZSxcIuiTneiJsuWimS5wbmdcIjp0cnVlLFwi56qX5oi3LnN2Z1wiOnRydWUsXCLok53oibLpl6guanNvblwiOnRydWUsXCLmnKrmoIfpopgtMSgxKS5zdmdcIjp0cnVlLFwi55+p5b2iIDY4OS5zdmdcIjp0cnVlLFwi5Y2V5aKZ5L2TLnBuZ1wiOnRydWUsXCLok53oibLlopkuanNvblwiOnRydWUsXCLljZXlopnkvZMuanNvblwiOnRydWUsXCLkupXnm5YuanNvblwiOnRydWUsXCLlm77moIcxLmpzb25cIjp0cnVlfSxcIuepuueZveahhi5qc29uXCI6dHJ1ZSxcIumXqOemgTIucG5nXCI6dHJ1ZSxcIuepuueZveahhjMuanNvblwiOnRydWUsXCLlsYDmlL4uanNvblwiOnRydWUsXCLkuK3ljovmn5wxLmpzb25cIjp0cnVlLFwi6Zeo56aBLnBuZ1wiOnRydWUsXCLpq5jljovmn5wxLmpzb25cIjp0cnVlLFwi5Yed6ZyyLmpzb25cIjp0cnVlLFwiMWJlYjYwZDc2NTNlNTM1NzAxY2ViNmIyMzFjZWZmMC5wbmdcIjp0cnVlLFwi5LqV55uWLmpzb25cIjp0cnVlLFwi6aOO5py6MS5wbmdcIjp0cnVlLFwi5pGE5YOP5aS0LnBuZ1wiOnRydWUsXCLmsLTmtbgxLnBuZ1wiOnRydWUsXCLpo47mnLouanNvblwiOnRydWUsXCLnqbrnmb3moYYxLmpzb25cIjp0cnVlLFwi5rC05rW4LnBuZ1wiOnRydWUsXCLmuKnmub/luqY1Lmpzb25cIjp0cnVlLFwi5bGA5pS+Mi5qc29uXCI6dHJ1ZSxcIuWPmOWOi+WZqDEucG5nXCI6dHJ1ZSxcIuWRiuitpuWbvuagh1wiOntcIuaXoOmUoea1t+WyuOWfjlwiOntcIuWimeS9ky5wbmdcIjp0cnVlLFwi5aKZ5L2TLmpzb25cIjp0cnVlLFwi56qX5oi3LnN2Z1wiOnRydWUsXCLnn6nlvaIgNjg5LnN2Z1wiOnRydWUsXCLml6DplKExLnBuZ1wiOnRydWUsXCLml6DplKExLmpzb25cIjp0cnVlfSxcIuacquagh+mimC0xXzMyLnBuZ1wiOnRydWUsXCLmuKnmub/luqYuc3ZnXCI6dHJ1ZX0sXCLnu4QgODg0LnN2Z1wiOnRydWUsXCLmuKnluqYuanNvblwiOnRydWUsXCLmlrDmkYTlg4/lpLQucG5nXCI6dHJ1ZSxcIuWxgOaUvjEucG5nXCI6dHJ1ZSxcIuWimeS9ky5qc29uXCI6dHJ1ZSxcIueQg+acui5wbmdcIjp0cnVlLFwi5Zu+5qGGMS5qc29uXCI6dHJ1ZSxcIueDn+aEny5wbmdcIjp0cnVlLFwi56m655m95qGGMi5wbmdcIjp0cnVlLFwi5aKZ5L2TLnBuZ1wiOnRydWUsXCLmsLTmtbgxLmpzb25cIjp0cnVlLFwi5rip5rm/5bqmMS5wbmdcIjp0cnVlLFwi5Yed6ZyyMS5qc29uXCI6dHJ1ZSxcIlNGNi5qc29uXCI6dHJ1ZSxcIuS6leebli5wbmdcIjp0cnVlLFwi5Yed6ZyyMS5wbmdcIjp0cnVlLFwi55+p5b2iIDY4OS5zdmdcIjp0cnVlLFwi5Zu+5qGGMS5wbmdcIjp0cnVlLFwi5rip5rm/5bqmMS5qc29uXCI6dHJ1ZSxcIumXqOemgS5qc29uXCI6dHJ1ZSxcIuWbvuahhuWbvuahhi5wbmdcIjp0cnVlLFwi5Zmq6Z+zLnBuZ1wiOnRydWUsXCLnqbrnmb3moYYyLmpzb25cIjp0cnVlLFwi5paw5pGE5YOP5aS0Lmpzb25cIjp0cnVlLFwi5rip5bqmMS5wbmdcIjp0cnVlLFwi6aOO5py6LnBuZ1wiOnRydWUsXCLnqbrnmb3moYYucG5nXCI6dHJ1ZSxcIuaPkOekuuWbvuaghy5qc29uXCI6dHJ1ZSxcIuWbvuahhuWbvuahhi5qc29uXCI6dHJ1ZSxcIuWZqumfsy5qc29uXCI6dHJ1ZSxcIuWPmOWOi+WZqDEuanNvblwiOnRydWUsXCLlm77moYYuanNvblwiOnRydWUsXCLpq5jljovmn5wxLnBuZ1wiOnRydWUsXCLnq4vlvI/nqbrosIMuanNvblwiOnRydWUsXCLmnKrlkb3lkI0ucG5nXCI6dHJ1ZSxcIua4qea5v+W6pi5zdmdcIjp0cnVlLFwi6Zeo56aBMS5wbmdcIjp0cnVlLFwi6ZeoLmpzb25cIjp0cnVlLFwi6aOO5py6MS5qc29uXCI6dHJ1ZSxcIuawtOaztS00LnN2Z1wiOnRydWUsXCLmnKrlkb3lkI0uanNvblwiOnRydWUsXCLmuKnmub/luqYuanNvblwiOnRydWUsXCLnqbrosIMuanNvblwiOnRydWUsXCLmuKnmub/luqYyLmpzb25cIjp0cnVlLFwi6ZeoLnBuZ1wiOnRydWUsXCLlmarpn7MxLmpzb25cIjp0cnVlLFwi5rC05rW4Lmpzb25cIjp0cnVlLFwi56m655m95qGGMy5wbmdcIjp0cnVlLFwi5Zu+5qGGNi5wbmdcIjp0cnVlLFwi5rOw5beeU0Y2Lmpzb25cIjp0cnVlLFwi5Zmq6Z+zMS5wbmdcIjp0cnVlLFwi55CD5py6Lmpzb25cIjp0cnVlLFwi5qGGLmpzb25cIjp0cnVlLFwi6Zeo56aBMi5qc29uXCI6dHJ1ZSxcIua4qeW6pi5wbmdcIjp0cnVlLFwi56m655m95qGGMS5wbmdcIjp0cnVlLFwi6JOE55S15rGgLnBuZ1wiOnRydWUsXCLmtYvor5Xlm77moIcuanNvblwiOnRydWUsXCLlm77moYY2Lmpzb25cIjp0cnVlLFwi6JOE55S15rGgLmpzb25cIjp0cnVlLFwi54Of5oSfMS5qc29uXCI6dHJ1ZSxcIua4qea5v+W6pjUucG5nXCI6dHJ1ZSxcIumXqOemgTEuanNvblwiOnRydWUsXCJTRjYucG5nXCI6dHJ1ZSxcIua4qea5v+W6pjIucG5nXCI6dHJ1ZSxcIua4qea5v+W6pi5wbmdcIjp0cnVlLFwi54Of5oSfLmpzb25cIjp0cnVlLFwi56uL5byP56m66LCDLnBuZ1wiOnRydWUsXCLmuKnluqYxLmpzb25cIjp0cnVlLFwi5Lit5Y6L5p+cMS5wbmdcIjp0cnVlLFwi5bGA5pS+Mi5wbmdcIjp0cnVlLFwi5o+Q56S65Zu+5qCHLnBuZ1wiOnRydWUsXCLlsYDmlL4xLmpzb25cIjp0cnVlLFwi5rOw5beeU0Y2LnBuZ1wiOnRydWUsXCLmtYvor5Xlm77moIcucG5nXCI6dHJ1ZSxcIuaRhOWDj+WktC5qc29uXCI6dHJ1ZSxcIuaWsOaRhOWDj+WktDEuanNvblwiOnRydWUsXCLlsYDmlL4ucG5nXCI6dHJ1ZSxcIuWHnemcsi5wbmdcIjp0cnVlLFwi54Of5oSfMS5wbmdcIjp0cnVlLFwi5Zu+5qGGLnBuZ1wiOnRydWUsXCLmoYYucG5nXCI6dHJ1ZX0sXCLlkYrorablm77kvotcIjp7XCLmnqrmnLot5pWF6ZqcLnBuZ1wiOnRydWUsXCLmsLTmtbgt5ZGK6K2mLmpzb25cIjp0cnVlLFwi56m66LCDLeato+W4uC5wbmdcIjp0cnVlLFwi54Of5oSfLeWRiuitpi5qc29uXCI6dHJ1ZSxcIuawtOS9jS3mlYXpmpwucG5nXCI6dHJ1ZSxcIuawtOa1uC3mraPluLguanNvblwiOnRydWUsXCLmuKnmub/luqYt5ZGK6K2mLmpzb25cIjp0cnVlLFwi54Of5oSfLeato+W4uC5wbmdcIjp0cnVlLFwi54GvLeato+W4uC5wbmdcIjp0cnVlLFwi55CD5py6Leato+W4uC5wbmdcIjp0cnVlLFwi6ZeoLeWFsy5wbmdcIjp0cnVlLFwi5rip5rm/5bqmLeaVhemanC5wbmdcIjp0cnVlLFwi54GvLeato+W4uC5qc29uXCI6dHJ1ZSxcIueDn+aEny3mraPluLguanNvblwiOnRydWUsXCLnqbrosIMt5ZGK6K2mLmpzb25cIjp0cnVlLFwi5rC05L2NLeaVhemanC5qc29uXCI6dHJ1ZSxcIuaequacui3mlYXpmpwuanNvblwiOnRydWUsXCLmsLTkvY0t5ZGK6K2mLnBuZ1wiOnRydWUsXCLng5/mhJ8t5ZGK6K2mLnBuZ1wiOnRydWUsXCLmuKnmub/luqYt5pWF6ZqcLmpzb25cIjp0cnVlLFwi56m66LCDLeato+W4uC5qc29uXCI6dHJ1ZSxcIua4qea5v+W6pi3lkYroraYucG5nXCI6dHJ1ZSxcIumXqC3lvIAuanNvblwiOnRydWUsXCLnqbrosIMt5ZGK6K2mLnBuZ1wiOnRydWUsXCLpl6gt5YWzLmpzb25cIjp0cnVlLFwi5p6q5py6Leato+W4uC5wbmdcIjp0cnVlLFwi55CD5py6LeaVhemanC5wbmdcIjp0cnVlLFwi56m66LCDLeaVhemanC5wbmdcIjp0cnVlLFwi6ZeoLeW8gC5wbmdcIjp0cnVlLFwi5rC05L2NLeato+W4uC5wbmdcIjp0cnVlLFwi54GvLeWRiuitpi5qc29uXCI6dHJ1ZSxcIuawtOa1uC5qc29uXCI6dHJ1ZSxcIuawtOa1uC3lkYroraYucG5nXCI6dHJ1ZSxcIuaequacui3mraPluLguanNvblwiOnRydWUsXCLmsLTmtbgucG5nXCI6dHJ1ZSxcIueDn+aEny3mlYXpmpwucG5nXCI6dHJ1ZSxcIua4qea5v+W6pi3mraPluLgucG5nXCI6dHJ1ZSxcIueQg+acui3mlYXpmpwuanNvblwiOnRydWUsXCLnqbrosIMt5pWF6ZqcLmpzb25cIjp0cnVlLFwi5rC05L2NLeWRiuitpi5qc29uXCI6dHJ1ZSxcIueBry3mlYXpmpwucG5nXCI6dHJ1ZSxcIueQg+acui3mraPluLguanNvblwiOnRydWUsXCLmuKnmub/luqYt5q2j5bi4Lmpzb25cIjp0cnVlLFwi54GvLeaVhemanC5qc29uXCI6dHJ1ZSxcIuawtOa1uC3mraPluLgucG5nXCI6dHJ1ZSxcIueBry3lkYroraYucG5nXCI6dHJ1ZSxcIueDn+aEny3mlYXpmpwuanNvblwiOnRydWUsXCLmsLTkvY0t5q2j5bi4Lmpzb25cIjp0cnVlfSxcIue6vy5wbmdcIjp0cnVlLFwiM2RcIjp7XCLliJvpmL/ph5EucG5nXCI6dHJ1ZSxcImFzZGZzZGYucG5nXCI6dHJ1ZSxcIumdouadvy5wbmdcIjp0cnVlLFwi6Z2i5p2/Lmpzb25cIjp0cnVlLFwi5Yib6Zi/6YeRLmpzb25cIjp0cnVlLFwi6Z2i5p2/LnppcFwiOnRydWUsXCJhc2Rmc2RmLmpzb25cIjp0cnVlLFwi5Zu+5omR6L2v5Lu2LnBuZ1wiOnRydWV9LFwi6YCP5piO5Zu+5YWDLnBuZ1wiOnRydWUsXCLmjInpkq4uanNvblwiOnRydWUsXCLmtYvor5UuanNvblwiOnRydWUsXCLpgI/mmI7nur/moYYuanNvblwiOnRydWUsXCLlkYrorabnirbmgIHlm75cIjp7XCLlnIblnIgucG5nXCI6dHJ1ZSxcIuepuuiwgy5wbmdcIjp0cnVlLFwi5rC05L2NLmpzb25cIjp0cnVlLFwi5rC05L2NLnBuZ1wiOnRydWUsXCLmuKnmub/luqYuanNvblwiOnRydWUsXCLnqbrosIMuanNvblwiOnRydWUsXCLpl6gucG5nXCI6dHJ1ZSxcIuawtOa1uC5qc29uXCI6dHJ1ZSxcIuawtOa1uC5wbmdcIjp0cnVlLFwi54GvLmpzb25cIjp0cnVlLFwi55CD5py6LnBuZ1wiOnRydWUsXCLnga8ucG5nXCI6dHJ1ZSxcIuaequacui5qc29uXCI6dHJ1ZSxcIuWchuWciC5qc29uXCI6dHJ1ZSxcIuaequacui5wbmdcIjp0cnVlLFwi5rip5rm/5bqmLnBuZ1wiOnRydWUsXCLnkIPmnLouanNvblwiOnRydWUsXCLng5/mhJ8uanNvblwiOnRydWUsXCLng5/mhJ8ucG5nXCI6dHJ1ZSxcIumXqC5qc29uXCI6dHJ1ZX0sXCLlhYXnlLXmoakuanNvblwiOnRydWUsXCLlm77miZHlhoXnva5cIjp7XCLmlofmnKxcIjp7fX0sXCLlm77ooahcIjp7XCLmn7Hnirblm74ucG5nXCI6dHJ1ZSxcIuafseeKtuWbvi5qc29uXCI6dHJ1ZSxcImQucG5nXCI6dHJ1ZSxcImQuanNvblwiOnRydWV9LFwi5oyJ6ZKuLnBuZ1wiOnRydWUsXCLpgI/mmI7lm77lhYMuanNvblwiOnRydWUsXCLlm77lsYLliIfmjaIuanNvblwiOnRydWUsXCLml6DplKHmjqXnur/kuJPnlKjlm77moIdcIjp7XCLnu4QgNjguc3ZnXCI6dHJ1ZSxcIue7hCAyMDMuanNvblwiOnRydWUsXCLnlLXljovkupLmhJ/lmagucG5nXCI6dHJ1ZSxcIueUtea1geS6kuaEn+WZqDIuanNvblwiOnRydWUsXCLnmb3lupUoMSkuanNvblwiOnRydWUsXCLnlLXljovkupLmhJ/lmagyLnBuZ1wiOnRydWUsXCLlm77moIcoMSkuemlwXCI6dHJ1ZSxcIueUtea1geS6kuaEn+WZqC5qc29uXCI6dHJ1ZSxcIueureWktC5wbmdcIjp0cnVlLFwi562J55S15L2NLmpzb25cIjp0cnVlLFwi5omL6L2mLnBuZ1wiOnRydWUsXCLnu4QgMTEuanNvblwiOnRydWUsXCLnlLXnvIblpLQucG5nXCI6dHJ1ZSxcIuaJi+i9puWbvuaghzEucG5nXCI6dHJ1ZSxcIueGlOaWreWZqC5wbmdcIjp0cnVlLFwi5Li75Y+YLmpzb25cIjp0cnVlLFwi5omL6L2mLmpzb25cIjp0cnVlLFwi5omL6L2mMS5qc29uXCI6dHJ1ZSxcIue7hCAyMDIuanNvblwiOnRydWUsXCLnu4QgMTAuanNvblwiOnRydWUsXCLnrq3lpLQuanNvblwiOnRydWUsXCLnu4QgMTEucG5nXCI6dHJ1ZSxcIue7hCAyMDEoMSkuanNvblwiOnRydWUsXCLmiYvlvIDotJ/ojbflvIDlhbMuanNvblwiOnRydWUsXCLomZrnur8gMTQucG5nXCI6dHJ1ZSxcIueUtee8huWktC5qc29uXCI6dHJ1ZSxcIueUteaKl+WZqC5qc29uXCI6dHJ1ZSxcIuaJi+i9pjEucG5nXCI6dHJ1ZSxcIue7hCAxMC5wbmdcIjp0cnVlLFwi6YG/6Zu35ZmoLnN2Z1wiOnRydWUsXCLnlLXmtYHkupLmhJ/lmagyLnBuZ1wiOnRydWUsXCLmiYvovaYxIDIucG5nXCI6dHJ1ZSxcIueUteWOi+S6kuaEn+WZqC5zdmdcIjp0cnVlLFwi5o6l5Zyw5byA5YWzIDIuanNvblwiOnRydWUsXCLlm77moIcxLmpzb25cIjp0cnVlLFwi5qGGLmpzb25cIjp0cnVlLFwi6Jma57q/IDE0Lmpzb25cIjp0cnVlLFwi57uEIDIwMC5qc29uXCI6dHJ1ZSxcIuaOpeWcsDEucG5nXCI6dHJ1ZSxcIueUteWOi+S6kuaEn+WZqC5qc29uXCI6dHJ1ZSxcIuW4pueUteaYvuekuuWZqC5wbmdcIjp0cnVlLFwi5o6l5Zyw5byA5YWzIDIucG5nXCI6dHJ1ZSxcIue7hCAxLnBuZ1wiOnRydWUsXCLmiYvovablm77moIcxLmpzb25cIjp0cnVlLFwi5o6l5ZywLmpzb25cIjp0cnVlLFwi6YG/6Zu35ZmoKDEpLmpzb25cIjp0cnVlLFwi5omL5byA6LSf6I235byA5YWzIDIucG5nXCI6dHJ1ZSxcIuWbvuaghzIuanNvblwiOnRydWUsXCLmiYvlvIDotJ/ojbflvIDlhbMgMi5qc29uXCI6dHJ1ZSxcIueZveW6lSgxKS5wbmdcIjp0cnVlLFwi5Zu+5qCHMy5qc29uXCI6dHJ1ZSxcIuaWrei3r+WZqC5wbmdcIjp0cnVlLFwi5Zu+5qCHMS5wbmdcIjp0cnVlLFwi5o6l5ZywMS5qc29uXCI6dHJ1ZSxcIuS4u+WPmCAyLmpzb25cIjp0cnVlLFwi57uEIDIwMC5wbmdcIjp0cnVlLFwi562J55S15L2NLnBuZ1wiOnRydWUsXCLluKbnlLXmmL7npLrlmaguanNvblwiOnRydWUsXCLnlLXlrrnlmagucG5nXCI6dHJ1ZSxcIueUteWuueWZqC5qc29uXCI6dHJ1ZSxcIueUteWOi+S6kuaEn+WZqDIuanNvblwiOnRydWUsXCLms7Dlt57mjqXnur/lm77kuJPnlKjlm77moIdcIjp7XCLms7Dlt57mlq3ot6/lmagucG5nXCI6dHJ1ZSxcIuazsOW3nuaJi+i9pi5qc29uXCI6dHJ1ZSxcIuazsOW3nuaJi+i9pi5wbmdcIjp0cnVlLFwi5rOw5bee5pat6Lev5ZmoLmpzb25cIjp0cnVlLFwi566t5aS0LnBuZ1wiOnRydWUsXCLnrq3lpLQuanNvblwiOnRydWV9LFwi5Zu+5qCHMi5wbmdcIjp0cnVlLFwi57uEIDIwMy5wbmdcIjp0cnVlLFwi5o6l5ZywLnBuZ1wiOnRydWUsXCLlm77moIczLnBuZ1wiOnRydWUsXCLmiYvovaYxIDIuanNvblwiOnRydWUsXCLnlLXmipflmagucG5nXCI6dHJ1ZSxcIueGlOaWreWZqC5qc29uXCI6dHJ1ZSxcIuaJi+W8gOi0n+iNt+W8gOWFsy5wbmdcIjp0cnVlLFwi5Li75Y+YIDIucG5nXCI6dHJ1ZSxcIueql+aIty5zdmdcIjp0cnVlLFwi55S15rWB5LqS5oSf5ZmoLnBuZ1wiOnRydWUsXCLpgb/pm7flmagoMSkucG5nXCI6dHJ1ZSxcIue7hCAyMDIucG5nXCI6dHJ1ZSxcIue7hCAyMDEoMSkucG5nXCI6dHJ1ZSxcIumBv+mbt+WZqDIuc3ZnXCI6dHJ1ZSxcIue7hCAxLmpzb25cIjp0cnVlLFwi5pat6Lev5ZmoLmpzb25cIjp0cnVlLFwi5qGGLnBuZ1wiOnRydWUsXCLkuLvlj5gucG5nXCI6dHJ1ZX0sXCLpgI/mmI7nur/moYYucG5nXCI6dHJ1ZSxcIuWbvuaghy5qc29uXCI6dHJ1ZSxcIua1i+ivlS5wbmdcIjp0cnVlLFwi57q/Lmpzb25cIjp0cnVlLFwi5Zu+5bGC5YiH5o2iLnBuZ1wiOnRydWUsXCLnu5Hlrprnq5nngrkuanNvblwiOnRydWUsXCLnu5Hlrprnq5nngrkucG5nXCI6dHJ1ZSxcIuW8gOWFs1wiOntcIuW8gOWFszIucG5nXCI6dHJ1ZSxcIuW8gOWFszItMS5qc29uXCI6dHJ1ZSxcIuW8gOWFszEuanNvblwiOnRydWUsXCLlvIDlhbMxLnBuZ1wiOnRydWUsXCLlvIDlhbMyLmpzb25cIjp0cnVlLFwi5byA5YWzMi0xLnBuZ1wiOnRydWV9LFwiYmFzaWNcIjp7XCJodC5wbmdcIjp0cnVlLFwiaHQuanNvblwiOnRydWV9LFwi5YWF55S15qGpLnBuZ1wiOnRydWUsXCLlm77moIcucG5nXCI6dHJ1ZSxcIuWHj+WOuyAxNzIuc3ZnXCI6dHJ1ZX0sXG4gICAgICBcIi9jb21wb25lbnRzXCI6e1wi5Zu+6KGoXCI6e1wiY2hhcnQuanNvblwiOnRydWUsXCJjaGFydC5wbmdcIjp0cnVlfSxcInByb2dyZXNzQmFyXCI6e1wicHJvZ3Jlc3NCYXIucG5nXCI6dHJ1ZSxcImNpcmNsZVByb2dyZXNzQmFyLmpzb25cIjp0cnVlLFwicHJvZ3Jlc3NCYXIuanNvblwiOnRydWUsXCLov5vluqbmnaEuanNvblwiOnRydWUsXCJsb2FkaW5nLmpzb25cIjp0cnVlLFwiY2lyY2xlUHJvZ3Jlc3NCYXIucG5nXCI6dHJ1ZSxcImxvYWRpbmcucG5nXCI6dHJ1ZSxcIui/m+W6puadoS5wbmdcIjp0cnVlfSxcIuiHquWumuS5iee7hOS7tlwiOnt9LFwi5Zu+5omR5YaF572uXCI6e1widGV4dFwiOnt9fSxcImNsb2NrXCI6e1wiY2xvY2stc2NhbGUuanNvblwiOnRydWUsXCJjbG9jay1wb2ludGVyLmpzb25cIjp0cnVlLFwiY2xvY2stcG9pbnRlci5wbmdcIjp0cnVlLFwiY2xvY2stc2NhbGUucG5nXCI6dHJ1ZX0sXCJ0YWJsZVwiOntcInRhYmxlLnBuZ1wiOnRydWUsXCJ0YWJsZS5qc29uXCI6dHJ1ZSxcImdyaWQucG5nXCI6dHJ1ZSxcImdyaWQuanNvblwiOnRydWV9fSxcbiAgICAgIFwiL3NjZW5lc1wiOnt9LFxuICAgICAgXCIvbW9kZWxzXCI6e1wi5rWL6K+V5qih5Z6L5re75YqgXCI6e1wicm9hZC5qc29uXCI6dHJ1ZSxcInJvYWQucG5nXCI6dHJ1ZX0sXCIzZFwiOntcInNodWFuZ2ppYW4ucG5nXCI6dHJ1ZSxcInlhbmdhbi5qc29uXCI6dHJ1ZSxcIl9fXy5qc29uXCI6dHJ1ZSxcIndlbmR1Lmpzb25cIjp0cnVlLFwic2h1aWppbi5qc29uXCI6dHJ1ZSxcImZhZGlhbmppMS5qc29uXCI6dHJ1ZSxcIndlbmR1LnBuZ1wiOnRydWUsXCJmYWRpYW5qaTEucG5nXCI6dHJ1ZSxcIl9fXy5wbmdcIjp0cnVlLFwic2h1YW5namlhbi5qc29uXCI6dHJ1ZSxcInlhbmdhbi5wbmdcIjp0cnVlLFwic2h1aWppbi5wbmdcIjp0cnVlfSxcIuacuuaIv1wiOntcIua2iOmYsuiuvuaWvVwiOntcIua2iOmYsuiuvuWkhy5qc29uXCI6dHJ1ZSxcIua2iOmYsuiuvuWkhy5wbmdcIjp0cnVlfSxcIuahjOakheWCqOeJqVwiOntcIuWCqOeJqeafnC5wbmdcIjp0cnVlLFwi5YKo54mp5p+cLmpzb25cIjp0cnVlfSxcIuacuuafnOebuOWFs1wiOntcIuacuuafnDMuanNvblwiOnRydWUsXCLphY3nlLXnrrEuanNvblwiOnRydWUsXCLmnLrmn5wyLnBuZ1wiOnRydWUsXCLphY3nlLXnrrEucG5nXCI6dHJ1ZSxcIuacuuafnDIuanNvblwiOnRydWUsXCLmnLrmn5wzLnBuZ1wiOnRydWV9LFwi6KeG6aKR55uR5o6nXCI6e1wi6YWN55S1566xLnBuZ1wiOnRydWUsXCLmkYTlg4/lpLTmlrkuanNvblwiOnRydWUsXCLmkYTlg4/lpLTmlrkucG5nXCI6dHJ1ZX0sXCLmuKnluqbmjqfliLZcIjp7XCLnqbrosIPnsr7nroAuanNvblwiOnRydWUsXCLnqbrosIPnsr7nroAucG5nXCI6dHJ1ZX19LFwi5a6k5YaFXCI6e1wi5Zyw5p2/Lmpzb25cIjp0cnVlLFwi6ams5qG2Lmpzb25cIjp0cnVlLFwi5rC06b6Z5aS0Lmpzb25cIjp0cnVlLFwi5bCP5L6/5rGgLnBuZ1wiOnRydWUsXCLlnLDmnb8ucG5nXCI6dHJ1ZSxcIuiMtuWHoC5qc29uXCI6dHJ1ZSxcIuawtOm+meWktC5wbmdcIjp0cnVlLFwi6ams5qG2LnBuZ1wiOnRydWUsXCLljZXkurrmspnlj5EuanNvblwiOnRydWUsXCLlsI/kvr/msaAuanNvblwiOnRydWUsXCLljZXkurrmspnlj5EucG5nXCI6dHJ1ZSxcIuiMtuWHoC5wbmdcIjp0cnVlfX0sXG4gICAgICBcIi9hc3NldHNcIjp7XCI5OTk5Oeeql+aIty5zdmdcIjp0cnVlLFwi57yW57uEMzIzMi5zdmdcIjp0cnVlLFwiMy5zdmdcIjp0cnVlLFwidGltZyAoMSkuanBnXCI6dHJ1ZSxcIndjXCI6e1wi5qC85a2Q5Zyw6Z2iLnBuZ1wiOnRydWUsXCLnp5HmioDlhYnlnIgyLnBuZ1wiOnRydWUsXCLmoIfor4Yt55S35oCnLnBuZ1wiOnRydWUsXCLno6jnoILlnLDmnb8uanBnXCI6dHJ1ZSxcImZ4dHkucG5nXCI6dHJ1ZSxcIuW7uuetkeaKleW9sS5wbmdcIjp0cnVlLFwi55+/55+z5bGl5bimLnBuZ1wiOnRydWUsXCLlopnpnaLnga/lhYkucG5nXCI6dHJ1ZSxcIuWcsOmdoueBr+WFiS5wbmdcIjp0cnVlLFwi5qCH6K+GLeWls+aApy5wbmdcIjp0cnVlLFwi5qCH6K+GLeeJueauii5wbmdcIjp0cnVlLFwi54Of5Zux54Of6Zu+5rWFLnBuZ1wiOnRydWUsXCLnp5HmioDlhYnlnIgucG5nXCI6dHJ1ZSxcIueDn+WbseeDn+mbvi5wbmdcIjp0cnVlfSxcInRpbWcgMy5qcGdcIjp0cnVlLFwi57uEIDUzNS5zdmdcIjp0cnVlLFwiM2RcIjp7XCJmYWRpYW5qaTIucG5nXCI6dHJ1ZSxcInNodWlqaW4uanBnXCI6dHJ1ZSxcInlhbmdhbi5vYmpcIjp0cnVlLFwid2VuZHUub2JqXCI6dHJ1ZSxcInNodWlqaW4ubXRsXCI6dHJ1ZSxcImZhZGlhbmppMy5wbmdcIjp0cnVlLFwi5py65p+cXCI6e1wicmFja19wYW5lbC5wbmdcIjp0cnVlLFwicmFja19mcm9udF9kb29yLmpwZ1wiOnRydWUsXCJyYWNrNDJ1LnBuZ1wiOnRydWUsXCJyYWNrX3RvcC5wbmdcIjp0cnVlLFwicmFja19iYWNrX2Rvb3IucG5nXCI6dHJ1ZSxcImhlYWRfcmFja19zaWRlLnBuZ1wiOnRydWUsXCJyYWNrX2Rvb3JfYmFjay5wbmdcIjp0cnVlLFwicmFja19zaWRlLnBuZ1wiOnRydWUsXCJlbnZtYXAxLmpwZ1wiOnRydWUsXCJvdXRzaWRlX2xpZ2h0bWFwLmpwZ1wiOnRydWV9LFwic2h1YW5namlhbi5vYmpcIjp0cnVlLFwiZmFkaWFuamkxLm10bFwiOnRydWUsXCJ5YW5nYW4uanBnXCI6dHJ1ZSxcImZhZGlhbmppMS5wbmdcIjp0cnVlLFwic2h1aWppbi5vYmpcIjp0cnVlLFwid2VuZHUubXRsXCI6dHJ1ZSxcInlhbmdhbi5tdGxcIjp0cnVlLFwic2h1YW5namlhbi5qcGdcIjp0cnVlLFwid2VuZHUuanBnXCI6dHJ1ZSxcInNodWFuZ2ppYW4ubXRsXCI6dHJ1ZSxcImZhZGlhbmppMS5vYmpcIjp0cnVlfSxcIjIgMi5zdmdcIjp0cnVlLFwi5ZGK6K2mXCI6e1wiZGYxZDNmMTkyNGZmOGNmM2EyOTc2YTI0ZmE3MWQ5YS5qcGdcIjp0cnVlLFwi6LWE5rqQIDI0LnN2Z1wiOnRydWUsXCLnn6nlvaIgMiAoMykuc3ZnXCI6dHJ1ZSxcIui1hOa6kCAxNS5zdmdcIjp0cnVlLFwi6LWE5rqQIDkuc3ZnXCI6dHJ1ZSxcIui1hOa6kCAyMy5zdmdcIjp0cnVlLFwi6LWE5rqQIDEwLnN2Z1wiOnRydWUsXCLotYTmupAgNS5zdmdcIjp0cnVlLFwi6LWE5rqQIDI1LnN2Z1wiOnRydWUsXCLotYTmupAgMTkuc3ZnXCI6dHJ1ZSxcIui1hOa6kCAxNi5zdmdcIjp0cnVlLFwi6LWE5rqQIDQuc3ZnXCI6dHJ1ZSxcIui1hOa6kCAxMS5zdmdcIjp0cnVlLFwi6LWE5rqQIDguc3ZnXCI6dHJ1ZSxcIui1hOa6kCAyMC5zdmdcIjp0cnVlLFwi6LWE5rqQIDE4LnN2Z1wiOnRydWUsXCLotYTmupAgMjYuc3ZnXCI6dHJ1ZSxcIuefqeW9oiAyICgyKS5zdmdcIjp0cnVlLFwi6LWE5rqQIDMuc3ZnXCI6dHJ1ZSxcIui1hOa6kCAyMS5zdmdcIjp0cnVlLFwi6LWE5rqQIDcuc3ZnXCI6dHJ1ZSxcIui1hOa6kCA2LnN2Z1wiOnRydWUsXCLotYTmupAgMTcuc3ZnXCI6dHJ1ZSxcIui1hOa6kCAyMi5zdmdcIjp0cnVlLFwi55+p5b2iIDIuc3ZnXCI6dHJ1ZX0sXCLnu4QgMS5zdmdcIjp0cnVlLFwi5rC05rO1LTQuc3ZnXCI6dHJ1ZSxcImFsYXJtLmpzb25cIjp0cnVlLFwi5LqV55uWLnN2Z1wiOnRydWUsXCJzdmdcIjp7XCLmiYvlhbPotJ/ojbflvIDlhbMxLnN2Z1wiOnRydWUsXCLkuInlt6XkvY3liIDpl7gg4oCTIDMuc3ZnXCI6dHJ1ZSxcIuWPjOWQkemalOemu+W8gOWFsyAxLnN2Z1wiOnRydWUsXCLmva7msZDnlLXnq5kuc3ZnXCI6dHJ1ZSxcIuS4ieW3peS9jei0n+W8gCDigJMgMi5zdmdcIjp0cnVlLFwi5YWs5Y+YLnN2Z1wiOnRydWUsXCLkuInlt6XkvY3mlq3ot6/lmagg4oCTIDYuc3ZnXCI6dHJ1ZSxcIuWIhuijgueUteaKl+WZqC5zdmdcIjp0cnVlLFwi56e456eG55S156uZLnN2Z1wiOnRydWUsXCLnlLXmipflmaguc3ZnXCI6dHJ1ZSxcIuW5tuiBlOeUteWuueWZqCDigJMgMS5zdmdcIjp0cnVlLFwi5Z6D5Zy+55S156uZLnN2Z1wiOnRydWUsXCIuRFNfU3RvcmVcIjp0cnVlLFwi6IGU5Yqo5byA5YWzLnN2Z1wiOnRydWUsXCLotYTmupAgOC5zdmdcIjp0cnVlLFwi6LeM6JC95byP54aU5pat5ZmoIOKAkyAyLnN2Z1wiOnRydWUsXCLmnYbloZQuc3ZnXCI6dHJ1ZSxcIuS4ieW3peS9jeaWrei3r+WZqCDigJMgOC5zdmdcIjp0cnVlLFwi5omL6L2m5byA5YWzMSDigJMgMi5zdmdcIjp0cnVlLFwi54Gr55S15Y6CIOKAkyAxLnN2Z1wiOnRydWUsXCLlvIDlhbMt5YWzICgxKS5zdmdcIjp0cnVlLFwi6LWE5rqQIDMuc3ZnXCI6dHJ1ZSxcIuS4ieW3peS9jeWIgOmXuCDigJMgNS5zdmdcIjp0cnVlLFwiVuWei+W8gOWFszEg4oCTIDEuc3ZnXCI6dHJ1ZSxcIuaJi+i9puW8gOWFszEg4oCTIDEuc3ZnXCI6dHJ1ZSxcIuenuOenhueUteermSDigJMgMS5zdmdcIjp0cnVlLFwi5Zyw54Ot55S15Y6CIOKAkyAxLnN2Z1wiOnRydWUsXCLmiYvlhbPotJ/ojbflvIDlhbMxMSDigJMgMy5zdmdcIjp0cnVlLFwi5LiJ5bel5L2N5pat6Lev5ZmoIOKAkyA3LnN2Z1wiOnRydWUsXCLmjqXlnLDliIDpl7gyLnN2Z1wiOnRydWUsXCLogZTliqjlvIDlhbMg4oCTIDIuc3ZnXCI6dHJ1ZSxcIlblnovlvIDlhbMxIOKAkyAyLnN2Z1wiOnRydWUsXCLkuLLogZTnlLXlrrnlmaguc3ZnXCI6dHJ1ZSxcIuaOpeWcsOWIgOmXuC5zdmdcIjp0cnVlLFwi5rC055S15Y6CIOKAkyAyLnN2Z1wiOnRydWUsXCLotJ/ojbflvIDlhbMxIOKAkyAxLnN2Z1wiOnRydWUsXCLnq5nmiL8g4oCTIDEuc3ZnXCI6dHJ1ZSxcIuS4ieW3peS9jei0n+W8gC5zdmdcIjp0cnVlLFwi6LWE5rqQIDUuc3ZnXCI6dHJ1ZSxcIuWPjOWQkemalOemu+W8gOWFszMuc3ZnXCI6dHJ1ZSxcIlblnovlvIDlhbMxIOKAkyAzLnN2Z1wiOnRydWUsXCLlvIDlhbMg4oCTIDEuc3ZnXCI6dHJ1ZSxcIuaVhemanOaMh+ekuuWZqC5zdmdcIjp0cnVlLFwi5pWF6Zqc5oyH56S65ZmoMS5zdmdcIjp0cnVlLFwi5byA5YWzLnN2Z1wiOnRydWUsXCIzXzEuc3ZnXCI6dHJ1ZSxcIueGlOaWreW8j+W8gOWFszEg4oCTIDEuc3ZnXCI6dHJ1ZSxcIuaJi+i9puW8gOWFszEuc3ZnXCI6dHJ1ZSxcIui1hOa6kCA0LnN2Z1wiOnRydWUsXCLmlq3ot6/lmagxIOKAkyAxLnN2Z1wiOnRydWUsXCLlubbogZTnlLXlrrnlmagg4oCTIDIuc3ZnXCI6dHJ1ZSxcIuS4ieW3peS9jeWIgOmXuC0xMVwiOnRydWUsXCLogZTliqjlvIDlhbMxLnN2Z1wiOnRydWUsXCLnq5nmiL8uc3ZnXCI6dHJ1ZSxcIueGlOaWreW8j+W8gOWFszEuc3ZnXCI6dHJ1ZSxcIueUteWKm+eUqOaIty5zdmdcIjp0cnVlLFwi54aU5pat5byP5byA5YWzMSDigJMgMi5zdmdcIjp0cnVlLFwiMV8xLnN2Z1wiOnRydWUsXCLlgqjog70uc3ZnXCI6dHJ1ZSxcIui1hOa6kCA3LnN2Z1wiOnRydWUsXCLlj4zlkJHpmpTnprvlvIDlhbMyLnN2Z1wiOnRydWUsXCLotYTmupAgMTQuc3ZnXCI6dHJ1ZSxcIlTlnovlvIDlhbMxLnN2Z1wiOnRydWUsXCLmsLTnlLXljoIg4oCTIDMuc3ZnXCI6dHJ1ZSxcIlblnovlvIDlhbMxIC5zdmdcIjp0cnVlLFwi5LiJ5bel5L2N6LSf5byAIOKAkyAxLnN2Z1wiOnRydWUsXCLotJ/ojbflvIDlhbMxMSDigJMgNS5zdmdcIjp0cnVlfSxcIuefqeW9oiAyICgyKS5zdmdcIjp0cnVlLFwiMS5zdmdcIjp0cnVlLFwi57uEIDEyOTIuc3ZnXCI6dHJ1ZSxcIm9ianNcIjp7XCJjdXN0b21cIjp7XCJncm91bmRcIjp7XCJ3YXRlcl90cmVhdG1lbnRcIjp7XCJ6eTA5LnBuZ1wiOnRydWUsXCJyb2FkLm10bFwiOnRydWUsXCJ6eTEwLnBuZ1wiOnRydWUsXCJ6eTA3LnBuZ1wiOnRydWUsXCJ6eTA4LnBuZ1wiOnRydWUsXCJyb2FkLm9ialwiOnRydWV9fX0sXCLmnLrmiL9cIjp7XCJwZWlkaWFuZ3VpLnBuZ1wiOnRydWUsXCJhaXJjLnBuZ1wiOnRydWUsXCLmtojpmLLorr7mlr1cIjp7XCLmtojpmLLorr7lpIcub2JqXCI6dHJ1ZSxcIua2iOmYsuiuvuWkhy5tdGxcIjp0cnVlfSxcIuahjOakheWCqOeJqVwiOntcIuWCqOeJqeafnC5vYmpcIjp0cnVlLFwi5YKo54mp5p+cLm10bFwiOnRydWV9LFwiamcucG5nXCI6dHJ1ZSxcIuacuuafnOebuOWFs1wiOntcIuacuuafnDIub2JqXCI6dHJ1ZSxcIumFjeeUteeusS5tdGxcIjp0cnVlLFwi6YWN55S1566xLm9ialwiOnRydWUsXCLmnLrmn5wzLm9ialwiOnRydWUsXCLmnLrmn5wyLm10bFwiOnRydWUsXCLmnLrmn5wzLm10bFwiOnRydWV9LFwi6KeG6aKR55uR5o6nXCI6e1wi5pGE5YOP5aS05pa5Lm9ialwiOnRydWUsXCLmkYTlg4/lpLTmlrkubXRsXCI6dHJ1ZX0sXCJqZzMucG5nXCI6dHJ1ZSxcIua4qeW6puaOp+WItlwiOntcIuepuuiwg+eyvueugC5vYmpcIjp0cnVlLFwi56m66LCD57K+566ALm10bFwiOnRydWV9fSxcIuWupOWGhVwiOntcIuWwj+S+v+axoC5vYmpcIjp0cnVlLFwi5Y2V5Lq65rKZ5Y+RLm10bFwiOnRydWUsXCLljZXkurrmspnlj5Eub2JqXCI6dHJ1ZSxcIuawtOm+meWktC5tdGxcIjp0cnVlLFwia2FvYmVpLnBuZ1wiOnRydWUsXCJ3b29kLnBuZ1wiOnRydWUsXCLojLblh6Aub2JqXCI6dHJ1ZSxcIuawtOm+meWktC5vYmpcIjp0cnVlLFwi6Iy25YegLm10bFwiOnRydWUsXCLpqazmobYubXRsXCI6dHJ1ZSxcIuWwj+S+v+axoC5tdGxcIjp0cnVlLFwi6ams5qG2Lm9ialwiOnRydWV9fSxcIuaXoOmUoeaOpee6v1wiOntcIuaOpeWcsOW8gOWFs1wiOnRydWUsXCLnhpTmlq3lmaguc3ZnXCI6dHJ1ZSxcIue7hCAxMzMuc3ZnXCI6dHJ1ZSxcIumBv+mbt+WZqFwiOnRydWUsXCLnu4QgOTguc3ZnXCI6dHJ1ZSxcIue7hCAxMzEuc3ZnXCI6dHJ1ZSxcIue7hCAxMzAuc3ZnXCI6dHJ1ZSxcIueUtee8huWktC5zdmdcIjp0cnVlLFwi5bim55S15pi+56S65ZmoXCI6dHJ1ZSxcIuetieeUteS9jS5zdmdcIjp0cnVlLFwi57uEIDE1OC5zdmdcIjp0cnVlLFwi57uEIDk3LnN2Z1wiOnRydWUsXCLnlLXmtYHkupLmhJ/lmagyLnN2Z1wiOnRydWUsXCLnu4QgMTMyLnN2Z1wiOnRydWUsXCLpgb/pm7flmagoMSkuc3ZnXCI6dHJ1ZSxcIue7hCAxMjkuc3ZnXCI6dHJ1ZSxcIue7hCAxNTcoMSkuc3ZnXCI6dHJ1ZSxcIueUteWOi+S6kuaEn+WZqC5zdmdcIjp0cnVlLFwi6YG/6Zu35ZmoMi5zdmdcIjp0cnVlLFwi55S15rWB5LqS5oSf5ZmoLnN2Z1wiOnRydWUsXCLnu4QgODkuc3ZnXCI6dHJ1ZSxcIueUteWuueWZqC5zdmdcIjp0cnVlfSxcInNmNi5zdmdcIjp0cnVlLFwiMTI2ODQ0MDQ2MjEwOTMyNzM2MS5qcGdcIjp0cnVlLFwi5Zu+5qCH6LWE5rqQXCI6e1wi55m95bqVKDEpLnN2Z1wiOnRydWUsXCLnu4QgODgzMi5zdmdcIjp0cnVlLFwi5pyq5qCH6aKYLTEoMSkuc3ZnXCI6dHJ1ZSxcIue7hCA4ODguc3ZnXCI6dHJ1ZSxcIua4qea5v+W6pi5zdmdcIjp0cnVlLFwi57uEIDUzNSgyKS5zdmdcIjp0cnVlLFwi57uEIDUzNCgxKS5zdmdcIjp0cnVlLFwi57uEIDE1MjEoMSkuc3ZnXCI6dHJ1ZX0sXCLnn6nlvaIgNjg5LnN2Z1wiOnRydWUsXCJ0aW1nLmpwZ1wiOnRydWV9XG4gICAgfVxuICAgIC8vIGdldEZpbGVMaXN0KGRhdGEpXG4gICAgLy8gICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIGNhbGxiYWNrKGZpbGVEYXRhT2JqW2RhdGFdKVxuICAgICAgLy8gfSlcbiAgICAgIC8vIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyAgIGNhbGxiYWNrKHt9KVxuICAgICAgLy8gfSlcbiAgfSxcbiAgbWtkaXI6IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpc1xuICAgIGNyZWF0ZU1rZGlyKGRhdGEpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIGNhbGxiYWNrKHRydWUpXG4gICAgICAgIHNlbGYuaGFuZGxlcih7IHR5cGU6ICdmaWxlQ2hhbmdlZCcsIHBhdGg6IGRhdGEgfSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjayhmYWxzZSlcbiAgICAgIH0pXG4gIH0sXG4gIHVwbG9hZDogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG5cbiAgICBjb25zb2xlLmxvZyhkYXRhLCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JywgZWRpdG9yLmRtKVxuICAgIHZhciBwYXRoID0gZGF0YS5wYXRoXG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgdmFyIHVwbG9hZFBhdGhBcnIgPSBwYXRoLnNwbGl0KCcvJylcbiAgICB2YXIgZGlyID0gdXBsb2FkUGF0aEFyclswXVxuICAgIHZhciBuYW1lID0gdXBsb2FkUGF0aEFyclt1cGxvYWRQYXRoQXJyLmxlbmd0aCAtIDFdXG4gICAgdmFyIGRvdEluZGV4ID0gbmFtZS5pbmRleE9mKCcuJylcbiAgICBuYW1lID0gbmFtZS5zdWJzdHJpbmcoMCwgZG90SW5kZXgpXG4gICAgdmFyIGljb24gPSAvXFwuKHBuZ3xqcGd8Z2lmfGpwZWd8Ym1wKSQvaS50ZXN0KHBhdGgpID8gZGF0YS5jb250ZW50IDogbnVsbFxuXG4gICAgZG90SW5kZXggPSBwYXRoLmluZGV4T2YoJy4nKVxuICAgIGxldCBkb25lUGF0aCA9IHBhdGguc3Vic3RyaW5nKDAsIGRvdEluZGV4KVxuICAgIGxldCB0YWIgPSBlZGl0b3IubWFpblRhYlZpZXcuZ2V0VGFiTW9kZWwoKS5nZXREYXRhQnlUYWcoZG9uZVBhdGggKyAnLmpzb24nKVxuICAgIGxldCBkYXRhTW9kZWxcbiAgICBpZiAodGFiKSB7XG4gICAgICBkYXRhTW9kZWwgPSB0YWIuZ2V0VmlldygpLmd2LmdldERhdGFNb2RlbCgpXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbjog5ouW5ou95paw5aKe5Zu+57q4XG4gICAgICovXG4gICAgaWYgKFxuICAgICAgKGRpciA9PT0gJ2Rpc3BsYXlzJyB8fCBkaXIgPT09ICdzY2VuZXMnKSAmJlxuICAgICAgIWljb24gJiZcbiAgICAgIGVkaXRvci5kbSAmJlxuICAgICAgIWVkaXRvci5kbS5nZXRBdHRyKCd1dWlkJylcbiAgICApIHtcbiAgICAgIGFkZERpYWdyYW0oeyBuYW1lIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjayh0cnVlKVxuICAgICAgICBzZWxmLmhhbmRsZXIoeyB0eXBlOiAndXBkYXRlU3RhdGlvbicsIHBhdGg6IHBhdGggfSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIChkaXIgPT09ICdkaXNwbGF5cycgfHwgZGlyID09PSAnc2NlbmVzJykgJiZcbiAgICAgIChpY29uIHx8IChlZGl0b3IuZG0gJiYgZWRpdG9yLmRtLmdldEF0dHIoJ3V1aWQnKSkpXG4gICAgKSB7XG5cbiAgICAgIHVwZGF0ZURpYWdyYW0oaWNvbiwgbmFtZSwgZGF0YU1vZGVsKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2sodHJ1ZSlcbiAgICAgICAgc2VsZi5oYW5kbGVyKHsgdHlwZTogJ3VwZGF0ZVN0YXRpb24nLCBwYXRoOiBwYXRoIH0pXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAoZGlyID09PSBleHBvcnRBcGlOYW1lKSB7XG4gICAgICB1cGRhdGVEaWFncmFtKGljb24sIG5hbWUsIGRhdGFNb2RlbCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRydWUpXG4gICAgICAgIHNlbGYuaGFuZGxlcih7IHR5cGU6ICd1cGRhdGVTdGF0aW9uJywgcGF0aDogcGF0aCB9KVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKGRpciA9PT0gJ3ByZXZpZXdzJykge1xuICAgICAgZGVsZXRlRmlsZShwYXRoKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgYWRkRmlsZShwYXRoLCBkYXRhLmNvbnRlbnQpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhmYWxzZSlcbiAgICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkRmlsZShwYXRoLCBkYXRhLmNvbnRlbnQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKVxuICAgICAgICAgIHNlbGYuaGFuZGxlcih7IHR5cGU6ICdmaWxlQ2hhbmdlZCcsIHBhdGg6IHBhdGggfSlcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsYmFjayhmYWxzZSlcbiAgICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIHJlbmFtZTogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgaWYgKGRhdGEuZmlsZVR5cGUgPT09ICdkaWFncmFtJykge1xuICAgICAgbGV0IGFkZEFyciA9IGRhdGEubmV3LnNwbGl0KCcvJylcbiAgICAgIGxldCB0YWcgPVxuICAgICAgICAnZGlzcGxheXMvJyArXG4gICAgICAgIGVkaXRvci5leHBsb3Jlci5saXN0XG4gICAgICAgICAgLnNtKClcbiAgICAgICAgICAubGQoKVxuICAgICAgICAgIC5nZXROYW1lKCkgK1xuICAgICAgICAnLmpzb24nXG4gICAgICBsZXQgbmV3TmFtZSA9IGFkZEFyclthZGRBcnIubGVuZ3RoIC0gMV1cbiAgICAgIHJlbmFtZURpYWdyYW0obmV3TmFtZSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKG5ld05hbWUsIHRhZylcbiAgICAgICAgICBzZWxmLmhhbmRsZXIoeyB0eXBlOiAndXBkYXRlU3RhdGlvbicgfSlcbiAgICAgICAgICBpZiAoZWRpdG9yVHlwZSA9PT0ga2V5M2QpIHtcbiAgICAgICAgICAgIGVkaXRvci51cmwgPSBgc2NlbmVzLyR7bmV3TmFtZX0uanNvbmBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRhYkRhdGEgPSBlZGl0b3IubWFpblRhYlZpZXcuZ2V0VGFiTW9kZWwoKS5nZXREYXRhQnlUYWcodGFnKVxuICAgICAgICAgICAgdGFiRGF0YS5zZXROYW1lKG5ld05hbWUpXG4gICAgICAgICAgICB0YWJEYXRhLnNldFRhZyhgZGlzcGxheXMvJHtuZXdOYW1lfS5qc29uYClcbiAgICAgICAgICAgIHRhYkRhdGEuZ2V0VmlldygpLnVybCA9IGBkaXNwbGF5cy8ke25ld05hbWV9Lmpzb25gXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKVxuICAgICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZW5hbWVGaWxlKGRhdGEubmV3LCBkYXRhLm9sZClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpXG4gICAgICAgICAgc2VsZi5oYW5kbGVyKHsgdHlwZTogJ2ZpbGVDaGFuZ2VkJywgcGF0aDogZGF0YS5vbGQgfSlcbiAgICAgICAgICBzZWxmLmhhbmRsZXIoeyB0eXBlOiAnZmlsZUNoYW5nZWQnLCBwYXRoOiBkYXRhLm5ldyB9KVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKVxuICAgICAgICB9KVxuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcbiAgICBjb25zb2xlLmxvZyhkYXRhLCAncnJyJylcbiAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICBkZWxldGVGaWxlKGRhdGEpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIGNhbGxiYWNrKHRydWUpXG4gICAgICAgIHNlbGYuaGFuZGxlcih7IHR5cGU6ICdmaWxlQ2hhbmdlZCcsIHBhdGg6IGRhdGEgfSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjayhmYWxzZSlcbiAgICAgIH0pXG4gIH0sXG4gIGxvY2F0ZTogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgLy8gTm90IHN1cHBvcnRlZFxuICB9LFxuICBzb3VyY2U6IGZ1bmN0aW9uIChwYXRoLCBjYWxsYmFjaykge1xuICAgIGNvbnNvbGUubG9nKHBhdGgsICdwcHAnKVxuICAgIGlmICgvXFwuKHBuZ3xqcGd8Z2lmfGpwZWd8Ym1wKSQvaS50ZXN0KHBhdGgudXJsKSkge1xuICAgICAgaHQuRGVmYXVsdC54aHJMb2FkKFxuICAgICAgICBwYXRoLnVybCxcbiAgICAgICAgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICB2YXIgZmlsZSA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICAgICAgICBmaWxlLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlLnRhcmdldC5yZXN1bHQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGZpbGUucmVhZEFzRGF0YVVSTChkYXRhKVxuICAgICAgICB9LFxuICAgICAgICB7IHJlc3BvbnNlVHlwZTogJ2Jsb2InIH1cbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgZ2V0RmlsZUNvbnQocGF0aC51cmwpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICB2YXIgZGF0YSA9IHJlcy5kYXRhWzBdXG4gICAgICAgIGNhbGxiYWNrKGRhdGEpXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbiAgZXhwb3J0IChwYXRocywgY2FsbGJhY2spIHtcbiAgICBsZXQgZXhwb3J0TmFtZSA9ICcnXG4gICAgc3dpdGNoIChwYXRoc1swXS5zcGxpdCgnLycpWzBdKSB7XG4gICAgICBjYXNlICdzeW1ib2xzJzpcbiAgICAgICAgZXhwb3J0TmFtZSA9ICflm77moIcnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjb21wb25lbnRzJzpcbiAgICAgICAgZXhwb3J0TmFtZSA9ICfnu4Tku7YnXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdhc3NldHMnOlxuICAgICAgICBleHBvcnROYW1lID0gJ+i1hOa6kCdcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBsZXQgcHJvcyA9IFtdXG4gICAgcGF0aHMuZm9yRWFjaChwYXRoID0+IHtcbiAgICAgIGxldCBkb3RJbmRleCA9IHBhdGgubGFzdEluZGV4T2YoJy4nKVxuICAgICAgbGV0IGltZ1BhdGggPSBwYXRoLnN1YnN0cmluZygwLCBkb3RJbmRleCkgKyAnLnBuZydcbiAgICAgIHByb3MucHVzaChcbiAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgaHQuRGVmYXVsdC54aHJMb2FkKFxuICAgICAgICAgICAgaW1nUGF0aCxcbiAgICAgICAgICAgIGRhdGEgPT4ge1xuICAgICAgICAgICAgICBsZXQgcGF0aEFyciA9IGltZ1BhdGguc3BsaXQoJy8nKVxuICAgICAgICAgICAgICBsZXQgZG9uZVBhdGggPSBwYXRoQXJyW3BhdGhBcnIubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgcGF0aDogZG9uZVBhdGgsXG4gICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgcmVzcG9uc2VUeXBlOiAnYmxvYicgfVxuICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIHByb3MucHVzaChcbiAgICAgICAgZ2V0RmlsZUNvbnQocGF0aCkudGhlbihyZXMgPT4ge1xuICAgICAgICAgIGxldCBwYXRoQXJyID0gcGF0aC5zcGxpdCgnLycpXG4gICAgICAgICAgbGV0IGRvbmVQYXRoID0gcGF0aEFycltwYXRoQXJyLmxlbmd0aCAtIDFdXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGg6IGRvbmVQYXRoLFxuICAgICAgICAgICAgZGF0YTogcmVzLmRhdGFbMF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSlcbiAgICBQcm9taXNlLmFsbChwcm9zKS50aGVuKHJlcyA9PiB7XG4gICAgICB1dGlsLnVwbG9hZChyZXMsIGV4cG9ydE5hbWUpXG4gICAgfSlcbiAgfVxufSlcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxhc3RJbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGxhc3RJbmRleE9mICE9PSBbXS5sYXN0SW5kZXhPZiB9LCB7XG4gIGxhc3RJbmRleE9mOiBsYXN0SW5kZXhPZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBuYXRpdmVMYXN0SW5kZXhPZiA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhIW5hdGl2ZUxhc3RJbmRleE9mICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTTE9QUFlfTUVUSE9EID0gc2xvcHB5QXJyYXlNZXRob2QoJ2xhc3RJbmRleE9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmxhc3RpbmRleG9mXG5tb2R1bGUuZXhwb3J0cyA9IChORUdBVElWRV9aRVJPIHx8IFNMT1BQWV9NRVRIT0QpID8gZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAvLyBjb252ZXJ0IC0wIHRvICswXG4gIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gbmF0aXZlTGFzdEluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IG1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTyAmJiBPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gIHJldHVybiAtMTtcbn0gOiBuYXRpdmVMYXN0SW5kZXhPZjtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2woJ3V0aWwucHJvbWlzaWZ5LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5leHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZuLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgZm4sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgKTtcbn1cblxuZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tID0ga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XG4gIC8vIGAhcmVhc29uYCBndWFyZCBpbnNwaXJlZCBieSBibHVlYmlyZCAoUmVmOiBodHRwczovL2dvby5nbC90NUlTNk0pLlxuICAvLyBCZWNhdXNlIGBudWxsYCBpcyBhIHNwZWNpYWwgZXJyb3IgdmFsdWUgaW4gY2FsbGJhY2tzIHdoaWNoIG1lYW5zIFwibm8gZXJyb3JcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgLy8gXCJ0aGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIG51bGxcIiBvciBcInRoZSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHVuZGVmaW5lZFwiLlxuICBpZiAoIXJlYXNvbikge1xuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xuICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgcmVhc29uID0gbmV3UmVhc29uO1xuICB9XG4gIHJldHVybiBjYihyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgfVxuXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XG4gIC8vIHRoZSBwcm9taXNlIGlzIGFjdHVhbGx5IHNvbWVob3cgcmVsYXRlZCB0byB0aGUgY2FsbGJhY2sncyBleGVjdXRpb25cbiAgLy8gYW5kIHRoYXQgdGhlIGNhbGxiYWNrIHRocm93aW5nIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLlxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gSW4gdHJ1ZSBub2RlIHN0eWxlIHdlIHByb2Nlc3MgdGhlIGNhbGxiYWNrIG9uIGBuZXh0VGlja2Agd2l0aCBhbGwgdGhlXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcbiAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmV0KSB7IHByb2Nlc3MubmV4dFRpY2soY2IsIG51bGwsIHJldCkgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZCwgcmVqLCBjYikgfSk7XG4gIH1cblxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2FsbGJhY2tpZmllZCwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNhbGxiYWNraWZpZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpKTtcbiAgcmV0dXJuIGNhbGxiYWNraWZpZWQ7XG59XG5leHBvcnRzLmNhbGxiYWNraWZ5ID0gY2FsbGJhY2tpZnk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGxlbmd0aCBleGNlZWRlZCc7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc3BsaWNlJykgfSwge1xuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQgLyogLCAuLi5pdGVtcyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXIoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIH1cbiAgICBpZiAobGVuICsgaW5zZXJ0Q291bnQgLSBhY3R1YWxEZWxldGVDb3VudCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEKTtcbiAgICB9XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgIGZyb20gPSBhY3R1YWxTdGFydCArIGs7XG4gICAgICBpZiAoZnJvbSBpbiBPKSBjcmVhdGVQcm9wZXJ0eShBLCBrLCBPW2Zyb21dKTtcbiAgICB9XG4gICAgQS5sZW5ndGggPSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICBpZiAoaW5zZXJ0Q291bnQgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gYWN0dWFsU3RhcnQ7IGsgPCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50O1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGUgT1trIC0gMV07XG4gICAgfSBlbHNlIGlmIChpbnNlcnRDb3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgayA+IGFjdHVhbFN0YXJ0OyBrLS0pIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50IC0gMTtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrID0gMDsgayA8IGluc2VydENvdW50OyBrKyspIHtcbiAgICAgIE9bayArIGFjdHVhbFN0YXJ0XSA9IGFyZ3VtZW50c1trICsgMl07XG4gICAgfVxuICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIvKlxuICogQGRlc2NyaXB0aW9uOiBlZGl0b3JcbiAqIEB2ZXJzaW9uOiAwLjAuMVxuICogQEF1dGhvcjogZGFpX3poZW5nXG4gKiBARGF0ZTogMjAxOS0xMC0yMiAwOTo0NDoxNlxuICogQExhc3RFZGl0b3JzOiBkYWlfemhlbmdcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTAtMjMgMTA6MDg6MzRcbiAqL1xuaW1wb3J0IHsgYXNzaWduIGFzIF9hc3NpZ24gfSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAndXRpbCdcbmxldCB4aHIgPSAodXJsLCBjYWxsYmFjaywgb3B0aW9uKSA9PiB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc29sZS5sb2cob3B0aW9uKVxuICBsZXQgZG9uZVVybCA9IGh0LkRlZmF1bHQuY29udmVydFVSTCh1cmwpXG4gIGF4aW9zXG4gICAgLnJlcXVlc3Qoe1xuICAgICAgdXJsOiBkb25lVXJsLFxuICAgICAgcmVzcG9uc2VUeXBlOiBvcHRpb24ucmVzcG9uc2VUeXBlLFxuICAgICAgcGFyYW1zOiB7IHRpbWVzdGFtcDogbmV3IERhdGUoKS5nZXRUaW1lKCkgfSxcbiAgICAgIG1ldGhvZDogb3B0aW9uLm1ldGhvZCB8fCAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IHsgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUnLCAnSWYtTW9kaWZpZWQtU2luY2UnOiAnMCcgfVxuICAgIH0pXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgIGNhbGxiYWNrKHJlcy5kYXRhKVxuICAgIH0pXG59XG4vKipcbiAqIEBkZXNjcmlwdGlvbjog6KaG55uW6buY6K6k6K+35rGC77yM5re75Yqg5Y+W5raI57yT5a2Y5Yqf6IO9XG4gKiBAcGFyYW0ge3R5cGV9XG4gKiBAcmV0dXJuOlxuICovXG5odC5EZWZhdWx0LnhockxvYWQgPSAodXJscywgY2FsbGJhY2ssIG9wdGlvbiA9IHt9KSA9PiB7XG4gIGlmIChpc0FycmF5KHVybHMpKSB7XG4gICAgdXJscy5mb3JFYWNoKHVybCA9PiB7XG4gICAgICB4aHIodXJsLCBjYWxsYmFjaywgb3B0aW9uKVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgeGhyKHVybHMsIGNhbGxiYWNrLCBvcHRpb24pXG4gIH1cbn1cbiIsIi8qXG4gKiBAZGVzY3JpcHRpb246IGVkaXRvclxuICogQHZlcnNpb246IDAuMC4xXG4gKiBAQXV0aG9yOiBkYWlfemhlbmdcbiAqIEBEYXRlOiAyMDE5LTA5LTIzIDEzOjU5OjU5XG4gKiBATGFzdEVkaXRvcnM6IGRhaV96aGVuZ1xuICogQExhc3RFZGl0VGltZTogMjAxOS0wOS0yMyAxNTowNjozN1xuICovXG5pbXBvcnQgeyBhc3NpZ24gYXMgX2Fzc2lnbiB9IGZyb20gJ2xvZGFzaCdcbmltcG9ydCBhcGlDb25maWcgZnJvbSAnQC9hcGkvYXBpLWNvbmZpZydcbmltcG9ydCB7IGdldEZpbGVDb250LCBnZXRGaWxlTGlzdCB9IGZyb20gJ0AvYXBpL2FwaS1saXN0L2ZpbGUnXG5pbXBvcnQgcmVxdWVzdCBmcm9tICdAL2FwaS9yZXF1ZXN0J1xuY29uc3QgcmVjb3ZlcnlEYXRhUGF0aCA9IGFwaUNvbmZpZy5yZWNvdmVyeURhdGFQYXRoXG5jb25zdCBhcGlBZGQgPSBhcGlDb25maWcuYXBpQWRkXG5jb25zdCBhcGlOYW1lID0gYXBpQ29uZmlnLmFwaU5hbWVcbi8qKlxuICogQGRlc2NyaXB0aW9uOiDlpI3ljp/mlbDmja5cbiAqIEBwYXJhbSB7bnVtYmVyP30gc3BhY2VVdWlkIOaMh+WumuWcqOafkOS4gOermeeCueS4i+eUn+aIkFxuICovXG5leHBvcnQgY29uc3QgcmVjb3ZlcnlEYXRhID0gc3BhY2VVdWlkID0+IHtcbiAgdmFyIGJhc2VQYXRoID0gYC9lZGl0L2RpYWdyYW1maWxlLyR7cmVjb3ZlcnlEYXRhUGF0aH0ke2FwaU5hbWV9L2BcbiAgZ2V0RmlsZUxpc3QoYmFzZVBhdGgpLnRoZW4oZmlsZUxpc3RSZXMgPT4ge1xuICAgIGZvciAodmFyIGtleSBpbiBmaWxlTGlzdFJlcy5kYXRhKSB7XG4gICAgICBnZXRGaWxlQ29udChiYXNlUGF0aCArIGtleSkudGhlbihmaWxlUmVzID0+IHtcbiAgICAgICAgdmFyIGRhdGEgPSBmaWxlUmVzLmRhdGFbMF1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKVxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvbjog5Yik5pat5piv5ou36LSd5Yiw56uZ54K56L+Y5piv5oGi5aSN5pWw5o2uXG4gICAgICAgICAgICovXG4gICAgICAgICAgbGV0IGlzQ29weSA9ICEhc3BhY2VVdWlkXG4gICAgICAgICAgbGV0IHNwYWNlVXVpZCA9IHNwYWNlVXVpZCB8fCBkYXRhLnNwYWNlVXVpZFxuICAgICAgICAgIGxldCB0eXBlID0gaXNDb3B5ID8gMCA6IGRhdGEudHlwZVxuICAgICAgICAgIGxldCBuYW1lID0gaXNDb3B5ID8gZGF0YS5uYW1lICsgbmV3IERhdGUoKS5nZXRUaW1lKCkgOiBkYXRhLm5hbWVcbiAgICAgICAgICByZXF1ZXN0LnBvc3QoYXBpQWRkLCB7XG4gICAgICAgICAgICBzcGFjZVV1aWQsXG4gICAgICAgICAgICBkaWFncmFtOiBkYXRhLmRpYWdyYW0sXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9KVxuICAgIH1cbiAgfSlcbn1cbiIsIi8qXG4gKiBAZGVzY3JpcHRpb246IGVkaXRvclxuICogQHZlcnNpb246IDAuMC4xXG4gKiBAQXV0aG9yOiBkYWlfemhlbmdcbiAqIEBEYXRlOiAyMDE5LTA5LTEwIDE2OjIzOjEzXG4gKiBATGFzdEVkaXRvcnM6IFBsZWFzZSBzZXQgTGFzdEVkaXRvcnNcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjAtMDctMDEgMTY6MDI6MzZcbiAqL1xuaW1wb3J0IGhhbmRsZUV2ZW50IGZyb20gJy4vY29uZmlnLWhhbmRsZUV2ZW50J1xuaW1wb3J0IGRhdGFCaW5kaW5ncyBmcm9tICcuLi9jb25maWctZGF0YUJpbmRpbmdzJ1xud2luZG93LmlzUHJhY3RpY2luZyA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0LmluZGV4T2YoJ2hpZ2h0b3BvJykgPj0gMFxud2luZG93Lmh0ZWRpdG9yX2NvbmZpZyA9IHtcbiAgbG9jYWxlOiAnemgnLFxuXG4gIGNvbXBvbmVudHNWaXNpYmxlOiAhaXNQcmFjdGljaW5nLFxuICBkaXNwbGF5c0VkaXRhYmxlOiAhaXNQcmFjdGljaW5nLFxuICBzeW1ib2xzRWRpdGFibGU6ICFpc1ByYWN0aWNpbmcsXG4gIGNvbXBvbmVudHNFZGl0YWJsZTogIWlzUHJhY3RpY2luZyxcbiAgYXNzZXRzRWRpdGFibGU6ICFpc1ByYWN0aWNpbmcsXG4gIGxvY2F0ZUZpbGVFbmFibGVkOiAhaXNQcmFjdGljaW5nLFxuICBzZXJ2aWNlQ2xhc3M6ICdNb2NrU2VydmljZScsXG4gIGV4cGFuZGVkVGl0bGVzOiB7XG4gICAgVGl0bGVFeHRlbnNpb246IGZhbHNlXG4gIH0sXG4gIHN1YkNvbmZpZ3M6IFtcbiAgICAnY3VzdG9tL2NvbmZpZ3MvY29uZmlnLXV0aWxzLmpzJyxcbiAgICAnY3VzdG9tL2NvbmZpZ3MvY29uZmlnLWluc3BlY3RvclRhYi5qcycsXG4gICAgJ2N1c3RvbS9jb25maWdzL2NvbmZpZy12YWx1ZVR5cGVzLmpzJyxcbiAgICAnY3VzdG9tL2NvbmZpZ3MvY29uZmlnLWRhdGFCaW5kaW5nc0ZvclN5bWJvbC5qcycsXG4gICAgJ2N1c3RvbS9jb25maWdzL2NvbmZpZy1jb25uZWN0QWN0aW9ucy5qcycsXG4gICAgJ2N1c3RvbS9jb25maWdzL2NvbmZpZy1pbnNwZWN0b3JGaWx0ZXIuanMnLFxuICAgICdjdXN0b20vY29uZmlncy9jb25maWctY3VzdG9tUHJvcGVydGllcy5qcycsXG4gICAgJ2N1c3RvbS9jb25maWdzL2NvbmZpZy1vbkVkaXRvckNyZWF0ZWQuanMnLFxuICAgICdjdXN0b20vY29uZmlncy9jb25maWctb25UaXRsZUNyZWF0aW5nLmpzJyxcbiAgICAnY3VzdG9tL2NvbmZpZ3MvY29uZmlnLW9uVGl0bGVDcmVhdGVkLmpzJyxcbiAgICAnY3VzdG9tL2NvbmZpZ3MvY29uZmlnLW9uTWFpblRvb2xiYXJDcmVhdGVkLmpzJyxcbiAgICAnY3VzdG9tL2NvbmZpZ3MvY29uZmlnLW9uTWFpbk1lbnVDcmVhdGVkLmpzJyxcbiAgICAnY3VzdG9tL2NvbmZpZ3MvY29uZmlnLW9uUmlnaHRUb29sYmFyQ3JlYXRlZC5qcydcbiAgXSxcbiAgbGliczogWydjdXN0b20vbGlicy9qcXVlcnkubWluLmpzJywgJ2N1c3RvbS9saWJzL2Jvb3RzdHJhcC10cmVldmlldy5taW4uanMnXSxcbiAgZGF0YUJpbmRpbmdzLFxuICBoYW5kbGVFdmVudCxcbiAgaGFuZGxlSW5zZXJ0U2NlbmVGaWxlVG9HcmFwaFZpZXc6IGZ1bmN0aW9uIChkaXNwbGF5VmlldywgZmlsZU5vZGUsIHBvaW50KSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgaHQuTm9kZSgpXG4gICAgbm9kZS5hKCdzY2VuZVVSTCcsIGZpbGVOb2RlLnVybClcbiAgICBub2RlLnNldEltYWdlKCdzeW1ib2xzL2h0bWwvc2NlbmUuanNvbicpXG4gICAgaWYgKHBvaW50KSB7XG4gICAgICBub2RlLnAocG9pbnQueCwgcG9pbnQueSlcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJlY3QgPSBkaXNwbGF5Vmlldy5ncmFwaFZpZXcuZ2V0Vmlld1JlY3QoKVxuICAgICAgaWYgKHJlY3QpIHtcbiAgICAgICAgbm9kZS5wKHJlY3QueCArIHJlY3Qud2lkdGggLyAyLCByZWN0LnkgKyByZWN0LmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgfVxuICAgIG5vZGUuc2V0RGlzcGxheU5hbWUoaHRlZGl0b3IuZmlsZU5hbWVUb0Rpc3BsYXlOYW1lKGZpbGVOb2RlLnVybCkpXG4gICAgZGlzcGxheVZpZXcuYWRkRGF0YShub2RlKVxuICB9LFxuICBoYW5kbGVJbnNlcnRNb2RlbEZpbGVUb0dyYXBoVmlldzogZnVuY3Rpb24gKGRpc3BsYXlWaWV3LCBmaWxlTm9kZSwgcG9pbnQpIHtcbiAgICB2YXIgbm9kZSA9IG5ldyBodC5Ob2RlKClcbiAgICBub2RlLmEoJ21vZGVsVVJMJywgZmlsZU5vZGUudXJsKVxuICAgIG5vZGUuc2V0SW1hZ2UoJ3N5bWJvbHMvaHRtbC9vYmouanNvbicpXG4gICAgaWYgKHBvaW50KSB7XG4gICAgICBub2RlLnAocG9pbnQueCwgcG9pbnQueSlcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJlY3QgPSBkaXNwbGF5Vmlldy5ncmFwaFZpZXcuZ2V0Vmlld1JlY3QoKVxuICAgICAgaWYgKHJlY3QpIHtcbiAgICAgICAgbm9kZS5wKHJlY3QueCArIHJlY3Qud2lkdGggLyAyLCByZWN0LnkgKyByZWN0LmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgfVxuICAgIG5vZGUuc2V0RGlzcGxheU5hbWUoaHRlZGl0b3IuZmlsZU5hbWVUb0Rpc3BsYXlOYW1lKGZpbGVOb2RlLnVybCkpXG4gICAgZGlzcGxheVZpZXcuYWRkRGF0YShub2RlKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpbmRvdy5odGVkaXRvcl9jb25maWdcbiIsIi8qXG4gKiBAZGVzY3JpcHRpb246IGVkaXRvclxuICogQHZlcnNpb246IDAuMC4xXG4gKiBAQXV0aG9yOiBkYWlfemhlbmdcbiAqIEBEYXRlOiAyMDE5LTA5LTEwIDE2OjIzOjEzXG4gKiBATGFzdEVkaXRvcnM6IFBsZWFzZSBzZXQgTGFzdEVkaXRvcnNcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjAtMDctMDIgMDk6MjY6MjhcbiAqL1xuaW1wb3J0IGFkZFN0YXRpb25UYWIgZnJvbSAnLi4vY29uZmlnLWFkZC1zdGF0aW9uLXRhYi9pbmRleC5qcydcbmltcG9ydCB7XG4gIGdldERpYWdyYW1MaXN0XG59IGZyb20gJ0AvYXBpL2FwaS1saXN0L2RpYWdyYW0nXG5pbXBvcnQgY2hhbmdlQ29sb3IgZnJvbSAnQC9jb21tb24vY2hhbmdlQ29sb3InXG4vKipcbiAqIEBkZXNjcmlwdGlvbjog56aB5q2i56e75YqoXG4gKiBAcGFyYW0ge3R5cGV9XG4gKiBAcmV0dXJuOlxuICovXG5mdW5jdGlvbiBkaXNhYmxlTW92ZSAobmFtZSkge1xuICBsZXQgZGlhbG9nID0gbmV3IGh0LndpZGdldC5EaWFsb2coKVxuICBkaWFsb2cuc2V0Q29uZmlnKHtcbiAgICB0aXRsZTogJ+emgeatouenu+WKqCEnLFxuICAgIHdpZHRoOiAyNTAsXG4gICAgaGVpZ2h0OiAxMDAsXG4gICAgY29udGVudDogJ+emgeatouenu+WKqCEnLFxuICAgIGNvbnRlbnRQYWRkaW5nOiAxMCxcbiAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgY2xvc2FibGU6IHRydWUsXG4gICAgcmVzaXplTW9kZTogJ3doJyxcbiAgICBidXR0b25zOiBbe1xuICAgICAgbGFiZWw6ICfnoa7lrponLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoYnV0dG9uLCBlKSB7XG4gICAgICAgIGRpYWxvZy5oaWRlKClcbiAgICAgIH1cbiAgICB9XSxcbiAgICBidXR0b25zQWxpZ246ICdyaWdodCdcbiAgfSlcbiAgZGlhbG9nLnNob3coKVxufVxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOmakOiXj+iPnOWNlVxuICovXG5mdW5jdGlvbiBoaWRlTWVudSAoZWRpdG9yKSB7XG4gIHZhciBpdGVtcyA9IGVkaXRvci5tYWluVG9vbGJhci5nZXRJdGVtcygpXG4gIGl0ZW1zLnNwbGljZSgwLCAxKVxuICBlZGl0b3IubWFpblRvb2xiYXIuc2V0SXRlbXMoaXRlbXMpXG59XG4vKipcbiAqIEBkZXNjcmlwdGlvbjog6ZqQ6JeP5Zu+57q4XG4gKi9cbmZ1bmN0aW9uIGhpZGVEaXNwbGF5cyAoZWRpdG9yKSB7XG4gIHZhciBkaXNwbGF5RGF0YUlEID0gZWRpdG9yLmxlZnRUb3BUYWJWaWV3XG4gICAgLmdldFRhYk1vZGVsKClcbiAgICAuZ2V0RGF0YXMoKVxuICAgIC5fYXNbMV0uZ2V0SWQoKVxuICBlZGl0b3IubGVmdFRvcFRhYlZpZXcuZ2V0VGFiTW9kZWwoKS5yZW1vdmVEYXRhQnlJZChkaXNwbGF5RGF0YUlEKVxufVxuZXhwb3J0IGRlZmF1bHQgKGVkaXRvciwgdHlwZSwgcGFyYW1zKSA9PiB7XG4gIGlmICh0eXBlID09PSAnZmlsZU1vdmluZycpIHtcbiAgICBkaXNhYmxlTW92ZSgpXG4gICAgcGFyYW1zLnByZXZlbnREZWZhdWx0ID0gdHJ1ZVxuICB9XG4gIGlmICh0eXBlID09PSAndGFiVXBkYXRlZCcpIHtcbiAgICBpZiAoZWRpdG9yLmRtICYmIGVkaXRvci5kbS5nZXREYXRhcykge1xuICAgICAgZWRpdG9yLmRtLmdldERhdGFzKCkuZm9yRWFjaChkYXRhID0+IHtcbiAgICAgICAgY2hhbmdlQ29sb3IoZGF0YSlcbiAgICAgIH0pXG4gICAgfVxuXG4gIH1cbiAgaWYgKHR5cGUgPT09ICdlZGl0b3JDcmVhdGVkJykge1xuICAgIHZhciBzdGF0aW9uVGFiID0gYWRkU3RhdGlvblRhYihlZGl0b3IpXG4gICAgaGlkZU1lbnUoZWRpdG9yKVxuICAgIGhpZGVEaXNwbGF5cyhlZGl0b3IpXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uOiDpu5jorqTpgInkuK3nq5nngrnpgInpoblcbiAgICAgKi9cbiAgICBlZGl0b3IubGVmdFRvcFRhYlZpZXdcbiAgICAgIC5nZXRUYWJNb2RlbCgpXG4gICAgICAuc20oKVxuICAgICAgLnNzKHN0YXRpb25UYWIpXG4gIH1cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbjog55uR5ZCsdXBkYXRlU3RhdGlvbuS6i+S7tu+8jOabtOaWsOW3puS+p+S4i+mDqOWIl+ihqFxuICAgKi9cbiAgaWYgKHR5cGUgPT09ICd1cGRhdGVTdGF0aW9uJykge1xuICAgIGdldERpYWdyYW1MaXN0KClcbiAgfVxuICBpZiAoXG4gICAgKHR5cGUgPT09ICdyZXF1ZXN0JyAmJiBwYXJhbXMuY21kID09PSAnRVhQTE9SRScpIHx8XG4gICAgdHlwZSA9PT0gJ3Jlc3BvbnNlJyB8fFxuICAgIHR5cGUgPT09ICdmaWxlQ2hhbmdlZCdcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHBhcmFtcyAmJiBwYXJhbXMubWVzc2FnZSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdbJyArIHR5cGUgKyAnXScsIHBhcmFtcy5tZXNzYWdlKVxuICB9IGVsc2Uge1xuICAgIC8vIGNvbnNvbGUubG9nKCdbJyArIHR5cGUgKyAnXScpXG4gIH1cblxuICB2YXIgUyA9IGh0ZWRpdG9yLmdldFN0cmluZ1xuICBpZiAodHlwZSA9PT0gJ2Rpc3BsYXlWaWV3Q3JlYXRlZCcgfHwgdHlwZSA9PT0gJ2Rpc3BsYXlWaWV3T3BlbmVkJykge1xuICAgIGFkZFNrZXdUcmFubGF0ZUl0ZW0oXG4gICAgICBwYXJhbXMuZGlzcGxheVZpZXcuZ3JhcGhWaWV3LFxuICAgICAgJ2VkaXRvci5kaXNwbGF5Vmlldy5ncmFwaFZpZXcnXG4gICAgKVxuICAgIGFkZFByaW50U2VsZWN0aW9uSXRlbShwYXJhbXMuZGlzcGxheVZpZXcuZGlzcGxheVRyZWUsICdlZGl0b3IuZGlzcGxheVRyZWUnKVxuICAgIGFkZFByaW50U2VsZWN0aW9uSXRlbShcbiAgICAgIHBhcmFtcy5kaXNwbGF5Vmlldy5ncmFwaFZpZXcsXG4gICAgICAnZWRpdG9yLmRpc3BsYXlWaWV3LmdyYXBoVmlldydcbiAgICApXG4gICAgLy8gcGFyYW1zLmRpc3BsYXlWaWV3LmdyYXBoVmlldy5nZXRFZGl0SW50ZXJhY3RvcigpLnNldFN0eWxlKCdhbmNob3JWaXNpYmxlJywgZmFsc2UpO1xuICAgIC8vIHBhcmFtcy5kaXNwbGF5Vmlldy5ncmFwaFZpZXcuZ2V0RWRpdEludGVyYWN0b3IoKS5zZXRTdHlsZSgnY29ubmVjdEd1aWRlVmlzaWJsZScsIGZhbHNlKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnc3ltYm9sVmlld0NyZWF0ZWQnIHx8IHR5cGUgPT09ICdzeW1ib2xWaWV3T3BlbmVkJykge1xuICAgIGFkZFByaW50U2VsZWN0aW9uSXRlbShwYXJhbXMuc3ltYm9sVmlldy5zeW1ib2xMaXN0LCAnZWRpdG9yLnN5bWJvbExpc3QnKVxuICAgIGFkZFByaW50U2VsZWN0aW9uSXRlbShcbiAgICAgIHBhcmFtcy5zeW1ib2xWaWV3LmdyYXBoVmlldyxcbiAgICAgICdlZGl0b3Iuc3ltYm9sVmlldy5ncmFwaFZpZXcnXG4gICAgKVxuICB9IGVsc2UgaWYgKFxuICAgIHR5cGUgPT09ICdkaXNwbGF5Vmlld1NhdmluZycgfHxcbiAgICB0eXBlID09PSAnZGlzcGxheVZpZXdOZXdOYW1lSW5wdXRpbmcnXG4gICkge1xuICAgIC8vIGlmICghcGFyYW1zLmRpc3BsYXlWaWV3LmRtLnNpemUoKSkge1xuICAgIC8vICAgICB3aW5kb3cuYWxlcnQoUygnTm90aGluZ1RvQmVTYXZlZCcpKTtcbiAgICAvLyAgICAgcGFyYW1zLnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAvLyB9XG4gIH0gZWxzZSBpZiAoXG4gICAgdHlwZSA9PT0gJ3N5bWJvbFZpZXdTYXZpbmcnIHx8XG4gICAgdHlwZSA9PT0gJ3N5bWJvbFZpZXdOZXdOYW1lSW5wdXRpbmcnXG4gICkge1xuICAgIC8vIGlmICghcGFyYW1zLnN5bWJvbFZpZXcuZG0uc2l6ZSgpKSB7XG4gICAgLy8gICAgIHdpbmRvdy5hbGVydChTKCdOb3RoaW5nVG9CZVNhdmVkJykpO1xuICAgIC8vICAgICBwYXJhbXMucHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgIC8vIH1cbiAgfSBlbHNlIGlmICh0eXBlID09PSAncGFzdGUnKSB7XG4gICAgcGFyYW1zLmRhdGFzLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZhciBkYXRhQmluZGluZ3MgPSBkYXRhLmdldERhdGFCaW5kaW5ncygpXG4gICAgICBpZiAoZGF0YUJpbmRpbmdzKSB7XG4gICAgICAgIC8vIHVwZGF0ZSBhdHRyc1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIGRhdGFCaW5kaW5ncy5hKSB7XG4gICAgICAgICAgdmFyIGRiID0gZGF0YUJpbmRpbmdzLmFbbmFtZV1cbiAgICAgICAgICBkYi5pZCA9IGRiLmlkXG4gICAgICAgIH1cbiAgICAgICAgLy8gdXBkYXRlIHN0eWxlc1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIGRhdGFCaW5kaW5ncy5zKSB7XG4gICAgICAgICAgdmFyIGRiID0gZGF0YUJpbmRpbmdzLnNbbmFtZV1cbiAgICAgICAgICBkYi5pZCA9IGRiLmlkXG4gICAgICAgIH1cbiAgICAgICAgLy8gdXBkYXRlIHByb3BlcnRpZXNcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBkYXRhQmluZGluZ3MucCkge1xuICAgICAgICAgIHZhciBkYiA9IGRhdGFCaW5kaW5ncy5wW25hbWVdXG4gICAgICAgICAgZGIuaWQgPSBkYi5pZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSBlbHNlIGlmIChcbiAgICB0eXBlID09PSAnZmlsZVJlbmFtaW5nJyB8fFxuICAgIHR5cGUgPT09ICdmaWxlTW92aW5nJyB8fFxuICAgIHR5cGUgPT09ICdmaWxlRGVsZXRpbmcnXG4gICkge1xuICAgIC8vIFByZXZlbnQgc29tZSBmaWxlcyBmcm9tIGJlaW5nIHJlbmFtZWQsIG1vdmVkIG9yIGRlbGV0ZWRcbiAgICBpZiAoXG4gICAgICBwYXJhbXMudXJsID09PSAnY3VzdG9tL3N5bWJvbHMvYmFzaWMvaHQuanNvbicgfHxcbiAgICAgIHBhcmFtcy51cmwgPT09ICdjdXN0b20vc3ltYm9scy9iYXNpYycgfHxcbiAgICAgIHBhcmFtcy51cmwgPT09ICdjdXN0b20vZGlzcGxheXMvYmFzaWMnXG4gICAgKSB7XG4gICAgICBwYXJhbXMucHJldmVudERlZmF1bHQgPSB0cnVlXG4gICAgfVxuICB9XG59IiwiLypcbiAqIEBkZXNjcmlwdGlvbjogZWRpdG9yXG4gKiBAdmVyc2lvbjogMC4wLjFcbiAqIEBBdXRob3I6IGRhaV96aGVuZ1xuICogQERhdGU6IDIwMTktMDktMjAgMTY6MzI6MzRcbiAqIEBMYXN0RWRpdG9yczogZGFpX3poZW5nXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTEwLTIyIDA5OjQ2OjE4XG4gKi9cbmltcG9ydCAnQC9jb21tb24vcmV3cml0ZVhoci5qcydcbnJlcXVpcmUoJ0Avc3RvcmUnKVxuXG5pbXBvcnQgeyByZWNvdmVyeURhdGEgfSBmcm9tICdAL3V0aWxzL2RhdGEtcmVjb3ZlcnknXG5pbXBvcnQgaHRlZGl0b3JfY29uZmlnIGZyb20gJ0AvY29uZmlnLzJkL2NvbmZpZy5qcydcbmZ1bmN0aW9uIGluaXQoKSB7XG4gIHZhciB1cmxzID0gaHRlZGl0b3JfY29uZmlnLnN1YkNvbmZpZ3MgfHwgW11cbiAgdXJscy5wdXNoKCdjbGllbnQuanMnKVxuICBodC5EZWZhdWx0LmxvYWRKUyh1cmxzLCBmdW5jdGlvbigpIHtcbiAgICB1cmxzID0gW1xuICAgICAgJ2xvY2FsZXMvJyArIGh0ZWRpdG9yLmNvbmZpZy5sb2NhbGUgKyAnLmpzJyxcbiAgICAgICdjdXN0b20vbG9jYWxlcy8nICsgaHRlZGl0b3IuY29uZmlnLmxvY2FsZSArICcuanMnXG4gICAgXVxuICAgIHVybHMucHVzaChodGVkaXRvci5pbml0KVxuICAgIGlmIChodGVkaXRvci5jb25maWcubGlicykge1xuICAgICAgdXJscyA9IHVybHMuY29uY2F0KGh0ZWRpdG9yLmNvbmZpZy5saWJzKVxuICAgIH1cblxuICAgIHVybHMucHVzaCgndnMvbG9hZGVyLmpzJylcbiAgICB1cmxzLnB1c2goJ3ZzL2VkaXRvci9lZGl0b3IubWFpbi5ubHMuanMnKVxuICAgIHVybHMucHVzaCgndnMvZWRpdG9yL2VkaXRvci5tYWluLmpzJylcbiAgICBodC5EZWZhdWx0LmxvYWRKUyh1cmxzLCBmdW5jdGlvbigpIHtcbiAgICAgIHdpbmRvdy5lZGl0b3IgPSBodGVkaXRvci5jcmVhdGVFZGl0b3IoKVxuICAgIH0pXG4gIH0pXG59XG5pbml0KClcbndpbmRvdy5yZWNvdmVyeURhdGEgPSByZWNvdmVyeURhdGFcbnJlcXVpcmUoJ0AvYXBpL2luZGV4LmpzJylcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==